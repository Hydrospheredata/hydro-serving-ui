{
    "pipes": [
        {
            "name": "CheckIdToTimePipe",
            "id": "pipe-CheckIdToTimePipe-6b0075cbf44d20397518a15c98d8d12a",
            "file": "src/app/modules/monitoring/pipes/check-id-to-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "checkIdToTime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { compose } from 'lodash/fp';\n@Pipe({\n  name: 'checkIdToTime',\n})\nexport class CheckIdToTimePipe implements PipeTransform {\n  transform(value: string) {\n    if (value) {\n      const getFirst4Bytes = str => str.slice(0, 8);\n      const converToMicroseconds = str => parseInt(str, 16) * 1000;\n      const convertToDate = ms => new Date(ms);\n\n      return compose(\n        convertToDate,\n        converToMicroseconds,\n        getFirst4Bytes\n      )(value);\n    }\n\n    return value;\n  }\n}\n"
        },
        {
            "name": "CheckIdToTimePipe",
            "id": "pipe-CheckIdToTimePipe-6b0075cbf44d20397518a15c98d8d12a-1",
            "file": "src/app/modules/request-details/pipes/check-id-to-time.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "checkIdToTime",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { compose } from 'lodash/fp';\n@Pipe({\n  name: 'checkIdToTime',\n})\nexport class CheckIdToTimePipe implements PipeTransform {\n  transform(value: string) {\n    if (value) {\n      const getFirst4Bytes = str => str.slice(0, 8);\n      const converToMicroseconds = str => parseInt(str, 16) * 1000;\n      const convertToDate = ms => new Date(ms);\n\n      return compose(\n        convertToDate,\n        converToMicroseconds,\n        getFirst4Bytes\n      )(value);\n    }\n\n    return value;\n  }\n}\n",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CheckIdToTimePipe-1"
        },
        {
            "name": "FieldShapePipe",
            "id": "pipe-FieldShapePipe-d1181f9c3bc4f93f3ff78bf9fb14364b",
            "file": "src/app/shared/pipes/field-shape.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "shape",
                            "type": "Shape",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "shape",
                            "type": "Shape",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "fieldShape",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Shape } from '@app/core/data/types';\n\n@Pipe({ name: 'fieldShape' })\nexport class FieldShapePipe implements PipeTransform {\n  transform(shape: Shape): string {\n    if (shape === undefined) {\n      return 'any shape';\n    } else if (shape.dims && shape.dims.length === 0) {\n      return 'scalar';\n    } else if (shape.dims && shape.dims.length > 0) {\n      return shape.dims.map(dim => dim.size).join(', ');\n    }\n  }\n}\n"
        },
        {
            "name": "FormatDatePipe",
            "id": "pipe-FormatDatePipe-e8642161ae7e40a6379acaffe1dda1ab",
            "file": "src/app/shared/pipes/format-date.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "time",
                            "type": "number | string | Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number | string | Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "hsFormatDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport format from 'date-fns/format';\n\n@Pipe({\n  name: 'hsFormatDate',\n})\nexport class FormatDatePipe implements PipeTransform {\n  transform(time: number | string | Date): string {\n    try {\n      return format(new Date(time), 'dd MMM yyyy H:mm:ss');\n    } catch (e) {\n      console.error(e);\n      return `${time}`;\n    }\n  }\n}\n"
        },
        {
            "name": "IterateAsArrayPipe",
            "id": "pipe-IterateAsArrayPipe-290ee00d29c12e600de775512820020b",
            "file": "src/app/shared/pipes/iterate-as-array.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "pure": false,
            "ngname": "iterateAsArray",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'iterateAsArray',\n  pure: false,\n})\nexport class IterateAsArrayPipe implements PipeTransform {\n  transform(value: any): any {\n    return Object.keys(value);\n  }\n}\n"
        },
        {
            "name": "MappedServablePipe",
            "id": "pipe-MappedServablePipe-602083f2e585a7859c71fd29f3e8b5ea",
            "file": "src/app/shared/pipes/mapped-servable.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "servable",
                            "type": "Servable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MappedServable",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "servable",
                            "type": "Servable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "mappedServable",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { MappedServable, Servable } from '@app/core/data/types';\n\n@Pipe({\n  name: 'mappedServable',\n})\nexport class MappedServablePipe implements PipeTransform {\n  transform(servable: Servable): MappedServable {\n    const mappedServable = {\n      fullName: servable.fullName,\n      name: servable.name,\n      status: servable.status,\n      message: servable.message,\n    };\n    if (servable.status === 'Serving' && servable.message) {\n      mappedServable.status = 'Warning';\n    }\n    if (!servable.status) {\n      mappedServable.status = 'Undefined';\n    }\n\n    return mappedServable;\n  }\n}\n"
        },
        {
            "name": "MatchSorterPipe",
            "id": "pipe-MatchSorterPipe-1ab2ba0a3d8e991e3c150e5225d9c95e",
            "file": "src/app/shared/pipes/match-sorter.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "input",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "options",
                            "type": "object | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "object | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "matchSorter",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport matchSorter from 'match-sorter';\n\n@Pipe({\n  name: 'matchSorter',\n})\nexport class MatchSorterPipe implements PipeTransform {\n  transform(input: any[] = [], options: object | string, value: string): any {\n    return matchSorter(\n      input,\n      value,\n      typeof options === 'string' ? { keys: [options] } : options\n    );\n  }\n}\n"
        },
        {
            "name": "PluckPipe",
            "id": "pipe-PluckPipe-d9adc8a2f9347a4ed8ce6587d2c53074",
            "file": "src/app/shared/pipes/pluck.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [
                        "T",
                        "K"
                    ],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "pluck",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'pluck',\n})\nexport class PluckPipe implements PipeTransform {\n  transform<T, K extends keyof T>(value: T, key: K): T[K] {\n    return value[key];\n  }\n}\n"
        },
        {
            "name": "SortByPipe",
            "id": "pipe-SortByPipe-b39be0c0fe2a232cd25dd0e2b15d54a0",
            "file": "src/app/shared/pipes/sort-by.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "sortBy",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'sortBy',\n})\nexport class SortByPipe implements PipeTransform {\n  transform(items: any[], property: string): any {\n    if (!items || !property) {\n      return items;\n    }\n    return items.sort((leftItem: any, rightItem: any): number => {\n      if (leftItem[property] > rightItem[property]) {\n        return 1;\n      }\n      if (leftItem[property] < rightItem[property]) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n}\n"
        },
        {
            "name": "TimeAgoPipe",
            "id": "pipe-TimeAgoPipe-8c54d6b1be2fbb0870a9bb44339f043b",
            "file": "src/app/shared/pipes/time-ago.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "time",
                            "type": "number | Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "number | Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "hsTimeAgo",
            "sourceCode": "import { PipeTransform, Pipe } from '@angular/core';\nimport { formatDistance } from 'date-fns';\n\n@Pipe({\n  name: 'hsTimeAgo',\n})\nexport class TimeAgoPipe implements PipeTransform {\n  transform(time: number | Date | string): string {\n    return formatDistance(new Date(time), new Date());\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AdditionalCheckInfo",
            "id": "interface-AdditionalCheckInfo-3d74c2e132af3764ad2aac71e744ee30",
            "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdditionalCheckInfo {\n  _hs_first_id: string;\n  _hs_last_id: string;\n  _hs_model_version_id: number;\n  _hs_requests: number;\n  _hs_model_name: string;\n  _id: string;\n  _hs_metrics: {\n    [metricName: string]: AggregationCheck;\n  };\n  _hs_batch: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n}\n\ninterface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport interface Features {\n  [featureName: string]: { checks: number; passed: number };\n}\nexport interface ChecksAggregationItem {\n  features: {\n    [featureName: string]: { checked: number; passed: number };\n  };\n  metrics: {\n    [metricName: string]: { checked: number; passed: number };\n  };\n  additionalInfo: Partial<AdditionalCheckInfo>;\n  batch: {\n    [featureName: string]: {\n      [metricName: string]: { checked: number; passed: number };\n    };\n  };\n}\n\nexport type CheckAggregationResponseItem = Features & AdditionalCheckInfo;\nexport interface ChecksAggregationResponse {\n  results: CheckAggregationResponseItem[];\n  count: number;\n  minDate: number;\n  maxDate: number;\n}\n",
            "properties": [
                {
                    "name": "_hs_batch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "_hs_first_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "_hs_last_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "_hs_metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "_hs_model_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "_hs_model_version_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "_hs_requests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AggregationCheck",
            "id": "interface-AggregationCheck-63b67963a3670e18d4f9678fd729d631",
            "file": "src/app/modules/monitoring/models/Aggregation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModelVersion } from '@app/core/data/types';\nimport { AggregationDTO } from './AggregationDTO';\n\nexport interface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport class Aggregation {\n  readonly from: any;\n  readonly to: any;\n  readonly id: string;\n  readonly hs_requests: number;\n  readonly modelVersionId: number;\n  readonly metricsChecks: { [metricName: string]: AggregationCheck };\n  readonly batchesChecks: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n  readonly featuresChecks: { [featureName: string]: AggregationCheck };\n  readonly modelVersion: ModelVersion;\n\n  constructor(params: AggregationDTO, modelVersion: ModelVersion) {\n    this.id = params._id;\n    this.hs_requests = params._hs_requests || 0;\n    this.metricsChecks = params._hs_metrics || {};\n    this.batchesChecks = params._hs_batch || {};\n    this.featuresChecks = Aggregation.extractFeatureChecks(params);\n    this.from = params._hs_first_id;\n    this.to = params._hs_last_id;\n    this.modelVersionId = params._hs_model_version_id;\n    this.modelVersion = modelVersion;\n  }\n\n  private static extractFeatureChecks(params: any): {\n    [featureName: string]: AggregationCheck;\n  } {\n    const featuresChecks = Object.create(null);\n\n    for (const featureNameKey in params) {\n      if (params.hasOwnProperty(featureNameKey)) {\n        if (!featureNameKey.startsWith('_')) {\n          const check: { checks: number; passed: number } =\n            params[featureNameKey];\n          featuresChecks[featureNameKey] = {\n            checked: check.checks,\n            passed: check.passed,\n          };\n        }\n      }\n    }\n\n    return featuresChecks;\n  }\n\n  get inputFeaturesNames(): string[] {\n    return this.modelVersion.contractInputs.map(input => input.name);\n  }\n\n  get outputFeaturesNames(): string[] {\n    return this.modelVersion.contractOutputs.map(output => output.name);\n  }\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "passed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AggregationCheck",
            "id": "interface-AggregationCheck-3d74c2e132af3764ad2aac71e744ee30-1",
            "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdditionalCheckInfo {\n  _hs_first_id: string;\n  _hs_last_id: string;\n  _hs_model_version_id: number;\n  _hs_requests: number;\n  _hs_model_name: string;\n  _id: string;\n  _hs_metrics: {\n    [metricName: string]: AggregationCheck;\n  };\n  _hs_batch: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n}\n\ninterface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport interface Features {\n  [featureName: string]: { checks: number; passed: number };\n}\nexport interface ChecksAggregationItem {\n  features: {\n    [featureName: string]: { checked: number; passed: number };\n  };\n  metrics: {\n    [metricName: string]: { checked: number; passed: number };\n  };\n  additionalInfo: Partial<AdditionalCheckInfo>;\n  batch: {\n    [featureName: string]: {\n      [metricName: string]: { checked: number; passed: number };\n    };\n  };\n}\n\nexport type CheckAggregationResponseItem = Features & AdditionalCheckInfo;\nexport interface ChecksAggregationResponse {\n  results: CheckAggregationResponseItem[];\n  count: number;\n  minDate: number;\n  maxDate: number;\n}\n",
            "properties": [
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "passed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AggregationCheck-1"
        },
        {
            "name": "AggregationDTO",
            "id": "interface-AggregationDTO-be02f55e3c1a16c575b53a4f66fede9a",
            "file": "src/app/modules/monitoring/models/AggregationDTO.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AggregationDTO {\n  _hs_first_id: string;\n  _hs_last_id: string;\n  _hs_model_version_id: number;\n  _hs_requests: number;\n  _hs_model_name: string;\n  _id: string;\n  _hs_metrics: {\n    [metricName: string]: {\n      checked: number;\n      passed: number;\n    };\n  };\n  _hs_batch: {\n    [featureName: string]: {\n      [metricName: string]: {\n        checked: number;\n        passed: number;\n      };\n    };\n  };\n}\n",
            "properties": [
                {
                    "name": "_hs_batch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "_hs_first_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "_hs_last_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "_hs_metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "_hs_model_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "_hs_model_version_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "_hs_requests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AnchorExplanationResult",
            "id": "interface-AnchorExplanationResult-c5eb318862b99096b50ed06f2617fc3b",
            "file": "src/app/modules/root-cause/models/explanation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const enum ExplanationStatus {\n  success = 'SUCCESS',\n  failed = 'FAILED',\n  notSupported = 'NOT_SUPPORTED',\n  notCalled = 'NOT_CALLED',\n  started = 'STARTED',\n}\n\nexport interface Explanation {\n  description: string;\n  result?: {\n    coverage: number;\n    explanation: string[];\n    precision: number;\n  };\n  state: ExplanationStatus;\n}\n\nexport interface AnchorExplanationResult {\n  explained_field_name: string;\n  explained_field_value: number | string;\n  coverage: number;\n  explanation: string[];\n  precision: number;\n}\nexport type RiseExplanationResult = Array<{\n  class: string | number;\n  mask: any;\n  probability: number;\n  color?: any;\n}>;\n\nexport type AnchorExplanation = Explanation & {\n  result: AnchorExplanationResult;\n};\nexport type RiseExplanation = Explanation & { result: RiseExplanationResult };\n",
            "properties": [
                {
                    "name": "coverage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "explained_field_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "explained_field_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "explanation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "precision",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ApplicationCreatingRequest",
            "id": "interface-ApplicationCreatingRequest-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "properties": [
                {
                    "name": "deploymentConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeploymentConfig",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "executionGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "kafkaStreaming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ApplicationUpdateRequest",
            "id": "interface-ApplicationUpdateRequest-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "properties": [
                {
                    "name": "deploymentConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeploymentConfig",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "executionGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "kafkaStreaming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "BivariateReport",
            "id": "interface-BivariateReport-001690e7d9649fcd58c38b1797376882",
            "file": "src/app/modules/stat/models/stat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FeatureReportHistogram {\n  bins: Array<number | string>;\n  deployment: number[];\n  training: number[];\n}\n\nexport interface BivariateReport {\n  drifted: boolean;\n  feature_1: string;\n  feature_2: string;\n  production_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n  training_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n}\n\nexport interface FeatureReport {\n  'drift-probability': number;\n  histogram: FeatureReportHistogram;\n  statistics: {\n    [statisticName: string]: {\n      change_probability?: number;\n      deployment: number | string | string[] | number[];\n      training: number | string | string[] | number[];\n      message: string;\n      has_changed: boolean;\n    };\n  };\n  bivariate_reports?: BivariateReport[];\n}\n\nexport interface Stat {\n  overall_probability_drift: number;\n  per_feature_report: {\n    [featureName: string]: FeatureReport;\n  };\n  warnings: {\n    final_decision: string;\n    report: Array<{ drift_probability_per_feature: number; message: string }>;\n  };\n}\n",
            "properties": [
                {
                    "name": "drifted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "feature_1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "feature_2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "production_heatmap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "training_heatmap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "BuildInfo",
            "id": "interface-BuildInfo-db68227dcc1e39633c9c602a5e29fad3",
            "file": "src/app/core/build-information.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of, forkJoin, BehaviorSubject } from 'rxjs';\nimport {\n  catchError,\n  shareReplay,\n  distinctUntilChanged,\n  map,\n} from 'rxjs/operators';\nimport { HttpService } from './data/services/http.service';\nimport { ServiceStatus } from '@app/core/data/types';\nimport { neitherNullNorUndefined, pluck } from '@app/utils';\n\nconst enum HydroServicesEndpoints {\n  buildInfo = 'api/buildinfo',\n  gateway = 'gateway/buildinfo',\n  sonar = 'monitoring/buildinfo',\n  rootcause = 'rootcause/buildinfo',\n  stat = 'stat/buildinfo',\n  visualization = 'visualization/buildinfo',\n}\n\nexport interface BuildInfo {\n  status: ServiceStatus;\n  message?: string;\n  [p: string]: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class BuildInformationService {\n  private buildInfo$: Observable<{ [serviceName: string]: BuildInfo }>;\n  private buildInfo: BehaviorSubject<{\n    [serviceName: string]: BuildInfo;\n  }> = new BehaviorSubject<{\n    [serviceName: string]: BuildInfo;\n  }>({});\n\n  constructor(private http: HttpService) {\n    this.buildInfo$ = this.buildInfo\n      .asObservable()\n      .pipe(neitherNullNorUndefined, shareReplay(1));\n  }\n\n  loadBuildInformation() {\n    const toRequest = endpoint =>\n      this.http.get(endpoint).pipe(\n        map((res: any) => {\n          return { ...res, status: ServiceStatus.AVAILABLE };\n        }),\n        catchError(err => this.handleError(err)),\n      );\n\n    return forkJoin({\n      build: toRequest(HydroServicesEndpoints.buildInfo),\n      gateway: toRequest(HydroServicesEndpoints.gateway),\n      sonar: toRequest(HydroServicesEndpoints.sonar),\n      rootcause: toRequest(HydroServicesEndpoints.rootcause),\n      stat: toRequest(HydroServicesEndpoints.stat),\n      visualization: toRequest(HydroServicesEndpoints.visualization),\n    }).subscribe(infos => this.buildInfo.next(infos));\n  }\n\n  getBuildInfo(): Observable<{ [serviceName: string]: BuildInfo }> {\n    return this.buildInfo$.pipe(distinctUntilChanged());\n  }\n\n  getStatus<K extends keyof typeof HydroServicesEndpoints>(\n    serviceName: K,\n  ): Observable<BuildInfo> {\n    return this.buildInfo$.pipe(pluck(serviceName));\n  }\n\n  private handleError(error: string): Observable<BuildInfo> {\n    const is501Error = /501/i.test(error);\n\n    if (is501Error) {\n      return of({ status: ServiceStatus.CLOSED_FOR_OSS });\n    } else {\n      const errMsg = error || 'Something went wrong';\n      return of({ status: ServiceStatus.FAILED, message: errMsg });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServiceStatus",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-db68227dcc1e39633c9c602a5e29fad3",
                    "args": [
                        {
                            "name": "p",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "ChartConfig",
            "id": "interface-ChartConfig-fae6827bca12fdaa61b86cf771594a1f",
            "file": "src/app/modules/monitoring/models/ChartConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ninterface Point {\n  x: number;\n  y: number;\n}\ninterface Series {\n  name: string;\n  data: number[];\n  color: string;\n}\nexport interface ChartConfig {\n  size: {\n    width?: number;\n    height?: number;\n    margins?: {\n      bottom?: number;\n      left?: number;\n      right?: number;\n      top?: number;\n    };\n  };\n  plotBands?: Array<{ from: number; to: number }>;\n  name: string;\n  data?: {\n    [metricName: string]: {\n      color?: string;\n      x: number[];\n      y: number[];\n      threshold?: number;\n    };\n  };\n  series: Series[];\n  area?: boolean;\n  threshold?: number;\n}\n\n@Injectable()\nexport class ChartConfigBuilder {\n  constructor() {}\n}\n",
            "properties": [
                {
                    "name": "area",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "plotBands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Series[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ChecksAggregationItem",
            "id": "interface-ChecksAggregationItem-3d74c2e132af3764ad2aac71e744ee30",
            "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdditionalCheckInfo {\n  _hs_first_id: string;\n  _hs_last_id: string;\n  _hs_model_version_id: number;\n  _hs_requests: number;\n  _hs_model_name: string;\n  _id: string;\n  _hs_metrics: {\n    [metricName: string]: AggregationCheck;\n  };\n  _hs_batch: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n}\n\ninterface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport interface Features {\n  [featureName: string]: { checks: number; passed: number };\n}\nexport interface ChecksAggregationItem {\n  features: {\n    [featureName: string]: { checked: number; passed: number };\n  };\n  metrics: {\n    [metricName: string]: { checked: number; passed: number };\n  };\n  additionalInfo: Partial<AdditionalCheckInfo>;\n  batch: {\n    [featureName: string]: {\n      [metricName: string]: { checked: number; passed: number };\n    };\n  };\n}\n\nexport type CheckAggregationResponseItem = Features & AdditionalCheckInfo;\nexport interface ChecksAggregationResponse {\n  results: CheckAggregationResponseItem[];\n  count: number;\n  minDate: number;\n  maxDate: number;\n}\n",
            "properties": [
                {
                    "name": "additionalInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<AdditionalCheckInfo>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "batch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "features",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ChecksAggregationResponse",
            "id": "interface-ChecksAggregationResponse-3d74c2e132af3764ad2aac71e744ee30",
            "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdditionalCheckInfo {\n  _hs_first_id: string;\n  _hs_last_id: string;\n  _hs_model_version_id: number;\n  _hs_requests: number;\n  _hs_model_name: string;\n  _id: string;\n  _hs_metrics: {\n    [metricName: string]: AggregationCheck;\n  };\n  _hs_batch: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n}\n\ninterface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport interface Features {\n  [featureName: string]: { checks: number; passed: number };\n}\nexport interface ChecksAggregationItem {\n  features: {\n    [featureName: string]: { checked: number; passed: number };\n  };\n  metrics: {\n    [metricName: string]: { checked: number; passed: number };\n  };\n  additionalInfo: Partial<AdditionalCheckInfo>;\n  batch: {\n    [featureName: string]: {\n      [metricName: string]: { checked: number; passed: number };\n    };\n  };\n}\n\nexport type CheckAggregationResponseItem = Features & AdditionalCheckInfo;\nexport interface ChecksAggregationResponse {\n  results: CheckAggregationResponseItem[];\n  count: number;\n  minDate: number;\n  maxDate: number;\n}\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckAggregationResponseItem[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ChecksFilter",
            "id": "interface-ChecksFilter-80af564be1d288183e2eddbddd36f6d9",
            "file": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { neitherNullNorUndefined } from '@app/utils';\nimport { Check, CheckCollection } from '../../models';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\nimport { MonitoringFacade } from '../../store/monitoring.facade';\n\nexport const enum ChecksHealthFilterOptions {\n  all = 'ALL',\n  byScore = 'SCORE',\n  withError = 'ERROR',\n}\n\nexport interface ChecksFilter {\n  filterBy: ChecksHealthFilterOptions;\n  scoreFilter?: {\n    byMetric: boolean;\n    metricScoreRange: [number, number];\n    byRaw: boolean;\n    rawScoreRange: [number, number];\n  };\n}\n\nconst initialFilter: ChecksFilter = {\n  filterBy: ChecksHealthFilterOptions.all,\n  scoreFilter: {\n    byMetric: true,\n    metricScoreRange: [0, 100],\n    byRaw: true,\n    rawScoreRange: [0, 100],\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BatchDetailsService {\n  private checks$: Observable<Check[]>;\n  private filter: BehaviorSubject<ChecksFilter> = new BehaviorSubject<\n    ChecksFilter\n  >(initialFilter);\n  private filter$: Observable<ChecksFilter>;\n\n  constructor(\n    private facade: MonitoringFacade,\n    private modelVersionsFacade: ModelVersionsFacade\n  ) {\n    this.checks$ = this.facade.getChecks().pipe(\n      neitherNullNorUndefined,\n      map(checksCollection => checksCollection.getChecks())\n    );\n    this.filter$ = this.filter.asObservable();\n  }\n\n  setFilter(filter: ChecksFilter): void {\n    this.filter.next(filter);\n  }\n\n  getModelVersion(): Observable<ModelVersion> {\n    return this.modelVersionsFacade.selectedModelVersion();\n  }\n\n  getCheckCollection(): Observable<CheckCollection> {\n    return this.facade.getChecks();\n  }\n\n  getVisibleChecks(): Observable<Check[]> {\n    return combineLatest([this.checks$, this.filter$]).pipe(\n      map(([checks, filter]) => {\n        switch (filter.filterBy) {\n          case ChecksHealthFilterOptions.all:\n            return checks;\n          case ChecksHealthFilterOptions.byScore:\n            if (filter.scoreFilter === undefined) return checks;\n            return checks.filter(check => {\n              let m: boolean = true;\n              let r: boolean = true;\n\n              const metricScore = check.getMetricsScore() * 100;\n              const rawScore = check.getRawScore() * 100;\n\n              if (filter.scoreFilter.byMetric) {\n                const [min, max] = filter.scoreFilter.metricScoreRange;\n                m = metricScore >= min && metricScore <= max;\n              }\n\n              if (filter.scoreFilter.byRaw) {\n                const [min, max] = filter.scoreFilter.rawScoreRange;\n                r = rawScore >= min && rawScore <= max;\n              }\n\n              return r && m;\n            });\n          case ChecksHealthFilterOptions.withError:\n            return checks.filter(check => check.error);\n          default:\n            return checks;\n        }\n      })\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChecksHealthFilterOptions",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "scoreFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ClassLabel",
            "id": "interface-ClassLabel-d070da583a56a86010f067f1abcb9bf1",
            "file": "src/app/modules/visualization/models/visualization.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmpOperators } from '@app/modules/monitoring/models';\nimport { ColoringType } from '../models';\n\nexport type LinkRegime = 'all' | 'nearest' | 'counterfactuals';\n\nexport interface ClassLabel {\n  classes?: Array<number | string>;\n  coloring_type: ColoringType;\n  data: number[];\n}\n\nexport interface Metric {\n  coloring_type: ColoringType;\n  scores: number[];\n  operation: CmpOperators;\n  threshold: number;\n}\n\nexport enum ETaskState {\n  success = 'SUCCESS',\n  pending = 'PENDING',\n  failed = 'FAILED',\n  unknown = 'UNKNOWN',\n}\n\nexport interface TaskInformation {\n  task_id: string;\n  description?: string;\n  message?: string;\n  state: ETaskState;\n  result: VisualizationResponse;\n}\n\nexport interface VisualizationResponse {\n  data_shape: [number, number];\n  data: number[][];\n  training_data_shape?: [number, number];\n  training_data?: number[][];\n  output_info: {\n    [outputName: string]: {\n      coloring_type: ColoringType;\n      data: number[];\n      classes?: Array<string | number>;\n      dtype: number;\n    };\n  };\n  metrics: {\n    [name: string]: Metric;\n  };\n  requests_ids: string[];\n  top_N: number[][];\n  counterfactuals: number[][];\n  visualization_metrics: {\n    [name: string]: string;\n  };\n  parametres?: any;\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number | string>",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "coloring_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColoringType",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ColorizerProps",
            "id": "interface-ColorizerProps-67ac0232ae07d90b20e6db9124306f7a",
            "file": "src/app/modules/visualization/models/Colorizer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorsGeneratorFabric, ColorsGenerator } from './ColorGenerator';\nimport { ColoringType } from './ColoringType';\n\ntype ColorizerType = 'class_label' | 'metric';\ninterface ColorizerProps {\n  name: string;\n  data: number[];\n  coloringType?: ColoringType;\n  classes?: Array<string | number>;\n  metric?: Metric;\n}\nexport abstract class Colorizer {\n  public type: string;\n  public name: string;\n  public coloringType: ColoringType;\n  public classes: any[];\n  protected colorsGenerator: ColorsGenerator;\n  protected data: number[];\n\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    this.name = props.name;\n    this.data = props.data;\n    this.coloringType = props.coloringType;\n    this.colorsGenerator = colorsGenerator;\n    this.classes = props.classes;\n  }\n  public getColors(): string[] {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\nclass ClassLabelColorizer extends Colorizer {\n  classes: Array<string | number>;\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'ClassLabel';\n    this.classes = props.classes || [];\n  }\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\nclass MetricColorizer extends Colorizer {\n  constructor(props: ColorizerProps, colorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'Metric';\n  }\n\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorizerFabric {\n  constructor(private colorGeneratorFabric: ColorsGeneratorFabric) {}\n  public createColorizer(\n    type: ColorizerType,\n    props: ColorizerProps\n  ): Colorizer | null {\n    const colorGenerator = this.colorGeneratorFabric.createColorGenerator(\n      type,\n      props\n    );\n\n    switch (type) {\n      case 'class_label':\n        return new ClassLabelColorizer(props, colorGenerator);\n      case 'metric':\n        return new MetricColorizer(props, colorGenerator);\n      default:\n        return null;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string | number>",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "coloringType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColoringType",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "metric",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metric",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Container",
            "id": "interface-Container-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "properties": [
                {
                    "name": "env",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Deployable",
            "id": "interface-Deployable-ccf6ffa510f7c85f176a5fb038e74881",
            "file": "src/app/core/data/services/servable.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { environment } from 'environments/environment';\n\nimport { HS_BASE_URL } from '@app/core/base-url.token';\n\nimport { HttpService } from './http.service';\nimport { Servable } from '../types/servable';\n\nexport interface Deployable {\n  modelName: string;\n  version: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServableService {\n  private readonly url: string;\n\n  constructor(\n    private http: HttpService,\n    @Inject(HS_BASE_URL) private baseUrl: string\n  ) {\n    const { apiUrl, servableUrl } = environment;\n    this.url = `${apiUrl}/${servableUrl}`;\n  }\n\n  getAll(): Observable<Servable[]> {\n    return this.http.get(this.url);\n  }\n\n  deploy(requestBody: Deployable): Observable<Servable> {\n    return this.http.post(this.url, requestBody) as Observable<Servable>;\n  }\n\n  delete(name: string) {\n    return this.http.delete(`${this.url}/${name}`);\n  }\n\n  get(name: string) {\n    return this.http.get<Servable>(`${this.url}/${name}`);\n  }\n}\n",
            "properties": [
                {
                    "name": "modelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DialogOptions",
            "id": "interface-DialogOptions-041b494318c6ec38db4b093fe64409f2",
            "file": "src/app/modules/dialogs/dialogs.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  ComponentRef,\n  Provider,\n  ReflectiveInjector,\n  ElementRef,\n} from '@angular/core';\nimport { ComponentFactoryResolver } from '@angular/core';\nimport { ComponentFactory } from '@angular/core';\nimport { Renderer2, RendererFactory2 } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\ninterface DialogOptions {\n  component: any;\n  providers?: Provider[];\n  classes?: string;\n  styles?: { [key: string]: string };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogsService {\n  get show$(): Observable<boolean> {\n    return this.show.asObservable();\n  }\n  public show: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  public containerElementRef: ElementRef;\n  public viewContainerRef: ViewContainerRef;\n\n  private renderer: Renderer2;\n\n  constructor(\n    private cfr: ComponentFactoryResolver,\n    private parentInjector: Injector,\n    rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  public createDialog(options: DialogOptions): void {\n    const { component, providers, styles } = options;\n\n    const cf: ComponentFactory<any> = this.cfr.resolveComponentFactory(\n      component\n    );\n    let childInjector: ReflectiveInjector;\n    let c: ComponentRef<any>;\n\n    if (providers) {\n      childInjector = ReflectiveInjector.resolveAndCreate(\n        providers,\n        this.parentInjector\n      );\n      c = cf.create(childInjector);\n    } else {\n      c = cf.create(this.parentInjector);\n    }\n\n    this.viewContainerRef.insert(c.hostView);\n\n    this.setStyles(styles);\n    this.openDialog();\n  }\n\n  public closeDialog(): void {\n    this.show.next(false);\n  }\n\n  public clearContainer(): void {\n    this.renderer.removeAttribute(\n      this.containerElementRef.nativeElement,\n      'style'\n    );\n    this.viewContainerRef.clear();\n  }\n\n  public setViewContainerRef(value: ViewContainerRef): void {\n    this.viewContainerRef = value;\n  }\n\n  public setContainerElementRef(elRef: ElementRef): void {\n    this.containerElementRef = elRef;\n  }\n\n  private openDialog(): void {\n    this.show.next(true);\n  }\n\n  private setStyles(styles = {}): void {\n    for (const key in styles) {\n      if (styles.hasOwnProperty(key)) {\n        this.renderer.setStyle(\n          this.containerElementRef.nativeElement,\n          key,\n          styles[key]\n        );\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "component",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "providers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "styles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Dim",
            "id": "interface-Dim-4977b5e0b98eeabac5fcd31cff22989c",
            "file": "src/app/core/data/types/signature.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Dim {\n  size: number;\n  name: string;\n}\n\nexport interface Shape {\n  dims: Dim[];\n  unknownRank?: boolean;\n}\nexport interface Field {\n  profile: string;\n  dtype?: string;\n  name?: string;\n  shape?: Shape;\n  subfields?: Field[];\n}\n\nexport class Signature {\n  public signatureName: string;\n  public inputs: Field[];\n  public outputs: Field[];\n\n  constructor(props: any = {}) {\n    this.signatureName = props.signatureName;\n    this.inputs = props.inputs;\n    this.outputs = props.outputs;\n  }\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExecutionGraph",
            "id": "interface-ExecutionGraph-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "properties": [
                {
                    "name": "stages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Stage[]",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExecutionGraphFormData",
            "id": "interface-ExecutionGraphFormData-1ebb95fd8547ab16ba3b79ceea84b7c1",
            "file": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  AbstractControl,\n} from '@angular/forms';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport {\n  Application,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport {\n  ModelVariantFormData,\n  ModelVariantFormService,\n} from '../model-variant-form/model-variant-form.service';\n\nexport interface StageFormData {\n  modelVariants: ModelVariantFormData[];\n}\n\ninterface ExecutionGraphFormData {\n  stages: StageFormData[];\n}\n\nexport interface FormData {\n  name?: string;\n  executionGraph: ExecutionGraphFormData;\n}\n\n@Injectable()\nexport class ApplicationFormService {\n  private form: FormGroup;\n  public modelVersions: ModelVersion[];\n  public depConfig: DeploymentConfig;\n\n  constructor(\n    private fb: FormBuilder,\n    private modelVariantFormService: ModelVariantFormService,\n    private customValidators: CustomValidatorsService,\n  ) {}\n\n  public initForm(\n    application: Application,\n    modelVersions: ModelVersion[] = [],\n    depConfig: DeploymentConfig,\n  ): FormGroup {\n    let data: FormData;\n\n    this.modelVersions = modelVersions;\n    this.depConfig = depConfig;\n\n    if (application) {\n      data = this.applicationToFormData(application, modelVersions);\n    } else {\n      data = this.defaultFormData();\n    }\n    this.form = this.fb.group({\n      applicationName: this.fb.control(data.name, [\n        this.customValidators.required(),\n        this.customValidators.uniqNameValidation(data.name),\n        this.customValidators.applicationNameformat(),\n        this.customValidators.lengthValidation(128),\n      ]),\n      kafkaStreaming: this.fb.array([]),\n      stages: this.fb.array(this.getStagesArray(data.executionGraph.stages)),\n    });\n\n    return this.form;\n  }\n\n  public applicationToFormData(\n    application: Application,\n    modelVersions: ModelVersion[],\n  ): FormData {\n    const stages = application.executionGraph.stages.map(stage => {\n      const modelVariants: ModelVariantFormData[] = stage.modelVariants.map(\n        mv =>\n          this.modelVariantFormService.modelVariantToModelVariantFormData(\n            mv,\n            modelVersions,\n          ),\n        this.modelVariantFormService,\n      );\n      return { ...stage, modelVariants };\n    });\n\n    return {\n      name: application.name,\n      executionGraph: {\n        stages,\n      },\n    };\n  }\n\n  public get stages(): FormArray {\n    return this.form.get('stages') as FormArray;\n  }\n\n  public addStageControl(stage = this.defaultStageData()): void {\n    this.stages.push(this.buildStageGroup(stage));\n  }\n\n  public addModelVariantToStage(stageControl: AbstractControl): void {\n    const modelVariants = stageControl.get('modelVariants') as FormArray;\n    modelVariants.push(\n      this.modelVariantFormService.buildModelVariantFormGroup(\n        this.defaultModelVariantData(),\n      ),\n    );\n  }\n\n  private buildStageGroup(stage): FormGroup {\n    const modelVariants = stage.modelVariants.map(\n      (modelVariant: ModelVariantFormData) => {\n        return this.modelVariantFormService.buildModelVariantFormGroup(\n          modelVariant,\n        );\n      },\n    );\n\n    return this.fb.group({\n      modelVariants: this.fb.array(\n        modelVariants,\n        this.customValidators.weightValidation(),\n      ),\n    });\n  }\n\n  private getStagesArray(stages: any[] = []): FormGroup[] {\n    return stages.map(stage => this.buildStageGroup(stage));\n  }\n\n  private defaultStageData(): StageFormData {\n    return {\n      modelVariants: [\n        this.modelVariantFormService.defaultModelVariantFormData(\n          this.modelVersions,\n          this.depConfig,\n        ),\n      ],\n    };\n  }\n\n  private defaultModelVariantData(): ModelVariantFormData {\n    return this.modelVariantFormService.defaultModelVariantFormData(\n      this.modelVersions,\n      this.depConfig,\n    );\n  }\n\n  private defaultFormData(): FormData {\n    return {\n      name: '',\n      executionGraph: {\n        stages: [this.defaultStageData()],\n      },\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "stages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StageFormData[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Explanation",
            "id": "interface-Explanation-c5eb318862b99096b50ed06f2617fc3b",
            "file": "src/app/modules/root-cause/models/explanation.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const enum ExplanationStatus {\n  success = 'SUCCESS',\n  failed = 'FAILED',\n  notSupported = 'NOT_SUPPORTED',\n  notCalled = 'NOT_CALLED',\n  started = 'STARTED',\n}\n\nexport interface Explanation {\n  description: string;\n  result?: {\n    coverage: number;\n    explanation: string[];\n    precision: number;\n  };\n  state: ExplanationStatus;\n}\n\nexport interface AnchorExplanationResult {\n  explained_field_name: string;\n  explained_field_value: number | string;\n  coverage: number;\n  explanation: string[];\n  precision: number;\n}\nexport type RiseExplanationResult = Array<{\n  class: string | number;\n  mask: any;\n  probability: number;\n  color?: any;\n}>;\n\nexport type AnchorExplanation = Explanation & {\n  result: AnchorExplanationResult;\n};\nexport type RiseExplanation = Explanation & { result: RiseExplanationResult };\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExplanationStatus",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExplanationRequestParams",
            "id": "interface-ExplanationRequestParams-fb43c926865860cd1493aea0ddea78bb",
            "file": "src/app/modules/root-cause/services/root-cause-api.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { Explanation } from '../models';\nimport { Observable } from 'rxjs';\nimport { environment } from '@environments/environment';\n\nexport interface ExplanationRequestParams {\n  model_version_id: number;\n  explained_request_id: string;\n  method: string;\n  output_field: string;\n}\n\nexport interface ExplanationRequestPostParams {\n  model_version_id: string;\n  explained_request_id: string;\n  method: string;\n  output_field: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RootCauseApiService {\n  private readonly url: string;\n\n  constructor(private readonly http: HttpService) {\n    this.url = environment.rootCauseUrl;\n  }\n\n  createExplanation(params: ExplanationRequestPostParams): Observable<any> {\n    return this.http.post<any>(`${this.url}/explanation`, {\n      ...params,\n    });\n  }\n\n  getExplanation({\n    model_version_id,\n    explained_request_id,\n    method = 'anchor',\n    output_field,\n  }: ExplanationRequestParams): Observable<Explanation> {\n    return this.http.get<Explanation>(`${this.url}/explanation`, {\n      params: {\n        model_version_id: `${model_version_id}`,\n        explained_request_id,\n        method,\n        output_field,\n      },\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "explained_request_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "model_version_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "output_field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExplanationRequestPostParams",
            "id": "interface-ExplanationRequestPostParams-fb43c926865860cd1493aea0ddea78bb",
            "file": "src/app/modules/root-cause/services/root-cause-api.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { Explanation } from '../models';\nimport { Observable } from 'rxjs';\nimport { environment } from '@environments/environment';\n\nexport interface ExplanationRequestParams {\n  model_version_id: number;\n  explained_request_id: string;\n  method: string;\n  output_field: string;\n}\n\nexport interface ExplanationRequestPostParams {\n  model_version_id: string;\n  explained_request_id: string;\n  method: string;\n  output_field: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RootCauseApiService {\n  private readonly url: string;\n\n  constructor(private readonly http: HttpService) {\n    this.url = environment.rootCauseUrl;\n  }\n\n  createExplanation(params: ExplanationRequestPostParams): Observable<any> {\n    return this.http.post<any>(`${this.url}/explanation`, {\n      ...params,\n    });\n  }\n\n  getExplanation({\n    model_version_id,\n    explained_request_id,\n    method = 'anchor',\n    output_field,\n  }: ExplanationRequestParams): Observable<Explanation> {\n    return this.http.get<Explanation>(`${this.url}/explanation`, {\n      params: {\n        model_version_id: `${model_version_id}`,\n        explained_request_id,\n        method,\n        output_field,\n      },\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "explained_request_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "model_version_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "output_field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "FeatureReport",
            "id": "interface-FeatureReport-001690e7d9649fcd58c38b1797376882",
            "file": "src/app/modules/stat/models/stat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FeatureReportHistogram {\n  bins: Array<number | string>;\n  deployment: number[];\n  training: number[];\n}\n\nexport interface BivariateReport {\n  drifted: boolean;\n  feature_1: string;\n  feature_2: string;\n  production_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n  training_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n}\n\nexport interface FeatureReport {\n  'drift-probability': number;\n  histogram: FeatureReportHistogram;\n  statistics: {\n    [statisticName: string]: {\n      change_probability?: number;\n      deployment: number | string | string[] | number[];\n      training: number | string | string[] | number[];\n      message: string;\n      has_changed: boolean;\n    };\n  };\n  bivariate_reports?: BivariateReport[];\n}\n\nexport interface Stat {\n  overall_probability_drift: number;\n  per_feature_report: {\n    [featureName: string]: FeatureReport;\n  };\n  warnings: {\n    final_decision: string;\n    report: Array<{ drift_probability_per_feature: number; message: string }>;\n  };\n}\n",
            "properties": [
                {
                    "name": "bivariate_reports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BivariateReport[]",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "drift-probability",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "histogram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FeatureReportHistogram",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "statistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "FeatureReportHistogram",
            "id": "interface-FeatureReportHistogram-001690e7d9649fcd58c38b1797376882",
            "file": "src/app/modules/stat/models/stat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FeatureReportHistogram {\n  bins: Array<number | string>;\n  deployment: number[];\n  training: number[];\n}\n\nexport interface BivariateReport {\n  drifted: boolean;\n  feature_1: string;\n  feature_2: string;\n  production_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n  training_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n}\n\nexport interface FeatureReport {\n  'drift-probability': number;\n  histogram: FeatureReportHistogram;\n  statistics: {\n    [statisticName: string]: {\n      change_probability?: number;\n      deployment: number | string | string[] | number[];\n      training: number | string | string[] | number[];\n      message: string;\n      has_changed: boolean;\n    };\n  };\n  bivariate_reports?: BivariateReport[];\n}\n\nexport interface Stat {\n  overall_probability_drift: number;\n  per_feature_report: {\n    [featureName: string]: FeatureReport;\n  };\n  warnings: {\n    final_decision: string;\n    report: Array<{ drift_probability_per_feature: number; message: string }>;\n  };\n}\n",
            "properties": [
                {
                    "name": "bins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number | string>",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "deployment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "training",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Features",
            "id": "interface-Features-3d74c2e132af3764ad2aac71e744ee30",
            "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AdditionalCheckInfo {\n  _hs_first_id: string;\n  _hs_last_id: string;\n  _hs_model_version_id: number;\n  _hs_requests: number;\n  _hs_model_name: string;\n  _id: string;\n  _hs_metrics: {\n    [metricName: string]: AggregationCheck;\n  };\n  _hs_batch: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n}\n\ninterface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport interface Features {\n  [featureName: string]: { checks: number; passed: number };\n}\nexport interface ChecksAggregationItem {\n  features: {\n    [featureName: string]: { checked: number; passed: number };\n  };\n  metrics: {\n    [metricName: string]: { checked: number; passed: number };\n  };\n  additionalInfo: Partial<AdditionalCheckInfo>;\n  batch: {\n    [featureName: string]: {\n      [metricName: string]: { checked: number; passed: number };\n    };\n  };\n}\n\nexport type CheckAggregationResponseItem = Features & AdditionalCheckInfo;\nexport interface ChecksAggregationResponse {\n  results: CheckAggregationResponseItem[];\n  count: number;\n  minDate: number;\n  maxDate: number;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3d74c2e132af3764ad2aac71e744ee30",
                    "args": [
                        {
                            "name": "featureName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type",
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "Field",
            "id": "interface-Field-4977b5e0b98eeabac5fcd31cff22989c",
            "file": "src/app/core/data/types/signature.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Dim {\n  size: number;\n  name: string;\n}\n\nexport interface Shape {\n  dims: Dim[];\n  unknownRank?: boolean;\n}\nexport interface Field {\n  profile: string;\n  dtype?: string;\n  name?: string;\n  shape?: Shape;\n  subfields?: Field[];\n}\n\nexport class Signature {\n  public signatureName: string;\n  public inputs: Field[];\n  public outputs: Field[];\n\n  constructor(props: any = {}) {\n    this.signatureName = props.signatureName;\n    this.inputs = props.inputs;\n    this.outputs = props.outputs;\n  }\n}\n",
            "properties": [
                {
                    "name": "dtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Shape",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "subfields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "FormData",
            "id": "interface-FormData-1ebb95fd8547ab16ba3b79ceea84b7c1",
            "file": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  AbstractControl,\n} from '@angular/forms';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport {\n  Application,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport {\n  ModelVariantFormData,\n  ModelVariantFormService,\n} from '../model-variant-form/model-variant-form.service';\n\nexport interface StageFormData {\n  modelVariants: ModelVariantFormData[];\n}\n\ninterface ExecutionGraphFormData {\n  stages: StageFormData[];\n}\n\nexport interface FormData {\n  name?: string;\n  executionGraph: ExecutionGraphFormData;\n}\n\n@Injectable()\nexport class ApplicationFormService {\n  private form: FormGroup;\n  public modelVersions: ModelVersion[];\n  public depConfig: DeploymentConfig;\n\n  constructor(\n    private fb: FormBuilder,\n    private modelVariantFormService: ModelVariantFormService,\n    private customValidators: CustomValidatorsService,\n  ) {}\n\n  public initForm(\n    application: Application,\n    modelVersions: ModelVersion[] = [],\n    depConfig: DeploymentConfig,\n  ): FormGroup {\n    let data: FormData;\n\n    this.modelVersions = modelVersions;\n    this.depConfig = depConfig;\n\n    if (application) {\n      data = this.applicationToFormData(application, modelVersions);\n    } else {\n      data = this.defaultFormData();\n    }\n    this.form = this.fb.group({\n      applicationName: this.fb.control(data.name, [\n        this.customValidators.required(),\n        this.customValidators.uniqNameValidation(data.name),\n        this.customValidators.applicationNameformat(),\n        this.customValidators.lengthValidation(128),\n      ]),\n      kafkaStreaming: this.fb.array([]),\n      stages: this.fb.array(this.getStagesArray(data.executionGraph.stages)),\n    });\n\n    return this.form;\n  }\n\n  public applicationToFormData(\n    application: Application,\n    modelVersions: ModelVersion[],\n  ): FormData {\n    const stages = application.executionGraph.stages.map(stage => {\n      const modelVariants: ModelVariantFormData[] = stage.modelVariants.map(\n        mv =>\n          this.modelVariantFormService.modelVariantToModelVariantFormData(\n            mv,\n            modelVersions,\n          ),\n        this.modelVariantFormService,\n      );\n      return { ...stage, modelVariants };\n    });\n\n    return {\n      name: application.name,\n      executionGraph: {\n        stages,\n      },\n    };\n  }\n\n  public get stages(): FormArray {\n    return this.form.get('stages') as FormArray;\n  }\n\n  public addStageControl(stage = this.defaultStageData()): void {\n    this.stages.push(this.buildStageGroup(stage));\n  }\n\n  public addModelVariantToStage(stageControl: AbstractControl): void {\n    const modelVariants = stageControl.get('modelVariants') as FormArray;\n    modelVariants.push(\n      this.modelVariantFormService.buildModelVariantFormGroup(\n        this.defaultModelVariantData(),\n      ),\n    );\n  }\n\n  private buildStageGroup(stage): FormGroup {\n    const modelVariants = stage.modelVariants.map(\n      (modelVariant: ModelVariantFormData) => {\n        return this.modelVariantFormService.buildModelVariantFormGroup(\n          modelVariant,\n        );\n      },\n    );\n\n    return this.fb.group({\n      modelVariants: this.fb.array(\n        modelVariants,\n        this.customValidators.weightValidation(),\n      ),\n    });\n  }\n\n  private getStagesArray(stages: any[] = []): FormGroup[] {\n    return stages.map(stage => this.buildStageGroup(stage));\n  }\n\n  private defaultStageData(): StageFormData {\n    return {\n      modelVariants: [\n        this.modelVariantFormService.defaultModelVariantFormData(\n          this.modelVersions,\n          this.depConfig,\n        ),\n      ],\n    };\n  }\n\n  private defaultModelVariantData(): ModelVariantFormData {\n    return this.modelVariantFormService.defaultModelVariantFormData(\n      this.modelVersions,\n      this.depConfig,\n    );\n  }\n\n  private defaultFormData(): FormData {\n    return {\n      name: '',\n      executionGraph: {\n        stages: [this.defaultStageData()],\n      },\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "executionGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExecutionGraphFormData",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "GetChecksAggregationParams",
            "id": "interface-GetChecksAggregationParams-02f8568b645a66340344ee8c5394af71",
            "file": "src/app/modules/monitoring/services/api/monitoring.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { environment } from '@environments/environment';\n\nimport { BareCheck, ChecksAggregationResponse } from '../../models';\nimport { Observable } from 'rxjs';\n\nexport interface GetChecksAggregationParams {\n  modelVersionId: number;\n  limit?: number;\n  offset?: number;\n  from?: string;\n  to?: string;\n}\ninterface GetChecksParams {\n  modelVersionId: number;\n  from: string;\n  to: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class MonitoringService {\n  private baseUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseUrl = `${environment.monitoringUrl}`;\n  }\n\n  public getMonitoringServiceStatus() {\n    return this.http.get(`${this.baseUrl}/buildinfo`);\n  }\n\n  getCheck(id: string): Observable<BareCheck> {\n    return this.http.get<BareCheck>(`${this.baseUrl}/checks/${id}`);\n  }\n\n  getChecks({\n    modelVersionId,\n    from,\n    to,\n  }: GetChecksParams): Observable<BareCheck[]> {\n    return this.http.get(`${this.baseUrl}/checks/${modelVersionId}`, {\n      params: { from, to },\n    });\n  }\n\n  getChecksAggregation({\n    modelVersionId,\n    limit = 90,\n    offset,\n    from,\n    to,\n  }: GetChecksAggregationParams): Observable<ChecksAggregationResponse> {\n    const params = {\n      limit: `${limit}`,\n      offset: `${offset}`,\n      from,\n      till: to,\n    };\n\n    return this.http.get(\n      `${this.baseUrl}/checks/aggregates/${modelVersionId}`,\n      {\n        params,\n      }\n    );\n  }\n\n  getChecksForComparision(params: {\n    originalModelVersion: number;\n    aggregationId: String;\n    comparedModelVersionId: number;\n  }): Observable<BareCheck[]> {\n    const {\n      originalModelVersion: omv,\n      aggregationId: aggId,\n      comparedModelVersionId: cmv,\n    } = params;\n\n    return this.http.get(\n      `${this.baseUrl}/checks/comparision/${omv}/${aggId}/${cmv}`\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "GetChecksParams",
            "id": "interface-GetChecksParams-02f8568b645a66340344ee8c5394af71",
            "file": "src/app/modules/monitoring/services/api/monitoring.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { environment } from '@environments/environment';\n\nimport { BareCheck, ChecksAggregationResponse } from '../../models';\nimport { Observable } from 'rxjs';\n\nexport interface GetChecksAggregationParams {\n  modelVersionId: number;\n  limit?: number;\n  offset?: number;\n  from?: string;\n  to?: string;\n}\ninterface GetChecksParams {\n  modelVersionId: number;\n  from: string;\n  to: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class MonitoringService {\n  private baseUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseUrl = `${environment.monitoringUrl}`;\n  }\n\n  public getMonitoringServiceStatus() {\n    return this.http.get(`${this.baseUrl}/buildinfo`);\n  }\n\n  getCheck(id: string): Observable<BareCheck> {\n    return this.http.get<BareCheck>(`${this.baseUrl}/checks/${id}`);\n  }\n\n  getChecks({\n    modelVersionId,\n    from,\n    to,\n  }: GetChecksParams): Observable<BareCheck[]> {\n    return this.http.get(`${this.baseUrl}/checks/${modelVersionId}`, {\n      params: { from, to },\n    });\n  }\n\n  getChecksAggregation({\n    modelVersionId,\n    limit = 90,\n    offset,\n    from,\n    to,\n  }: GetChecksAggregationParams): Observable<ChecksAggregationResponse> {\n    const params = {\n      limit: `${limit}`,\n      offset: `${offset}`,\n      from,\n      till: to,\n    };\n\n    return this.http.get(\n      `${this.baseUrl}/checks/aggregates/${modelVersionId}`,\n      {\n        params,\n      }\n    );\n  }\n\n  getChecksForComparision(params: {\n    originalModelVersion: number;\n    aggregationId: String;\n    comparedModelVersionId: number;\n  }): Observable<BareCheck[]> {\n    const {\n      originalModelVersion: omv,\n      aggregationId: aggId,\n      comparedModelVersionId: cmv,\n    } = params;\n\n    return this.http.get(\n      `${this.baseUrl}/checks/comparision/${omv}/${aggId}/${cmv}`\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "HeatmapConfig",
            "id": "interface-HeatmapConfig-68c82ac85145d1a8a0a8a9f8e8cd5650",
            "file": "src/app/modules/stat/models/heatmap.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type HeatmapData = {\n  x: string;\n  y: string;\n  value: number;\n};\n\nexport interface HeatmapConfig {\n  title?: string;\n  yAxisName?: string;\n  xAxisName?: string;\n  xLabels: string[];\n  yLabels: string[];\n  data: Array<HeatmapData>;\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<HeatmapData>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "xAxisName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "xLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "yAxisName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "yLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Hpa",
            "id": "interface-Hpa-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "properties": [
                {
                    "name": "cpuUtilization",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "maxReplicas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "minReplicas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "HydroConfig",
            "id": "interface-HydroConfig-7adb1b7de5b3f2bdd4e5b2e6fe060a16",
            "file": "src/app/core/hydro-config.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface HydroConfig {\n  showHeader: boolean;\n  liftMetadata: boolean;\n}\n\nconst defaultConfig: HydroConfig = {\n  showHeader: true,\n  liftMetadata: false,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HydroConfigService {\n  public config: HydroConfig = defaultConfig;\n  constructor(private readonly http: HttpClient) {}\n\n  loadConfig() {\n    return this.http\n      .get<HydroConfig>(`/assets/config.json`)\n      .toPromise()\n      .then((data: any) => (this.config = data))\n      .catch((_: any) => {\n        console.warn(`Couldn't load config,using default config`);\n        return Promise.resolve();\n      });\n  }\n}\n",
            "properties": [
                {
                    "name": "liftMetadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "showHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "HydroServingState",
            "id": "interface-HydroServingState-4f8ca9527efe4fded302da8e7baf8044",
            "file": "src/app/core/store/states/root.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { RouterStateUrl } from '../states/router.state';\nimport * as fromRouter from '@ngrx/router-store';\n\nimport * as fromApplications from './applications.state';\nimport * as fromModels from './models.state';\nimport * as fromModelVersions from './model-versions.state';\nimport * as fromServables from './servables.state';\nimport * as fromDeploymentConfigs from './deployment-configs.state';\nimport * as fromServiceStatuses from './service-statuses.state';\n\nexport interface HydroServingState {\n  router: fromRouter.RouterReducerState<RouterStateUrl>;\n  applications: fromApplications.State;\n  models: fromModels.State;\n  modelVersions: fromModelVersions.State;\n  servables: fromServables.State;\n  deploymentConfigs: fromDeploymentConfigs.State;\n  serviceStatuses: fromServiceStatuses.State;\n}\n\nexport const initialState: HydroServingState = {\n  router: {\n    state: {\n      url: '/',\n      params: {},\n      queryParams: {},\n    },\n    navigationId: 0,\n  },\n  applications: fromApplications.initialState,\n  models: fromModels.initialState,\n  modelVersions: fromModelVersions.initialState,\n  servables: fromServables.initialState,\n  deploymentConfigs: fromDeploymentConfigs.initialState,\n  serviceStatuses: fromServiceStatuses.initialState,\n};\n",
            "properties": [
                {
                    "name": "applications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromApplications.State",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "deploymentConfigs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromDeploymentConfigs.State",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "models",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromModels.State",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "modelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromModelVersions.State",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromRouter.RouterReducerState<RouterStateUrl>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "servables",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromServables.State",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "serviceStatuses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromServiceStatuses.State",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IHydroHttpOptions",
            "id": "interface-IHydroHttpOptions-4bbc3650f333bb450e3cb334532a2dbe",
            "file": "src/app/core/data/services/http.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable, Inject } from '@angular/core';\nimport { HS_BASE_URL } from '@app/core/base-url.token';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\ntype HydroHttpParams =\n  | string\n  | { [param: string]: string | string[] }\n  | HttpParams;\n\ninterface IHydroHttpOptions {\n  headers?: any;\n  params?: HydroHttpParams;\n  [propName: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpService {\n  constructor(\n    public http: HttpClient,\n    @Inject(HS_BASE_URL) public url: string\n  ) {}\n\n  get<T>(url: string, options?: IHydroHttpOptions) {\n    return this.http\n      .get<T>(this.getFullUrl(url), this.hydroOptions(options))\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  delete(url: string, options?: IHydroHttpOptions) {\n    return this.http\n      .delete(this.getFullUrl(url), this.hydroOptions(options))\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  post<T>(url: string, body, options?: IHydroHttpOptions) {\n    return this.http\n      .post<T>(this.getFullUrl(url), body, this.hydroOptions(options))\n      .pipe(catchError(this.handleError));\n  }\n\n  put(url: string, body, options?: IHydroHttpOptions) {\n    return this.http\n      .put(this.getFullUrl(url), body, this.hydroOptions(options))\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  public getFullUrl(endpoint: string): string {\n    return this.url + endpoint;\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let message: string;\n    if (error.error instanceof ErrorEvent) {\n      message = `An error occurred: ${error.error.message}`;\n    } else {\n      const status: number = error.status;\n\n      let err: string = error.name;\n      let information: string = error.message;\n      if (error.error) {\n        err = error.error.error || error.name || '';\n        information = error.error.information || error.error.message || '';\n      }\n\n      message = `status: ${status}, error: ${err}, message: ${information} `;\n    }\n    return throwError(message);\n  }\n\n  private hydroOptions(options: IHydroHttpOptions = {}) {\n    if (options === null) {\n      return {};\n    }\n\n    const res = {\n      ...options,\n      params: this.createHttpParams(options.params),\n    };\n\n    return res;\n  }\n\n  private createHttpParams(\n    params: string | { [param: string]: string | string[] } | HttpParams = ''\n  ): HttpParams {\n    if (params instanceof HttpParams) {\n      return params;\n    } else if (typeof params === 'string') {\n      return new HttpParams({ fromString: params });\n    } else if (typeof params === 'object') {\n      for (const key in params) {\n        if (params.hasOwnProperty(key)) {\n          if (params[key] === undefined) {\n            delete params[key];\n          }\n        }\n      }\n      return new HttpParams({ fromObject: params });\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HydroHttpParams",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-4bbc3650f333bb450e3cb334532a2dbe",
                    "args": [
                        {
                            "name": "propName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "ImageData",
            "id": "interface-ImageData-acd99b4f7c20ff7f407e7ceb40f4651d",
            "file": "src/app/core/image-helper.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ColorMapService, ColorMapType } from '@app/core/color-map.service';\nimport * as d3 from 'd3';\n\ninterface ImageData {\n  pixels: number[];\n  imageWidth: number;\n  imageHeight: number;\n  batchSize?: number;\n  colormap?: ColorMapType;\n}\n\nenum ImageType {\n  greyScaleAlpha = 'grey scale alpha channel',\n  greyScale255 = 'grey scale 0-255',\n  rgb = 'rbg',\n}\n\ntype grayScaleType = ImageType.greyScaleAlpha | ImageType.greyScale255;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageHelperService {\n  constructor(private colorMap: ColorMapService) {}\n  transformToRGBA(imageData: ImageData): number[] {\n    try {\n      switch (this.recognizeImageType(imageData)) {\n        case ImageType.greyScaleAlpha:\n          return this.grayScaleAlphaToRGBA(\n            imageData.pixels,\n            imageData.colormap\n          );\n        case ImageType.greyScale255:\n          return this.grayScale255ToRGBA(imageData.pixels, imageData.colormap);\n        case ImageType.rgb:\n          return this.RGBtoRGBA(imageData.pixels);\n        default:\n          break;\n      }\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n\n  private recognizeImageType(imageData: ImageData): ImageType {\n    const { pixels, imageHeight, imageWidth, batchSize } = imageData;\n    const dim =\n      pixels.length /\n      (imageWidth * imageHeight) /\n      (batchSize > 1 ? batchSize : 1);\n    switch (dim) {\n      case 1:\n        return this.specifyGrayScale(pixels);\n      case 3:\n        return ImageType.rgb;\n      default:\n        console.error({ pixels, imageHeight, imageWidth });\n        throw Error('Cant recognize image type');\n    }\n  }\n\n  private specifyGrayScale(pixels: number[]): grayScaleType {\n    return pixels.some(val => val > 0 && val < 1)\n      ? ImageType.greyScaleAlpha\n      : ImageType.greyScale255;\n  }\n\n  private grayScaleAlphaToRGBA(\n    pixels: number[],\n    colormapType: ColorMapType\n  ): number[] {\n    let rgb;\n    if (colormapType) {\n      rgb = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        const [r, g, b] = this.colorMap.getRGB({\n          val: cur,\n          type: colormapType,\n        });\n        acc[offset] = r;\n        acc[offset + 1] = g;\n        acc[offset + 2] = b;\n        acc[offset + 3] = 255;\n        return acc;\n      }, []);\n    } else {\n      rgb = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        acc[offset] = 0;\n        acc[offset + 1] = 0;\n        acc[offset + 2] = 0;\n        acc[offset + 3] = 255 * (1 - cur);\n\n        return acc;\n      }, []);\n    }\n    return rgb;\n  }\n\n  private RGBtoRGBA(pixels: number[]): number[] {\n    const arr = [];\n\n    for (let i = 0, l = pixels.length; i < l; i += 3) {\n      const x = arr.length;\n      arr[x] = pixels[i];\n      arr[x + 1] = pixels[i + 1];\n      arr[x + 2] = pixels[i + 2];\n      arr[x + 3] = 255;\n    }\n    return arr;\n  }\n\n  private grayScale255ToRGBA(\n    pixels: number[],\n    colormapType: ColorMapType\n  ): number[] {\n    let result: number[];\n    if (colormapType) {\n      const depthScale = d3.scaleLinear().domain([0, 255]).clamp(true);\n\n      result = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        const [r, g, b] = this.colorMap.getRGB({\n          val: depthScale(cur),\n          type: colormapType,\n        });\n        acc[offset] = r;\n        acc[offset + 1] = g;\n        acc[offset + 2] = b;\n        acc[offset + 3] = 255;\n\n        return acc;\n      }, []);\n    } else {\n      result = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        acc[offset] = cur;\n        acc[offset + 1] = cur;\n        acc[offset + 2] = cur;\n        acc[offset + 3] = 255;\n\n        return acc;\n      }, []);\n    }\n    return result;\n  }\n}\n",
            "properties": [
                {
                    "name": "batchSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "colormap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorMapType",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "imageHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "imageWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pixels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Input",
            "id": "interface-Input-6efbfd3ffab1a8c2cd122fbc03b88cc6",
            "file": "src/app/core/data/types/model-contract.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Input {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface Output {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface ModelSignatureDTO {\n  outputs: Output[];\n  signatureName: string;\n  inputs: Input[];\n}\n\nexport class ModelSignature {\n  signatureName: string;\n  outputs: Output[];\n  inputs: Input[];\n\n  constructor(params: ModelSignatureDTO) {\n    this.signatureName = params.signatureName;\n    this.outputs = params.outputs;\n    this.inputs = params.inputs;\n  }\n}\n",
            "properties": [
                {
                    "name": "dtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "KafkaStreaming",
            "id": "interface-KafkaStreaming-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "properties": [
                {
                    "name": "consumerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "destinationTopic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "errorTopic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "sourceTopic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Link",
            "id": "interface-Link-5283328c2e623a7e31f2ac9c19da36c7",
            "file": "src/app/modules/visualization/components/scatter-plot/scatter-plot.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { LinkRegime, Colorizer } from '@app/modules/visualization/models';\nimport {\n  ScatterPlotData,\n  ScatterPlotPoint,\n} from '../../models/scatter-plot-data.model';\nimport {\n  select,\n  ScaleLinear,\n  scaleLinear,\n  axisBottom,\n  axisLeft,\n  contourDensity,\n  geoPath,\n} from 'd3';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, shareReplay, tap } from 'rxjs/operators';\n\ninterface Link {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\n@Component({\n  selector: 'hs-scatter-plot',\n  templateUrl: './scatter-plot.component.html',\n  styleUrls: ['./scatter-plot.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScatterPlotComponent implements OnChanges {\n  private static removeLines() {\n    select('.scatter-plot__links').selectAll('line').remove();\n  }\n\n  @Input() readonly data: ScatterPlotData;\n  @Input() readonly colors: string[] = [];\n  @Input() readonly top100: number[][] = [];\n  @Input() readonly counterfactuals: number[][] = [];\n  @Input() readonly colorizer: Colorizer;\n  @Input() readonly showTrainingData: boolean = false;\n\n  @Output() selectPoint: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('container', { read: ElementRef, static: true })\n  container: ElementRef;\n  @ViewChild('layout', { read: ElementRef, static: true }) layout: ElementRef;\n  @ViewChild('svg', { read: ElementRef, static: true }) svg: ElementRef;\n  @ViewChild('axisGroup', { read: ElementRef, static: true })\n  axisGroup: ElementRef;\n  @ViewChild('circles', { read: ElementRef, static: true })\n  circlesGroup: ElementRef;\n  @ViewChild('links', { read: ElementRef, static: true })\n  linksGroup: ElementRef;\n  @ViewChild('kde', { read: ElementRef, static: true }) kdeGroup: ElementRef;\n  @ViewChild('supportiveLines', { read: ElementRef, static: true })\n  supportiveLinesGroup: ElementRef;\n\n  points: ScatterPlotPoint[] = [];\n  links: Link[];\n  selectedPointIdx$: Observable<number>;\n  yScale;\n  xScale;\n  hoveredPointIndex: BehaviorSubject<number> = new BehaviorSubject(undefined);\n  selectedPointIndex: BehaviorSubject<number> = new BehaviorSubject(undefined);\n  changeLinkRegime: BehaviorSubject<LinkRegime> = new BehaviorSubject(\n    undefined\n  );\n\n  width: number = 800;\n  height: number = 600;\n  selectedIndex: number;\n  regime: LinkRegime;\n\n  constructor() {\n    this.selectedPointIdx$ = this.selectedPointIndex.asObservable().pipe(\n      distinctUntilChanged(),\n      shareReplay(1),\n      tap(index => {\n        this.selectPoint.emit(index);\n      })\n    );\n  }\n\n  @Input() set linkRegime(regime: LinkRegime) {\n    console.log('input');\n    this.regime = regime;\n    this.changeLinkRegime.next(regime);\n  }\n\n  get chartHeight() {\n    return 620;\n  }\n\n  get chartWidth() {\n    return this.container.nativeElement.offsetWidth || 400;\n  }\n\n  get margins() {\n    return {\n      top: 24,\n      right: 24,\n      bottom: 24,\n      left: 24,\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const dataChanges =\n      (changes.data && changes.data.currentValue) || this.data;\n    this.render(dataChanges);\n  }\n\n  private render({\n    points,\n    trainingPoints,\n    minX,\n    minY,\n    maxX,\n    maxY,\n  }: ScatterPlotData) {\n    this.width = this.container.nativeElement.offsetWidth;\n    const xScale = this.generateXScale(points, +minX, +maxX);\n    const yScale = this.generateYScale(points, +minY, +maxY);\n\n    this.drawAxis({ xScale, yScale });\n    this.drawTrainingData({ trainingPoints, xScale, yScale });\n    this.drawCircles({ points, xScale, yScale });\n    this.drawSupportiveLines({ xScale, yScale });\n  }\n\n  private drawTrainingData({\n    trainingPoints,\n    yScale,\n    xScale,\n  }: {\n    trainingPoints: ScatterPlotPoint[];\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }) {\n    const self = this;\n    const data = trainingPoints.map(({ x, y }) => [x, y]) as [number, number][];\n\n    var color = scaleLinear<string>()\n      .domain([0, 0.1])\n      .range(['white', '#ffad37']);\n\n    var densityData = contourDensity()\n      .x(function (d) {\n        return xScale(d[0]);\n      })\n      .y(function (d) {\n        return yScale(d[1]);\n      })\n      .size([self.chartWidth, self.chartHeight])\n      .bandwidth(12)(data);\n\n    select(this.kdeGroup.nativeElement).selectAll('path').remove();\n    select(this.kdeGroup.nativeElement)\n      .selectAll('path')\n      .data(densityData)\n      .enter()\n      .append('path')\n      .attr('d', geoPath())\n      .attr('fill', ({ value }) => color(value))\n      .style('opacity', self.showTrainingData ? '.9' : '0')\n      .style(\n        'transform',\n        `translate(${self.margins.left}px, ${self.margins.top}px)`\n      );\n  }\n\n  private drawCircles({\n    points,\n    yScale,\n    xScale,\n  }: {\n    points: ScatterPlotPoint[];\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }): void {\n    const self = this;\n    const circles = select(this.circlesGroup.nativeElement)\n      .selectAll('circle')\n      .data(points)\n      .join(\n        enter =>\n          enter\n            .append('circle')\n            .attr('cx', point => xScale(point.x) + this.margins.left)\n            .attr('cy', point => yScale(point.y) + this.margins.top)\n            .attr('r', 6)\n            .attr('fill', (point, idx) => this.colors[idx] || 'lightblue')\n            .attr('data-id', (d, i) => i),\n        update =>\n          update\n            .attr('cx', point => xScale(point.x) + this.margins.left)\n            .attr('cy', point => yScale(point.y) + this.margins.top)\n            .attr('fill', (point, idx) => this.colors[idx] || 'lightblue')\n      );\n\n    circles.attr('opacity', function (point, index) {\n      return self.chooseOpacityOnLeave(index);\n    });\n\n    circles.on('click', function (_, idx) {\n      requestAnimationFrame(() => {\n        const selectedIndex = +(this as SVGElement).dataset.id;\n        self.selectedIndex = selectedIndex;\n        self.selectPoint.next(selectedIndex);\n        circles.classed('selected', function (_, index) {\n          return index === selectedIndex;\n        });\n      });\n    });\n    circles.on('mouseenter', function (point) {\n      requestAnimationFrame(() => {\n        const hoveredIndex = +(this as SVGElement).dataset.id;\n        const x = point.x;\n        const y = point.y;\n        let linkIndexes = [];\n        switch (self.regime) {\n          case 'nearest': {\n            linkIndexes = self.top100[hoveredIndex];\n            break;\n          }\n          case 'counterfactuals': {\n            linkIndexes = self.counterfactuals[hoveredIndex];\n            break;\n          }\n        }\n\n        select(self.linksGroup.nativeElement).selectAll('line.link').remove();\n        select(self.linksGroup.nativeElement)\n          .selectAll('line')\n          .data(linkIndexes)\n          .join(enter =>\n            enter\n              .append('line')\n              .attr('class', 'link')\n              .attr('x1', xScale(x) + self.margins.left)\n              .attr('y1', yScale(y) + self.margins.top)\n              .attr('x2', index => xScale(points[index].x) + self.margins.left)\n              .attr('y2', index => yScale(points[index].y) + self.margins.top)\n              .style('stroke', '#D9E2EC')\n          );\n\n        circles.attr('opacity', (point, idx) => {\n          return self.chooseOpacityOnHover(hoveredIndex, idx);\n        });\n      });\n    });\n\n    circles.on('mouseleave', () => {\n      requestAnimationFrame(() => {\n        circles.attr('opacity', function (point, index) {\n          return self.chooseOpacityOnLeave(index);\n        });\n        select(self.linksGroup.nativeElement).selectAll('line.link').remove();\n      });\n    });\n  }\n\n  private chooseOpacityOnHover(hoveredIndex: number, index: number): string {\n    if (this.regime === 'all') {\n      return '1';\n    }\n    const linkIndexes =\n      this.regime === 'nearest'\n        ? this.top100[hoveredIndex]\n        : this.counterfactuals[hoveredIndex];\n    if (hoveredIndex === index || linkIndexes.includes(index)) {\n      return '1';\n    } else {\n      return '.3';\n    }\n  }\n\n  private chooseOpacityOnLeave(index: number): string {\n    if (this.regime === 'all' || this.selectedIndex === undefined) {\n      return '1';\n    }\n    const linkIndexes =\n      this.regime === 'nearest'\n        ? this.top100[this.selectedIndex]\n        : this.counterfactuals[this.selectedIndex];\n    if (this.selectedIndex === index || linkIndexes.includes(index)) {\n      return '1';\n    } else {\n      return '.3';\n    }\n  }\n\n  private generateXScale(\n    points: ScatterPlotPoint[],\n    minX: number,\n    maxX: number\n  ): ScaleLinear<number, number> {\n    return scaleLinear()\n      .domain([minX, maxX])\n      .range([0, this.width - (this.margins.left + this.margins.right)]);\n  }\n  private generateYScale(\n    points: ScatterPlotPoint[],\n    min,\n    max\n  ): ScaleLinear<number, number> {\n    return scaleLinear()\n      .domain([max, min])\n      .range([0, this.height - (this.margins.bottom + this.margins.top)]);\n  }\n\n  private drawAxis({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }) {\n    this.drawXAxis(xScale);\n    this.drawYAxis(yScale);\n    select(this.axisGroup.nativeElement).selectAll('path.domain').remove();\n    select(this.axisGroup.nativeElement).selectAll('.tick > line').remove();\n    select(this.axisGroup.nativeElement)\n      .selectAll('.tick > text')\n      .attr('font-size', '11px')\n      .attr('font-weight', 'bold')\n      .attr('fill', '#486581');\n  }\n  private drawYAxis(yScale: ScaleLinear<number, number>): void {\n    const yAxis = axisLeft(yScale);\n    select(this.axisGroup.nativeElement).select('g.yAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr('transform', `translate(${this.margins.left}, ${this.margins.top})`)\n      .attr('class', 'yAxis')\n      .call(yAxis);\n  }\n  private drawXAxis(xScale: ScaleLinear<number, number>): void {\n    const xAxis = axisBottom(xScale);\n    select(this.axisGroup.nativeElement).select('g.xAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr(\n        'transform',\n        `translate(${this.margins.left}, ${this.height - this.margins.top})`\n      )\n      .attr('class', 'xAxis')\n      .call(xAxis);\n  }\n  private drawSupportiveLines({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }): void {\n    const groupSelection = select(this.supportiveLinesGroup.nativeElement);\n    const lineColor = 'rgb(237, 239, 243)';\n\n    groupSelection\n      .selectAll('line.yLine')\n      .data(yScale.ticks())\n      .join(enter =>\n        enter\n          .append('line')\n          .attr('class', 'yLine')\n          .attr('x1', this.margins.left)\n          .attr('y1', d => yScale(d) + this.margins.top)\n          .attr('x2', this.width - this.margins.left)\n          .attr('y2', d => yScale(d) + this.margins.top)\n          .style('stroke', lineColor)\n      );\n    groupSelection\n      .selectAll('line.xLine')\n      .data(xScale.ticks())\n      .join(enter =>\n        enter\n          .append('line')\n          .attr('class', 'xLine')\n          .attr('x1', d => xScale(d) + this.margins.left)\n          .attr('y1', this.margins.top)\n          .attr('x2', d => xScale(d) + this.margins.left)\n          .attr('y2', this.height - this.margins.top)\n          .style('stroke', lineColor)\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "x1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "x2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "y1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "y2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MatchExpression",
            "id": "interface-MatchExpression-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "operator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MatchField",
            "id": "interface-MatchField-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "operator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MenuState",
            "id": "interface-MenuState-b7a434d7ac8ae081e6246e91059617f0",
            "file": "src/app/modules/applications/containers/application-details/application-details.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Application,\n  ModelVariant,\n  ApplicationStatus,\n  ModelVersionServiceStatusesEntity,\n  Servable,\n  ModelVersionId,\n  ModelVersion,\n} from '@app/core/data/types';\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { ServiceStatusesFacade } from '@app/core/facades/service-statuses.facade';\nimport {\n  DialogUpdateModelVersionComponent,\n  SELECTED_MODEL_VARIANT,\n  LATEST_MODEL_VERSION,\n  DialogTestComponent,\n  SELECTED_APPLICATION,\n  DialogUpdateApplicationComponent,\n  SELECTED_UPD_APPLICATION,\n  DialogDeleteApplicationComponent,\n  SELECTED_DEL_APPLICATION,\n} from '@app/modules/dialogs/components';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport * as _ from 'lodash';\n\nimport { Observable, BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { filter } from 'rxjs/operators';\nimport { Dictionary } from '@ngrx/entity';\nimport { ServablesFacade } from '@app/core/facades/servables.facade';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\n\ninterface MenuState {\n  showed: boolean;\n  context?: ModelVariant | null;\n  top: number;\n  left: number;\n  statuses: ModelVersionServiceStatusesEntity;\n}\nconst initialMenuState: MenuState = {\n  showed: false,\n  context: null,\n  top: 0,\n  left: 0,\n  statuses: null,\n};\n\nfunction getModelVersionsIds(value: Application): ModelVersionId[] {\n  return _.flatten(\n    value.executionGraph.stages.map(stage =>\n      stage.modelVariants.map(modelVariant => modelVariant.modelVersionId),\n    ),\n  );\n}\n\n@Component({\n  selector: 'hs-application-details',\n  templateUrl: './application-details.component.html',\n  styleUrls: ['./application-details.component.scss'],\n})\nexport class ApplicationDetailsComponent implements OnInit, OnDestroy {\n  application$: Observable<Application>;\n\n  menu$: Observable<MenuState>;\n  private menu: BehaviorSubject<MenuState> = new BehaviorSubject(\n    initialMenuState,\n  );\n\n  mv$: Observable<Dictionary<ModelVersionServiceStatusesEntity>>;\n  private mvSubscription: Subscription;\n\n  constructor(\n    private readonly dialog: DialogsService,\n    private readonly facade: ApplicationsFacade,\n    private readonly serviceFacade: ServiceStatusesFacade,\n    private readonly servablesFacade: ServablesFacade,\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n  ) {\n    this.menu$ = this.menu.asObservable();\n  }\n\n  ngOnInit() {\n    this.application$ = this.facade.selectedApplication();\n\n    this.mv$ = this.serviceFacade.allStatusesEntities();\n\n    this.mvSubscription = combineLatest([this.application$, this.mv$])\n      .pipe(\n        filter(tuple => {\n          const [app, statuses] = tuple;\n          return app !== undefined;\n        }),\n        map(tuple => {\n          const [app, statuses] = tuple;\n          const mvsId = getModelVersionsIds(app);\n          return mvsId.filter(id => statuses[id] === undefined);\n        }),\n        filter(ids => {\n          return ids.length > 0;\n        }),\n        tap(ids => {\n          return ids.forEach(id => this.serviceFacade.loadAll(id));\n        }),\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.mvSubscription.unsubscribe();\n  }\n\n  public getServablesByName(name: string): Observable<Servable[]> {\n    return this.servablesFacade.selectServablesByName(name);\n  }\n\n  public getModelVersionById(id: ModelVersionId): Observable<ModelVersion> {\n    return this.modelVersionsFacade.modelVersionById(id);\n  }\n\n  public updateModelVersionDialog(lastModelVersion, modelVariant) {\n    this.dialog.createDialog({\n      component: DialogUpdateModelVersionComponent,\n      providers: [\n        { provide: SELECTED_MODEL_VARIANT, useValue: modelVariant },\n        { provide: LATEST_MODEL_VERSION, useValue: lastModelVersion },\n      ],\n    });\n  }\n\n  public testApplication(application: Application): void {\n    this.dialog.createDialog({\n      component: DialogTestComponent,\n      providers: [{ provide: SELECTED_APPLICATION, useValue: application }],\n    });\n  }\n\n  public editApplication(application: Application): void {\n    this.dialog.createDialog({\n      component: DialogUpdateApplicationComponent,\n      providers: [{ provide: SELECTED_UPD_APPLICATION, useValue: application }],\n      styles: {\n        height: '100%',\n      },\n    });\n  }\n\n  public removeApplication(application: Application) {\n    this.dialog.createDialog({\n      component: DialogDeleteApplicationComponent,\n      providers: [{ provide: SELECTED_DEL_APPLICATION, useValue: application }],\n    });\n  }\n\n  public isReady(status: string): boolean {\n    return status === ApplicationStatus.Ready;\n  }\n\n  public isFailed(status: string): boolean {\n    return status === ApplicationStatus.Failed;\n  }\n\n  public onClickModelVariant(\n    evt: MouseEvent,\n    modelVariant: ModelVariant,\n  ): void {\n    this.serviceFacade\n      .selectServiceStatusesById(modelVariant.modelVersionId)\n      .subscribe(statuses => {\n        this.menu.next({\n          showed: true,\n          context: modelVariant,\n          left: evt.clientX - 12,\n          top: evt.clientY - 12,\n          statuses: statuses,\n        });\n      });\n  }\n\n  public onMouseLeave(): void {\n    const menuState = this.menu.getValue();\n    this.menu.next({\n      showed: false,\n      context: menuState.context,\n      top: menuState.top,\n      left: menuState.left,\n      statuses: menuState.statuses,\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVariant | null",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "showed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "statuses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionServiceStatusesEntity",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Metric",
            "id": "interface-Metric-d070da583a56a86010f067f1abcb9bf1",
            "file": "src/app/modules/visualization/models/visualization.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmpOperators } from '@app/modules/monitoring/models';\nimport { ColoringType } from '../models';\n\nexport type LinkRegime = 'all' | 'nearest' | 'counterfactuals';\n\nexport interface ClassLabel {\n  classes?: Array<number | string>;\n  coloring_type: ColoringType;\n  data: number[];\n}\n\nexport interface Metric {\n  coloring_type: ColoringType;\n  scores: number[];\n  operation: CmpOperators;\n  threshold: number;\n}\n\nexport enum ETaskState {\n  success = 'SUCCESS',\n  pending = 'PENDING',\n  failed = 'FAILED',\n  unknown = 'UNKNOWN',\n}\n\nexport interface TaskInformation {\n  task_id: string;\n  description?: string;\n  message?: string;\n  state: ETaskState;\n  result: VisualizationResponse;\n}\n\nexport interface VisualizationResponse {\n  data_shape: [number, number];\n  data: number[][];\n  training_data_shape?: [number, number];\n  training_data?: number[][];\n  output_info: {\n    [outputName: string]: {\n      coloring_type: ColoringType;\n      data: number[];\n      classes?: Array<string | number>;\n      dtype: number;\n    };\n  };\n  metrics: {\n    [name: string]: Metric;\n  };\n  requests_ids: string[];\n  top_N: number[][];\n  counterfactuals: number[][];\n  visualization_metrics: {\n    [name: string]: string;\n  };\n  parametres?: any;\n}\n",
            "properties": [
                {
                    "name": "coloring_type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColoringType",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "operation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CmpOperators",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "scores",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MetricCheck",
            "id": "interface-MetricCheck-91196f4ba6eec9dd3ffcc5e7d388e616",
            "file": "src/app/modules/monitoring/models/Check.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as _ from 'lodash';\nimport { BareCheck } from './BareCheck';\n\nexport type CheckId = string;\nexport interface MetricCheck {\n  check: boolean;\n  description: string;\n  threshold: number;\n  value: number;\n  metricSpecId: string;\n}\nexport interface RawCheck {\n  operator?: string;\n  check: boolean;\n  description: string;\n  threshold: number;\n  value: number;\n  metricSpecId: string;\n}\n\nexport class Check {\n  id: CheckId;\n  error: string | null;\n  latency: number;\n  overallScore: number;\n  metricChecks: { [metricName: string]: MetricCheck };\n  rawChecks: {\n    overall: RawCheck[];\n  };\n  modelVersionId: number;\n  modelVersion: number;\n  modelName: string;\n  inputsOutputs: { [IOkey: string]: any };\n  timestamp: number;\n\n  constructor(params: BareCheck) {\n    this.id = params._id;\n    this.error = params._hs_error;\n    this.latency = params._hs_latency;\n    this.overallScore = params._hs_overall_score;\n    this.metricChecks = params._hs_metric_checks || {};\n    this.rawChecks = params._hs_raw_checks || { overall: [] };\n    this.modelVersionId = params._hs_model_version_id;\n    this.modelName = params._hs_model_name;\n    this.modelVersion = params._hs_model_incremental_version;\n    this.timestamp = params._hs_timestamp;\n    this.inputsOutputs = this.getInputsOutputs(params);\n  }\n\n  isFailed(): boolean {\n    return this.overallScore < 1;\n  }\n\n  hasMetricChecks(): boolean {\n    return Object.keys(this.metricChecks).length > 0;\n  }\n\n  private getInputsOutputs(bareCheck: BareCheck) {\n    const res = Object.create(null);\n\n    for (const fieldName in bareCheck) {\n      if (bareCheck.hasOwnProperty(fieldName) && !fieldName.startsWith('_')) {\n        res[fieldName] = bareCheck[fieldName];\n      }\n    }\n\n    return res;\n  }\n\n  getMetricsScore(): number {\n    if (this.hasMetricChecks()) {\n      const metricChecksArray = Object.values(this.metricChecks);\n      const count = metricChecksArray.length;\n\n      const successChecksCount = metricChecksArray.filter(({ check }) => check)\n        .length;\n\n      return successChecksCount / count;\n    }\n    return 0;\n  }\n\n  getRawScore(): number {\n    const rawChecksArray = _.flatten(Object.values(this.rawChecks));\n    const count = rawChecksArray.length;\n    const successChecksCount = rawChecksArray.filter(({ check }) => check)\n      .length;\n\n    return successChecksCount / count;\n  }\n}\n",
            "properties": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "metricSpecId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MetricCheckAggregation",
            "id": "interface-MetricCheckAggregation-465c87efd6ca7ee0d02420cf0301b233",
            "file": "src/app/modules/monitoring/models/MetricCheckAggregation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetricCheckAggregation {\n  metricName: string;\n  values: number[];\n  threshold: any;\n  checks: boolean[];\n  modelVerId: number;\n  modelName: string;\n  modelVer: number;\n}\n",
            "properties": [
                {
                    "name": "checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "metricName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "modelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modelVer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "modelVerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MetricSpecificationConfig",
            "id": "interface-MetricSpecificationConfig-e6301d9abd30b251952101e1a3b4ec0e",
            "file": "src/app/core/data/types/metric-specification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Servable } from '../types/servable';\n\nexport interface MetricSpecificationConfig {\n  threshold: number;\n  modelVersionId: number;\n  thresholdCmpOperator: { kind: string };\n  servable?: Servable;\n}\nexport interface MetricSpecificationRequest {\n  name: string;\n  modelVersionId: number;\n  config: MetricSpecificationConfig;\n}\n\nexport class MetricSpecification {\n  public id: string;\n  public name: string;\n  public modelVersionId: number;\n  public config: MetricSpecificationConfig;\n\n  constructor(props: any = {}) {\n    this.id = props.id;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.config = props.config;\n  }\n}\n",
            "properties": [
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "servable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Servable",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "thresholdCmpOperator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MetricSpecificationRequest",
            "id": "interface-MetricSpecificationRequest-e6301d9abd30b251952101e1a3b4ec0e",
            "file": "src/app/core/data/types/metric-specification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Servable } from '../types/servable';\n\nexport interface MetricSpecificationConfig {\n  threshold: number;\n  modelVersionId: number;\n  thresholdCmpOperator: { kind: string };\n  servable?: Servable;\n}\nexport interface MetricSpecificationRequest {\n  name: string;\n  modelVersionId: number;\n  config: MetricSpecificationConfig;\n}\n\nexport class MetricSpecification {\n  public id: string;\n  public name: string;\n  public modelVersionId: number;\n  public config: MetricSpecificationConfig;\n\n  constructor(props: any = {}) {\n    this.id = props.id;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.config = props.config;\n  }\n}\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetricSpecificationConfig",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModelDTO",
            "id": "interface-ModelDTO-82ed66ec1f2299092c7438bf4155164c",
            "file": "src/app/core/data/types/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ModelDTO {\n  id: number;\n  name: string;\n}\n\nexport class Model {\n  id: number;\n  name: string;\n  modelVersions: string[];\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.id = props.id;\n    this.name = props.name;\n    this.modelVersions = [];\n    this.favorite = false;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModelSignatureDTO",
            "id": "interface-ModelSignatureDTO-6efbfd3ffab1a8c2cd122fbc03b88cc6",
            "file": "src/app/core/data/types/model-contract.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Input {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface Output {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface ModelSignatureDTO {\n  outputs: Output[];\n  signatureName: string;\n  inputs: Input[];\n}\n\nexport class ModelSignature {\n  signatureName: string;\n  outputs: Output[];\n  inputs: Input[];\n\n  constructor(params: ModelSignatureDTO) {\n    this.signatureName = params.signatureName;\n    this.outputs = params.outputs;\n    this.inputs = params.inputs;\n  }\n}\n",
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "outputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Output[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "signatureName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModelVariant",
            "id": "interface-ModelVariant-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "properties": [
                {
                    "name": "deploymentConfigurationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "servableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModelVariantFormData",
            "id": "interface-ModelVariantFormData-6fd08757d235cf954bf02af26010b229",
            "file": "src/app/modules/applications/components/forms/model-variant-form/model-variant-form.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport {\n  DeploymentConfig,\n  ModelVariant,\n  ModelVersion,\n} from '@app/core/data/types';\n\nexport interface ModelVariantFormData {\n  weight: number;\n  modelId?: number;\n  modelVersion: ModelVersion;\n  deploymentConfigName: string;\n}\n\n@Injectable()\nexport class ModelVariantFormService {\n  constructor(\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private readonly modelsFacade: ModelsFacade,\n    private readonly depConfigsFacade: DeploymentConfigsFacade,\n    private readonly customValidators: CustomValidatorsService,\n  ) {}\n\n  defaultModelVariantFormData(\n    modelVersions: ModelVersion[],\n    depConfig: DeploymentConfig,\n  ): ModelVariantFormData {\n    return {\n      weight: 100,\n      modelId: modelVersions[0].model.id,\n      modelVersion: modelVersions[0],\n      deploymentConfigName: depConfig.name,\n    };\n  }\n\n  modelVariantToModelVariantFormData(\n    modelVariant: ModelVariant,\n    modelVersions: ModelVersion[],\n  ): ModelVariantFormData {\n    const modelVersion = modelVersions.find(\n      mv => mv.id === modelVariant.modelVersionId,\n    );\n\n    return {\n      weight: modelVariant.weight,\n      modelId: modelVersion.model.id,\n      modelVersion: modelVersion,\n      deploymentConfigName: modelVariant.deploymentConfigurationName,\n    };\n  }\n\n  buildModelVariantFormGroup(\n    modelVariantFormData: ModelVariantFormData = this.defaultModelVariantFormData(\n      [],\n      null,\n    ),\n  ): FormGroup {\n    return new FormGroup({\n      weight: new FormControl(modelVariantFormData.weight, [\n        this.customValidators.required(),\n        this.customValidators.pattern(/^[0-9]+$/),\n      ]),\n      modelId: new FormControl(\n        modelVariantFormData.modelId,\n        this.customValidators.required(),\n      ),\n      modelVersion: new FormControl(\n        modelVariantFormData.modelVersion,\n        this.customValidators.required(),\n      ),\n      deploymentConfigName: new FormControl(\n        modelVariantFormData.deploymentConfigName,\n        this.customValidators.required(),\n      ),\n    });\n  }\n\n  getDeploymentConfigs(): Observable<DeploymentConfig[]> {\n    return this.depConfigsFacade.getAll();\n  }\n}\n",
            "properties": [
                {
                    "name": "deploymentConfigName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "modelId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersion",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModelVersionDTO",
            "id": "interface-ModelVersionDTO-6951aeb1cae1ecc130e509bfbb6b9a1a",
            "file": "src/app/core/data/types/model-version.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ModelSignature, Input, Output } from './model-contract';\nimport { Image } from './image';\nimport { Runtime } from './runtime';\nimport { ModelDTO } from './model';\nimport * as _ from 'lodash';\n\nexport interface ModelVersionDTO {\n  id: number;\n  created: string;\n  finished: string;\n  modelVersion: number;\n  modelSignature: ModelSignature;\n  model: ModelDTO;\n  status: ModelVersionStatus;\n  metadata: ModelVersionMetadata;\n  applications: string[];\n  image: { sha256: string; name: string; tag: string };\n  runtime: { sha256: string; name: string; tag: string };\n  isExternal: boolean;\n}\n\nexport enum ModelVersionStatus {\n  Assembling = 'assembling',\n  Released = 'released',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport type ModelVersionMetadata = { is_metric?: boolean } & {\n  [key: string]: string;\n};\n\nexport type ModelVersionId = number;\n\nexport class ModelVersion {\n  public id: ModelVersionId;\n  public image: Image;\n  public created: string;\n  public finished: string;\n  public modelVersion: number;\n  public modelSignature: ModelSignature;\n  public runtime: Runtime;\n  public model: ModelDTO;\n  public status: ModelVersionStatus;\n  public applications: string[];\n  public metadata: ModelVersionMetadata;\n  public isExternal: boolean;\n\n  constructor(props: Partial<ModelVersion>) {\n    this.id = props.id;\n    this.image = props.image;\n    this.created = props.created;\n    this.finished = props.finished;\n    this.modelVersion = props.modelVersion;\n    this.modelSignature = props.modelSignature;\n    this.runtime = props.runtime;\n    this.model = props.model;\n    this.status = props.status;\n    this.applications = props.applications;\n    this.metadata = props.metadata;\n    this.isExternal = props.isExternal;\n  }\n\n  get contractInputs(): Input[] {\n    return this.modelSignature.inputs;\n  }\n\n  get contractOutputs(): Output[] {\n    return this.modelSignature.outputs;\n  }\n\n  isReleasedAndInternal(): boolean {\n    return this.status === ModelVersionStatus.Released && !this.isExternal;\n  }\n\n  nameWithId(): string {\n    return `${this.model.name}: ${this.modelVersion}`;\n  }\n\n  addApplication(applicationName: string): ModelVersion {\n    const newApp = _.cloneDeep<ModelVersion>(this);\n    newApp.applications = [...newApp.applications, ...applicationName];\n\n    return newApp;\n  }\n}\n",
            "properties": [
                {
                    "name": "applications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "finished",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionMetadata",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelDTO",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "modelSignature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelSignature",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionStatus",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ModelVersionServicesStatus",
            "id": "interface-ModelVersionServicesStatus-c2262d2072e9cf9d955334df27678bde",
            "file": "src/app/core/data/types/model-version-service-status.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ServiceSupported {\n  supported: boolean;\n  message: string;\n  description?: string;\n}\n\nexport interface ModelVersionServicesStatus {\n  [serviceName: string]: ServiceSupported;\n}\n\nexport interface ModelVersionServiceStatusesEntity {\n  id: number;\n  statuses: ModelVersionServicesStatus;\n}\n\nexport function createServiceSupportOnFailure(error: string): ServiceSupported {\n  const is501Error = /501/i.test(error);\n  if (is501Error) {\n    return { supported: false, message: 'Closed for OSS' };\n  } else {\n    const errMsg = error || 'Something went wrong';\n    return { supported: false, message: errMsg };\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-c2262d2072e9cf9d955334df27678bde",
                    "args": [
                        {
                            "name": "serviceName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ServiceSupported",
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "ModelVersionServiceStatusesEntity",
            "id": "interface-ModelVersionServiceStatusesEntity-c2262d2072e9cf9d955334df27678bde",
            "file": "src/app/core/data/types/model-version-service-status.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ServiceSupported {\n  supported: boolean;\n  message: string;\n  description?: string;\n}\n\nexport interface ModelVersionServicesStatus {\n  [serviceName: string]: ServiceSupported;\n}\n\nexport interface ModelVersionServiceStatusesEntity {\n  id: number;\n  statuses: ModelVersionServicesStatus;\n}\n\nexport function createServiceSupportOnFailure(error: string): ServiceSupported {\n  const is501Error = /501/i.test(error);\n  if (is501Error) {\n    return { supported: false, message: 'Closed for OSS' };\n  } else {\n    const errMsg = error || 'Something went wrong';\n    return { supported: false, message: errMsg };\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "statuses",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionServicesStatus",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Output",
            "id": "interface-Output-6efbfd3ffab1a8c2cd122fbc03b88cc6",
            "file": "src/app/core/data/types/model-contract.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Input {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface Output {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface ModelSignatureDTO {\n  outputs: Output[];\n  signatureName: string;\n  inputs: Input[];\n}\n\nexport class ModelSignature {\n  signatureName: string;\n  outputs: Output[];\n  inputs: Input[];\n\n  constructor(params: ModelSignatureDTO) {\n    this.signatureName = params.signatureName;\n    this.outputs = params.outputs;\n    this.inputs = params.inputs;\n  }\n}\n",
            "properties": [
                {
                    "name": "dtype",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PlotBand",
            "id": "interface-PlotBand-835deefe34a0b7b9c929aad4cf30f56d",
            "file": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { CreatePlotBand, PlotBandData } from './createPlotBand.service';\nimport { ChartConfig } from '@app/modules/monitoring/models';\nimport { MonitoringPageService } from '@app/modules/monitoring/containers/monitoring-page/monitoring-page.service';\nimport { initializeChartOptions } from '@app/modules/monitoring/components/checks/check-chart_v2/initializeChartOptions';\n\nexport interface PlotBand {\n  from: number;\n  to: number;\n}\n\nconst noData = require('highcharts/modules/no-data-to-display');\nnoData(Highcharts);\n\n@Component({\n  selector: 'hs-check-chart-v2',\n  templateUrl: './check-chart_v2.component.html',\n  styleUrls: ['./check-chart_v2.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckChartComponentV2 implements OnChanges {\n  name: string = '';\n  threshold: number;\n  data: number[];\n  cfg: ChartConfig;\n  series: ChartConfig['series'];\n\n  @Input() set config(cfg: ChartConfig) {\n    this.cfg = cfg;\n\n    this.name = cfg.name;\n    this.threshold = cfg.threshold;\n    this.series = cfg.series;\n  }\n\n  Highcharts: typeof Highcharts = Highcharts;\n\n  updateFormInput: boolean = true;\n\n  constructor(\n    public createPlotBand: CreatePlotBand,\n    public monitoringPageService: MonitoringPageService,\n  ) {}\n\n  chartOptions = {\n    title: {},\n    tooltip: {},\n    series: [\n      {\n        name: 'test',\n        data: [],\n        type: 'spline',\n      },\n    ],\n    credits: {\n      enabled: false,\n    },\n    lang: {},\n    noData: {},\n    xAxis: {\n      plotBands: [],\n    },\n    yAxis: {\n      title: {\n        text: undefined,\n      },\n      plotLines: [],\n    },\n    plotOptions: {\n      spline: {\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        marker: {\n          enabled: false,\n        },\n      },\n      series: {\n        cursor: 'pointer',\n        point: {\n          events: {},\n        },\n      },\n    },\n  };\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.config.firstChange) {\n      this.chartOptions = initializeChartOptions(changes.config);\n    }\n\n    if (\n      changes.config.currentValue &&\n      changes.config.currentValue.series.length !== 0\n    ) {\n      this.updateData(changes.config.currentValue);\n      this.addPlotLine(changes.config.currentValue);\n      this.addPlotBand(changes.config.currentValue);\n    }\n  }\n\n  updateData(cfg: ChartConfig) {\n    let self = this;\n\n    this.chartOptions = {\n      tooltip: {\n        headerFormat: undefined,\n        pointFormat: `<span style=\"color: #4098d7; font-weight: bold\">\n           ${cfg.series[0].name}</span>: <b>{point.y}</b>`,\n        crosshairs: {\n          color: 'lightgrey',\n        },\n      },\n      title: {\n        text: `${cfg.name}`,\n      },\n      series: [\n        {\n          name: `${cfg.series[0].name}`,\n          data: cfg.series[0].data,\n          type: 'spline',\n        },\n      ],\n      credits: {\n        enabled: false,\n      },\n      lang: {\n        noData: 'no data available',\n      },\n      noData: {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '14px',\n          color: '#bcccdc',\n        },\n      },\n      xAxis: {\n        plotBands: [],\n      },\n      yAxis: {\n        title: {\n          text: undefined,\n        },\n        plotLines: [],\n      },\n      plotOptions: {\n        spline: {\n          lineWidth: 2,\n          states: {\n            hover: {\n              lineWidth: 2,\n            },\n          },\n          marker: {\n            enabled: false,\n          },\n        },\n        series: {\n          cursor: 'pointer',\n          point: {\n            events: {\n              click: function () {\n                self.monitoringPageService.showCheckDetails(null, this.x);\n              },\n            },\n          },\n        },\n      },\n    };\n  }\n\n  addPlotLine(cfg: ChartConfig) {\n    this.chartOptions.yAxis.plotLines = [\n      {\n        color: '#cf1124',\n        value: cfg.threshold,\n        width: 2,\n        dashStyle: 'Dash',\n      },\n    ];\n  }\n\n  addPlotBand(cfg: ChartConfig) {\n    const pbd: PlotBandData = {\n      data: cfg.series[0].data,\n      threshold: cfg.threshold,\n    };\n\n    const result = this.createPlotBand.create(pbd);\n    let plotBands = [];\n    let fromArr = result.map(item => item.from);\n    let toArr = result.map(item => item.to);\n    let i = 0;\n    while (i < toArr.length) {\n      plotBands.push({\n        color: '#ff9b9b',\n        width: 2,\n        from: fromArr[i],\n        to: toArr[i],\n      });\n      i++;\n    }\n    this.chartOptions.xAxis.plotBands = plotBands;\n  }\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PlotBandData",
            "id": "interface-PlotBandData-913134044eaa59f7b41bf05386e938c8",
            "file": "src/app/modules/monitoring/components/checks/check-chart_v2/createPlotBand.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PlotBand } from './check-chart_v2.component';\n\nexport interface PlotBandData {\n  threshold: number;\n  data: number[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CreatePlotBand {\n  create({ data, threshold }: PlotBandData): Array<PlotBand> {\n    let currentPlotBand: PlotBand = null;\n    let i = 0;\n    let result: Array<PlotBand> = [];\n    for (i; i <= data.length; i++) {\n      if (data[i] > threshold) {\n        currentPlotBand\n          ? (currentPlotBand.to = i)\n          : (currentPlotBand = { from: i, to: i });\n      } else {\n        if (currentPlotBand) {\n          result.push(currentPlotBand);\n          currentPlotBand = null;\n        }\n      }\n    }\n    return result;\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Pod",
            "id": "interface-Pod-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "properties": [
                {
                    "name": "affinity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "nodeSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "tolerations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Toleration>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Point",
            "id": "interface-Point-fae6827bca12fdaa61b86cf771594a1f",
            "file": "src/app/modules/monitoring/models/ChartConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ninterface Point {\n  x: number;\n  y: number;\n}\ninterface Series {\n  name: string;\n  data: number[];\n  color: string;\n}\nexport interface ChartConfig {\n  size: {\n    width?: number;\n    height?: number;\n    margins?: {\n      bottom?: number;\n      left?: number;\n      right?: number;\n      top?: number;\n    };\n  };\n  plotBands?: Array<{ from: number; to: number }>;\n  name: string;\n  data?: {\n    [metricName: string]: {\n      color?: string;\n      x: number[];\n      y: number[];\n      threshold?: number;\n    };\n  };\n  series: Series[];\n  area?: boolean;\n  threshold?: number;\n}\n\n@Injectable()\nexport class ChartConfigBuilder {\n  constructor() {}\n}\n",
            "properties": [
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Profile",
            "id": "interface-Profile-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 109
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "RawCheck",
            "id": "interface-RawCheck-91196f4ba6eec9dd3ffcc5e7d388e616",
            "file": "src/app/modules/monitoring/models/Check.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import * as _ from 'lodash';\nimport { BareCheck } from './BareCheck';\n\nexport type CheckId = string;\nexport interface MetricCheck {\n  check: boolean;\n  description: string;\n  threshold: number;\n  value: number;\n  metricSpecId: string;\n}\nexport interface RawCheck {\n  operator?: string;\n  check: boolean;\n  description: string;\n  threshold: number;\n  value: number;\n  metricSpecId: string;\n}\n\nexport class Check {\n  id: CheckId;\n  error: string | null;\n  latency: number;\n  overallScore: number;\n  metricChecks: { [metricName: string]: MetricCheck };\n  rawChecks: {\n    overall: RawCheck[];\n  };\n  modelVersionId: number;\n  modelVersion: number;\n  modelName: string;\n  inputsOutputs: { [IOkey: string]: any };\n  timestamp: number;\n\n  constructor(params: BareCheck) {\n    this.id = params._id;\n    this.error = params._hs_error;\n    this.latency = params._hs_latency;\n    this.overallScore = params._hs_overall_score;\n    this.metricChecks = params._hs_metric_checks || {};\n    this.rawChecks = params._hs_raw_checks || { overall: [] };\n    this.modelVersionId = params._hs_model_version_id;\n    this.modelName = params._hs_model_name;\n    this.modelVersion = params._hs_model_incremental_version;\n    this.timestamp = params._hs_timestamp;\n    this.inputsOutputs = this.getInputsOutputs(params);\n  }\n\n  isFailed(): boolean {\n    return this.overallScore < 1;\n  }\n\n  hasMetricChecks(): boolean {\n    return Object.keys(this.metricChecks).length > 0;\n  }\n\n  private getInputsOutputs(bareCheck: BareCheck) {\n    const res = Object.create(null);\n\n    for (const fieldName in bareCheck) {\n      if (bareCheck.hasOwnProperty(fieldName) && !fieldName.startsWith('_')) {\n        res[fieldName] = bareCheck[fieldName];\n      }\n    }\n\n    return res;\n  }\n\n  getMetricsScore(): number {\n    if (this.hasMetricChecks()) {\n      const metricChecksArray = Object.values(this.metricChecks);\n      const count = metricChecksArray.length;\n\n      const successChecksCount = metricChecksArray.filter(({ check }) => check)\n        .length;\n\n      return successChecksCount / count;\n    }\n    return 0;\n  }\n\n  getRawScore(): number {\n    const rawChecksArray = _.flatten(Object.values(this.rawChecks));\n    const count = rawChecksArray.length;\n    const successChecksCount = rawChecksArray.filter(({ check }) => check)\n      .length;\n\n    return successChecksCount / count;\n  }\n}\n",
            "properties": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "metricSpecId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "operator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ReqstoreEntry",
            "id": "interface-ReqstoreEntry-8a6f49f5fc6df4f9fad9be5100b2f901",
            "file": "src/app/modules/root-cause/models/reqstore-entry.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ReqstoreEntry {\n  uid: string;\n  ts: string;\n  request: any;\n  response: any;\n}\n\nexport interface ReqstoreLog {\n  [timestamp: string]: ReqstoreEntry[];\n}\n",
            "properties": [
                {
                    "name": "request",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "uid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ReqstoreLog",
            "id": "interface-ReqstoreLog-8a6f49f5fc6df4f9fad9be5100b2f901",
            "file": "src/app/modules/root-cause/models/reqstore-entry.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ReqstoreEntry {\n  uid: string;\n  ts: string;\n  request: any;\n  response: any;\n}\n\nexport interface ReqstoreLog {\n  [timestamp: string]: ReqstoreEntry[];\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-8a6f49f5fc6df4f9fad9be5100b2f901",
                    "args": [
                        {
                            "name": "timestamp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ReqstoreEntry[]",
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "RequestsSummaryInfo",
            "id": "interface-RequestsSummaryInfo-2e59691edd7e2c3b7fd94ab93e439495",
            "file": "src/app/modules/monitoring/models/CheckCollection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Check, MetricCheck } from './Check';\nimport { MetricCheckAggregation } from './MetricCheckAggregation';\n\nexport interface RequestsSummaryInfo {\n  count: number;\n  failed: number;\n  success: number;\n}\n\nexport class CheckCollection {\n  private readonly checks: Check[];\n  constructor(checks: Check[]) {\n    this.checks = checks || [];\n  }\n\n  getChecks(): Check[] {\n    return this.checks;\n  }\n\n  getLatency(): number[] {\n    const getLatencyField = (check: Check) => check.latency;\n    return this.checks.map(getLatencyField);\n  }\n\n  getErrorChecks(): Array<string | []> {\n    const getErrorField = (check: Check) => check.error;\n    return this.checks.map(getErrorField) || [];\n  }\n\n  getSummaryInformation(): RequestsSummaryInfo {\n    const checks = this.checks;\n    const count = checks.length;\n    const success = checks.reduce((acc, check) => {\n      if (check.overallScore === 1) {\n        acc = acc + 1;\n      }\n      return acc;\n    }, 0);\n    return {\n      count,\n      success,\n      failed: count - success,\n    };\n  }\n\n  getTimestampRange(): { from: number; to: number } {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n\n    return {\n      from: this.getFirstElement().timestamp,\n      to: this.getLastElement().timestamp,\n    };\n  }\n\n  getFirstElement(): Check {\n    return this.checks[0];\n  }\n\n  getLastElement(): Check {\n    return this.checks[this.checks.length - 1];\n  }\n\n  isEmpty(): boolean {\n    return this.checks.length === 0;\n  }\n\n  getMetricsChecks(): Map<string, MetricCheckAggregation> {\n    const metricChecks = new Map<string, MetricCheckAggregation>();\n\n    if (this.isEmpty()) return metricChecks;\n\n    const fElem = this.getFirstElement();\n\n    function create(\n      name: string,\n      metricCheck: MetricCheck\n    ): MetricCheckAggregation {\n      return {\n        metricName: name,\n        values: [metricCheck.value],\n        threshold: metricCheck.threshold,\n        checks: [metricCheck.check],\n        modelVer: fElem.modelVersion,\n        modelName: fElem.modelName,\n        modelVerId: fElem.modelVersionId,\n      };\n    }\n\n    function update(\n      current: MetricCheckAggregation,\n      add: MetricCheck\n    ): MetricCheckAggregation {\n      return {\n        ...current,\n        values: [...current.values, add.value],\n        threshold: add.threshold,\n        checks: [...current.checks, add.check],\n      };\n    }\n\n    return this.getChecks().reduce((acc, check) => {\n      const metrics = Object.entries(check.metricChecks);\n\n      metrics.forEach(([metricName, metricCheck]) => {\n        if (metricChecks.has(metricName)) {\n          const currentFoo = metricChecks.get(metricName);\n\n          metricChecks.set(metricName, update(currentFoo, metricCheck));\n        } else {\n          metricChecks.set(metricName, create(metricName, metricCheck));\n        }\n      });\n\n      return metricChecks;\n    }, metricChecks);\n  }\n}\n",
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "failed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-8162096c682273fd153ec2e5b0d2d4f3",
            "file": "src/app/core/store/states/router.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Params, RouterStateSnapshot } from '@angular/router';\nimport { RouterStateSerializer } from '@ngrx/router-store';\nimport { Injectable } from '@angular/core';\n\nexport interface RouterStateUrl {\n  url: string;\n  params: Params;\n  queryParams: Params;\n}\n\n@Injectable()\nexport class CustomRouterStateSerializer\n  implements RouterStateSerializer<RouterStateUrl>\n{\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n    let params = {};\n\n    while (route.firstChild) {\n      params = Object.assign(params, route.params);\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { queryParams },\n    } = routerState;\n\n    params = Object.assign(params, route.params);\n    return { url, params, queryParams };\n  }\n}\n",
            "properties": [
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ScatterPlotData",
            "id": "interface-ScatterPlotData-d4e1e823d6c3cba41818cf9318541a68",
            "file": "src/app/modules/visualization/models/scatter-plot-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ScatterPlotPoint {\n  x: number;\n  y: number;\n  color?: string;\n  translate?: string;\n  opacity?: number;\n}\nexport interface ScatterPlotData {\n  trainingPoints: ScatterPlotPoint[];\n  points: ScatterPlotPoint[];\n  visiblePoints?: ScatterPlotPoint[];\n  opaquePoints?: ScatterPlotPoint[];\n  minX: number | string;\n  maxX: number | string;\n  minY: number | string;\n  maxY: number | string;\n}\n",
            "properties": [
                {
                    "name": "maxX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "maxY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "minX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "minY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "opaquePoints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScatterPlotPoint[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "points",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScatterPlotPoint[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "trainingPoints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScatterPlotPoint[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "visiblePoints",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScatterPlotPoint[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ScatterPlotPoint",
            "id": "interface-ScatterPlotPoint-d4e1e823d6c3cba41818cf9318541a68",
            "file": "src/app/modules/visualization/models/scatter-plot-data.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ScatterPlotPoint {\n  x: number;\n  y: number;\n  color?: string;\n  translate?: string;\n  opacity?: number;\n}\nexport interface ScatterPlotData {\n  trainingPoints: ScatterPlotPoint[];\n  points: ScatterPlotPoint[];\n  visiblePoints?: ScatterPlotPoint[];\n  opaquePoints?: ScatterPlotPoint[];\n  minX: number | string;\n  maxX: number | string;\n  minY: number | string;\n  maxY: number | string;\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "opacity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "translate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Series",
            "id": "interface-Series-fae6827bca12fdaa61b86cf771594a1f",
            "file": "src/app/modules/monitoring/models/ChartConfig.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ninterface Point {\n  x: number;\n  y: number;\n}\ninterface Series {\n  name: string;\n  data: number[];\n  color: string;\n}\nexport interface ChartConfig {\n  size: {\n    width?: number;\n    height?: number;\n    margins?: {\n      bottom?: number;\n      left?: number;\n      right?: number;\n      top?: number;\n    };\n  };\n  plotBands?: Array<{ from: number; to: number }>;\n  name: string;\n  data?: {\n    [metricName: string]: {\n      color?: string;\n      x: number[];\n      y: number[];\n      threshold?: number;\n    };\n  };\n  series: Series[];\n  area?: boolean;\n  threshold?: number;\n}\n\n@Injectable()\nexport class ChartConfigBuilder {\n  constructor() {}\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ServiceSupported",
            "id": "interface-ServiceSupported-c2262d2072e9cf9d955334df27678bde",
            "file": "src/app/core/data/types/model-version-service-status.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ServiceSupported {\n  supported: boolean;\n  message: string;\n  description?: string;\n}\n\nexport interface ModelVersionServicesStatus {\n  [serviceName: string]: ServiceSupported;\n}\n\nexport interface ModelVersionServiceStatusesEntity {\n  id: number;\n  statuses: ModelVersionServicesStatus;\n}\n\nexport function createServiceSupportOnFailure(error: string): ServiceSupported {\n  const is501Error = /501/i.test(error);\n  if (is501Error) {\n    return { supported: false, message: 'Closed for OSS' };\n  } else {\n    const errMsg = error || 'Something went wrong';\n    return { supported: false, message: errMsg };\n  }\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "supported",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Shape",
            "id": "interface-Shape-4977b5e0b98eeabac5fcd31cff22989c",
            "file": "src/app/core/data/types/signature.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "interface Dim {\n  size: number;\n  name: string;\n}\n\nexport interface Shape {\n  dims: Dim[];\n  unknownRank?: boolean;\n}\nexport interface Field {\n  profile: string;\n  dtype?: string;\n  name?: string;\n  shape?: Shape;\n  subfields?: Field[];\n}\n\nexport class Signature {\n  public signatureName: string;\n  public inputs: Field[];\n  public outputs: Field[];\n\n  constructor(props: any = {}) {\n    this.signatureName = props.signatureName;\n    this.inputs = props.inputs;\n    this.outputs = props.outputs;\n  }\n}\n",
            "properties": [
                {
                    "name": "dims",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dim[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "unknownRank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Stage",
            "id": "interface-Stage-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "properties": [
                {
                    "name": "modelVariants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVariant[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "signature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "StageFormData",
            "id": "interface-StageFormData-1ebb95fd8547ab16ba3b79ceea84b7c1",
            "file": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  AbstractControl,\n} from '@angular/forms';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport {\n  Application,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport {\n  ModelVariantFormData,\n  ModelVariantFormService,\n} from '../model-variant-form/model-variant-form.service';\n\nexport interface StageFormData {\n  modelVariants: ModelVariantFormData[];\n}\n\ninterface ExecutionGraphFormData {\n  stages: StageFormData[];\n}\n\nexport interface FormData {\n  name?: string;\n  executionGraph: ExecutionGraphFormData;\n}\n\n@Injectable()\nexport class ApplicationFormService {\n  private form: FormGroup;\n  public modelVersions: ModelVersion[];\n  public depConfig: DeploymentConfig;\n\n  constructor(\n    private fb: FormBuilder,\n    private modelVariantFormService: ModelVariantFormService,\n    private customValidators: CustomValidatorsService,\n  ) {}\n\n  public initForm(\n    application: Application,\n    modelVersions: ModelVersion[] = [],\n    depConfig: DeploymentConfig,\n  ): FormGroup {\n    let data: FormData;\n\n    this.modelVersions = modelVersions;\n    this.depConfig = depConfig;\n\n    if (application) {\n      data = this.applicationToFormData(application, modelVersions);\n    } else {\n      data = this.defaultFormData();\n    }\n    this.form = this.fb.group({\n      applicationName: this.fb.control(data.name, [\n        this.customValidators.required(),\n        this.customValidators.uniqNameValidation(data.name),\n        this.customValidators.applicationNameformat(),\n        this.customValidators.lengthValidation(128),\n      ]),\n      kafkaStreaming: this.fb.array([]),\n      stages: this.fb.array(this.getStagesArray(data.executionGraph.stages)),\n    });\n\n    return this.form;\n  }\n\n  public applicationToFormData(\n    application: Application,\n    modelVersions: ModelVersion[],\n  ): FormData {\n    const stages = application.executionGraph.stages.map(stage => {\n      const modelVariants: ModelVariantFormData[] = stage.modelVariants.map(\n        mv =>\n          this.modelVariantFormService.modelVariantToModelVariantFormData(\n            mv,\n            modelVersions,\n          ),\n        this.modelVariantFormService,\n      );\n      return { ...stage, modelVariants };\n    });\n\n    return {\n      name: application.name,\n      executionGraph: {\n        stages,\n      },\n    };\n  }\n\n  public get stages(): FormArray {\n    return this.form.get('stages') as FormArray;\n  }\n\n  public addStageControl(stage = this.defaultStageData()): void {\n    this.stages.push(this.buildStageGroup(stage));\n  }\n\n  public addModelVariantToStage(stageControl: AbstractControl): void {\n    const modelVariants = stageControl.get('modelVariants') as FormArray;\n    modelVariants.push(\n      this.modelVariantFormService.buildModelVariantFormGroup(\n        this.defaultModelVariantData(),\n      ),\n    );\n  }\n\n  private buildStageGroup(stage): FormGroup {\n    const modelVariants = stage.modelVariants.map(\n      (modelVariant: ModelVariantFormData) => {\n        return this.modelVariantFormService.buildModelVariantFormGroup(\n          modelVariant,\n        );\n      },\n    );\n\n    return this.fb.group({\n      modelVariants: this.fb.array(\n        modelVariants,\n        this.customValidators.weightValidation(),\n      ),\n    });\n  }\n\n  private getStagesArray(stages: any[] = []): FormGroup[] {\n    return stages.map(stage => this.buildStageGroup(stage));\n  }\n\n  private defaultStageData(): StageFormData {\n    return {\n      modelVariants: [\n        this.modelVariantFormService.defaultModelVariantFormData(\n          this.modelVersions,\n          this.depConfig,\n        ),\n      ],\n    };\n  }\n\n  private defaultModelVariantData(): ModelVariantFormData {\n    return this.modelVariantFormService.defaultModelVariantFormData(\n      this.modelVersions,\n      this.depConfig,\n    );\n  }\n\n  private defaultFormData(): FormData {\n    return {\n      name: '',\n      executionGraph: {\n        stages: [this.defaultStageData()],\n      },\n    };\n  }\n}\n",
            "properties": [
                {
                    "name": "modelVariants",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVariantFormData[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Stat",
            "id": "interface-Stat-001690e7d9649fcd58c38b1797376882",
            "file": "src/app/modules/stat/models/stat.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FeatureReportHistogram {\n  bins: Array<number | string>;\n  deployment: number[];\n  training: number[];\n}\n\nexport interface BivariateReport {\n  drifted: boolean;\n  feature_1: string;\n  feature_2: string;\n  production_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n  training_heatmap: {\n    density: number[][];\n    x: string[];\n    x_axis_name: string;\n    y: string[];\n    y_axis_name: string;\n  };\n}\n\nexport interface FeatureReport {\n  'drift-probability': number;\n  histogram: FeatureReportHistogram;\n  statistics: {\n    [statisticName: string]: {\n      change_probability?: number;\n      deployment: number | string | string[] | number[];\n      training: number | string | string[] | number[];\n      message: string;\n      has_changed: boolean;\n    };\n  };\n  bivariate_reports?: BivariateReport[];\n}\n\nexport interface Stat {\n  overall_probability_drift: number;\n  per_feature_report: {\n    [featureName: string]: FeatureReport;\n  };\n  warnings: {\n    final_decision: string;\n    report: Array<{ drift_probability_per_feature: number; message: string }>;\n  };\n}\n",
            "properties": [
                {
                    "name": "overall_probability_drift",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "per_feature_report",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "warnings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-91ff77c0e9dfede06fba483458c968c8",
            "file": "src/app/core/store/reducers/model-version.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  EntityState,\n  EntityAdapter,\n  createEntityAdapter,\n  Update,\n} from '@ngrx/entity';\nimport { createReducer, on, Action } from '@ngrx/store';\nimport { ModelVersion } from '../../data/types';\n\nimport { DeleteSuccess as DeleteApplicationSuccess } from '../actions/applications.actions';\nimport {\n  GetModelVersions,\n  GetModelVersionsSuccess,\n  AddModelVersionSuccess,\n  GetModelVersionsFail,\n  DeleteModelVersionSuccess,\n  UpdateModelVersions,\n  UpsertModelVersion,\n} from '../actions/model-versions.actions';\n\nexport interface State extends EntityState<ModelVersion> {\n  loading: boolean;\n  loaded: boolean;\n}\n\nconst adapter: EntityAdapter<ModelVersion> = createEntityAdapter<ModelVersion>({\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n});\n\nexport const initialState: State = adapter.getInitialState({\n  loading: false,\n  loaded: false,\n});\n\nconst modelVersionReducer = createReducer(\n  initialState,\n  on(GetModelVersions, state => ({ ...state, loading: true })),\n  on(GetModelVersionsSuccess, (state, { payload }) =>\n    adapter.addMany(payload, { ...state, loaded: true, loading: false }),\n  ),\n  on(GetModelVersionsFail, state => ({\n    ...state,\n    loaded: false,\n    loading: true,\n  })),\n  on(AddModelVersionSuccess, (state, { modelVersion }) =>\n    adapter.upsertOne(modelVersion, state),\n  ),\n  on(DeleteModelVersionSuccess, (state, { modelVersionId }) =>\n    adapter.removeOne(modelVersionId, state),\n  ),\n  on(UpsertModelVersion, (state, { modelVersion }) =>\n    adapter.upsertOne(modelVersion, state),\n  ),\n  on(UpdateModelVersions, (state, { payload: modelVersions }) =>\n    adapter.addMany(modelVersions, { ...state }),\n  ),\n  on(DeleteApplicationSuccess, (state, { applicationName }) => {\n    const modelVersions: ModelVersion[] = Object.values(state.entities);\n    const hasApplication =\n      (applicationName: string) =>\n      (modelVersion: ModelVersion): boolean =>\n        modelVersion.applications.includes(applicationName);\n\n    const toUpdate =\n      (applicationName: string) =>\n      (modelVersion: ModelVersion): Update<ModelVersion> => {\n        return {\n          id: modelVersion.id,\n          changes: {\n            applications: modelVersion.applications.filter(\n              _ => _ !== applicationName,\n            ),\n          },\n        };\n      };\n\n    try {\n      const mvs = modelVersions.filter(hasApplication(applicationName));\n      const updates = mvs.map(toUpdate(applicationName));\n\n      return adapter.updateMany(updates, state);\n    } catch (e) {\n      return state;\n    }\n  }),\n);\n\nexport function reducer(state: State, action: Action): State {\n  return modelVersionReducer(state, action);\n}\n\nexport const {\n  selectAll: selectAllModelVersions,\n  selectEntities: selectModelVersionsEntities,\n  selectIds: selectModelVersionsIds,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState"
        },
        {
            "name": "State",
            "id": "interface-State-6234831e1afef123ea67cf81286752f3-1",
            "file": "src/app/core/store/states/applications.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityState, createEntityAdapter } from '@ngrx/entity';\nimport { Application } from '../../data/types';\n\nexport interface State extends EntityState<Application> {\n  loading: boolean;\n  loaded: boolean;\n}\n\nexport const adapter = createEntityAdapter<Application>({\n  selectId: application => application.name,\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n});\n\nexport const initialState: State = {\n  ids: [],\n  entities: {},\n  loaded: false,\n  loading: false,\n};\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-4b6693b3c0abc1ee577cf8edc945e6a0-2",
            "file": "src/app/core/store/states/deployment-configs.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityState, createEntityAdapter } from '@ngrx/entity';\nimport { DeploymentConfig } from '../../data/types';\n\nexport interface State extends EntityState<DeploymentConfig> {\n  loading: boolean;\n  loaded: boolean;\n}\n\nexport const adapter = createEntityAdapter<DeploymentConfig>({\n  selectId: depConfig => depConfig.name,\n});\n\nexport const initialState: State = {\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n};\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "State",
            "id": "interface-State-cafe155e171f3b0abcfe9899b357883d-3",
            "file": "src/app/core/store/states/model-versions.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { ModelVersion } from '../../data/types';\n\nexport interface State extends EntityState<ModelVersion> {\n  loading: boolean;\n  loaded: boolean;\n}\n\nexport const adapter: EntityAdapter<ModelVersion> = createEntityAdapter<\n  ModelVersion\n>();\nexport const initialState: State = {\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n};\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "State-3"
        },
        {
            "name": "State",
            "id": "interface-State-a03e619ca0a46317fbe09c4d68ed9419-4",
            "file": "src/app/core/store/states/models.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\n\nimport { Model } from '../../data/types';\n\nexport interface State extends EntityState<Model> {\n  loading: boolean;\n  loaded: boolean;\n}\n\nexport const adapter: EntityAdapter<Model> = createEntityAdapter<Model>({\n  selectId: model => model.name,\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n});\nexport const initialState = {\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n};\n",
            "properties": [
                {
                    "name": "loaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "State-4"
        },
        {
            "name": "State",
            "id": "interface-State-44ce4c57a7d414fb1456164320204d07-5",
            "file": "src/app/core/store/states/servables.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EntityState } from '@ngrx/entity';\nimport { createEntityAdapter } from '@ngrx/entity';\nimport { Servable } from '../../data/types';\n\nexport interface State extends EntityState<Servable> {\n  loading: boolean;\n  error: string;\n}\n\nexport const adapter = createEntityAdapter<Servable>({\n  selectId: servable => servable.fullName,\n});\n\nexport const initialState = {\n  ids: [],\n  entities: {},\n  loading: false,\n  error: null,\n};\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 5,
            "duplicateName": "State-5"
        },
        {
            "name": "State",
            "id": "interface-State-826497d35917c1451f4f6268c82095fc-6",
            "file": "src/app/core/store/states/service-statuses.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\nimport { ModelVersionServiceStatusesEntity } from '@app/core/data/types';\n\nexport interface State extends EntityState<ModelVersionServiceStatusesEntity> {}\n\nexport const adapter: EntityAdapter<ModelVersionServiceStatusesEntity> = createEntityAdapter<\n  ModelVersionServiceStatusesEntity\n>();\n\nexport const initialState: State = {\n  ids: [],\n  entities: {},\n};\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 6,
            "duplicateName": "State-6"
        },
        {
            "name": "State",
            "id": "interface-State-a3a408030441e109be97d7affb98b07d-7",
            "file": "src/app/modules/monitoring/store/metric-charts.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\n\nimport { ModelVersion } from '@app/core/data/types';\n\ninterface State {\n  modelVersionsToCompare: ModelVersion[];\n}\n\nconst initialState: State = {\n  modelVersionsToCompare: [],\n};\n\n@Injectable()\nexport class MetricChartsState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState\n  );\n  constructor() {\n    this.state$ = this.state.asObservable();\n  }\n\n  addModelVersionToCompare(modelVersions: ModelVersion[]): void {\n    const currentState = this.state.getValue();\n    this.state.next({ ...currentState, modelVersionsToCompare: modelVersions });\n  }\n\n  getModelVersionsToCompare(): Observable<ModelVersion[]> {\n    return this.state$.pipe(\n      map(({ modelVersionsToCompare }) => modelVersionsToCompare),\n      distinctUntilChanged()\n    );\n  }\n}\n",
            "properties": [
                {
                    "name": "modelVersionsToCompare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersion[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 7,
            "duplicateName": "State-7"
        },
        {
            "name": "State",
            "id": "interface-State-d0e52ac496945fdca206ecfb4b4a00b0-8",
            "file": "src/app/modules/root-cause/store/state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { shareReplay, map, distinctUntilChanged } from 'rxjs/operators';\nimport { Explanation } from '../models';\n\ninterface State {\n  explanation: Explanation | null;\n}\n\nconst initialState: State = {\n  explanation: null,\n};\n\n@Injectable()\nexport class RootCauseState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState,\n  );\n\n  constructor() {\n    this.state$ = this.state.asObservable().pipe(shareReplay(1));\n  }\n\n  getExplanation(): Observable<Explanation | null> {\n    return this.state$.pipe(\n      map(({ explanation }) => explanation),\n      distinctUntilChanged(),\n    );\n  }\n\n  setExplanation(explanation: Explanation) {\n    const state = this.state.getValue();\n    this.state.next({ ...state, explanation });\n  }\n}\n",
            "properties": [
                {
                    "name": "explanation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Explanation | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 8,
            "duplicateName": "State-8"
        },
        {
            "name": "State",
            "id": "interface-State-4619e1bbce8fa56aa5e039468c165f06-9",
            "file": "src/app/modules/stat/store/stat.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { Stat } from '../models';\n\ninterface State {\n  loading: boolean;\n  error: string | null;\n  stat: Stat | null;\n}\n\nconst initialState: State = {\n  loading: false,\n  error: null,\n  stat: null,\n};\n\n@Injectable()\nexport class StatState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState\n  );\n\n  constructor() {\n    this.state$ = this.state.asObservable();\n  }\n\n  getStat(): Observable<Stat | null> {\n    return this.state$.pipe(\n      map(({ stat }) => stat),\n      distinctUntilChanged()\n    );\n  }\n\n  isLoading(): Observable<boolean> {\n    return this.state$.pipe(\n      map(({ loading }) => loading),\n      distinctUntilChanged()\n    );\n  }\n\n  getError(): Observable<string | null> {\n    return this.state$.pipe(\n      map(({ error }) => error),\n      distinctUntilChanged()\n    );\n  }\n\n  initLoading(): void {\n    this.state.next({ ...initialState, loading: true });\n  }\n\n  setError(error: string | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, error, loading: false });\n  }\n\n  setStat(stat: Stat): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, stat, loading: false });\n  }\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "stat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Stat | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 9,
            "duplicateName": "State-9"
        },
        {
            "name": "State",
            "id": "interface-State-14d8a7c8b0fef2214524bfdad03a7f75-10",
            "file": "src/app/modules/visualization/store/visualization.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Colorizer } from '../models';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { pluck } from '@app/utils';\nimport { VisualizationResponse, ETaskState } from '../models';\nimport { VisualizationParams } from '../models/visualization-params';\nimport { ColorBy } from '../visualization.facade';\n\nexport type VisualizationTaskId = string;\nexport interface State {\n  taskId: VisualizationTaskId | null;\n  result: VisualizationResponse | null;\n  error: string | null;\n  status: ETaskState;\n  colorBy: ColorBy;\n  colorizers: Colorizer[];\n  selectedColorizer: Colorizer;\n  selectedPointIndex: number;\n  data: number[];\n  top100: number[][];\n  counterfactuals: number[][];\n  visualizationMetrics: { [name: string]: string };\n  requestsIds: string[];\n  message: string | null;\n  params: VisualizationParams;\n}\n\nconst initialState: State = {\n  taskId: null,\n  result: null,\n  error: null,\n  status: ETaskState.unknown,\n  colorBy: 'class_label',\n  colorizers: [],\n  selectedColorizer: undefined,\n  data: [],\n  selectedPointIndex: undefined,\n  top100: [],\n  counterfactuals: [],\n  visualizationMetrics: undefined,\n  requestsIds: [],\n  message: null,\n  params: null,\n};\n\n@Injectable()\nexport class VisualizationState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState\n  );\n\n  constructor() {\n    this.state$ = this.state.asObservable().pipe(shareReplay(1));\n  }\n\n  public getStatus() {\n    return this.state$.pipe(pluck('status'));\n  }\n\n  public getTaskId() {\n    return this.state$.pipe(pluck('taskId'));\n  }\n\n  public getResult() {\n    return this.state$.pipe(pluck('result'));\n  }\n\n  public getError() {\n    return this.state$.pipe(pluck('error'));\n  }\n\n  public getColorizers() {\n    return this.state$.pipe(pluck('colorizers'));\n  }\n\n  public getSelectedColorizer() {\n    return this.state$.pipe(pluck('selectedColorizer'));\n  }\n\n  public getSelectedPointIndex() {\n    return this.state$.pipe(pluck('selectedPointIndex'));\n  }\n\n  public getTop100() {\n    return this.state$.pipe(pluck('top100'));\n  }\n\n  public getCounterfactuals() {\n    return this.state$.pipe(pluck('counterfactuals'));\n  }\n\n  public getVisualizationMetrics() {\n    return this.state$.pipe(pluck('visualizationMetrics'));\n  }\n\n  public getRequestsIds() {\n    return this.state$.pipe(pluck('requestsIds'));\n  }\n\n  public getMessage() {\n    return this.state$.pipe(pluck('message'));\n  }\n\n  public getParams(): Observable<VisualizationParams> {\n    return this.state$.pipe(pluck('params'));\n  }\n\n  public setError(error: string | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, error, status: ETaskState.failed });\n  }\n\n  public setTaskId(taskId: string | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, taskId });\n  }\n\n  public setColorizer(selectedColorizer: Colorizer): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, selectedColorizer });\n  }\n\n  public selectIndex(index: number | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, selectedPointIndex: index });\n  }\n\n  public setParams(params: VisualizationParams) {\n    const state = this.state.getValue();\n    this.state.next({ ...state, params });\n  }\n\n  public setResult(params: {\n    status: ETaskState;\n    result: VisualizationResponse;\n    colorizers: Colorizer[];\n    top100: number[][];\n    counterfactuals: number[][];\n    visualizationMetrics: any;\n    requestsIds: string[];\n    message: string;\n  }): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, ...params });\n  }\n}\n",
            "properties": [
                {
                    "name": "colorBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorBy",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "colorizers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Colorizer[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "counterfactuals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisualizationParams",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "requestsIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisualizationResponse | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedColorizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Colorizer",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedPointIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ETaskState",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisualizationTaskId | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "top100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "visualizationMetrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 10,
            "duplicateName": "State-10"
        },
        {
            "name": "State",
            "id": "interface-State-f420ccac79d66b59dcbbe82f6592950f-11",
            "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on, Action } from '@ngrx/store';\n\nimport { AggregationsList, Aggregation } from '../../models';\nimport {\n  ClearMonitoringPage,\n  LoadAggregationsSuccess,\n  LoadAggregationsFailed,\n  SelectAggregation,\n  LoadOlderAggregation,\n  SetFilterDateRange,\n  ClearFilterDateRange,\n  LoadNewerAggregation,\n} from '../actions';\n\nexport interface State {\n  minDate: number;\n  maxDate: number;\n  filterDateRange: { from: number; to: number };\n  aggregationList: AggregationsList;\n  selectedAggregation: Aggregation;\n  error: string;\n  offset: number;\n}\n\nconst initialState: State = {\n  minDate: undefined,\n  maxDate: undefined,\n  filterDateRange: undefined,\n  aggregationList: undefined,\n  selectedAggregation: undefined,\n  error: undefined,\n  offset: 0,\n};\n\nconst aggregationReducer = createReducer(\n  initialState,\n  on(LoadAggregationsSuccess, (state, props) => {\n    return {\n      ...state,\n      aggregationList: props.aggregationList,\n      error: undefined,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n    };\n  }),\n  on(LoadAggregationsFailed, (state, props) => {\n    return { ...state, aggregationList: undefined, error: props.error };\n  }),\n  on(SelectAggregation, (state, props) => {\n    return { ...state, selectedAggregation: props.aggregation };\n  }),\n  on(LoadOlderAggregation, state => ({ ...state, offset: state.offset + 1 })),\n  on(LoadNewerAggregation, state => ({ ...state, offset: state.offset - 1 })),\n  on(SetFilterDateRange, (state, { from, to }) => {\n    return { ...state, filterDateRange: { from, to } };\n  }),\n  on(ClearFilterDateRange, state => ({ ...state, filterDateRange: undefined })),\n  on(ClearMonitoringPage, () => initialState)\n);\n\nexport function reducer(state: State = initialState, action: Action): State {\n  return aggregationReducer(state, action);\n}\n\n// TODO: immer\n// export const reducer = produce((draft: State, action: AggregationActions) => {\n//   switch (action.type) {\n//     case AggregationActionsTypes.LoadAggregationSuccess:\n//       draft.aggregationList = action.payload.aggregationList;\n//       return;\n//     case AggregationActionsTypes.LoadAggregationFailed:\n//       draft.error = action.payload.error;\n//       return;\n//     case AggregationActionsTypes.LoadNewerAggregation:\n//       draft.offset = draft.offset - 1;\n//       return;\n//     case AggregationActionsTypes.LoadOlderAggregation:\n//       draft.offset = draft.offset + 1;\n//       return;\n//     case AggregationActionsTypes.ChangeDateTimeFrom:\n//       draft.dateTimeFrom = action.payload.datetime;\n//       return;\n//     case AggregationActionsTypes.ChangeDateTimeTo:\n//       draft.dateTimeTo = action.payload.datetime;\n//       return;\n//   }\n// }, initialState);\n",
            "properties": [
                {
                    "name": "aggregationList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AggregationsList",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "filterDateRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedAggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Aggregation",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 11,
            "duplicateName": "State-11"
        },
        {
            "name": "State",
            "id": "interface-State-dc59fcc1fd7d1dc88cd58b67a913de81-12",
            "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\n\nimport { CheckCollection } from '../../models';\nimport { ClearMonitoringPage, LoadChecks } from '../actions';\nimport { LoadChecksSuccess } from '../actions/checks.actions';\n\nexport interface State {\n  checks: CheckCollection;\n  loading: boolean;\n}\n\nconst initialState: State = {\n  checks: undefined,\n  loading: false,\n};\n\nconst checksReducer = createReducer(\n  initialState,\n  on(LoadChecks, state => {\n    return { ...state, loading: true };\n  }),\n  on(LoadChecksSuccess, (state, props) => {\n    return { ...state, checks: props.checks, loading: false };\n  }),\n  on(ClearMonitoringPage, () => initialState)\n);\n\nexport function reducer(state: State = initialState, action: Action) {\n  return checksReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckCollection",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 12,
            "duplicateName": "State-12"
        },
        {
            "name": "State",
            "id": "interface-State-bc86058780943271850b3895693e038a-13",
            "file": "src/app/modules/monitoring/store/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n} from '@ngrx/store';\n\nimport * as fromAggregation from './aggregation.reducer';\nimport * as fromChecks from './checks.reducer';\nimport * as fromMetrics from './metrics.reducer';\nimport * as fromServiceStatus from './service-status.reducer';\nimport * as fromUi from './ui.reducer';\n\nexport interface State {\n  aggregation: fromAggregation.State;\n  metrics: fromMetrics.State;\n  serviceStatus: fromServiceStatus.State;\n  checks: fromChecks.State;\n  ui: fromUi.State;\n}\n\nexport const reducer: ActionReducerMap<State> = {\n  aggregation: fromAggregation.reducer,\n  metrics: fromMetrics.reducer,\n  serviceStatus: fromServiceStatus.reducer,\n  checks: fromChecks.reducer,\n  ui: fromUi.reducer,\n};\n\nexport const getMonitoringState = createFeatureSelector<State>('monitoring');\n\nexport const getMonitoringServiceStatusState = createSelector(\n  getMonitoringState,\n  state => state.serviceStatus\n);\n\nexport const getMetricsState = createSelector(\n  getMonitoringState,\n  state => state.metrics\n);\n\nexport const getAggregationState = createSelector(\n  getMonitoringState,\n  state => state.aggregation\n);\n\nexport const getChecksState = createSelector(\n  getMonitoringState,\n  state => state.checks\n);\n\nexport const getUiState = createSelector(getMonitoringState, state => state.ui);\n",
            "properties": [
                {
                    "name": "aggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromAggregation.State",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromChecks.State",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromMetrics.State",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "serviceStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromServiceStatus.State",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "ui",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromUi.State",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 13,
            "duplicateName": "State-13"
        },
        {
            "name": "State",
            "id": "interface-State-fccc71c5573fd00bf5b7627b8f8a6c8b-14",
            "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ClearMonitoringPage } from '../actions';\nimport { EntityState, createEntityAdapter, EntityAdapter } from '@ngrx/entity';\nimport { createReducer, on, Action } from '@ngrx/store';\nimport { MetricSpecification } from '@app/core/data/types';\nimport {\n  AddMetricSuccess,\n  LoadMetricsSuccess,\n  LoadMetricsFail,\n  DeleteMetricSuccess,\n} from '../actions/metrics.actions';\n\nexport interface State extends EntityState<MetricSpecification> {\n  error: string;\n}\n\nexport const adapter: EntityAdapter<MetricSpecification> = createEntityAdapter<\n  MetricSpecification\n>();\n\nconst initialState: State = adapter.getInitialState({\n  error: null,\n});\n\nconst metricsReducer = createReducer(\n  initialState,\n  on(AddMetricSuccess, (state, action) =>\n    adapter.addOne(action.payload, state)\n  ),\n  on(LoadMetricsSuccess, (state, action) =>\n    adapter.upsertMany(action.payload, state)\n  ),\n  on(LoadMetricsFail, (state, action) => ({\n    ...state,\n    error: action.error,\n    loading: false,\n  })),\n  on(DeleteMetricSuccess, (state, action) =>\n    adapter.removeOne(action.payload.id, state)\n  ),\n  on(ClearMonitoringPage, () => initialState)\n);\n\nexport function reducer(state = initialState, action: Action): State {\n  return metricsReducer(state, action);\n}\n\nexport const {\n  selectAll: selectAllMetrics,\n  selectEntities: selectAllMetricsEntities,\n  selectIds: selectAllMetricsIds,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 14,
            "duplicateName": "State-14"
        },
        {
            "name": "State",
            "id": "interface-State-a0f734e91267030ecd53ffa0d130eea6-15",
            "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MonitoringServiceStatus } from '../../models';\n\nimport {\n  GetServiceStatusAction,\n  SetStatusToFailedAction,\n  SetStatusToAvailableAction,\n  SetStatusToClosedForOSSAction,\n} from '../actions';\nimport { createReducer, on, Action } from '@ngrx/store';\n\nexport interface State {\n  status: MonitoringServiceStatus;\n  error: string;\n}\n\nconst initialState: State = {\n  status: MonitoringServiceStatus.UNKNOWN,\n  error: null,\n};\n\nconst monitoringStatusReducer = createReducer(\n  initialState,\n  on(GetServiceStatusAction, state => ({\n    ...state,\n    error: null,\n    status: MonitoringServiceStatus.UNKNOWN,\n  })),\n  on(SetStatusToFailedAction, (state, action) => ({\n    ...state,\n    status: MonitoringServiceStatus.FAILED,\n    error: action.error,\n  })),\n  on(SetStatusToAvailableAction, state => ({\n    ...state,\n    status: MonitoringServiceStatus.AVAILABLE,\n  })),\n  on(SetStatusToClosedForOSSAction, state => ({\n    ...state,\n    status: MonitoringServiceStatus.CLOSED_FOR_OSS,\n  }))\n);\n\nexport function reducer(state: State, action: Action): State {\n  return monitoringStatusReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonitoringServiceStatus",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 15,
            "duplicateName": "State-15"
        },
        {
            "name": "State",
            "id": "interface-State-dc01741876b790c923af68269af24cef-16",
            "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport { ShowCheckDetails, CloseCheckDetails } from '../actions';\n\nexport interface State {\n  checksIdToShow: string;\n}\n\nconst initialState: State = {\n  checksIdToShow: undefined,\n};\n\nconst uiReducer = createReducer(\n  initialState,\n  on(ShowCheckDetails, (state, payload) => {\n    return { ...state, checksIdToShow: payload.checkId };\n  }),\n  on(CloseCheckDetails, state => ({ ...state, checksIdToShow: undefined }))\n);\n\nexport function reducer(state: State = initialState, action: Action): State {\n  return uiReducer(state, action);\n}\n",
            "properties": [
                {
                    "name": "checksIdToShow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 16,
            "duplicateName": "State-16"
        },
        {
            "name": "SystemKeys",
            "id": "interface-SystemKeys-9a238aeebfd68003b1da7d161e4707da",
            "file": "src/app/modules/monitoring/models/BareCheck.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SystemKeys {\n  _id: string;\n  _hs_prediction_score: number;\n  _hs_raw_checks: {\n    overall: any[];\n  };\n  _hs_metric_checks: {\n    [metricName: string]: any;\n  };\n  _hs_latency: number;\n  _hs_error: string;\n  _hs_score: number;\n  _hs_overall_score: number;\n  _hs_model_version_id: number;\n  _hs_model_name: string;\n  _hs_model_incremental_version: number;\n  _hs_timestamp: number;\n}\n\nexport type BareCheck = SystemKeys & { [IOkey: string]: any };\n",
            "properties": [
                {
                    "name": "_hs_error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "_hs_latency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "_hs_metric_checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "_hs_model_incremental_version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "_hs_model_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "_hs_model_version_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "_hs_overall_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "_hs_prediction_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "_hs_raw_checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "_hs_score",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "_hs_timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TaskInformation",
            "id": "interface-TaskInformation-d070da583a56a86010f067f1abcb9bf1",
            "file": "src/app/modules/visualization/models/visualization.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmpOperators } from '@app/modules/monitoring/models';\nimport { ColoringType } from '../models';\n\nexport type LinkRegime = 'all' | 'nearest' | 'counterfactuals';\n\nexport interface ClassLabel {\n  classes?: Array<number | string>;\n  coloring_type: ColoringType;\n  data: number[];\n}\n\nexport interface Metric {\n  coloring_type: ColoringType;\n  scores: number[];\n  operation: CmpOperators;\n  threshold: number;\n}\n\nexport enum ETaskState {\n  success = 'SUCCESS',\n  pending = 'PENDING',\n  failed = 'FAILED',\n  unknown = 'UNKNOWN',\n}\n\nexport interface TaskInformation {\n  task_id: string;\n  description?: string;\n  message?: string;\n  state: ETaskState;\n  result: VisualizationResponse;\n}\n\nexport interface VisualizationResponse {\n  data_shape: [number, number];\n  data: number[][];\n  training_data_shape?: [number, number];\n  training_data?: number[][];\n  output_info: {\n    [outputName: string]: {\n      coloring_type: ColoringType;\n      data: number[];\n      classes?: Array<string | number>;\n      dtype: number;\n    };\n  };\n  metrics: {\n    [name: string]: Metric;\n  };\n  requests_ids: string[];\n  top_N: number[][];\n  counterfactuals: number[][];\n  visualization_metrics: {\n    [name: string]: string;\n  };\n  parametres?: any;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisualizationResponse",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ETaskState",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "task_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Toleration",
            "id": "interface-Toleration-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "properties": [
                {
                    "name": "effect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "operator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tolerationSeconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Tooltip",
            "id": "interface-Tooltip-2baf868d8cce693baa8a19fba9376b28",
            "file": "src/app/modules/monitoring/components/checks/check-chart/check-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  EventEmitter,\n} from '@angular/core';\nimport { ChartConfig } from '../../../models';\nimport { MonitoringPageService } from '../../../containers/monitoring-page/monitoring-page.service';\nimport {\n  format,\n  ticks,\n  extent,\n  mouse,\n  scaleLinear,\n  ScaleLinear,\n  select,\n  axisLeft,\n  axisBottom,\n} from 'd3';\nimport { BehaviorSubject } from 'rxjs';\n\ninterface Tooltip {\n  x: number;\n  y: number;\n  values: Array<{\n    name: string;\n    color: string;\n    value: number;\n  }>;\n}\n\n@Component({\n  selector: 'hs-check-chart',\n  templateUrl: './check-chart.component.html',\n  styleUrls: ['./check-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckChartComponent implements OnInit {\n  @ViewChild('trackableRect', { read: ElementRef, static: true })\n  rectRef: ElementRef;\n  @ViewChild('containerEl', { read: ElementRef, static: true })\n  containerEl: ElementRef;\n  @ViewChild('axisGroup', { read: ElementRef, static: true })\n  axisGroup: ElementRef;\n  @ViewChild('supportiveLines', { read: ElementRef, static: true })\n  supportiveLinesGroup: ElementRef;\n\n  // config vars\n  name: string = '';\n  threshold: number;\n  margins: ChartConfig['size']['margins'];\n\n  // chart vars\n  chartWidth: number;\n  chartHeight: number;\n  viewHeight: number;\n  viewWidth: number;\n  scaleX: ScaleLinear<any, any>;\n  scaleY: ScaleLinear<any, any>;\n  series: ChartConfig['series'];\n  visibleSeries: ChartConfig['series'];\n  plotBands: any[];\n  activePoint: { x: number; y: number } | null;\n  activeCircles: Array<{ x: number; y: number; color: string }>;\n  tooltip: Tooltip | null;\n\n  // translates\n  dataTranslate: string;\n  xAxisTranslate: string;\n  thresholdTranslate: string;\n\n  noData: boolean = false;\n  clipUrl: string;\n  cfg: ChartConfig;\n  _config: BehaviorSubject<ChartConfig> = new BehaviorSubject(null);\n\n  private mouseIn: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  private excludedSeries: string[] = [];\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private monitoringPageService: MonitoringPageService\n  ) {}\n\n  @Input() set config(cfg: ChartConfig) {\n    this.cfg = cfg;\n\n    this.name = cfg.name;\n    this.clipUrl = `url(#${this.name}-clip-url)`;\n    this.threshold = cfg.threshold;\n    this.chartWidth =\n      cfg.size.width || this.containerEl.nativeElement.offsetWidth;\n\n    this.chartHeight = cfg.size.height || 180;\n    this.margins = cfg.size.margins;\n\n    const { top, bottom, left, right } = cfg.size.margins;\n    const viewWidth = this.chartWidth - left - right;\n\n    this.viewWidth = viewWidth > 0 ? viewWidth : 0;\n\n    this.viewHeight = this.chartHeight - top - bottom;\n\n    this.dataTranslate = `translate(${left}, ${top})`;\n    this.xAxisTranslate = `translate(${left}, ${top + this.viewHeight})`;\n    this.thresholdTranslate = `translate(0, ${top})`;\n    this.plotBands = cfg.plotBands;\n\n    this.render();\n  }\n\n  ngOnInit() {\n    select(this.rectRef.nativeElement).on('mouseout', () => this.onMouseOut());\n    select(this.rectRef.nativeElement).on('mousemove', () =>\n      this.onMouseMove()\n    );\n    select(this.rectRef.nativeElement).on('click', () => this.onClick());\n  }\n\n  toggleExclude(seriesName: string): void {\n    if (this.excludedSeries.includes(seriesName)) {\n      this.removeFromExcludeList(seriesName);\n    } else {\n      this.addToExcludeList(seriesName);\n    }\n    this.render();\n  }\n\n  private render() {\n    const cfg = this.cfg;\n\n    this.series = cfg.series;\n\n    this.visibleSeries = cfg.series.filter(\n      series => !this.excludedSeries.includes(series.name)\n    );\n\n    this.noData = this.visibleSeries.length === 0;\n\n    if (!this.noData) {\n      const allValues = cfg.series.reduce(\n        (acc, cur) => [...acc, ...cur.data],\n        []\n      );\n      const countPoints = cfg.series[0].data.length;\n      const [min, max] = extent(allValues);\n\n      this.scaleY = scaleLinear()\n        .domain([max, min])\n        .range([0, this.viewHeight])\n        .nice();\n\n      this.scaleX = scaleLinear()\n        .domain([1, countPoints])\n        .range([0, this.viewWidth]);\n\n      this.drawAxis({ xScale: this.scaleX, yScale: this.scaleY });\n      this.drawSupportiveLines({ xScale: this.scaleX, yScale: this.scaleY });\n    }\n\n    this.cdr.detectChanges();\n  }\n\n  private addToExcludeList(seriesName: string): void {\n    this.excludedSeries = [...this.excludedSeries, seriesName];\n  }\n\n  private removeFromExcludeList(seriesName: string): void {\n    this.excludedSeries = this.excludedSeries.filter(\n      name => name !== seriesName\n    );\n  }\n\n  onClick() {\n    const [xCoordinate] = mouse(this.rectRef.nativeElement);\n    const newXPosition = this.scaleX(\n      Math.round(this.scaleX.invert(xCoordinate))\n    );\n    const index = Math.floor(this.scaleX.invert(newXPosition));\n    this.monitoringPageService.showCheckDetails(null, index);\n  }\n\n  private onMouseMove(): void {\n    if (this.noData) {\n      if (this.activePoint) {\n        this.activePoint = null;\n        this.activeCircles = [];\n        this.tooltip = null;\n        this.cdr.detectChanges();\n      }\n    } else {\n      const [xCoordinate] = mouse(this.rectRef.nativeElement);\n      const xValue = Math.round(this.scaleX.invert(xCoordinate));\n\n      const { left, top } = this.margins;\n      const newXPosition = this.scaleX(xValue);\n\n      if (this.activePoint == null || newXPosition !== this.activePoint.x) {\n        this.activePoint = { x: newXPosition + left, y: 0 };\n\n        const index = Math.floor(this.scaleX.invert(newXPosition));\n        // generate circles\n        this.activeCircles = this.series.reduce((acc, series) => {\n          const inverted = Math.floor(this.scaleX.invert(newXPosition) - 1);\n\n          if (series.data[inverted]) {\n            acc.push({\n              x: newXPosition + left,\n              y: this.scaleY(series.data[inverted]) + top,\n              color: series.color,\n            });\n          }\n\n          return acc;\n        }, []);\n\n        // generate tooltip\n        // make shift position\n        const tXPos =\n          index === this.series[0].data.length\n            ? newXPosition - 100\n            : newXPosition;\n\n        const inverted = Math.floor(this.scaleX.invert(newXPosition) - 1);\n        const tYPos = this.scaleY(\n          this.series\n            .map(({ data }) => data[inverted])\n            .reduce((acc, cur) => acc + cur, 0) / this.series.length\n        );\n\n        this.tooltip = {\n          x: tXPos + left + 4,\n          y: tYPos + 4,\n          values: this.series.reduce((acc, series) => {\n            if (series.data[inverted] !== undefined) {\n              acc.push({\n                name: series.name,\n                color: series.color,\n                value: series.data[inverted],\n              });\n            }\n\n            return acc;\n          }, []),\n        };\n\n        this.cdr.detectChanges();\n      }\n    }\n  }\n\n  private drawAxis({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }) {\n    this.drawXAxis(xScale);\n    this.drawYAxis(yScale);\n\n    select(this.axisGroup.nativeElement).selectAll('path.domain').remove();\n    select(this.axisGroup.nativeElement)\n      .selectAll('.tick > line')\n      .attr('color', '#8392a1');\n\n    select(this.axisGroup.nativeElement)\n      .selectAll('.tick > text')\n      .attr('font-size', '11px')\n      .attr('font-weight', 'bold')\n      .attr('fill', '#486581');\n  }\n\n  private drawYAxis(yScale: ScaleLinear<number, number>): void {\n    const yAxis = axisLeft(yScale)\n      .ticks(this.viewHeight / 40)\n      .tickSize(0);\n\n    select(this.axisGroup.nativeElement).select('g.yAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr('transform', `translate(${this.margins.left}, ${this.margins.top})`)\n      .attr('class', 'yAxis')\n      .call(yAxis);\n  }\n\n  private drawXAxis(xScale: ScaleLinear<number, number>): void {\n    const xAxis = axisBottom(xScale)\n      .tickValues(this.getXTicks(xScale))\n      .tickFormat(format(',.0f'))\n      .tickSize(4);\n\n    select(this.axisGroup.nativeElement).select('g.xAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr(\n        'transform',\n        `translate(${this.margins.left}, ${this.viewHeight + 2})`\n      )\n      .attr('class', 'xAxis')\n      .call(xAxis);\n  }\n\n  private getXTicks(xScale: ScaleLinear<number, number>): number[] {\n    const [min, max] = xScale.domain();\n\n    const lessThan5 = max < 5;\n    const higherThan10 = max > 10;\n    const count = lessThan5 ? 1 : higherThan10 ? 10 : max;\n\n    return ticks(min, max, count);\n  }\n\n  private drawSupportiveLines({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }): void {\n    const groupSelection = select(this.supportiveLinesGroup.nativeElement);\n    const lineColor = 'rgb(237, 239, 243)';\n    groupSelection.selectAll('line').remove();\n\n    groupSelection\n      .selectAll('line.yLine')\n      .data(yScale.ticks(this.viewHeight / 40))\n      .join(enter =>\n        enter\n          .append('line')\n          .attr('class', 'yLine')\n          .attr('x1', this.margins.left)\n          .attr('y1', d => yScale(d) + this.margins.top)\n          .attr('x2', this.chartWidth - this.margins.right)\n          .attr('y2', d => yScale(d) + this.margins.top)\n          .style('stroke', lineColor)\n      );\n  }\n\n  private onMouseOut(): void {\n    if (!this.noData) {\n      this.activePoint = null;\n      this.activeCircles = [];\n      this.tooltip = null;\n      this.cdr.detectChanges();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "UiBuildInfo",
            "id": "interface-UiBuildInfo-ba89d72914f61cf4c28333bbbd65ee65",
            "file": "src/app/core/ui-build-info.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface UiBuildInfo {\n  version?: string;\n  gitHeadCommit?: string;\n  gitCurrentBranch?: string;\n  nodeVersion?: string;\n}\n\nconst defaultConfig: UiBuildInfo = {};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UiBuildInfoService {\n  public config: UiBuildInfo = defaultConfig;\n  constructor(private readonly http: HttpClient) {}\n\n  loadConfig() {\n    return this.http\n      .get<UiBuildInfo>(`/assets/buildinfo.json`)\n      .toPromise()\n      .then((data: any) => (this.config = data))\n      .catch((_: any) => {\n        console.warn(`Couldn't load config,using default config`);\n        return Promise.resolve();\n      });\n  }\n}\n",
            "properties": [
                {
                    "name": "gitCurrentBranch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "gitHeadCommit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "nodeVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "VisualizationParams",
            "id": "interface-VisualizationParams-26e1380a9d48501cc818604938cb978f",
            "file": "src/app/modules/visualization/models/visualization-params.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type VisualizationPropertyMetric =\n  | 'euclidean'\n  | 'manhattan'\n  | 'chebyshev'\n  | 'minkowski'\n  | 'canberra'\n  | 'braycurtis'\n  | 'haversine'\n  | 'mahalanobis'\n  | 'wminkowski'\n  | 'seuclidean'\n  | 'cosine'\n  | 'correlation'\n  | 'hamming'\n  | 'jaccard'\n  | 'dice'\n  | 'russellrao'\n  | 'kulsinski'\n  | 'rogerstanimoto'\n  | 'sokalmichener'\n  | 'sokalsneath'\n  | 'yule';\n\nexport type VisualizationMetric =\n  | 'global_score'\n  | 'sammon_error'\n  | 'auc_score'\n  | 'stability_score'\n  | 'msid'\n  | 'clustering';\n\nexport interface VisualizationParams {\n  parameters: {\n    metric: VisualizationPropertyMetric;\n    min_dist: number;\n    n_components: number;\n    n_neighbours: number;\n  };\n  production_data_sample_size: number;\n  training_data_sample_size: number;\n  visualization_metrics: VisualizationMetric[];\n}\n",
            "properties": [
                {
                    "name": "parameters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "production_data_sample_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "training_data_sample_size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "visualization_metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisualizationMetric[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "VisualizationResponse",
            "id": "interface-VisualizationResponse-d070da583a56a86010f067f1abcb9bf1",
            "file": "src/app/modules/visualization/models/visualization.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CmpOperators } from '@app/modules/monitoring/models';\nimport { ColoringType } from '../models';\n\nexport type LinkRegime = 'all' | 'nearest' | 'counterfactuals';\n\nexport interface ClassLabel {\n  classes?: Array<number | string>;\n  coloring_type: ColoringType;\n  data: number[];\n}\n\nexport interface Metric {\n  coloring_type: ColoringType;\n  scores: number[];\n  operation: CmpOperators;\n  threshold: number;\n}\n\nexport enum ETaskState {\n  success = 'SUCCESS',\n  pending = 'PENDING',\n  failed = 'FAILED',\n  unknown = 'UNKNOWN',\n}\n\nexport interface TaskInformation {\n  task_id: string;\n  description?: string;\n  message?: string;\n  state: ETaskState;\n  result: VisualizationResponse;\n}\n\nexport interface VisualizationResponse {\n  data_shape: [number, number];\n  data: number[][];\n  training_data_shape?: [number, number];\n  training_data?: number[][];\n  output_info: {\n    [outputName: string]: {\n      coloring_type: ColoringType;\n      data: number[];\n      classes?: Array<string | number>;\n      dtype: number;\n    };\n  };\n  metrics: {\n    [name: string]: Metric;\n  };\n  requests_ids: string[];\n  top_N: number[][];\n  counterfactuals: number[][];\n  visualization_metrics: {\n    [name: string]: string;\n  };\n  parametres?: any;\n}\n",
            "properties": [
                {
                    "name": "counterfactuals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "data_shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "output_info",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "parametres",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "requests_ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "top_N",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "training_data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "training_data_shape",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "visualization_metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AddComparableFacade",
            "id": "injectable-AddComparableFacade-79bf6b1fb5bf513e666fc60c03b22f2e",
            "file": "src/app/modules/monitoring/components/model-versions-tags/add-comparable.facade.ts",
            "properties": [
                {
                    "name": "filteredModelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "filterString",
                    "defaultValue": "new BehaviorSubject('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "onFilterChange",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectModelVersion",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ModelVersionsTagsFacade } from './model-versions-tags.facade';\n\n@Injectable()\nexport class AddComparableFacade {\n  modelVersions$: Observable<ModelVersion[]>;\n  filteredModelVersions$: Observable<ModelVersion[]>;\n  private filterString: BehaviorSubject<string> = new BehaviorSubject('');\n  constructor(\n    private dialogService: DialogsService,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private facade: ModelVersionsTagsFacade\n  ) {\n    this.modelVersions$ = combineLatest(\n      this.modelVersionsFacade.allModelVersions(),\n      this.filterString.asObservable()\n    ).pipe(\n      map(([allModelVersions, filter]) => {\n        if (!filter) {\n          return allModelVersions;\n        } else {\n          return allModelVersions.filter(({ model }) =>\n            model.name.includes(filter)\n          );\n        }\n      })\n    );\n  }\n\n  onSelectModelVersion(modelVersion: ModelVersion): void {\n    this.facade.add(modelVersion);\n    this.dialogService.closeDialog();\n  }\n\n  onFilterChange(str: string = ''): void {\n    this.filterString.next(str);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ModelVersionsTagsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ModelVersionsTagsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AggregationEffects",
            "id": "injectable-AggregationEffects-e465bf73835ce19fbbf5e95d7f4b8fb4",
            "file": "src/app/modules/monitoring/store/effects/aggregation.effects.ts",
            "properties": [
                {
                    "name": "loadAggregations$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(LoadAggregations),\n      switchMap(props => {\n        return this.monitoringApi\n          .getChecksAggregation({\n            limit: props.limit,\n            modelVersionId: props.modelVersion.id,\n            offset: props.offset,\n            from: props.from,\n            to: props.to,\n          })\n          .pipe(\n            map(result => {\n              const aggregations = result.results\n                .map(\n                  aggregation =>\n                    new Aggregation(aggregation, props.modelVersion)\n                )\n                .reverse();\n\n              const { count, maxDate, minDate } = result;\n\n              return LoadAggregationsSuccess({\n                aggregationList: new AggregationsList(\n                  aggregations,\n                  count,\n                  minDate,\n                  maxDate\n                ),\n                minDate,\n                maxDate,\n              });\n            })\n          );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Aggregation, AggregationsList } from '../../models';\nimport { MonitoringService } from '../../services';\nimport { LoadAggregations, LoadAggregationsSuccess } from '../../store';\n\nimport { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable()\nexport class AggregationEffects {\n  loadAggregations$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(LoadAggregations),\n      switchMap(props => {\n        return this.monitoringApi\n          .getChecksAggregation({\n            limit: props.limit,\n            modelVersionId: props.modelVersion.id,\n            offset: props.offset,\n            from: props.from,\n            to: props.to,\n          })\n          .pipe(\n            map(result => {\n              const aggregations = result.results\n                .map(\n                  aggregation =>\n                    new Aggregation(aggregation, props.modelVersion)\n                )\n                .reverse();\n\n              const { count, maxDate, minDate } = result;\n\n              return LoadAggregationsSuccess({\n                aggregationList: new AggregationsList(\n                  aggregations,\n                  count,\n                  minDate,\n                  maxDate\n                ),\n                minDate,\n                maxDate,\n              });\n            })\n          );\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private monitoringApi: MonitoringService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AggregationPaginator",
            "id": "injectable-AggregationPaginator-f1f116ad42967a33b57a55320ecb69c0",
            "file": "src/app/modules/monitoring/services/aggregation-paginator.ts",
            "properties": [
                {
                    "name": "elementsPerColumn$",
                    "defaultValue": "new BehaviorSubject(10)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [
                {
                    "name": "canLoadNewer",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canLoadOlder",
                    "args": [
                        {
                            "name": "totalBatchesCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "showedBatchesCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "totalBatchesCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "showedBatchesCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AggregationPaginator {\n  elementsPerColumn$: BehaviorSubject<number> = new BehaviorSubject(10);\n\n  canLoadNewer(offset: number): boolean {\n    return offset !== 0;\n  }\n\n  canLoadOlder(\n    totalBatchesCount: number,\n    showedBatchesCount: number,\n    offset: number\n  ): boolean {\n    return showedBatchesCount + offset < totalBatchesCount;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "AggregationService",
            "id": "injectable-AggregationService-ee121092f441dd5513c4cfbaceb467a3",
            "file": "src/app/modules/monitoring/containers/aggregation/aggregation.service.ts",
            "properties": [
                {
                    "name": "aggregationList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AggregationsList>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canLoadNewer",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canLoadOlder",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "changeDateTimeRange",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSelectedAggregation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "clearDateTimeFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAggregationList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AggregationsList>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFilterDateRange",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMaxDate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Date>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMinDate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Date>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedAggregation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Aggregation>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadNewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadOlder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAggregation",
                    "args": [
                        {
                            "name": "agg",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "agg",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { combineLatest, Observable, Subject } from 'rxjs';\nimport {\n  map,\n  tap,\n  shareReplay,\n  takeUntil,\n  withLatestFrom,\n} from 'rxjs/operators';\n\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { neitherNullNorUndefined } from '@app/utils';\n\nimport { Aggregation, AggregationsList } from '../../models';\nimport { AggregationPaginator } from '../../services/aggregation-paginator';\nimport { MonitoringFacade } from '../../store/monitoring.facade';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AggregationService implements OnDestroy {\n  private readonly aggregationList$: Observable<AggregationsList>;\n  private destroy$: Subject<any> = new Subject<any>();\n\n  constructor(\n    private monitoringStore: MonitoringFacade,\n    private paginator: AggregationPaginator,\n  ) {\n    this.aggregationList$ = this.monitoringStore\n      .getAggregationList()\n      .pipe(shareReplay(1));\n\n    this.checkSelectedAggregation();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  getSelectedAggregation(): Observable<Aggregation> {\n    return this.monitoringStore.getSelectedAggregation();\n  }\n\n  getAggregationList(): Observable<AggregationsList> {\n    return this.aggregationList$;\n  }\n\n  canLoadNewer(): Observable<boolean> {\n    return this.monitoringStore\n      .getOffset()\n      .pipe(map(offset => this.paginator.canLoadNewer(offset)));\n  }\n\n  canLoadOlder(): Observable<boolean> {\n    return combineLatest([\n      this.getAggregationList(),\n      this.monitoringStore.getOffset(),\n    ]).pipe(\n      map(([aggregations, offset]) => {\n        if (aggregations) {\n          return this.paginator.canLoadOlder(\n            aggregations.totalBatchesCount,\n            aggregations.showedBatchesCount,\n            offset,\n          );\n        } else {\n          return false;\n        }\n      }),\n    );\n  }\n\n  loadOlder(): void {\n    this.monitoringStore.loadOlderAggregation();\n  }\n\n  loadNewer(): void {\n    this.monitoringStore.loadNewerAggregation();\n  }\n\n  private checkSelectedAggregation() {\n    this.getAggregationList()\n      .pipe(\n        neitherNullNorUndefined,\n        withLatestFrom(this.getSelectedAggregation()),\n        tap(([aggregations, currentSelectedAggregation]) => {\n          if (aggregations.totalBatchesCount === 0) {\n            this.selectAggregation(undefined);\n            return;\n          }\n          if (!aggregations.has(currentSelectedAggregation)) {\n            this.selectAggregation(aggregations.lastAggregation);\n            return;\n          }\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe();\n  }\n\n  selectAggregation(agg: Aggregation): void {\n    this.monitoringStore.selectAggregation(agg);\n  }\n\n  getMinDate(): Observable<Date> {\n    return this.monitoringStore\n      .getMinDate()\n      .pipe(map(seconds => seconds && new Date(seconds * 1000)));\n  }\n\n  getMaxDate(): Observable<Date> {\n    return this.monitoringStore\n      .getMaxDate()\n      .pipe(map(seconds => seconds && new Date(seconds * 1000)));\n  }\n\n  getFilterDateRange(): Observable<{ from: Date; to: Date }> {\n    return this.monitoringStore.getFilterDateRange().pipe(\n      map(range => {\n        return (\n          range && {\n            from: new Date(range.from * 1000),\n            to: new Date(range.to * 1000),\n          }\n        );\n      }),\n    );\n  }\n\n  changeDateTimeRange({ from, to }: { from: Date; to: Date }): void {\n    this.monitoringStore.changeDateTimeRange({\n      from: from.getTime(),\n      to: to.getTime(),\n    });\n  }\n\n  clearDateTimeFilter(): void {\n    this.monitoringStore.clearFilterDateRange();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "monitoringStore",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "paginator",
                        "type": "AggregationPaginator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "monitoringStore",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "paginator",
                        "type": "AggregationPaginator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApplicationBuilder",
            "id": "injectable-ApplicationBuilder-77ee7e72b54c1dc85e31764f510445b9",
            "file": "src/app/core/data/builders/application.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Application",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toApplication",
                    "args": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Application",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Application, Signature } from '../types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApplicationBuilder {\n  public build(props): Application {\n    return this.toApplication(props);\n  }\n\n  private toApplication(props): Application {\n    let id: number;\n    let signature: Signature;\n\n    if (props.id) {\n      id = props.id;\n    }\n\n    if (props.signature) {\n      signature = props.signature;\n    }\n\n    const application = new Application({\n      id,\n      signature,\n      name: props.name,\n      executionGraph: props.executionGraph || [],\n      kafkaStreaming: props.kafkaStreaming || [],\n      status: props.status && props.status.toLowerCase(),\n      message: props.message,\n      favorite: false,\n    });\n\n    return application;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ApplicationFormService",
            "id": "injectable-ApplicationFormService-1ebb95fd8547ab16ba3b79ceea84b7c1",
            "file": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
            "properties": [
                {
                    "name": "depConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeploymentConfig",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "modelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersion[]",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addModelVariantToStage",
                    "args": [
                        {
                            "name": "stageControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "stageControl",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addStageControl",
                    "args": [
                        {
                            "name": "stage",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.defaultStageData()"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.defaultStageData()",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applicationToFormData",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormData",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildStageGroup",
                    "args": [
                        {
                            "name": "stage",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultFormData",
                    "args": [],
                    "optional": false,
                    "returnType": "FormData",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "defaultModelVariantData",
                    "args": [],
                    "optional": false,
                    "returnType": "ModelVariantFormData",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "defaultStageData",
                    "args": [],
                    "optional": false,
                    "returnType": "StageFormData",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getStagesArray",
                    "args": [
                        {
                            "name": "stages",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup[]",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "stages",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  AbstractControl,\n} from '@angular/forms';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport {\n  Application,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport {\n  ModelVariantFormData,\n  ModelVariantFormService,\n} from '../model-variant-form/model-variant-form.service';\n\nexport interface StageFormData {\n  modelVariants: ModelVariantFormData[];\n}\n\ninterface ExecutionGraphFormData {\n  stages: StageFormData[];\n}\n\nexport interface FormData {\n  name?: string;\n  executionGraph: ExecutionGraphFormData;\n}\n\n@Injectable()\nexport class ApplicationFormService {\n  private form: FormGroup;\n  public modelVersions: ModelVersion[];\n  public depConfig: DeploymentConfig;\n\n  constructor(\n    private fb: FormBuilder,\n    private modelVariantFormService: ModelVariantFormService,\n    private customValidators: CustomValidatorsService,\n  ) {}\n\n  public initForm(\n    application: Application,\n    modelVersions: ModelVersion[] = [],\n    depConfig: DeploymentConfig,\n  ): FormGroup {\n    let data: FormData;\n\n    this.modelVersions = modelVersions;\n    this.depConfig = depConfig;\n\n    if (application) {\n      data = this.applicationToFormData(application, modelVersions);\n    } else {\n      data = this.defaultFormData();\n    }\n    this.form = this.fb.group({\n      applicationName: this.fb.control(data.name, [\n        this.customValidators.required(),\n        this.customValidators.uniqNameValidation(data.name),\n        this.customValidators.applicationNameformat(),\n        this.customValidators.lengthValidation(128),\n      ]),\n      kafkaStreaming: this.fb.array([]),\n      stages: this.fb.array(this.getStagesArray(data.executionGraph.stages)),\n    });\n\n    return this.form;\n  }\n\n  public applicationToFormData(\n    application: Application,\n    modelVersions: ModelVersion[],\n  ): FormData {\n    const stages = application.executionGraph.stages.map(stage => {\n      const modelVariants: ModelVariantFormData[] = stage.modelVariants.map(\n        mv =>\n          this.modelVariantFormService.modelVariantToModelVariantFormData(\n            mv,\n            modelVersions,\n          ),\n        this.modelVariantFormService,\n      );\n      return { ...stage, modelVariants };\n    });\n\n    return {\n      name: application.name,\n      executionGraph: {\n        stages,\n      },\n    };\n  }\n\n  public get stages(): FormArray {\n    return this.form.get('stages') as FormArray;\n  }\n\n  public addStageControl(stage = this.defaultStageData()): void {\n    this.stages.push(this.buildStageGroup(stage));\n  }\n\n  public addModelVariantToStage(stageControl: AbstractControl): void {\n    const modelVariants = stageControl.get('modelVariants') as FormArray;\n    modelVariants.push(\n      this.modelVariantFormService.buildModelVariantFormGroup(\n        this.defaultModelVariantData(),\n      ),\n    );\n  }\n\n  private buildStageGroup(stage): FormGroup {\n    const modelVariants = stage.modelVariants.map(\n      (modelVariant: ModelVariantFormData) => {\n        return this.modelVariantFormService.buildModelVariantFormGroup(\n          modelVariant,\n        );\n      },\n    );\n\n    return this.fb.group({\n      modelVariants: this.fb.array(\n        modelVariants,\n        this.customValidators.weightValidation(),\n      ),\n    });\n  }\n\n  private getStagesArray(stages: any[] = []): FormGroup[] {\n    return stages.map(stage => this.buildStageGroup(stage));\n  }\n\n  private defaultStageData(): StageFormData {\n    return {\n      modelVariants: [\n        this.modelVariantFormService.defaultModelVariantFormData(\n          this.modelVersions,\n          this.depConfig,\n        ),\n      ],\n    };\n  }\n\n  private defaultModelVariantData(): ModelVariantFormData {\n    return this.modelVariantFormService.defaultModelVariantFormData(\n      this.modelVersions,\n      this.depConfig,\n    );\n  }\n\n  private defaultFormData(): FormData {\n    return {\n      name: '',\n      executionGraph: {\n        stages: [this.defaultStageData()],\n      },\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVariantFormService",
                        "type": "ModelVariantFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVariantFormService",
                        "type": "ModelVariantFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "stages": {
                    "name": "stages",
                    "getSignature": {
                        "name": "stages",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 98
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ApplicationsEffects",
            "id": "injectable-ApplicationsEffects-7a8980310883f987f8057e289f928214",
            "file": "src/app/core/store/effects/applications.effects.ts",
            "properties": [
                {
                    "name": "addApplication$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(Add),\n      switchMap(({ application }) =>\n        this.applicationsService.addApplication(application).pipe(\n          map(response => {\n            this.router.navigate(['/applications', response.name]);\n\n            const app = this.applicationBuilder.build(response);\n            return AddSuccess({ payload: app });\n          }),\n          catchError(error => {\n            return of(AddFail({ error }), NotifyError(`Error: ${error}`));\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "deleteApplication$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(Delete),\n      switchMap(({ application: { name } }) =>\n        this.applicationsService.deleteApplication(name).pipe(\n          switchMap(() => {\n            this.router.navigate(['applications']);\n            return [{ type: 'NOOP' }];\n          }),\n          catchError(error => {\n            return of(\n              DeleteFail({ error }),\n              Notify({ kind: 'error', message: error }),\n            );\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "deleteFromSSE$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SseDeleteEvent),\n      withLatestFrom(this.store.pipe(select(selectApplicationIds))),\n      concatMap(([{ applicationName }, ids]) => {\n        if ((ids as string[]).includes(applicationName)) {\n          return [\n            DeleteSuccess({ applicationName }),\n            NotifyWarning(`Application: ${applicationName} has been deleted`),\n          ];\n        } else {\n          return of({ type: 'NOOP' });\n        }\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "generateInputs$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(GenerateInput),\n      withLatestFrom(this.store.select(selectSelectedApplication)),\n      switchMap(([_, { name: applicationName }]) =>\n        this.applicationsService.generateInputs(applicationName).pipe(\n          map(input => {\n            const payload = {\n              name: applicationName,\n              input: JSON.stringify(input, undefined, 2),\n            };\n            return GenerateInputSuccess({ payload });\n          }),\n          catchError(error => {\n            return of(GenerateInputFail({ error }));\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "getApplications$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(Get),\n      switchMap(() =>\n        this.applicationsService.getApplications().pipe(\n          map((result: Application[]) => {\n            const applications = result\n              .map(app => this.applicationBuilder.build(app))\n              .map(app => {\n                return {\n                  ...app,\n                  favorite: this.favoriteService.isFavorite(app.name),\n                };\n              });\n            return GetSuccess({ payload: applications });\n          }),\n          catchError(error => {\n            return of(\n              GetFail({ error }),\n              NotifyError('Failed to load applications'),\n            );\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "setInputs$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SetInput),\n      skip(1),\n      map(action => action.payload),\n      withLatestFrom(this.store.select(selectSelectedApplication)),\n      switchMap(([input, { name }]) => {\n        return of(SetInputSuccess({ payload: { name, input } }));\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "testApplication$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(Test),\n      withLatestFrom(this.store.select(selectSelectedApplication)),\n      switchMap(([_, { name, input }]) =>\n        this.applicationsService.serveService(JSON.parse(input), name).pipe(\n          map(output =>\n            TestSuccess({\n              payload: {\n                name,\n                output: JSON.stringify(output, undefined, 2),\n              },\n            }),\n          ),\n          catchError(error => of(TestFail({ payload: { name, error } }))),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 216
                },
                {
                    "name": "toggleFavorite$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ToggleFavorite),\n        tap(({ payload: { application } }) => {\n          application.favorite\n            ? this.favoriteService.remove(application.name)\n            : this.favoriteService.add(application.name);\n        }),\n      ),\n    { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 236
                },
                {
                    "name": "updateApplication$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(Update),\n      switchMap(({ application }) =>\n        this.applicationsService.updateApplication(application).pipe(\n          map(response => {\n            this.router.navigate(['/applications', response.name]);\n\n            const app = this.applicationBuilder.build(response);\n            return AddSuccess({ payload: app });\n          }),\n          catchError(error => {\n            return of(AddFail({ error }), NotifyError(`Error: ${error}`));\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "updateFromSSE$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SseUpdateEvent),\n        switchMap(({ application }) => {\n          switch (application.status) {\n            case ApplicationStatus.Ready:\n              return [\n                UpdateSuccess({ payload: application }),\n                NotifySuccess(\n                  `Application: ${application.name} is ready for serving`,\n                ),\n              ];\n            default:\n              return of(UpdateSuccess({ payload: application }));\n          }\n        }),\n      ),\n    {},\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 125
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { FavoriteService } from '@app/core/favorite.service';\n\nimport { ApplicationService } from '../../data/services/application.service';\nimport { ApplicationBuilder } from '../../data/builders/application.builder';\n\nimport {\n  Get,\n  GetSuccess,\n  GetFail,\n  Add,\n  AddSuccess,\n  AddFail,\n  Delete,\n  DeleteSuccess,\n  DeleteFail,\n  GenerateInput,\n  GenerateInputSuccess,\n  GenerateInputFail,\n  SetInputSuccess,\n  Test,\n  TestSuccess,\n  TestFail,\n  SetInput,\n  ToggleFavorite,\n  SseDeleteEvent,\n  SseUpdateEvent,\n  UpdateSuccess,\n  Update,\n} from '../actions/applications.actions';\nimport {\n  selectApplicationIds,\n  selectSelectedApplication,\n} from '../selectors/applications.selectors';\nimport { SnackbarService } from '../../snackbar.service';\n\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { Application, ApplicationStatus } from '@app/core/data/types';\nimport { of } from 'rxjs';\nimport {\n  switchMap,\n  catchError,\n  withLatestFrom,\n  skip,\n  map,\n  tap,\n  concatMap,\n} from 'rxjs/operators';\nimport {\n  Notify,\n  NotifyError,\n  NotifySuccess,\n  NotifyWarning,\n} from '../actions/notifications.actions';\n@Injectable()\nexport class ApplicationsEffects {\n  getApplications$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(Get),\n      switchMap(() =>\n        this.applicationsService.getApplications().pipe(\n          map((result: Application[]) => {\n            const applications = result\n              .map(app => this.applicationBuilder.build(app))\n              .map(app => {\n                return {\n                  ...app,\n                  favorite: this.favoriteService.isFavorite(app.name),\n                };\n              });\n            return GetSuccess({ payload: applications });\n          }),\n          catchError(error => {\n            return of(\n              GetFail({ error }),\n              NotifyError('Failed to load applications'),\n            );\n          }),\n        ),\n      ),\n    ),\n  );\n\n  addApplication$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(Add),\n      switchMap(({ application }) =>\n        this.applicationsService.addApplication(application).pipe(\n          map(response => {\n            this.router.navigate(['/applications', response.name]);\n\n            const app = this.applicationBuilder.build(response);\n            return AddSuccess({ payload: app });\n          }),\n          catchError(error => {\n            return of(AddFail({ error }), NotifyError(`Error: ${error}`));\n          }),\n        ),\n      ),\n    ),\n  );\n\n  updateApplication$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(Update),\n      switchMap(({ application }) =>\n        this.applicationsService.updateApplication(application).pipe(\n          map(response => {\n            this.router.navigate(['/applications', response.name]);\n\n            const app = this.applicationBuilder.build(response);\n            return AddSuccess({ payload: app });\n          }),\n          catchError(error => {\n            return of(AddFail({ error }), NotifyError(`Error: ${error}`));\n          }),\n        ),\n      ),\n    ),\n  );\n\n  updateFromSSE$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(SseUpdateEvent),\n        switchMap(({ application }) => {\n          switch (application.status) {\n            case ApplicationStatus.Ready:\n              return [\n                UpdateSuccess({ payload: application }),\n                NotifySuccess(\n                  `Application: ${application.name} is ready for serving`,\n                ),\n              ];\n            default:\n              return of(UpdateSuccess({ payload: application }));\n          }\n        }),\n      ),\n    {},\n  );\n\n  deleteApplication$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(Delete),\n      switchMap(({ application: { name } }) =>\n        this.applicationsService.deleteApplication(name).pipe(\n          switchMap(() => {\n            this.router.navigate(['applications']);\n            return [{ type: 'NOOP' }];\n          }),\n          catchError(error => {\n            return of(\n              DeleteFail({ error }),\n              Notify({ kind: 'error', message: error }),\n            );\n          }),\n        ),\n      ),\n    ),\n  );\n\n  deleteFromSSE$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SseDeleteEvent),\n      withLatestFrom(this.store.pipe(select(selectApplicationIds))),\n      concatMap(([{ applicationName }, ids]) => {\n        if ((ids as string[]).includes(applicationName)) {\n          return [\n            DeleteSuccess({ applicationName }),\n            NotifyWarning(`Application: ${applicationName} has been deleted`),\n          ];\n        } else {\n          return of({ type: 'NOOP' });\n        }\n      }),\n    ),\n  );\n\n  generateInputs$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(GenerateInput),\n      withLatestFrom(this.store.select(selectSelectedApplication)),\n      switchMap(([_, { name: applicationName }]) =>\n        this.applicationsService.generateInputs(applicationName).pipe(\n          map(input => {\n            const payload = {\n              name: applicationName,\n              input: JSON.stringify(input, undefined, 2),\n            };\n            return GenerateInputSuccess({ payload });\n          }),\n          catchError(error => {\n            return of(GenerateInputFail({ error }));\n          }),\n        ),\n      ),\n    ),\n  );\n\n  setInputs$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SetInput),\n      skip(1),\n      map(action => action.payload),\n      withLatestFrom(this.store.select(selectSelectedApplication)),\n      switchMap(([input, { name }]) => {\n        return of(SetInputSuccess({ payload: { name, input } }));\n      }),\n    ),\n  );\n\n  testApplication$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(Test),\n      withLatestFrom(this.store.select(selectSelectedApplication)),\n      switchMap(([_, { name, input }]) =>\n        this.applicationsService.serveService(JSON.parse(input), name).pipe(\n          map(output =>\n            TestSuccess({\n              payload: {\n                name,\n                output: JSON.stringify(output, undefined, 2),\n              },\n            }),\n          ),\n          catchError(error => of(TestFail({ payload: { name, error } }))),\n        ),\n      ),\n    ),\n  );\n\n  toggleFavorite$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ToggleFavorite),\n        tap(({ payload: { application } }) => {\n          application.favorite\n            ? this.favoriteService.remove(application.name)\n            : this.favoriteService.add(application.name);\n        }),\n      ),\n    { dispatch: false },\n  );\n\n  constructor(\n    private actions$: Actions,\n    private router: Router,\n    private applicationsService: ApplicationService,\n    private applicationBuilder: ApplicationBuilder,\n    private snackbar: SnackbarService,\n    private store: Store<HydroServingState>,\n    private favoriteService: FavoriteService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationsService",
                        "type": "ApplicationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationBuilder",
                        "type": "ApplicationBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 247,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationsService",
                        "type": "ApplicationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationBuilder",
                        "type": "ApplicationBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApplicationService",
            "id": "injectable-ApplicationService-c65f1f28045fa1b539f0d4e734a24304",
            "file": "src/app/core/data/services/application.service.ts",
            "properties": [
                {
                    "name": "baseApiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteApplication",
                    "args": [
                        {
                            "name": "appName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "appName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateInputs",
                    "args": [
                        {
                            "name": "appName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "appName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApplications",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Application[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "serveService",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "applicationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "applicationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "ApplicationUpdateRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Application>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "ApplicationUpdateRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\nimport { Application, ApplicationUpdateRequest } from '../types/application';\nimport { HttpService } from './http.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApplicationService {\n  private readonly baseApiUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseApiUrl = `${environment.apiUrl}/application`;\n  }\n\n  public getApplications(): Observable<Application[]> {\n    return this.http.get<Application[]>(this.baseApiUrl);\n  }\n\n  public updateApplication(\n    application: ApplicationUpdateRequest,\n  ): Observable<Application> {\n    return this.http\n      .put(this.baseApiUrl, application)\n      .pipe(map((res: Response): any => res));\n  }\n\n  public addApplication(application: Application) {\n    return this.http\n      .post(this.baseApiUrl, application)\n      .pipe(map((res: Response): any => res));\n  }\n\n  public generateInputs(appName: string) {\n    return this.http.get<string>(\n      `${this.baseApiUrl}/generateInputs/${appName}`,\n    );\n  }\n\n  public deleteApplication(appName: string) {\n    return this.http.delete(`${this.baseApiUrl}/${appName}`);\n  }\n\n  public serveService(data, applicationName: string): Observable<any> {\n    const url = `gateway/application/${applicationName}`;\n    return this.http.post(url, data).pipe(map((res: Response): any => res));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ApplicationsFacade",
            "id": "injectable-ApplicationsFacade-b3beee73b2c840d57b7e646858dd8c1b",
            "file": "src/app/core/facades/applications.facade.ts",
            "properties": [
                {
                    "name": "favoriteApplications$",
                    "defaultValue": "this.filteredApplications().pipe(\n    map(apps => apps.filter(app => app.favorite)),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "filterString",
                    "defaultValue": "new BehaviorSubject('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "filterString$",
                    "defaultValue": "this.filterString.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "nonFavoriteApplications$",
                    "defaultValue": "this.filteredApplications().pipe(\n    map(apps => apps.filter(app => !app.favorite)),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "methods": [
                {
                    "name": "addApplication",
                    "args": [
                        {
                            "name": "data",
                            "type": "ApplicationCreatingRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ApplicationCreatingRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "allApplications",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Application[]>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "areApplicationsLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createApplicationFromModelVersion",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "ApplicationUpdateRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "ApplicationUpdateRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filteredApplications",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Application[]>",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilter",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectApplicationsByNames",
                    "args": [
                        {
                            "name": "names",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Application[]>",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "names",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedApplication",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Application>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFavorite",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "visibleApplications",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Application[]>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { first, map } from 'rxjs/operators';\n\nimport {\n  ApplicationUpdateRequest,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport { Application, ApplicationCreatingRequest } from '@app/core/data/types';\nimport { NameGenerator } from '@app/core/name-generator';\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport {\n  selectSelectedApplication,\n  selectAllApplications,\n  selectApplicationsByNames,\n  selectApplicationLoaded,\n} from '@app/core/store/selectors/applications.selectors';\n\nimport {\n  Add,\n  Delete,\n  Get,\n  Update,\n  ToggleFavorite,\n} from '../store/actions/applications.actions';\n\n@Injectable({ providedIn: 'root' })\nexport class ApplicationsFacade {\n  private readonly filterString = new BehaviorSubject('');\n  private readonly filterString$ = this.filterString.asObservable();\n\n  constructor(\n    private readonly store: Store<HydroServingState>,\n    private nameGenerator: NameGenerator,\n  ) {}\n\n  loadAll(): void {\n    this.store.dispatch(Get());\n  }\n\n  deleteApplication(application: Application): void {\n    this.store.dispatch(Delete({ application }));\n  }\n\n  createApplicationFromModelVersion(\n    modelVersion: ModelVersion,\n    depConfig: DeploymentConfig,\n  ) {\n    this.allApplications()\n      .pipe(first())\n      .subscribe(applications => {\n        const isNotUniqName = str =>\n          applications.some(({ name }) => name === str);\n        const generateUniqName = () =>\n          `${modelVersion.model.name}_v${\n            modelVersion.modelVersion\n          }_${this.nameGenerator.generate()}`;\n\n        let uniqName = generateUniqName();\n\n        while (isNotUniqName(uniqName)) {\n          uniqName = generateUniqName();\n        }\n\n        this.addApplication({\n          name: uniqName,\n          kafkaStreaming: [],\n          executionGraph: {\n            stages: [\n              {\n                modelVariants: [\n                  { modelVersionId: modelVersion.id, weight: 100 },\n                ],\n              },\n            ],\n          },\n          deploymentConfiguration: depConfig,\n        });\n      });\n  }\n\n  public addApplication(data: ApplicationCreatingRequest) {\n    this.store.dispatch(Add({ application: new Application(data) }));\n  }\n\n  allApplications(): Observable<Application[]> {\n    return this.store.pipe(select(selectAllApplications));\n  }\n\n  filteredApplications(): Observable<Application[]> {\n    return combineLatest([this.filterString$, this.allApplications()]).pipe(\n      map(([filter, applications]) => {\n        return filter\n          ? applications.filter(({ name }) => name.includes(filter))\n          : applications;\n      }),\n    );\n  }\n\n  nonFavoriteApplications$ = this.filteredApplications().pipe(\n    map(apps => apps.filter(app => !app.favorite)),\n  );\n\n  favoriteApplications$ = this.filteredApplications().pipe(\n    map(apps => apps.filter(app => app.favorite)),\n  );\n\n  visibleApplications(): Observable<Application[]> {\n    return combineLatest(\n      this.favoriteApplications$,\n      this.nonFavoriteApplications$,\n    ).pipe(map(([favorites, nonFavorites]) => [...favorites, ...nonFavorites]));\n  }\n\n  selectedApplication(): Observable<Application> {\n    return this.store.pipe(select(selectSelectedApplication));\n  }\n\n  selectApplicationsByNames(names: string[]): Observable<Application[]> {\n    return this.store.pipe(select(selectApplicationsByNames(names)));\n  }\n\n  editApplication(application: ApplicationUpdateRequest): void {\n    this.store.dispatch(Update({ application }));\n  }\n\n  toggleFavorite(application: Application) {\n    this.store.dispatch(ToggleFavorite({ payload: { application } }));\n  }\n\n  areApplicationsLoaded() {\n    return this.store.pipe(select(selectApplicationLoaded));\n  }\n\n  onFilter(str: string): void {\n    this.filterString.next(str);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nameGenerator",
                        "type": "NameGenerator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nameGenerator",
                        "type": "NameGenerator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BatchDetailsService",
            "id": "injectable-BatchDetailsService-80af564be1d288183e2eddbddd36f6d9",
            "file": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
            "properties": [
                {
                    "name": "checks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Check[]>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filter",
                    "defaultValue": "new BehaviorSubject<\n    ChecksFilter\n  >(initialFilter)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ChecksFilter>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filter$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ChecksFilter>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCheckCollection",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CheckCollection>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVisibleChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Check[]>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "ChecksFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "ChecksFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { neitherNullNorUndefined } from '@app/utils';\nimport { Check, CheckCollection } from '../../models';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\nimport { MonitoringFacade } from '../../store/monitoring.facade';\n\nexport const enum ChecksHealthFilterOptions {\n  all = 'ALL',\n  byScore = 'SCORE',\n  withError = 'ERROR',\n}\n\nexport interface ChecksFilter {\n  filterBy: ChecksHealthFilterOptions;\n  scoreFilter?: {\n    byMetric: boolean;\n    metricScoreRange: [number, number];\n    byRaw: boolean;\n    rawScoreRange: [number, number];\n  };\n}\n\nconst initialFilter: ChecksFilter = {\n  filterBy: ChecksHealthFilterOptions.all,\n  scoreFilter: {\n    byMetric: true,\n    metricScoreRange: [0, 100],\n    byRaw: true,\n    rawScoreRange: [0, 100],\n  },\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class BatchDetailsService {\n  private checks$: Observable<Check[]>;\n  private filter: BehaviorSubject<ChecksFilter> = new BehaviorSubject<\n    ChecksFilter\n  >(initialFilter);\n  private filter$: Observable<ChecksFilter>;\n\n  constructor(\n    private facade: MonitoringFacade,\n    private modelVersionsFacade: ModelVersionsFacade\n  ) {\n    this.checks$ = this.facade.getChecks().pipe(\n      neitherNullNorUndefined,\n      map(checksCollection => checksCollection.getChecks())\n    );\n    this.filter$ = this.filter.asObservable();\n  }\n\n  setFilter(filter: ChecksFilter): void {\n    this.filter.next(filter);\n  }\n\n  getModelVersion(): Observable<ModelVersion> {\n    return this.modelVersionsFacade.selectedModelVersion();\n  }\n\n  getCheckCollection(): Observable<CheckCollection> {\n    return this.facade.getChecks();\n  }\n\n  getVisibleChecks(): Observable<Check[]> {\n    return combineLatest([this.checks$, this.filter$]).pipe(\n      map(([checks, filter]) => {\n        switch (filter.filterBy) {\n          case ChecksHealthFilterOptions.all:\n            return checks;\n          case ChecksHealthFilterOptions.byScore:\n            if (filter.scoreFilter === undefined) return checks;\n            return checks.filter(check => {\n              let m: boolean = true;\n              let r: boolean = true;\n\n              const metricScore = check.getMetricsScore() * 100;\n              const rawScore = check.getRawScore() * 100;\n\n              if (filter.scoreFilter.byMetric) {\n                const [min, max] = filter.scoreFilter.metricScoreRange;\n                m = metricScore >= min && metricScore <= max;\n              }\n\n              if (filter.scoreFilter.byRaw) {\n                const [min, max] = filter.scoreFilter.rawScoreRange;\n                r = rawScore >= min && rawScore <= max;\n              }\n\n              return r && m;\n            });\n          case ChecksHealthFilterOptions.withError:\n            return checks.filter(check => check.error);\n          default:\n            return checks;\n        }\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BuildInformationService",
            "id": "injectable-BuildInformationService-db68227dcc1e39633c9c602a5e29fad3",
            "file": "src/app/core/build-information.service.ts",
            "properties": [
                {
                    "name": "buildInfo",
                    "defaultValue": "new BehaviorSubject<{\n    [serviceName: string]: BuildInfo;\n  }>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "buildInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getBuildInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStatus",
                    "args": [
                        {
                            "name": "serviceName",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BuildInfo>",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "serviceName",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BuildInfo>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadBuildInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, of, forkJoin, BehaviorSubject } from 'rxjs';\nimport {\n  catchError,\n  shareReplay,\n  distinctUntilChanged,\n  map,\n} from 'rxjs/operators';\nimport { HttpService } from './data/services/http.service';\nimport { ServiceStatus } from '@app/core/data/types';\nimport { neitherNullNorUndefined, pluck } from '@app/utils';\n\nconst enum HydroServicesEndpoints {\n  buildInfo = 'api/buildinfo',\n  gateway = 'gateway/buildinfo',\n  sonar = 'monitoring/buildinfo',\n  rootcause = 'rootcause/buildinfo',\n  stat = 'stat/buildinfo',\n  visualization = 'visualization/buildinfo',\n}\n\nexport interface BuildInfo {\n  status: ServiceStatus;\n  message?: string;\n  [p: string]: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class BuildInformationService {\n  private buildInfo$: Observable<{ [serviceName: string]: BuildInfo }>;\n  private buildInfo: BehaviorSubject<{\n    [serviceName: string]: BuildInfo;\n  }> = new BehaviorSubject<{\n    [serviceName: string]: BuildInfo;\n  }>({});\n\n  constructor(private http: HttpService) {\n    this.buildInfo$ = this.buildInfo\n      .asObservable()\n      .pipe(neitherNullNorUndefined, shareReplay(1));\n  }\n\n  loadBuildInformation() {\n    const toRequest = endpoint =>\n      this.http.get(endpoint).pipe(\n        map((res: any) => {\n          return { ...res, status: ServiceStatus.AVAILABLE };\n        }),\n        catchError(err => this.handleError(err)),\n      );\n\n    return forkJoin({\n      build: toRequest(HydroServicesEndpoints.buildInfo),\n      gateway: toRequest(HydroServicesEndpoints.gateway),\n      sonar: toRequest(HydroServicesEndpoints.sonar),\n      rootcause: toRequest(HydroServicesEndpoints.rootcause),\n      stat: toRequest(HydroServicesEndpoints.stat),\n      visualization: toRequest(HydroServicesEndpoints.visualization),\n    }).subscribe(infos => this.buildInfo.next(infos));\n  }\n\n  getBuildInfo(): Observable<{ [serviceName: string]: BuildInfo }> {\n    return this.buildInfo$.pipe(distinctUntilChanged());\n  }\n\n  getStatus<K extends keyof typeof HydroServicesEndpoints>(\n    serviceName: K,\n  ): Observable<BuildInfo> {\n    return this.buildInfo$.pipe(pluck(serviceName));\n  }\n\n  private handleError(error: string): Observable<BuildInfo> {\n    const is501Error = /501/i.test(error);\n\n    if (is501Error) {\n      return of({ status: ServiceStatus.CLOSED_FOR_OSS });\n    } else {\n      const errMsg = error || 'Something went wrong';\n      return of({ status: ServiceStatus.FAILED, message: errMsg });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ChartConfigBuilder",
            "id": "injectable-ChartConfigBuilder-fae6827bca12fdaa61b86cf771594a1f",
            "file": "src/app/modules/monitoring/models/ChartConfig.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\ninterface Point {\n  x: number;\n  y: number;\n}\ninterface Series {\n  name: string;\n  data: number[];\n  color: string;\n}\nexport interface ChartConfig {\n  size: {\n    width?: number;\n    height?: number;\n    margins?: {\n      bottom?: number;\n      left?: number;\n      right?: number;\n      top?: number;\n    };\n  };\n  plotBands?: Array<{ from: number; to: number }>;\n  name: string;\n  data?: {\n    [metricName: string]: {\n      color?: string;\n      x: number[];\n      y: number[];\n      threshold?: number;\n    };\n  };\n  series: Series[];\n  area?: boolean;\n  threshold?: number;\n}\n\n@Injectable()\nexport class ChartConfigBuilder {\n  constructor() {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 39
            },
            "type": "injectable"
        },
        {
            "name": "CheckAggregationBuilder",
            "id": "injectable-CheckAggregationBuilder-4634d7853606dcf1a9fa24114549c672",
            "file": "src/app/modules/monitoring/services/builders/check-aggregation.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "rawCheck",
                            "type": "CheckAggregationResponseItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metrics",
                            "type": "MetricSpecification[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ChecksAggregationItem",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rawCheck",
                            "type": "CheckAggregationResponseItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metrics",
                            "type": "MetricSpecification[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  CheckAggregationResponseItem,\n  ChecksAggregationItem,\n} from '../../models';\nimport { MetricSpecification } from '@app/core/data/types';\n\n@Injectable({ providedIn: 'root' })\nexport class CheckAggregationBuilder {\n  get systemKeys(): string[] {\n    return [\n      '_id',\n      '_hs_first_id',\n      '_hs_last_id',\n      '_hs_model_version_id',\n      '_hs_requests',\n      '_hs_model_name',\n      '_hs_metrics',\n      '_hs_batch',\n      '_hs_metric_checks',\n    ];\n  }\n\n  build(\n    rawCheck: CheckAggregationResponseItem,\n    metrics: MetricSpecification[]\n  ): ChecksAggregationItem {\n    const metricNames = metrics.map(({ name }) => name);\n    const obj = {};\n    for (const item of metricNames) {\n      obj[item] = { checked: undefined, passed: undefined };\n    }\n\n    const res: ChecksAggregationItem = {\n      additionalInfo: {},\n      features: {},\n      metrics: { ...obj },\n      batch: rawCheck._hs_batch,\n    };\n    for (const prop in rawCheck) {\n      if (rawCheck.hasOwnProperty(prop)) {\n        if (this.systemKeys.includes(prop)) {\n          res.additionalInfo[prop] = rawCheck[prop];\n        } else {\n          const { checks: checked, passed } = rawCheck[prop];\n          res.features[prop] = { checked, passed };\n        }\n\n        res.metrics = { ...obj, ...rawCheck._hs_metrics };\n      }\n    }\n    return res;\n  }\n}\n",
            "accessors": {
                "systemKeys": {
                    "name": "systemKeys",
                    "getSignature": {
                        "name": "systemKeys",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 10
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ChecksEffects",
            "id": "injectable-ChecksEffects-00161b0727c6da17a8eb64e103fa0453",
            "file": "src/app/modules/monitoring/store/effects/checks.effects.ts",
            "properties": [
                {
                    "name": "loadChecks$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(LoadChecks),\n      switchMap(({ modelVersionId, from, to }) => {\n        return this.monitoringApi.getChecks({\n          modelVersionId,\n          from,\n          to,\n        });\n      }),\n      map(res => {\n        const checks = res.map(bareCheck => new Check(bareCheck));\n        return LoadChecksSuccess({\n          checks: new CheckCollection(checks),\n        });\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Check, CheckCollection } from '../../models';\nimport { MonitoringService } from '../../services';\nimport { LoadChecks, LoadChecksSuccess } from '../../store';\nimport { Injectable } from '@angular/core';\nimport { createEffect, Actions, ofType } from '@ngrx/effects';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable()\nexport class ChecksEffects {\n  loadChecks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(LoadChecks),\n      switchMap(({ modelVersionId, from, to }) => {\n        return this.monitoringApi.getChecks({\n          modelVersionId,\n          from,\n          to,\n        });\n      }),\n      map(res => {\n        const checks = res.map(bareCheck => new Check(bareCheck));\n        return LoadChecksSuccess({\n          checks: new CheckCollection(checks),\n        });\n      })\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private monitoringApi: MonitoringService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ColorizerFabric",
            "id": "injectable-ColorizerFabric-67ac0232ae07d90b20e6db9124306f7a",
            "file": "src/app/modules/visualization/models/Colorizer.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createColorizer",
                    "args": [
                        {
                            "name": "type",
                            "type": "ColorizerType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "ColorizerProps",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Colorizer | null",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "ColorizerType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "ColorizerProps",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorsGeneratorFabric, ColorsGenerator } from './ColorGenerator';\nimport { ColoringType } from './ColoringType';\n\ntype ColorizerType = 'class_label' | 'metric';\ninterface ColorizerProps {\n  name: string;\n  data: number[];\n  coloringType?: ColoringType;\n  classes?: Array<string | number>;\n  metric?: Metric;\n}\nexport abstract class Colorizer {\n  public type: string;\n  public name: string;\n  public coloringType: ColoringType;\n  public classes: any[];\n  protected colorsGenerator: ColorsGenerator;\n  protected data: number[];\n\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    this.name = props.name;\n    this.data = props.data;\n    this.coloringType = props.coloringType;\n    this.colorsGenerator = colorsGenerator;\n    this.classes = props.classes;\n  }\n  public getColors(): string[] {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\nclass ClassLabelColorizer extends Colorizer {\n  classes: Array<string | number>;\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'ClassLabel';\n    this.classes = props.classes || [];\n  }\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\nclass MetricColorizer extends Colorizer {\n  constructor(props: ColorizerProps, colorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'Metric';\n  }\n\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorizerFabric {\n  constructor(private colorGeneratorFabric: ColorsGeneratorFabric) {}\n  public createColorizer(\n    type: ColorizerType,\n    props: ColorizerProps\n  ): Colorizer | null {\n    const colorGenerator = this.colorGeneratorFabric.createColorGenerator(\n      type,\n      props\n    );\n\n    switch (type) {\n      case 'class_label':\n        return new ClassLabelColorizer(props, colorGenerator);\n      case 'metric':\n        return new MetricColorizer(props, colorGenerator);\n      default:\n        return null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorGeneratorFabric",
                        "type": "ColorsGeneratorFabric",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "colorGeneratorFabric",
                        "type": "ColorsGeneratorFabric",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ColorMapService",
            "id": "injectable-ColorMapService-35d5fa9d4006e630d76688f8c153a2e3",
            "file": "src/app/core/color-map.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "coldwarm",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRGB",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "interpolateRdYlBu",
                    "args": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redToBlue",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "valueOutOfRange",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { RGBColor } from 'd3';\nimport * as d3 from 'd3';\nimport * as colorScaleChromatic from 'd3-scale-chromatic';\nexport type ColorMapType =\n  | 'coldwarm'\n  | 'interpolateRdYlBu'\n  | 'redToBlue'\n  | 'interpolateRainbow';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ColorMapService {\n  getRGB({\n    val,\n    type = 'coldwarm',\n  }: {\n    val: number;\n    type: ColorMapType;\n  }): [number, number, number] {\n    try {\n      if (this.valueOutOfRange(val)) {\n        throw Error(`Value must be in [0, 1] range, got: ${val}`);\n      }\n\n      switch (type) {\n        case 'coldwarm':\n          return this.coldwarm(val);\n        case 'interpolateRdYlBu':\n          return this.interpolateRdYlBu(val);\n        case 'redToBlue':\n          return this.redToBlue(val);\n        default:\n          throw Error('Unknown colormap type');\n      }\n    } catch (error) {\n      console.warn(error);\n      return [0, 0, 0];\n    }\n  }\n\n  private coldwarm(val): [number, number, number] {\n    const { r, g, b } = d3.color(\n      colorScaleChromatic.interpolatePuBu(val)\n    ) as RGBColor;\n\n    return [r, g, b];\n  }\n\n  private interpolateRdYlBu(val): [number, number, number] {\n    const { r, g, b } = d3.color(\n      colorScaleChromatic.interpolateRdYlBu(1 - val)\n    ) as RGBColor;\n\n    return [r, g, b];\n  }\n\n  private valueOutOfRange(val: number): boolean {\n    return val < 0 || val > 1;\n  }\n\n  private redToBlue(val: number): [number, number, number] {\n    const { r, g, b } = d3.color(\n      colorScaleChromatic.interpolateRdBu(1 - val)\n    ) as RGBColor;\n\n    return [r, g, b];\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ColorPaletteService",
            "id": "injectable-ColorPaletteService-41aa4d7d14ed3af9380d9c3411e6fe75",
            "file": "src/app/core/color-palette.service.ts",
            "properties": [
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<string>",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "alertColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Readonly<string>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColors",
                    "args": [],
                    "optional": false,
                    "returnType": "ReadonlyArray<string>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getComplementaryColors",
                    "args": [],
                    "optional": false,
                    "returnType": "Readonly<>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPalette",
                    "args": [],
                    "optional": false,
                    "returnType": "ReadonlyArray<string>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTrueFalseColors",
                    "args": [],
                    "optional": false,
                    "returnType": "Readonly<>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "successColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Readonly<string>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "warningColor",
                    "args": [],
                    "optional": false,
                    "returnType": "Readonly<string>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ColorPaletteService {\n  private readonly colors: ReadonlyArray<string> = [];\n\n  getPalette(): ReadonlyArray<string> {\n    return [\n      '#418ecc',\n      '#ffad37',\n      '#ff716c',\n      '#ddff64',\n      '#85ff85',\n      '#8cffd9',\n      '#sef3ff',\n      '#f59dfa',\n      '#8a82ff',\n      '#4362ff',\n      '#6db7fa',\n      '#b384f5',\n      '#b366ac',\n    ];\n  }\n  getColors(): ReadonlyArray<string> {\n    return this.colors;\n  }\n\n  getComplementaryColors(): Readonly<[string, string]> {\n    return ['#7cb5ec', '#ffaf6e'];\n  }\n\n  getTrueFalseColors(): Readonly<[string, string]> {\n    return ['red', 'blue'];\n  }\n\n  warningColor(): Readonly<string> {\n    return '#CF1124';\n  }\n  alertColor(): Readonly<string> {\n    return '#DE911D';\n  }\n  successColor(): Readonly<string> {\n    return '#199473';\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ColorsGeneratorFabric",
            "id": "injectable-ColorsGeneratorFabric-35730f0266ccc682d0e72600baee7c0d",
            "file": "src/app/modules/visualization/models/ColorGenerator.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createColorGenerator",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"class_label\" | \"metric\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColorsGenerator",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"class_label\" | \"metric\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorMapService } from '@app/core/color-map.service';\nimport { ColoringType } from './ColoringType';\n\nimport { SCATTER_PLOT_PALETTE } from './ScatterPlotPalette';\nexport class ColorsGenerator {\n  getColors(data: number[]): string[] {\n    return data.map(() => '#00498e');\n  }\n}\n\n@Injectable()\nclass GradientColorsGenerator extends ColorsGenerator {\n  private colorMapService: ColorMapService;\n  constructor() {\n    super();\n    this.colorMapService = new ColorMapService();\n  }\n  public getColors(data: number[]) {\n    return data.map(val => {\n      const [r, g, b] = this.colorMapService.getRGB({\n        val,\n        type: 'redToBlue',\n      });\n      return `rgb(${r}, ${g}, ${b})`;\n    });\n  }\n}\n\nclass ClassLabelsColorsGenerator extends ColorsGenerator {\n  private classes: Array<string | number>;\n  constructor(classes: Array<string | number>) {\n    super();\n    this.classes = classes || [];\n  }\n  getColors(data: number[]) {\n    return data.map(val => {\n      return SCATTER_PLOT_PALETTE[this.classes.indexOf(val)];\n    });\n  }\n}\n\nclass MetricColorsGenerator implements ColorsGenerator {\n  metric: Metric;\n  constructor(metric: Metric) {\n    this.metric = metric;\n  }\n  public getColors(data: number[]) {\n    const { scores, operation, threshold } = this.metric;\n    const [successColor, failedColor] = ['#418ecc', '#ff716c'];\n    return scores.map(score => {\n      switch (operation) {\n        case 'Eq':\n          return score === threshold ? successColor : failedColor;\n        case 'NotEq':\n          return score !== threshold ? successColor : failedColor;\n        case 'Greater':\n          return score > threshold ? successColor : failedColor;\n        case 'Less':\n          return score < threshold ? successColor : failedColor;\n        case 'GreaterEq':\n          return score >= threshold ? successColor : failedColor;\n        case 'LessEq':\n          return score <= threshold ? successColor : failedColor;\n        default:\n          return successColor;\n      }\n    });\n    return [];\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorsGeneratorFabric {\n  public createColorGenerator(\n    type: 'class_label' | 'metric',\n    props: {\n      coloringType?: ColoringType;\n      classes?: Array<string | number>;\n      metric?: Metric;\n    }\n  ): ColorsGenerator {\n    switch (type) {\n      case 'class_label':\n        switch (props.coloringType) {\n          case 'class':\n            return new ClassLabelsColorsGenerator(props.classes);\n          case 'gradient':\n            return new GradientColorsGenerator();\n        }\n      case 'metric':\n        return new MetricColorsGenerator(props.metric);\n      default:\n        return new ColorsGenerator();\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CommandCreatorFactory",
            "id": "injectable-CommandCreatorFactory-e653f4a80ff2b290ae1de26b8fc0fb14",
            "file": "src/app/core/command-creator-factory.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "type",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CommandCreator",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\nimport { CurlCommandCreator } from './curl-command-creator';\nimport { GrpcCommandCreator } from './grpc-command-creator';\nimport { CommandCreator } from './command-creator';\nimport { HS_ABSOLUTE_URL } from '@app/core/base-url.token';\n\nexport class UnknownCommandCreator extends CommandCreator {\n  getCommand = () => '';\n}\n\n@Injectable()\nexport class CommandCreatorFactory {\n  constructor(@Inject(HS_ABSOLUTE_URL) private url: string) {}\n\n  create(type): CommandCreator {\n    switch (type) {\n      case 'grpc':\n        return new GrpcCommandCreator(this.url);\n      case 'curl':\n        return new CurlCommandCreator(this.url);\n      default:\n        return new UnknownCommandCreator();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CreatePlotBand",
            "id": "injectable-CreatePlotBand-913134044eaa59f7b41bf05386e938c8",
            "file": "src/app/modules/monitoring/components/checks/check-chart_v2/createPlotBand.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "type": "PlotBandData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<PlotBand>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "PlotBandData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PlotBand } from './check-chart_v2.component';\n\nexport interface PlotBandData {\n  threshold: number;\n  data: number[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CreatePlotBand {\n  create({ data, threshold }: PlotBandData): Array<PlotBand> {\n    let currentPlotBand: PlotBand = null;\n    let i = 0;\n    let result: Array<PlotBand> = [];\n    for (i; i <= data.length; i++) {\n      if (data[i] > threshold) {\n        currentPlotBand\n          ? (currentPlotBand.to = i)\n          : (currentPlotBand = { from: i, to: i });\n      } else {\n        if (currentPlotBand) {\n          result.push(currentPlotBand);\n          currentPlotBand = null;\n        }\n      }\n    }\n    return result;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CustomMetricsFacade",
            "id": "injectable-CustomMetricsFacade-2de2ce28be092bee5110508253f96846",
            "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
            "properties": [
                {
                    "name": "allMetricChecks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MetricCheckAggregation[]>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "chartConfigs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ChartConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "compMetricChecks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MetricCheckAggregation[]>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "curMetricChecks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MetricCheckAggregation[]>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "selectedMetrics$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "comparableModelVersionsChanged",
                    "args": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChartConfigs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ChartConfig[]>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCustomMetrics",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModelVersionsToCompare",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadComparableChecks",
                    "args": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comparedModelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "comparedModelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Aggregation,\n  MetricCheckAggregation,\n  Check,\n  ChartConfig,\n  CheckCollection,\n} from '@app/modules/monitoring/models';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { map, switchMap, startWith, shareReplay, tap } from 'rxjs/operators';\n\nimport { ModelVersion, MetricSpecification } from '@app/core/data/types';\nimport { ColorPaletteService } from '@app/core/color-palette.service';\n\nimport { MonitoringService } from '../../services';\n\nimport { MetricsFacade } from '../../store/facades/metrics.facade';\nimport { MetricChartsState } from '../../store/metric-charts.state';\nimport { MonitoringFacade } from '../../store/monitoring.facade';\n\nexport type ComparisonRegime = 'split' | 'merge';\n\n@Injectable()\nexport class CustomMetricsFacade {\n  private readonly chartConfigs$: Observable<ChartConfig[]>;\n  private curMetricChecks$: Observable<MetricCheckAggregation[]>;\n  private compMetricChecks$: Observable<MetricCheckAggregation[]>;\n  private allMetricChecks$: Observable<MetricCheckAggregation[]>;\n\n  selectedMetrics$: Observable<any>;\n\n  constructor(\n    private metricsFacade: MetricsFacade,\n    private monitoringFacade: MonitoringFacade,\n    private monitoringApi: MonitoringService,\n    private colorPalette: ColorPaletteService,\n    private state: MetricChartsState\n  ) {\n    this.selectedMetrics$ = this.metricsFacade.getSelectedMetrics();\n\n    this.curMetricChecks$ = this.monitoringFacade.getChecks().pipe(\n      map(checks => (checks ? [...checks.getMetricsChecks().values()] : [])),\n      shareReplay(1)\n    );\n\n    this.compMetricChecks$ = combineLatest([\n      this.state.getModelVersionsToCompare(),\n      this.monitoringFacade.getSelectedAggregation(),\n    ]).pipe(\n      switchMap(([modelVersions, aggregation]) => {\n        if (modelVersions.length === 0) return of([]);\n\n        return this.loadComparableChecks(aggregation, modelVersions).pipe(\n          map(response => {\n            return Object.values(response).reduce((acc, checkCollection) => {\n              return [...acc, ...checkCollection.getMetricsChecks().values()];\n            }, []);\n          })\n        );\n      }),\n      startWith([]),\n      shareReplay(1)\n    );\n\n    this.allMetricChecks$ = combineLatest([\n      this.curMetricChecks$,\n      this.compMetricChecks$,\n    ]).pipe(map(([current, comp]) => [...current, ...comp]));\n\n    this.chartConfigs$ = combineLatest([\n      this.selectedMetrics$,\n      this.allMetricChecks$,\n    ]).pipe(\n      map(([metrics, checks]) =>\n        generateConfigs(metrics, checks, this.colorPalette)\n      ),\n      shareReplay(1)\n    );\n  }\n\n  getChartConfigs(): Observable<ChartConfig[]> {\n    return this.chartConfigs$;\n  }\n\n  comparableModelVersionsChanged(modelVersions: ModelVersion[]): void {\n    this.state.addModelVersionToCompare(modelVersions);\n  }\n\n  getModelVersionsToCompare(): Observable<ModelVersion[]> {\n    return this.state.getModelVersionsToCompare();\n  }\n\n  getCustomMetrics() {\n    return this.metricsFacade.getSelectedMetrics();\n  }\n\n  private loadComparableChecks(\n    aggregation: Aggregation,\n    comparedModelVersions: ModelVersion[]\n  ): Observable<{\n    [modelVersionId: number]: CheckCollection;\n  }> {\n    const request: {\n      [modelVersionId: number]: Observable<CheckCollection>;\n    } = comparedModelVersions.reduce((request, { id }) => {\n      request[id] = this.monitoringApi\n        .getChecksForComparision({\n          originalModelVersion: aggregation.modelVersionId,\n          aggregationId: aggregation.id,\n          comparedModelVersionId: id,\n        })\n        .pipe(\n          map(bareChecks => {\n            const checks = bareChecks.map(bareCheck => new Check(bareCheck));\n            return new CheckCollection(checks);\n          })\n        );\n      return request;\n    }, {});\n    return forkJoin(request);\n  }\n}\n\nfunction buildPlotBands(\n  health: boolean[]\n): Array<{ from: number; to: number }> {\n  let currentBand: { from: number; to: number };\n  const res = [];\n  health.forEach((check, idx) => {\n    if (!check) {\n      if (currentBand) {\n        currentBand.to = idx + 1;\n      } else {\n        currentBand = { from: idx + 1, to: idx + 1 };\n      }\n    } else {\n      if (currentBand) {\n        res.push({ ...currentBand });\n        currentBand = undefined;\n      }\n    }\n  });\n\n  if (currentBand) {\n    res.push({ ...currentBand });\n  }\n\n  return res;\n}\n\nfunction defaultConfig(name, threshold?): ChartConfig {\n  return {\n    name,\n    threshold,\n    size: {\n      margins: {\n        left: 40,\n        right: 12,\n        top: 2,\n        bottom: 16,\n      },\n    },\n    series: [],\n  };\n}\n\nfunction generateConfigs(\n  metrics: MetricSpecification[],\n  metricCheckAgg: MetricCheckAggregation[],\n  palette: ColorPaletteService\n): ChartConfig[] {\n  if (metrics.length === 0) return [];\n\n  // Create configs for MetricSpecs first\n  const configs: ChartConfig[] = metrics.map(\n    ({ name, config: { threshold } }) => defaultConfig(name, threshold)\n  );\n\n  // Iterate over MetricCheckAggregations and create(update) charts\n  metricCheckAgg.forEach(cur => {\n    let config = configs.find(cfg => cfg.name === cur.metricName);\n\n    if (config === undefined) {\n      config = defaultConfig(cur.metricName);\n      configs.push(config);\n    }\n\n    config.series.push({\n      name: `${cur.metricName}_${cur.modelVer}`,\n      data: cur.values,\n      color: palette.getPalette()[config.series.length],\n    });\n\n    // Shouldn't calculate threshold and plotbands for multi series\n    if (config.series.length > 1) {\n      config.threshold = undefined;\n      config.plotBands = undefined;\n    } else {\n      if (config.threshold === undefined) {\n        config.threshold = cur.threshold;\n      }\n      if (config.plotBands === undefined) {\n        config.plotBands = buildPlotBands(cur.checks);\n      }\n    }\n  });\n\n  return configs;\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringFacade",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "MetricChartsState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringFacade",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "MetricChartsState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomRouterStateSerializer",
            "id": "injectable-CustomRouterStateSerializer-8162096c682273fd153ec2e5b0d2d4f3",
            "file": "src/app/core/store/states/router.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateUrl",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Params, RouterStateSnapshot } from '@angular/router';\nimport { RouterStateSerializer } from '@ngrx/router-store';\nimport { Injectable } from '@angular/core';\n\nexport interface RouterStateUrl {\n  url: string;\n  params: Params;\n  queryParams: Params;\n}\n\n@Injectable()\nexport class CustomRouterStateSerializer\n  implements RouterStateSerializer<RouterStateUrl>\n{\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n    let params = {};\n\n    while (route.firstChild) {\n      params = Object.assign(params, route.params);\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { queryParams },\n    } = routerState;\n\n    params = Object.assign(params, route.params);\n    return { url, params, queryParams };\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "CustomValidatorsService",
            "id": "injectable-CustomValidatorsService-bb6e33daa8fe04e688ab6a8bb4f817b0",
            "file": "src/app/core/custom-validators.service.ts",
            "properties": [
                {
                    "name": "_MESSAGES",
                    "defaultValue": "{\n    ERRORS: {\n      forms: {\n        service: {\n          serviceName: {\n            pattern: 'It is not correct format.',\n            maxLength: \"Service name' max length is 30.\",\n            required: 'Service name is required.',\n          },\n          serviceId: {\n            pattern: 'Service id must be a number.',\n            required: 'Service id is required.',\n          },\n          weight: {\n            pattern: 'Weight must be a number.',\n            required: 'Weight is required.',\n          },\n          weights: {\n            overflow: 'Error. Sum of weights should be 100%.',\n          },\n        },\n      },\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_VALIDATION_PATTERNS",
                    "defaultValue": "{\n    text: /[a-zA-Z]+/,\n    number: /^[0-9]+$/,\n    floatNumber: /^[+-]?\\d+(\\.\\d+)?$/,\n    textAndNumber: /[a-zA-Z0-9]+/,\n    name: /[a-zA-Z_0-9-]+/,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "applicationNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applicationNameformat",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "lengthValidation",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "metricNameFormat",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "pattern",
                    "args": [
                        {
                            "name": "pattern",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "pattern",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "required",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "uniqNameValidation",
                    "args": [
                        {
                            "name": "initialApplicationName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialApplicationName",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "weightValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ValidatorFn,\n  FormArray,\n  ValidationErrors,\n  FormControl,\n} from '@angular/forms';\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomValidatorsService {\n  get VALIDATION_PATTERNS() {\n    return this._VALIDATION_PATTERNS;\n  }\n\n  get MESSAGES() {\n    return this._MESSAGES;\n  }\n  public applicationNames: string[];\n\n  private _VALIDATION_PATTERNS = {\n    text: /[a-zA-Z]+/,\n    number: /^[0-9]+$/,\n    floatNumber: /^[+-]?\\d+(\\.\\d+)?$/,\n    textAndNumber: /[a-zA-Z0-9]+/,\n    name: /[a-zA-Z_0-9-]+/,\n  };\n\n  private _MESSAGES = {\n    ERRORS: {\n      forms: {\n        service: {\n          serviceName: {\n            pattern: 'It is not correct format.',\n            maxLength: \"Service name' max length is 30.\",\n            required: 'Service name is required.',\n          },\n          serviceId: {\n            pattern: 'Service id must be a number.',\n            required: 'Service id is required.',\n          },\n          weight: {\n            pattern: 'Weight must be a number.',\n            required: 'Weight is required.',\n          },\n          weights: {\n            overflow: 'Error. Sum of weights should be 100%.',\n          },\n        },\n      },\n    },\n  };\n\n  constructor(private applicationsFacade: ApplicationsFacade) {\n    this.applicationsFacade.allApplications().subscribe(applications => {\n      this.applicationNames = applications.map(app => app.name);\n    });\n  }\n\n  public weightValidation(): ValidatorFn {\n    return (control: FormArray): ValidationErrors => {\n      const sum = control.controls.reduce(\n        (a, c) => a + Number(c.get('weight').value),\n        0\n      );\n      if (sum !== 100) {\n        return { weight: 'Sum of weights must be equal 100' };\n      }\n    };\n  }\n\n  public lengthValidation(length: number): ValidatorFn {\n    return (control: FormControl): ValidationErrors => {\n      const currentApplicationName = control.value;\n\n      if (currentApplicationName.length > length) {\n        return { uniq: `Max length ${length}` };\n      }\n      return null;\n    };\n  }\n\n  public uniqNameValidation(initialApplicationName): ValidatorFn {\n    return (control: FormControl): ValidationErrors => {\n      const currentApplicationName = control.value;\n\n      if (currentApplicationName === initialApplicationName) {\n        return null;\n      }\n\n      if (this.applicationNames.includes(control.value)) {\n        return { uniq: 'Application name must be uniq' };\n      }\n    };\n  }\n\n  public applicationNameformat(): ValidatorFn {\n    return (control: FormControl): ValidationErrors => {\n      const applicationName = control.value;\n      const reg = /^[a-zA-Z\\-_\\d]+$/;\n\n      if (reg.test(applicationName)) {\n        return null;\n      } else {\n        return { format: 'Application format: a-Z, 1-9,-,_' };\n      }\n    };\n  }\n\n  public metricNameFormat(): ValidatorFn {\n    return (control: FormControl): ValidationErrors => {\n      const metricName = control.value;\n      const reg = /^[a-z][a-zA-Z\\-_\\d]*$/;\n\n      if (reg.test(metricName)) {\n        return null;\n      } else {\n        return {\n          format:\n            'Format: must start with any lowercase character and can contain [a-Z, 1-9,-,_] characters',\n        };\n      }\n    };\n  }\n\n  public pattern(pattern): ValidatorFn {\n    return (control: FormControl) => {\n      if (!pattern.test(control.value)) {\n        return {\n          pattern: 'It is not correct format.',\n        };\n      }\n    };\n  }\n\n  public required(): ValidatorFn {\n    return (control: FormControl) => {\n      if (control.value === null || control.value === '') {\n        return {\n          required: 'Field is required',\n        };\n      }\n    };\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "applicationsFacade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "applicationsFacade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "VALIDATION_PATTERNS": {
                    "name": "VALIDATION_PATTERNS",
                    "getSignature": {
                        "name": "VALIDATION_PATTERNS",
                        "type": "",
                        "returnType": "",
                        "line": 14
                    }
                },
                "MESSAGES": {
                    "name": "MESSAGES",
                    "getSignature": {
                        "name": "MESSAGES",
                        "type": "",
                        "returnType": "",
                        "line": 18
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DeploymentConfigsEffects",
            "id": "injectable-DeploymentConfigsEffects-ace6c92157a4138c014ba0a4b5a20ab5",
            "file": "src/app/core/store/effects/deployment-configs.effects.ts",
            "properties": [
                {
                    "name": "addConfig$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddDeploymentConfig),\n      switchMap(({ depConfig }) => {\n        return this.depConfigsService.addConfig(depConfig).pipe(\n          concatMap(depConfig => {\n            this.router.navigate(['/deployment_configs', depConfig.name]);\n\n            return [{ type: 'NOOP' }];\n          }),\n          catchError(error => {\n            return of(\n              AddDeploymentConfigFail({ error }),\n              NotifyError(`Error: ${error}`),\n            );\n          }),\n        );\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "addSuccess$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddDeploymentConfigSuccess),\n      switchMap(({ payload: depConfig }) =>\n        of(\n          NotifySuccess(\n            `Deployment config: ${depConfig.name} was successfully added`,\n          ),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "deleteConfig$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteDeploymentConfig),\n      exhaustMap(({ name }) =>\n        this.depConfigsService.delete(name).pipe(\n          switchMap(() => {\n            this.router.navigate(['deployment_configs']);\n            return [{ type: 'NOOP' }];\n          }),\n          catchError(error => {\n            return of(\n              DeleteDeploymentConfigFail({ error }),\n              NotifyError(`Error: ${error}`),\n            );\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "deleteSuccess$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteDeploymentConfigSuccess),\n      switchMap(({ name }) => {\n        return of(NotifyWarning(`Deployment config: ${name} has been deleted`));\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "getAllDeploymentConfigs$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(GetDeploymentConfigs),\n      switchMap(() =>\n        this.depConfigsService.getAll().pipe(\n          map(res => {\n            const configs = res.map(config => {\n              return {\n                ...config,\n                favorite: this.favoriteService.isFavorite(config.name),\n              };\n            });\n            return GetDeploymentConfigsSuccess({ payload: configs });\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "sseAddEvent",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SseAddDeploymentConfigEvent),\n      switchMap(({ depConfig }) =>\n        of(AddDeploymentConfigSuccess({ payload: depConfig })),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "sseDeleteConfig",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(SseDeleteDeploymentConfigEvent),\n      switchMap(({ name }) => of(DeleteDeploymentConfigSuccess({ name }))),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "toggleFavorite$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ToggleFavorite),\n        tap(({ payload: { depConfig } }) => {\n          depConfig.favorite\n            ? this.favoriteService.remove(depConfig.name)\n            : this.favoriteService.add(depConfig.name);\n        }),\n      ),\n    { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { concatMap, switchMap, tap } from 'rxjs/operators';\nimport { exhaustMap, map, catchError } from 'rxjs/operators';\n\nimport { SnackbarService } from '../../snackbar.service';\n\nimport { DeploymentConfigsService } from '../../data/services/deployment-configs.service';\nimport {\n  GetDeploymentConfigs,\n  GetDeploymentConfigsSuccess,\n  DeleteDeploymentConfig,\n  DeleteDeploymentConfigSuccess,\n  DeleteDeploymentConfigFail,\n  AddDeploymentConfig,\n  AddDeploymentConfigSuccess,\n  AddDeploymentConfigFail,\n  ToggleFavorite,\n  SseAddDeploymentConfigEvent,\n  SseDeleteDeploymentConfigEvent,\n} from '../actions/deployment-configs.actions';\nimport { FavoriteService } from '@app/core/favorite.service';\nimport {\n  NotifyError,\n  NotifySuccess,\n  NotifyWarning,\n} from '../actions/notifications.actions';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class DeploymentConfigsEffects {\n  getAllDeploymentConfigs$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(GetDeploymentConfigs),\n      switchMap(() =>\n        this.depConfigsService.getAll().pipe(\n          map(res => {\n            const configs = res.map(config => {\n              return {\n                ...config,\n                favorite: this.favoriteService.isFavorite(config.name),\n              };\n            });\n            return GetDeploymentConfigsSuccess({ payload: configs });\n          }),\n        ),\n      ),\n    ),\n  );\n\n  addConfig$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddDeploymentConfig),\n      switchMap(({ depConfig }) => {\n        return this.depConfigsService.addConfig(depConfig).pipe(\n          concatMap(depConfig => {\n            this.router.navigate(['/deployment_configs', depConfig.name]);\n\n            return [{ type: 'NOOP' }];\n          }),\n          catchError(error => {\n            return of(\n              AddDeploymentConfigFail({ error }),\n              NotifyError(`Error: ${error}`),\n            );\n          }),\n        );\n      }),\n    ),\n  );\n\n  sseAddEvent = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SseAddDeploymentConfigEvent),\n      switchMap(({ depConfig }) =>\n        of(AddDeploymentConfigSuccess({ payload: depConfig })),\n      ),\n    ),\n  );\n\n  addSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddDeploymentConfigSuccess),\n      switchMap(({ payload: depConfig }) =>\n        of(\n          NotifySuccess(\n            `Deployment config: ${depConfig.name} was successfully added`,\n          ),\n        ),\n      ),\n    ),\n  );\n\n  deleteConfig$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteDeploymentConfig),\n      exhaustMap(({ name }) =>\n        this.depConfigsService.delete(name).pipe(\n          switchMap(() => {\n            this.router.navigate(['deployment_configs']);\n            return [{ type: 'NOOP' }];\n          }),\n          catchError(error => {\n            return of(\n              DeleteDeploymentConfigFail({ error }),\n              NotifyError(`Error: ${error}`),\n            );\n          }),\n        ),\n      ),\n    ),\n  );\n\n  sseDeleteConfig = createEffect(() =>\n    this.actions$.pipe(\n      ofType(SseDeleteDeploymentConfigEvent),\n      switchMap(({ name }) => of(DeleteDeploymentConfigSuccess({ name }))),\n    ),\n  );\n\n  deleteSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteDeploymentConfigSuccess),\n      switchMap(({ name }) => {\n        return of(NotifyWarning(`Deployment config: ${name} has been deleted`));\n      }),\n    ),\n  );\n\n  toggleFavorite$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ToggleFavorite),\n        tap(({ payload: { depConfig } }) => {\n          depConfig.favorite\n            ? this.favoriteService.remove(depConfig.name)\n            : this.favoriteService.add(depConfig.name);\n        }),\n      ),\n    { dispatch: false },\n  );\n\n  constructor(\n    private readonly actions$: Actions,\n    private router: Router,\n    private readonly depConfigsService: DeploymentConfigsService,\n    private readonly snackbar: SnackbarService,\n    private favoriteService: FavoriteService,\n    private store: Store,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depConfigsService",
                        "type": "DeploymentConfigsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 144,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depConfigsService",
                        "type": "DeploymentConfigsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DeploymentConfigsFacade",
            "id": "injectable-DeploymentConfigsFacade-51d5e50f5a86c28ff4dd8fa3c747fb47",
            "file": "src/app/core/facades/deployment-configs.facade.ts",
            "properties": [
                {
                    "name": "all$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "favoriteDepConfigs$",
                    "defaultValue": "this.filtered().pipe(\n    map(configs => configs.filter(config => config.favorite)),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "filterString",
                    "defaultValue": "new BehaviorSubject('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "filterString$",
                    "defaultValue": "this.filterString\n    .asObservable()\n    .pipe(debounceTime(300))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "nonFavoriteDepConfigs$",
                    "defaultValue": "this.filtered().pipe(\n    map(configs => configs.filter(config => !config.favorite)),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "visibleDepConfigs$",
                    "defaultValue": "combineLatest(\n    this.favoriteDepConfigs$,\n    this.nonFavoriteDepConfigs$,\n  ).pipe(map(([favorites, nonFavorites]) => [...favorites, ...nonFavorites]))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "allDepConfigs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "areDepConfigsLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "defaultDepConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filtered",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFavorite",
                    "args": [
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { debounceTime, map } from 'rxjs/operators';\nimport { DeploymentConfig } from '../data/types';\nimport {\n  AddDeploymentConfig,\n  DeleteDeploymentConfig,\n  GetDeploymentConfigs,\n  ToggleFavorite,\n} from '../store/actions/deployment-configs.actions';\nimport { State } from '../store/states/deployment-configs.state';\nimport {\n  selectAllConfigs,\n  selectDefaultDeploymentConfig,\n  selectDepConfigLoaded,\n  selectSelectedDeploymentConfig,\n} from '../store/selectors/deployment-configs.selectors';\n\n@Injectable({ providedIn: 'root' })\nexport class DeploymentConfigsFacade {\n  private readonly filterString = new BehaviorSubject('');\n  private readonly filterString$ = this.filterString\n    .asObservable()\n    .pipe(debounceTime(300));\n\n  private readonly all$: Observable<DeploymentConfig[]>;\n\n  constructor(private readonly store: Store<State>) {\n    this.all$ = store.pipe(select(selectAllConfigs));\n  }\n\n  allDepConfigs(): Observable<DeploymentConfig[]> {\n    return this.store.pipe(select(selectAllConfigs));\n  }\n\n  getAll(): Observable<DeploymentConfig[]> {\n    return this.all$;\n  }\n\n  filtered(): Observable<DeploymentConfig[]> {\n    return combineLatest([this.filterString$, this.allDepConfigs()]).pipe(\n      map(([filter, configs]) => {\n        return filter\n          ? configs.filter(({ name }) => name.includes(filter))\n          : configs;\n      }),\n    );\n  }\n\n  nonFavoriteDepConfigs$ = this.filtered().pipe(\n    map(configs => configs.filter(config => !config.favorite)),\n  );\n\n  favoriteDepConfigs$ = this.filtered().pipe(\n    map(configs => configs.filter(config => config.favorite)),\n  );\n\n  visibleDepConfigs$: Observable<DeploymentConfig[]> = combineLatest(\n    this.favoriteDepConfigs$,\n    this.nonFavoriteDepConfigs$,\n  ).pipe(map(([favorites, nonFavorites]) => [...favorites, ...nonFavorites]));\n\n  selectedConfig(): Observable<DeploymentConfig> {\n    return this.store.pipe(select(selectSelectedDeploymentConfig));\n  }\n\n  defaultDepConfig(): Observable<DeploymentConfig> {\n    return this.store.pipe(select(selectDefaultDeploymentConfig));\n  }\n\n  loadAll(): void {\n    this.store.dispatch(GetDeploymentConfigs());\n  }\n\n  delete(name: string): void {\n    this.store.dispatch(DeleteDeploymentConfig({ name }));\n  }\n\n  add(config: DeploymentConfig) {\n    this.store.dispatch(AddDeploymentConfig({ depConfig: config }));\n  }\n\n  onFilter(filter: string): void {\n    this.filterString.next(filter);\n  }\n\n  areDepConfigsLoaded() {\n    return this.store.pipe(select(selectDepConfigLoaded));\n  }\n\n  toggleFavorite(depConfig: DeploymentConfig) {\n    this.store.dispatch(ToggleFavorite({ payload: { depConfig } }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DeploymentConfigsService",
            "id": "injectable-DeploymentConfigsService-1671f0b85f7ae20129088745184716c7",
            "file": "src/app/core/data/services/deployment-configs.service.ts",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@environments/environment';\n\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { DeploymentConfig } from '../types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DeploymentConfigsService {\n  private readonly baseAPIUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseAPIUrl = `${environment.apiUrl}/deployment_configuration`;\n  }\n\n  public getAll(): Observable<DeploymentConfig[]> {\n    return this.http.get<DeploymentConfig[]>(this.baseAPIUrl);\n  }\n\n  public get(name: string): Observable<DeploymentConfig> {\n    return this.http.get<DeploymentConfig>(`${this.baseAPIUrl}/${name}`);\n  }\n\n  public addConfig(config: DeploymentConfig) {\n    return this.http\n      .post(this.baseAPIUrl, config)\n      .pipe(map((res: Response): any => res));\n  }\n\n  public delete(name: string): Observable<any> {\n    return this.http.delete(`${this.baseAPIUrl}/${name}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogsService",
            "id": "injectable-DialogsService-041b494318c6ec38db4b093fe64409f2",
            "file": "src/app/modules/dialogs/dialogs.service.ts",
            "properties": [
                {
                    "name": "containerElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearContainer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "createDialog",
                    "args": [
                        {
                            "name": "options",
                            "type": "DialogOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "DialogOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setContainerElementRef",
                    "args": [
                        {
                            "name": "elRef",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "elRef",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStyles",
                    "args": [
                        {
                            "name": "styles",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "styles",
                            "type": "object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setViewContainerRef",
                    "args": [
                        {
                            "name": "value",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  ComponentRef,\n  Provider,\n  ReflectiveInjector,\n  ElementRef,\n} from '@angular/core';\nimport { ComponentFactoryResolver } from '@angular/core';\nimport { ComponentFactory } from '@angular/core';\nimport { Renderer2, RendererFactory2 } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\ninterface DialogOptions {\n  component: any;\n  providers?: Provider[];\n  classes?: string;\n  styles?: { [key: string]: string };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DialogsService {\n  get show$(): Observable<boolean> {\n    return this.show.asObservable();\n  }\n  public show: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n  public containerElementRef: ElementRef;\n  public viewContainerRef: ViewContainerRef;\n\n  private renderer: Renderer2;\n\n  constructor(\n    private cfr: ComponentFactoryResolver,\n    private parentInjector: Injector,\n    rendererFactory: RendererFactory2\n  ) {\n    this.renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  public createDialog(options: DialogOptions): void {\n    const { component, providers, styles } = options;\n\n    const cf: ComponentFactory<any> = this.cfr.resolveComponentFactory(\n      component\n    );\n    let childInjector: ReflectiveInjector;\n    let c: ComponentRef<any>;\n\n    if (providers) {\n      childInjector = ReflectiveInjector.resolveAndCreate(\n        providers,\n        this.parentInjector\n      );\n      c = cf.create(childInjector);\n    } else {\n      c = cf.create(this.parentInjector);\n    }\n\n    this.viewContainerRef.insert(c.hostView);\n\n    this.setStyles(styles);\n    this.openDialog();\n  }\n\n  public closeDialog(): void {\n    this.show.next(false);\n  }\n\n  public clearContainer(): void {\n    this.renderer.removeAttribute(\n      this.containerElementRef.nativeElement,\n      'style'\n    );\n    this.viewContainerRef.clear();\n  }\n\n  public setViewContainerRef(value: ViewContainerRef): void {\n    this.viewContainerRef = value;\n  }\n\n  public setContainerElementRef(elRef: ElementRef): void {\n    this.containerElementRef = elRef;\n  }\n\n  private openDialog(): void {\n    this.show.next(true);\n  }\n\n  private setStyles(styles = {}): void {\n    for (const key in styles) {\n      if (styles.hasOwnProperty(key)) {\n        this.renderer.setStyle(\n          this.containerElementRef.nativeElement,\n          key,\n          styles[key]\n        );\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cfr",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "cfr",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "parentInjector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "show$": {
                    "name": "show$",
                    "getSignature": {
                        "name": "show$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 26
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ExplanationFacade",
            "id": "injectable-ExplanationFacade-3aaffe05f22d2ae002ec8635314efcc8",
            "file": "src/app/modules/root-cause/explanation.facade.ts",
            "properties": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "pollingInterval",
                    "defaultValue": "5000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "stopPoll$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createExplanation",
                    "args": [
                        {
                            "name": "model_version_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "explained_request_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'anchor'"
                        },
                        {
                            "name": "output_field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model_version_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "explained_request_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'anchor'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "output_field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExplanation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Explanation | null>",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadExplanation",
                    "args": [
                        {
                            "name": "requestId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVersionId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'anchor'"
                        },
                        {
                            "name": "output_field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersionId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'anchor'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "output_field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "poll",
                    "args": [
                        {
                            "name": "model_version_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "explained_request_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "output_field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "model_version_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "explained_request_id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "output_field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { SnackbarService } from '@app/core/snackbar.service';\nimport { Explanation, ExplanationStatus } from './models';\nimport { RootCauseApiService } from './services';\nimport { RootCauseState } from './store/state';\nimport { merge, Observable, of, Subject, timer } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  exhaustMap,\n  switchMap,\n  takeUntil,\n  takeWhile,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable()\nexport class ExplanationFacade implements OnDestroy {\n  private stopPoll$: Subject<any> = new Subject<any>();\n  private destroy$: Subject<any> = new Subject<any>();\n  private readonly pollingInterval = 5000;\n\n  constructor(\n    private readonly state: RootCauseState,\n    private readonly api: RootCauseApiService,\n    private readonly snackbar: SnackbarService,\n  ) {}\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  createExplanation(\n    model_version_id,\n    explained_request_id,\n    method = 'anchor',\n    output_field,\n  ): void {\n    this.api\n      .createExplanation({\n        explained_request_id,\n        method,\n        model_version_id: model_version_id,\n        output_field,\n      })\n      .pipe(\n        switchMap(() =>\n          this.poll(model_version_id, explained_request_id, output_field),\n        ),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(\n        explanation => this.state.setExplanation(explanation),\n        error => {\n          console.error(error);\n          this.state.setExplanation({\n            state: ExplanationStatus.failed,\n            description: `Internal error was occurred`,\n          });\n        },\n      );\n  }\n\n  getExplanation(): Observable<Explanation | null> {\n    return this.state.getExplanation();\n  }\n\n  loadExplanation(\n    requestId,\n    modelVersionId,\n    method = 'anchor',\n    output_field,\n  ): void {\n    this.api\n      .getExplanation({\n        explained_request_id: requestId,\n        method,\n        model_version_id: modelVersionId,\n        output_field,\n      })\n      .pipe(\n        tap(_ => this.stopPoll$.next()),\n        switchMap(explanation => {\n          switch (explanation.state) {\n            case ExplanationStatus.failed:\n            case ExplanationStatus.notCalled:\n            case ExplanationStatus.success:\n            case ExplanationStatus.notSupported:\n              return of(explanation);\n            default:\n              return this.poll(modelVersionId, requestId, output_field);\n          }\n        }),\n        catchError(err =>\n          of<Explanation>({\n            state: ExplanationStatus.failed,\n            description: `Internal error was occurred`,\n          }),\n        ),\n      )\n      .subscribe(\n        explanation => this.state.setExplanation(explanation),\n        error => {\n          console.error(error);\n          this.state.setExplanation({\n            state: ExplanationStatus.failed,\n            description: `Internal error was occurred`,\n          });\n        },\n      );\n  }\n\n  private poll(model_version_id, explained_request_id, output_field) {\n    return timer(0, this.pollingInterval).pipe(\n      debounceTime(this.pollingInterval / 2),\n      exhaustMap(() =>\n        this.api.getExplanation({\n          model_version_id,\n          explained_request_id,\n          method: 'anchor',\n          output_field,\n        }),\n      ),\n      takeWhile(exp => exp.state !== ExplanationStatus.success, true),\n      takeUntil(merge(this.destroy$, this.stopPoll$)),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "state",
                        "type": "RootCauseState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "RootCauseApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "RootCauseState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "RootCauseApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FavoriteService",
            "id": "injectable-FavoriteService-c41c094bf2283322b99c0a92c1f89907",
            "file": "src/app/core/favorite.service.ts",
            "properties": [
                {
                    "name": "add",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isFavorite",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "remove",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FavoriteService {\n  add = (uid: string): void => localStorage.setItem(uid, 'true');\n  remove = (uid: string): void => localStorage.removeItem(uid);\n  isFavorite = (uid: string): boolean => localStorage.hasOwnProperty(uid);\n}\n",
            "type": "injectable"
        },
        {
            "name": "FieldsService",
            "id": "injectable-FieldsService-e2b884a5d39228f7dc1bb025c7b399a2",
            "file": "src/app/modules/profiler/fields.service.ts",
            "properties": [
                {
                    "name": "_fields",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFields",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Map<string, string[]>>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { ProfilerFacade } from '@app/core/facades/profiler.facade';\nimport { Observable } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FieldsService {\n  private readonly _fields: Observable<any>;\n\n  constructor(\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private readonly profilerFacade: ProfilerFacade\n  ) {\n    this._fields = modelVersionsFacade.selectedModelVersion().pipe(\n      switchMap(mv =>\n        profilerFacade.loadFields(`${mv.id}`).pipe(\n          map(fields => {\n            const withoutIndex = s => s.slice(0, s.lastIndexOf('_'));\n            const dict = new Map<string, string[]>();\n\n            return fields.reduce(function (prev, nameWithIndex) {\n              const bareName = withoutIndex(nameWithIndex);\n              return prev.has(bareName)\n                ? prev.set(bareName, [...prev.get(bareName), nameWithIndex])\n                : prev.set(bareName, [nameWithIndex]);\n            }, dict);\n          })\n        )\n      )\n    );\n  }\n\n  getFields(): Observable<Map<string, string[]>> {\n    return this._fields;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profilerFacade",
                        "type": "ProfilerFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profilerFacade",
                        "type": "ProfilerFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "GradientColorsGenerator",
            "id": "injectable-GradientColorsGenerator-35730f0266ccc682d0e72600baee7c0d",
            "file": "src/app/modules/visualization/models/ColorGenerator.ts",
            "properties": [
                {
                    "name": "colorMapService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorMapService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getColors",
                    "args": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ColorsGenerator"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorMapService } from '@app/core/color-map.service';\nimport { ColoringType } from './ColoringType';\n\nimport { SCATTER_PLOT_PALETTE } from './ScatterPlotPalette';\nexport class ColorsGenerator {\n  getColors(data: number[]): string[] {\n    return data.map(() => '#00498e');\n  }\n}\n\n@Injectable()\nclass GradientColorsGenerator extends ColorsGenerator {\n  private colorMapService: ColorMapService;\n  constructor() {\n    super();\n    this.colorMapService = new ColorMapService();\n  }\n  public getColors(data: number[]) {\n    return data.map(val => {\n      const [r, g, b] = this.colorMapService.getRGB({\n        val,\n        type: 'redToBlue',\n      });\n      return `rgb(${r}, ${g}, ${b})`;\n    });\n  }\n}\n\nclass ClassLabelsColorsGenerator extends ColorsGenerator {\n  private classes: Array<string | number>;\n  constructor(classes: Array<string | number>) {\n    super();\n    this.classes = classes || [];\n  }\n  getColors(data: number[]) {\n    return data.map(val => {\n      return SCATTER_PLOT_PALETTE[this.classes.indexOf(val)];\n    });\n  }\n}\n\nclass MetricColorsGenerator implements ColorsGenerator {\n  metric: Metric;\n  constructor(metric: Metric) {\n    this.metric = metric;\n  }\n  public getColors(data: number[]) {\n    const { scores, operation, threshold } = this.metric;\n    const [successColor, failedColor] = ['#418ecc', '#ff716c'];\n    return scores.map(score => {\n      switch (operation) {\n        case 'Eq':\n          return score === threshold ? successColor : failedColor;\n        case 'NotEq':\n          return score !== threshold ? successColor : failedColor;\n        case 'Greater':\n          return score > threshold ? successColor : failedColor;\n        case 'Less':\n          return score < threshold ? successColor : failedColor;\n        case 'GreaterEq':\n          return score >= threshold ? successColor : failedColor;\n        case 'LessEq':\n          return score <= threshold ? successColor : failedColor;\n        default:\n          return successColor;\n      }\n    });\n    return [];\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorsGeneratorFabric {\n  public createColorGenerator(\n    type: 'class_label' | 'metric',\n    props: {\n      coloringType?: ColoringType;\n      classes?: Array<string | number>;\n      metric?: Metric;\n    }\n  ): ColorsGenerator {\n    switch (type) {\n      case 'class_label':\n        switch (props.coloringType) {\n          case 'class':\n            return new ClassLabelsColorsGenerator(props.classes);\n          case 'gradient':\n            return new GradientColorsGenerator();\n        }\n      case 'metric':\n        return new MetricColorsGenerator(props.metric);\n      default:\n        return new ColorsGenerator();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "extends": "ColorsGenerator",
            "type": "injectable"
        },
        {
            "name": "HttpService",
            "id": "injectable-HttpService-4bbc3650f333bb450e3cb334532a2dbe",
            "file": "src/app/core/data/services/http.service.ts",
            "properties": [
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "HS_BASE_URL"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createHttpParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "string | literal type | HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "string | literal type | HttpParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFullUrl",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hydroOptions",
                    "args": [
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IHydroHttpOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpClient,\n  HttpErrorResponse,\n  HttpParams,\n} from '@angular/common/http';\nimport { Injectable, Inject } from '@angular/core';\nimport { HS_BASE_URL } from '@app/core/base-url.token';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\ntype HydroHttpParams =\n  | string\n  | { [param: string]: string | string[] }\n  | HttpParams;\n\ninterface IHydroHttpOptions {\n  headers?: any;\n  params?: HydroHttpParams;\n  [propName: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HttpService {\n  constructor(\n    public http: HttpClient,\n    @Inject(HS_BASE_URL) public url: string\n  ) {}\n\n  get<T>(url: string, options?: IHydroHttpOptions) {\n    return this.http\n      .get<T>(this.getFullUrl(url), this.hydroOptions(options))\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  delete(url: string, options?: IHydroHttpOptions) {\n    return this.http\n      .delete(this.getFullUrl(url), this.hydroOptions(options))\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  post<T>(url: string, body, options?: IHydroHttpOptions) {\n    return this.http\n      .post<T>(this.getFullUrl(url), body, this.hydroOptions(options))\n      .pipe(catchError(this.handleError));\n  }\n\n  put(url: string, body, options?: IHydroHttpOptions) {\n    return this.http\n      .put(this.getFullUrl(url), body, this.hydroOptions(options))\n      .pipe(catchError(err => this.handleError(err)));\n  }\n\n  public getFullUrl(endpoint: string): string {\n    return this.url + endpoint;\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let message: string;\n    if (error.error instanceof ErrorEvent) {\n      message = `An error occurred: ${error.error.message}`;\n    } else {\n      const status: number = error.status;\n\n      let err: string = error.name;\n      let information: string = error.message;\n      if (error.error) {\n        err = error.error.error || error.name || '';\n        information = error.error.information || error.error.message || '';\n      }\n\n      message = `status: ${status}, error: ${err}, message: ${information} `;\n    }\n    return throwError(message);\n  }\n\n  private hydroOptions(options: IHydroHttpOptions = {}) {\n    if (options === null) {\n      return {};\n    }\n\n    const res = {\n      ...options,\n      params: this.createHttpParams(options.params),\n    };\n\n    return res;\n  }\n\n  private createHttpParams(\n    params: string | { [param: string]: string | string[] } | HttpParams = ''\n  ): HttpParams {\n    if (params instanceof HttpParams) {\n      return params;\n    } else if (typeof params === 'string') {\n      return new HttpParams({ fromString: params });\n    } else if (typeof params === 'object') {\n      for (const key in params) {\n        if (params.hasOwnProperty(key)) {\n          if (params[key] === undefined) {\n            delete params[key];\n          }\n        }\n      }\n      return new HttpParams({ fromObject: params });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HydroConfigService",
            "id": "injectable-HydroConfigService-7adb1b7de5b3f2bdd4e5b2e6fe060a16",
            "file": "src/app/core/hydro-config.service.ts",
            "properties": [
                {
                    "name": "config",
                    "defaultValue": "defaultConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HydroConfig",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "loadConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface HydroConfig {\n  showHeader: boolean;\n  liftMetadata: boolean;\n}\n\nconst defaultConfig: HydroConfig = {\n  showHeader: true,\n  liftMetadata: false,\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HydroConfigService {\n  public config: HydroConfig = defaultConfig;\n  constructor(private readonly http: HttpClient) {}\n\n  loadConfig() {\n    return this.http\n      .get<HydroConfig>(`/assets/config.json`)\n      .toPromise()\n      .then((data: any) => (this.config = data))\n      .catch((_: any) => {\n        console.warn(`Couldn't load config,using default config`);\n        return Promise.resolve();\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ImageHelperService",
            "id": "injectable-ImageHelperService-acd99b4f7c20ff7f407e7ceb40f4651d",
            "file": "src/app/core/image-helper.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "grayScale255ToRGBA",
                    "args": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colormapType",
                            "type": "ColorMapType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colormapType",
                            "type": "ColorMapType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "grayScaleAlphaToRGBA",
                    "args": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colormapType",
                            "type": "ColorMapType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colormapType",
                            "type": "ColorMapType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recognizeImageType",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "ImageData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ImageType",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "ImageData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "RGBtoRGBA",
                    "args": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "specifyGrayScale",
                    "args": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "grayScaleType",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "pixels",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformToRGBA",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "ImageData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "ImageData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ColorMapService, ColorMapType } from '@app/core/color-map.service';\nimport * as d3 from 'd3';\n\ninterface ImageData {\n  pixels: number[];\n  imageWidth: number;\n  imageHeight: number;\n  batchSize?: number;\n  colormap?: ColorMapType;\n}\n\nenum ImageType {\n  greyScaleAlpha = 'grey scale alpha channel',\n  greyScale255 = 'grey scale 0-255',\n  rgb = 'rbg',\n}\n\ntype grayScaleType = ImageType.greyScaleAlpha | ImageType.greyScale255;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageHelperService {\n  constructor(private colorMap: ColorMapService) {}\n  transformToRGBA(imageData: ImageData): number[] {\n    try {\n      switch (this.recognizeImageType(imageData)) {\n        case ImageType.greyScaleAlpha:\n          return this.grayScaleAlphaToRGBA(\n            imageData.pixels,\n            imageData.colormap\n          );\n        case ImageType.greyScale255:\n          return this.grayScale255ToRGBA(imageData.pixels, imageData.colormap);\n        case ImageType.rgb:\n          return this.RGBtoRGBA(imageData.pixels);\n        default:\n          break;\n      }\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n\n  private recognizeImageType(imageData: ImageData): ImageType {\n    const { pixels, imageHeight, imageWidth, batchSize } = imageData;\n    const dim =\n      pixels.length /\n      (imageWidth * imageHeight) /\n      (batchSize > 1 ? batchSize : 1);\n    switch (dim) {\n      case 1:\n        return this.specifyGrayScale(pixels);\n      case 3:\n        return ImageType.rgb;\n      default:\n        console.error({ pixels, imageHeight, imageWidth });\n        throw Error('Cant recognize image type');\n    }\n  }\n\n  private specifyGrayScale(pixels: number[]): grayScaleType {\n    return pixels.some(val => val > 0 && val < 1)\n      ? ImageType.greyScaleAlpha\n      : ImageType.greyScale255;\n  }\n\n  private grayScaleAlphaToRGBA(\n    pixels: number[],\n    colormapType: ColorMapType\n  ): number[] {\n    let rgb;\n    if (colormapType) {\n      rgb = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        const [r, g, b] = this.colorMap.getRGB({\n          val: cur,\n          type: colormapType,\n        });\n        acc[offset] = r;\n        acc[offset + 1] = g;\n        acc[offset + 2] = b;\n        acc[offset + 3] = 255;\n        return acc;\n      }, []);\n    } else {\n      rgb = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        acc[offset] = 0;\n        acc[offset + 1] = 0;\n        acc[offset + 2] = 0;\n        acc[offset + 3] = 255 * (1 - cur);\n\n        return acc;\n      }, []);\n    }\n    return rgb;\n  }\n\n  private RGBtoRGBA(pixels: number[]): number[] {\n    const arr = [];\n\n    for (let i = 0, l = pixels.length; i < l; i += 3) {\n      const x = arr.length;\n      arr[x] = pixels[i];\n      arr[x + 1] = pixels[i + 1];\n      arr[x + 2] = pixels[i + 2];\n      arr[x + 3] = 255;\n    }\n    return arr;\n  }\n\n  private grayScale255ToRGBA(\n    pixels: number[],\n    colormapType: ColorMapType\n  ): number[] {\n    let result: number[];\n    if (colormapType) {\n      const depthScale = d3.scaleLinear().domain([0, 255]).clamp(true);\n\n      result = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        const [r, g, b] = this.colorMap.getRGB({\n          val: depthScale(cur),\n          type: colormapType,\n        });\n        acc[offset] = r;\n        acc[offset + 1] = g;\n        acc[offset + 2] = b;\n        acc[offset + 3] = 255;\n\n        return acc;\n      }, []);\n    } else {\n      result = pixels.reduce((acc, cur) => {\n        const offset = acc.length;\n        acc[offset] = cur;\n        acc[offset + 1] = cur;\n        acc[offset + 2] = cur;\n        acc[offset + 3] = 255;\n\n        return acc;\n      }, []);\n    }\n    return result;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorMap",
                        "type": "ColorMapService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "colorMap",
                        "type": "ColorMapService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IsRootUrlService",
            "id": "injectable-IsRootUrlService-6c9100defdfb05565eca10e8adb24d44",
            "file": "src/app/core/is-root-url.service.ts",
            "properties": [
                {
                    "name": "baseHref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "APP_BASE_HREF"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "isRootUrl",
                    "args": [
                        {
                            "name": "event",
                            "type": "RouterEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "RouterEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { RouterEvent } from '@angular/router';\nimport { APP_BASE_HREF } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IsRootUrlService {\n  constructor(@Inject(APP_BASE_HREF) public baseHref: string) {}\n\n  isRootUrl(event: RouterEvent): boolean {\n    const n = this.baseHref.split('/').filter(_ => _).length;\n    return event.url.split('/').length <= 2 + n;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "baseHref",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "baseHref",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LogService",
            "id": "injectable-LogService-5d9dcef21e6e8d491ee851aa37b9366c",
            "file": "src/app/core/data/services/log.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLog",
                    "args": [
                        {
                            "name": "type",
                            "type": "logType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "logType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "param",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { scan, finalize, share } from 'rxjs/operators';\n\nimport { environment } from 'environments/environment';\nimport { HS_BASE_URL } from '@app/core/base-url.token';\n\ntype logType = 'servable' | 'model-version';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogService {\n  constructor(@Inject(HS_BASE_URL) private baseUrl: string) {}\n\n  getLog(type: logType, param: string): Observable<string> {\n    let eventSource: EventSource;\n\n    const logStream$ = new Observable<string>(subscribe => {\n      const { apiUrl } = environment;\n      let url: string;\n\n      switch (type) {\n        case 'servable':\n          url = `${this.baseUrl}${apiUrl}/servable/${param}/logs?follow=true`;\n          break;\n        case 'model-version':\n          url = `${this.baseUrl}${apiUrl}/model/version/${param}/logs?follow=true`;\n          break;\n      }\n      eventSource = new EventSource(url, {\n        withCredentials: true,\n      });\n\n      eventSource.addEventListener('EndOfStream', () => {\n        eventSource.close();\n        subscribe.complete();\n      });\n\n      eventSource.addEventListener('Log', ({ data }: MessageEvent) => {\n        if (data) {\n          subscribe.next(data);\n        }\n      });\n\n      eventSource.addEventListener('message', ({ data }: MessageEvent) => {\n        if (data) {\n          subscribe.next(data);\n        }\n      });\n\n      eventSource.onerror = err => {\n        subscribe.error(err);\n      };\n    });\n\n    return logStream$.pipe(\n      share(),\n      finalize(() => {\n        eventSource.close();\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LogsService",
            "id": "injectable-LogsService-6d6a778db77f9427fd511d9bc48f6959",
            "file": "src/app/modules/model-version/logs.service.ts",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentRef<ModelVersionLogComponent | ServableLogsComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "logIsVisible",
                    "defaultValue": "new BehaviorSubject<boolean>(\n    false\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "logIsVisible$",
                    "defaultValue": "this.logIsVisible.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "closeGlobalLog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "setViewContainerRef",
                    "args": [
                        {
                            "name": "value",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showBuildLog",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showServableLogs",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleGlobalLog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ModelVersionLogComponent } from '@app/modules/model-version/components';\nimport { ServableLogsComponent } from '@app/modules/servables/containers';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogsService {\n  public viewContainerRef: ViewContainerRef;\n  private current: ComponentRef<\n    ModelVersionLogComponent | ServableLogsComponent\n  >;\n\n  private logIsVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(\n    false\n  );\n  public logIsVisible$: Observable<boolean> = this.logIsVisible.asObservable();\n\n  constructor(private resolver: ComponentFactoryResolver) {}\n\n  public showBuildLog(modelVersionId: number) {\n    this.viewContainerRef.clear();\n    const factory = this.resolver.resolveComponentFactory(\n      ModelVersionLogComponent\n    );\n    const component = this.viewContainerRef.createComponent(factory);\n\n    this.current = component;\n    component.instance.modelVersion = modelVersionId;\n    component.instance.closed.subscribe(() => this.closeGlobalLog());\n    component.changeDetectorRef.detectChanges();\n    this.toggleGlobalLog();\n  }\n\n  public showServableLogs(name: string) {\n    this.viewContainerRef.clear();\n    const factory = this.resolver.resolveComponentFactory(\n      ServableLogsComponent\n    );\n    const component = this.viewContainerRef.createComponent(factory);\n    this.current = component;\n    component.instance.servableName = name;\n    component.instance.closed.subscribe(() => this.closeGlobalLog());\n    component.changeDetectorRef.detectChanges();\n    this.toggleGlobalLog();\n  }\n\n  public toggleGlobalLog(): void {\n    this.logIsVisible.next(!this.logIsVisible.value);\n  }\n\n  public closeGlobalLog(): void {\n    this.current.destroy();\n    this.viewContainerRef.clear();\n    this.logIsVisible.next(false);\n  }\n\n  public setViewContainerRef(value: ViewContainerRef): void {\n    this.viewContainerRef = value;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetricChartsState",
            "id": "injectable-MetricChartsState-a3a408030441e109be97d7affb98b07d",
            "file": "src/app/modules/monitoring/store/metric-charts.state.ts",
            "properties": [
                {
                    "name": "state",
                    "defaultValue": "new BehaviorSubject<State>(\n    initialState\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<State>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<State>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addModelVersionToCompare",
                    "args": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModelVersionsToCompare",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\n\nimport { ModelVersion } from '@app/core/data/types';\n\ninterface State {\n  modelVersionsToCompare: ModelVersion[];\n}\n\nconst initialState: State = {\n  modelVersionsToCompare: [],\n};\n\n@Injectable()\nexport class MetricChartsState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState\n  );\n  constructor() {\n    this.state$ = this.state.asObservable();\n  }\n\n  addModelVersionToCompare(modelVersions: ModelVersion[]): void {\n    const currentState = this.state.getValue();\n    this.state.next({ ...currentState, modelVersionsToCompare: modelVersions });\n  }\n\n  getModelVersionsToCompare(): Observable<ModelVersion[]> {\n    return this.state$.pipe(\n      map(({ modelVersionsToCompare }) => modelVersionsToCompare),\n      distinctUntilChanged()\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "type": "injectable"
        },
        {
            "name": "MetricsEffects",
            "id": "injectable-MetricsEffects-4dfc99b6b8c5064e3cc137ce4cbf111c",
            "file": "src/app/modules/monitoring/store/effects/metrics.effects.ts",
            "properties": [
                {
                    "name": "addMetric$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddMetric),\n      switchMap(action =>\n        this.metricsService.addMetricSpecification(action.aggregation).pipe(\n          switchMap(response => {\n            return [\n              AddMetricSuccess({\n                payload: new MetricSpecification(response),\n              }),\n              Notify({\n                kind: 'success',\n                message: 'Metric was successfully added',\n              }),\n            ];\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "deleteMetric$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteMetric),\n      switchMap(({ id }) => {\n        return this.metricsService.deleteMetricSpecification(id).pipe(\n          switchMap(() => {\n            return [\n              DeleteMetricSuccess({ payload: { id } }),\n              Notify({\n                kind: 'warning',\n                message: 'Metric has been deleted',\n              }),\n            ];\n          }),\n          catchError(error => {\n            return of(\n              DeleteMetricFail({ error }),\n              Notify({ kind: 'error', message: `Error: ${error}` }),\n            );\n          }),\n        );\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "loadMetrics$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(LoadMetrics),\n      switchMap(() => this.modelVersionsFacade.selectedModelVersion()),\n      switchMap(({ id }) => {\n        return this.metricsService.getMetricSpecifications(`${id}`).pipe(\n          map(metricSettings =>\n            LoadMetricsSuccess({ payload: metricSettings }),\n          ),\n          catchError(error =>\n            of(\n              LoadMetricsFail({ error }),\n              Notify({ kind: 'error', message: \"Couldn't load metrics\" }),\n            ),\n          ),\n        );\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\n\nimport { SnackbarService } from '@app/core/snackbar.service';\nimport { HydroServingState } from '@app/core/store/states/root.state';\n\nimport { MetricsService } from '../../services';\nimport {\n  LoadMetrics,\n  LoadMetricsSuccess,\n  LoadMetricsFail,\n  AddMetric,\n  AddMetricSuccess,\n  DeleteMetric,\n  DeleteMetricSuccess,\n  DeleteMetricFail,\n} from '../../store/actions';\n\nimport { MetricSpecification } from '@app/core/data/types';\nimport { of } from 'rxjs';\nimport { switchMap, map, catchError } from 'rxjs/operators';\nimport { Notify } from '@app/core/store/actions/notifications.actions';\n\n@Injectable()\nexport class MetricsEffects {\n  addMetric$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddMetric),\n      switchMap(action =>\n        this.metricsService.addMetricSpecification(action.aggregation).pipe(\n          switchMap(response => {\n            return [\n              AddMetricSuccess({\n                payload: new MetricSpecification(response),\n              }),\n              Notify({\n                kind: 'success',\n                message: 'Metric was successfully added',\n              }),\n            ];\n          }),\n        ),\n      ),\n    ),\n  );\n\n  deleteMetric$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteMetric),\n      switchMap(({ id }) => {\n        return this.metricsService.deleteMetricSpecification(id).pipe(\n          switchMap(() => {\n            return [\n              DeleteMetricSuccess({ payload: { id } }),\n              Notify({\n                kind: 'warning',\n                message: 'Metric has been deleted',\n              }),\n            ];\n          }),\n          catchError(error => {\n            return of(\n              DeleteMetricFail({ error }),\n              Notify({ kind: 'error', message: `Error: ${error}` }),\n            );\n          }),\n        );\n      }),\n    ),\n  );\n\n  loadMetrics$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(LoadMetrics),\n      switchMap(() => this.modelVersionsFacade.selectedModelVersion()),\n      switchMap(({ id }) => {\n        return this.metricsService.getMetricSpecifications(`${id}`).pipe(\n          map(metricSettings =>\n            LoadMetricsSuccess({ payload: metricSettings }),\n          ),\n          catchError(error =>\n            of(\n              LoadMetricsFail({ error }),\n              Notify({ kind: 'error', message: \"Couldn't load metrics\" }),\n            ),\n          ),\n        );\n      }),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private metricsService: MetricsService,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private store: Store<HydroServingState>,\n    private snackbar: SnackbarService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metricsService",
                        "type": "MetricsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metricsService",
                        "type": "MetricsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetricsFacade",
            "id": "injectable-MetricsFacade-973099c8dd6a4c9c87733da6f5c02762",
            "file": "src/app/modules/monitoring/store/facades/metrics.facade.ts",
            "properties": [
                {
                    "name": "selectedMetrics$",
                    "defaultValue": "this.store.pipe(\n    select(selectSelectedMetrics),\n    neitherNullNorUndefined,\n    map(metrics =>\n      metrics.sort(\n        (m1, m2) => +m1.id.startsWith('fake') - +m2.id.startsWith('fake')\n      )\n    ),\n    distinctUntilChanged(),\n    shareReplay(1)\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMetric",
                    "args": [
                        {
                            "name": "metric",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metric",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMetric",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedMetrics",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MetricSpecification[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadMetrics",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { map, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\n\nimport { MetricSpecification } from '@app/core/data/types';\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport { neitherNullNorUndefined } from '@app/utils';\n\nimport { LoadMetrics, DeleteMetric, AddMetric } from '../actions';\nimport { selectSelectedMetrics } from '../selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetricsFacade {\n  private selectedMetrics$ = this.store.pipe(\n    select(selectSelectedMetrics),\n    neitherNullNorUndefined,\n    map(metrics =>\n      metrics.sort(\n        (m1, m2) => +m1.id.startsWith('fake') - +m2.id.startsWith('fake')\n      )\n    ),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  constructor(private store: Store<HydroServingState>) {}\n\n  getSelectedMetrics(): Observable<MetricSpecification[]> {\n    return this.selectedMetrics$;\n  }\n\n  loadMetrics(): void {\n    this.store.dispatch(LoadMetrics());\n  }\n\n  deleteMetric(id: string): void {\n    this.store.dispatch(DeleteMetric({ id }));\n  }\n\n  addMetric(metric: any): void {\n    this.store.dispatch(AddMetric({ aggregation: metric }));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MetricsService",
            "id": "injectable-MetricsService-2a7476aadda5b884a3a8fee0adb57cd3",
            "file": "src/app/modules/monitoring/services/api/metrics.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMetricSpecification",
                    "args": [
                        {
                            "name": "metricSpecification",
                            "type": "MetricSpecificationRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<object>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "metricSpecification",
                            "type": "MetricSpecificationRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMetricSpecification",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<object>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetricSpecifications",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MetricSpecification[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { environment } from '@environments/environment';\nimport {\n  MetricSpecification,\n  MetricSpecificationRequest,\n} from '@app/core/data/types';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class MetricsService {\n  private baseUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseUrl = `${environment.apiUrl}/monitoring/metricspec`;\n  }\n\n  public getMetricSpecifications(\n    modelVersionId: string\n  ): Observable<MetricSpecification[]> {\n    return this.http\n      .get<MetricSpecification[]>(\n        `${this.baseUrl}/modelversion/${modelVersionId}`\n      )\n      .pipe(\n        catchError(_ => {\n          throw new Error(`Can't fetch data from monitoring service`);\n        })\n      );\n  }\n\n  public addMetricSpecification(\n    metricSpecification: MetricSpecificationRequest\n  ): Observable<object> {\n    return this.http.post(this.baseUrl, metricSpecification).pipe(\n      map((res: Response): any => {\n        return res;\n      })\n    );\n  }\n\n  public deleteMetricSpecification(id: string): Observable<object> {\n    return this.http\n      .delete(`${this.baseUrl}/${id}`)\n      .pipe(map((res: Response): any => res));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelBuilder",
            "id": "injectable-ModelBuilder-be40f0433f95ada864dfd39c18c13682",
            "file": "src/app/core/data/builders/model.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Model",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toModel",
                    "args": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Model",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Model } from '../types/model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModelBuilder {\n  public build(props): Model {\n    return this.toModel(props);\n  }\n\n  private toModel(props): Model {\n    const model = new Model({\n      id: props.id || undefined,\n      name: props.name || undefined,\n    });\n\n    return model;\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ModelsEffects",
            "id": "injectable-ModelsEffects-246f139e5780144a46389827a26184ee",
            "file": "src/app/core/store/effects/models.effects.ts",
            "properties": [
                {
                    "name": "deleteModel$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteModel),\n      switchMap(({ modelId }) => {\n        return this.modelsService.deleteModel(modelId).pipe(\n          switchMap(() => {\n            this.router.navigate(['models']);\n            return [\n              DeleteModelSuccess({ modelId }),\n              NotifyWarning('Model has been deleted'),\n            ];\n          }),\n          catchError(error => {\n            return of(\n              DeleteModelFail({ error }),\n              NotifyError(`Error: ${error}`),\n            );\n          }),\n        );\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "getAllModels$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(GetModels),\n      switchMap(() =>\n        this.modelsService.getModels().pipe(\n          map(data => {\n            const models = data\n              .map(this.modelBuilder.build, this.modelBuilder)\n              .map(model => {\n                return {\n                  ...model,\n                  favorite: this.favoriteService.isFavorite(model.name),\n                };\n              });\n            return GetModelsSuccess({ payload: models });\n          }),\n          catchError(error => {\n            return of(\n              GetModelsFail({ error }),\n              NotifyError('Failed to load models'),\n            );\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "toggleFavorite$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ToggleFavorite),\n        tap(({ model }) => {\n          model.favorite\n            ? this.favoriteService.remove(model.name)\n            : this.favoriteService.add(model.name);\n        }),\n      ),\n    { dispatch: false },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FavoriteService } from '@app/core/favorite.service';\nimport { tap } from 'rxjs/operators';\n\nimport { ModelService } from '../../data/services/model.service';\n\nimport { SnackbarService } from '../../snackbar.service';\nimport { ModelBuilder } from '../../data/builders';\n\nimport {\n  GetModels,\n  GetModelsSuccess,\n  GetModelsFail,\n  DeleteModel,\n  DeleteModelSuccess,\n  DeleteModelFail,\n  ToggleFavorite,\n} from '../actions/models.actions';\n\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, catchError, switchMap } from 'rxjs/operators';\nimport { NotifierService } from 'angular-notifier';\nimport { NotifyError, NotifyWarning } from '../actions/notifications.actions';\n\n@Injectable()\nexport class ModelsEffects {\n  getAllModels$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(GetModels),\n      switchMap(() =>\n        this.modelsService.getModels().pipe(\n          map(data => {\n            const models = data\n              .map(this.modelBuilder.build, this.modelBuilder)\n              .map(model => {\n                return {\n                  ...model,\n                  favorite: this.favoriteService.isFavorite(model.name),\n                };\n              });\n            return GetModelsSuccess({ payload: models });\n          }),\n          catchError(error => {\n            return of(\n              GetModelsFail({ error }),\n              NotifyError('Failed to load models'),\n            );\n          }),\n        ),\n      ),\n    ),\n  );\n\n  deleteModel$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteModel),\n      switchMap(({ modelId }) => {\n        return this.modelsService.deleteModel(modelId).pipe(\n          switchMap(() => {\n            this.router.navigate(['models']);\n            return [\n              DeleteModelSuccess({ modelId }),\n              NotifyWarning('Model has been deleted'),\n            ];\n          }),\n          catchError(error => {\n            return of(\n              DeleteModelFail({ error }),\n              NotifyError(`Error: ${error}`),\n            );\n          }),\n        );\n      }),\n    ),\n  );\n\n  toggleFavorite$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(ToggleFavorite),\n        tap(({ model }) => {\n          model.favorite\n            ? this.favoriteService.remove(model.name)\n            : this.favoriteService.add(model.name);\n        }),\n      ),\n    { dispatch: false },\n  );\n\n  constructor(\n    private modelBuilder: ModelBuilder,\n    private modelsService: ModelService,\n    private actions$: Actions,\n    private snackbar: SnackbarService,\n    private router: Router,\n    private favoriteService: FavoriteService,\n    private norufierService: NotifierService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelBuilder",
                        "type": "ModelBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsService",
                        "type": "ModelService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "norufierService",
                        "type": "NotifierService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "modelBuilder",
                        "type": "ModelBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsService",
                        "type": "ModelService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "norufierService",
                        "type": "NotifierService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelService",
            "id": "injectable-ModelService-4c5ab2ce1b97d5cb5a98c2a29d66edbf",
            "file": "src/app/core/data/services/model.service.ts",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteModel",
                    "args": [
                        {
                            "name": "modelId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelId",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModels",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment } from '@environments/environment';\nimport { map } from 'rxjs/operators';\n\nimport { HttpService } from './http.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModelService {\n  private readonly baseAPIUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseAPIUrl = `${environment.apiUrl}/model`;\n  }\n\n  public getModels() {\n    return this.http\n      .get(this.baseAPIUrl)\n      .pipe(map((res: Response): any => res));\n  }\n\n  public deleteModel(modelId) {\n    return this.http.delete(`${this.baseAPIUrl}/${modelId}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelsFacade",
            "id": "injectable-ModelsFacade-665e68d22c7681094ed8404dafb1b3cb",
            "file": "src/app/core/facades/models.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "allModels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "areModelsLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteModel",
                    "args": [
                        {
                            "name": "modelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "firstModel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modelsWithReleasedVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nonMetricModels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedModel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectedModelVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "someModelVersionIsReleased",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleFavorite",
                    "args": [
                        {
                            "name": "model",
                            "type": "Model",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Model",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { neitherNullNorUndefined } from '@app/utils';\n\nimport { Observable, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ModelVersionStatus, ModelVersion, Model } from '@app/core/data/types';\n\nimport {\n  selectAllModelVersions,\n  selectFirstModel,\n  selectModelsLoaded,\n  selectModelsWithReleasedVersions,\n} from '@app/core/store/selectors';\nimport { HydroServingState } from '../store/states/root.state';\nimport {\n  GetModels,\n  DeleteModel,\n  ToggleFavorite,\n} from '../store/actions/models.actions';\n\nimport {\n  selectAllModels,\n  selectSelectedModel,\n  selectNonMetricModels,\n} from '../store/selectors/models.selectors';\n\n@Injectable({ providedIn: 'root' })\nexport class ModelsFacade {\n  constructor(private readonly store: Store<HydroServingState>) {}\n\n  loadAll(): void {\n    this.store.dispatch(GetModels());\n  }\n\n  deleteModel(modelId: number): void {\n    this.store.dispatch(DeleteModel({ modelId }));\n  }\n\n  allModels(): Observable<Model[]> {\n    return this.store.pipe(select(selectAllModels));\n  }\n\n  modelsWithReleasedVersions(): Observable<Model[]> {\n    return this.store.pipe(select(selectModelsWithReleasedVersions));\n  }\n\n  firstModel(): Observable<Model> {\n    return this.store.pipe(select(selectFirstModel));\n  }\n\n  selectedModel(): Observable<Model> {\n    return this.store\n      .pipe(select(selectSelectedModel))\n      .pipe(neitherNullNorUndefined);\n  }\n\n  nonMetricModels(): Observable<Model[]> {\n    return this.store.pipe(select(selectNonMetricModels));\n  }\n\n  someModelVersionIsReleased(): Observable<boolean> {\n    return this.store.pipe(\n      select(selectAllModelVersions),\n      map(modelVersions =>\n        modelVersions.some(\n          ({ status }) => status === ModelVersionStatus.Released,\n        ),\n      ),\n    );\n  }\n\n  selectedModelVersions(): Observable<ModelVersion[]> {\n    const selectedModel$ = this.selectedModel();\n    const selectedModelVersions$ = this.store.pipe(\n      select(selectAllModelVersions),\n    );\n\n    return combineLatest([selectedModel$, selectedModelVersions$]).pipe(\n      map(([model, modelVersions]) => {\n        return modelVersions.filter(mv => mv.model.id === model.id);\n      }),\n    );\n  }\n\n  toggleFavorite(model: Model) {\n    this.store.dispatch(ToggleFavorite({ model }));\n  }\n\n  areModelsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(selectModelsLoaded));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelsHeaderService",
            "id": "injectable-ModelsHeaderService-05a5aab063403fddae2100034d42b742",
            "file": "src/app/modules/models/layout/models-header/models-header.service.ts",
            "properties": [
                {
                    "name": "siblings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "getModel",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getService",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSiblings",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isButtonShowed",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isRootUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClickModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickSibling",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, first } from 'rxjs/operators';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { Model, ModelVersion } from '@app/core/data/types';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport { selectRouterState } from '@app/core/store/selectors/router.selectors';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\nimport {\n  DialogDeleteModelComponent,\n  SELECTED_MODEL,\n} from '@app/modules/dialogs/components';\n\n@Injectable()\nexport class ModelsHeaderService {\n  siblings$: Observable<ModelVersion[]>;\n\n  constructor(\n    private readonly route: ActivatedRoute,\n    private readonly router: Router,\n    private readonly store: Store<HydroServingState>,\n    private readonly facade: ModelsFacade,\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private readonly dialog: DialogsService\n  ) {\n    this.siblings$ = this.modelVersionsFacade.siblingModelVersions();\n  }\n\n  isButtonShowed(): Observable<boolean> {\n    return this.store.pipe(\n      select(selectRouterState),\n      map(state => this.isRootUrl(state.state.url))\n    );\n  }\n\n  getModel(): Observable<Model> {\n    return this.facade.selectedModel();\n  }\n\n  getModelVersion(): Observable<ModelVersion> {\n    return this.modelVersionsFacade.selectedModelVersion();\n  }\n\n  getSiblings(): Observable<ModelVersion[]> {\n    return this.modelVersionsFacade.siblingModelVersions();\n  }\n\n  getService(): Observable<string> {\n    return this.store.pipe(\n      select(selectRouterState),\n      map(state => {\n        const urlArray = state.state.url.split('/');\n        const serviceIndexInArray = 4;\n        return (\n          urlArray[serviceIndexInArray] &&\n          urlArray[serviceIndexInArray].replace('_', ' ').split('?')[0]\n        );\n      })\n    );\n  }\n\n  onClickModel(): void {\n    const [, root, modelName] = this.router.url.split('/');\n    this.router.navigate([root, modelName]);\n  }\n\n  onClickModelVersion(): void {\n    const [, root, modelName, modelVersionNumber] = this.router.url.split('/');\n    this.router.navigate([root, modelName, modelVersionNumber], {\n      queryParamsHandling: 'merge',\n    });\n  }\n\n  onClickSibling(modelVersion: ModelVersion): void {\n    const [, root, modelName, , ...tail] = this.router.url.split('/');\n    this.router.navigate([root, modelName, modelVersion.modelVersion, ...tail]);\n  }\n\n  onDelete() {\n    this.getModel()\n      .pipe(first())\n      .subscribe(model => {\n        this.dialog.createDialog({\n          component: DialogDeleteModelComponent,\n          providers: [{ provide: SELECTED_MODEL, useValue: model }],\n        });\n      });\n  }\n\n  private isRootUrl(url: string): boolean {\n    return url.split('/').length === 3;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelsSidebarService",
            "id": "injectable-ModelsSidebarService-25e8db43908fd2301ae907f30954184b",
            "file": "src/app/modules/models/page/models-sidebar.service.ts",
            "properties": [
                {
                    "name": "_filterString",
                    "defaultValue": "new BehaviorSubject('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_metricModelsAreHidden",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "allModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model[]>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "nonMetricModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model[]>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeFilter",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeMetricModelsHide",
                    "args": [
                        {
                            "name": "hide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "favoriteModels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filteredModels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterString",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "metricModelsAreHidden",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "models",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "nonFavoriteModels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "visibleModels",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Model[]>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { map } from 'rxjs/operators';\nimport { Model } from '@app/core/data/types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModelsSidebarService {\n  private readonly allModels$: Observable<Model[]>;\n  private readonly nonMetricModels$: Observable<Model[]>;\n\n  private _metricModelsAreHidden = new BehaviorSubject<boolean>(true);\n  private _filterString = new BehaviorSubject('');\n\n  constructor(private readonly facade: ModelsFacade) {\n    this.allModels$ = facade.allModels();\n    this.nonMetricModels$ = facade.nonMetricModels();\n  }\n\n  metricModelsAreHidden(): Observable<boolean> {\n    return this._metricModelsAreHidden.asObservable();\n  }\n\n  private models(): Observable<Model[]> {\n    return this.metricModelsAreHidden().pipe(\n      switchMap(hidden => {\n        return hidden ? this.nonMetricModels$ : this.allModels$;\n      }),\n    );\n  }\n\n  filterString(): Observable<string> {\n    return this._filterString.asObservable();\n  }\n\n  filteredModels(): Observable<Model[]> {\n    return combineLatest([this.models(), this.filterString()]).pipe(\n      map(([models, filterStr]) => {\n        let filtered: Model[] = models;\n        if (filterStr) {\n          filtered = models.filter(model => model.name.includes(filterStr));\n        }\n        return filtered;\n      }),\n    );\n  }\n\n  nonFavoriteModels(): Observable<Model[]> {\n    return this.filteredModels().pipe(\n      map(models => models.filter(model => !model.favorite)),\n    );\n  }\n\n  favoriteModels(): Observable<Model[]> {\n    return this.filteredModels().pipe(\n      map(models => models.filter(model => model.favorite)),\n    );\n  }\n\n  visibleModels(): Observable<Model[]> {\n    return combineLatest([\n      this.favoriteModels(),\n      this.nonFavoriteModels(),\n    ]).pipe(\n      map(([fav, nonFav]) => {\n        return [...fav, ...nonFav];\n      }),\n    );\n  }\n\n  changeFilter(str: string): void {\n    this._filterString.next(str);\n  }\n\n  changeMetricModelsHide(hide: boolean): void {\n    this._metricModelsAreHidden.next(hide);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelUploadingCommandsService",
            "id": "injectable-ModelUploadingCommandsService-769bac5829dca9f300f1c936ee5d6225",
            "file": "src/app/core/model-uploading-commands.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getCommands",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\nimport { HS_ABSOLUTE_URL } from './base-url.token';\n\n@Injectable({ providedIn: 'root' })\nexport class ModelUploadingCommandsService {\n  constructor(@Inject(HS_ABSOLUTE_URL) private url: string) {}\n\n  getCommands(): string[] {\n    return [\n      'pip install hs',\n      `hs cluster add --name=cluster --server=${this.url}`,\n      'hs cluster use cluster',\n      'git clone https://github.com/Hydrospheredata/hydro-serving-example.git',\n      'cd hydro-serving-example/examples/custom_metrics/census/models/model',\n      'hs apply -f serving.yaml',\n    ];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelVariantFormService",
            "id": "injectable-ModelVariantFormService-6fd08757d235cf954bf02af26010b229",
            "file": "src/app/modules/applications/components/forms/model-variant-form/model-variant-form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildModelVariantFormGroup",
                    "args": [
                        {
                            "name": "modelVariantFormData",
                            "type": "ModelVariantFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.defaultModelVariantFormData(\n      [],\n      null,\n    )"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVariantFormData",
                            "type": "ModelVariantFormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.defaultModelVariantFormData(\n      [],\n      null,\n    )",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultModelVariantFormData",
                    "args": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModelVariantFormData",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeploymentConfigs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modelVariantToModelVariantFormData",
                    "args": [
                        {
                            "name": "modelVariant",
                            "type": "ModelVariant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModelVariantFormData",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVariant",
                            "type": "ModelVariant",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport {\n  DeploymentConfig,\n  ModelVariant,\n  ModelVersion,\n} from '@app/core/data/types';\n\nexport interface ModelVariantFormData {\n  weight: number;\n  modelId?: number;\n  modelVersion: ModelVersion;\n  deploymentConfigName: string;\n}\n\n@Injectable()\nexport class ModelVariantFormService {\n  constructor(\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private readonly modelsFacade: ModelsFacade,\n    private readonly depConfigsFacade: DeploymentConfigsFacade,\n    private readonly customValidators: CustomValidatorsService,\n  ) {}\n\n  defaultModelVariantFormData(\n    modelVersions: ModelVersion[],\n    depConfig: DeploymentConfig,\n  ): ModelVariantFormData {\n    return {\n      weight: 100,\n      modelId: modelVersions[0].model.id,\n      modelVersion: modelVersions[0],\n      deploymentConfigName: depConfig.name,\n    };\n  }\n\n  modelVariantToModelVariantFormData(\n    modelVariant: ModelVariant,\n    modelVersions: ModelVersion[],\n  ): ModelVariantFormData {\n    const modelVersion = modelVersions.find(\n      mv => mv.id === modelVariant.modelVersionId,\n    );\n\n    return {\n      weight: modelVariant.weight,\n      modelId: modelVersion.model.id,\n      modelVersion: modelVersion,\n      deploymentConfigName: modelVariant.deploymentConfigurationName,\n    };\n  }\n\n  buildModelVariantFormGroup(\n    modelVariantFormData: ModelVariantFormData = this.defaultModelVariantFormData(\n      [],\n      null,\n    ),\n  ): FormGroup {\n    return new FormGroup({\n      weight: new FormControl(modelVariantFormData.weight, [\n        this.customValidators.required(),\n        this.customValidators.pattern(/^[0-9]+$/),\n      ]),\n      modelId: new FormControl(\n        modelVariantFormData.modelId,\n        this.customValidators.required(),\n      ),\n      modelVersion: new FormControl(\n        modelVariantFormData.modelVersion,\n        this.customValidators.required(),\n      ),\n      deploymentConfigName: new FormControl(\n        modelVariantFormData.deploymentConfigName,\n        this.customValidators.required(),\n      ),\n    });\n  }\n\n  getDeploymentConfigs(): Observable<DeploymentConfig[]> {\n    return this.depConfigsFacade.getAll();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelVersionBuilder",
            "id": "injectable-ModelVersionBuilder-9c0d61ad63e959c2cb055bb3320157b4",
            "file": "src/app/core/data/builders/model-version.builder.ts",
            "properties": [],
            "methods": [
                {
                    "name": "build",
                    "args": [
                        {
                            "name": "props",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModelVersion",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toModelVersion",
                    "args": [
                        {
                            "name": "props",
                            "type": "ModelVersionDTO",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModelVersion",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "ModelVersionDTO",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  ModelVersion,\n  ModelVersionStatus,\n  ModelVersionDTO,\n} from '../types/model-version';\nimport { ModelSignature } from '@app/core/data/types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModelVersionBuilder {\n  public build(props: any): ModelVersion {\n    return this.toModelVersion(props);\n  }\n\n  private toModelVersion(props: ModelVersionDTO): ModelVersion {\n    return new ModelVersion({\n      id: props.id,\n      image: props.image,\n      created: props.created,\n      finished: props.finished,\n      modelVersion: props.modelVersion,\n      modelSignature: new ModelSignature(props.modelSignature),\n      runtime: props.runtime,\n      model: props.model,\n      status:\n        (props.status && ModelVersionStatus[props.status]) ||\n        ModelVersionStatus.Undefined,\n      applications: props.applications || [],\n      metadata: props.metadata || {},\n      isExternal: props.isExternal,\n    });\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "ModelVersionsEffects",
            "id": "injectable-ModelVersionsEffects-84dba110a3493042db77da86742ddad1",
            "file": "src/app/core/store/effects/model-versions.effects.ts",
            "properties": [
                {
                    "name": "addApplication$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddSuccess),\n      withLatestFrom(this.store.pipe(select(selectModelVersionEntities))),\n      exhaustMap(([{ payload: application }, modelVersionsDict]) => {\n        const stages = application.executionGraph.stages;\n\n        const variants: ModelVariant[] = _.flatMap(\n          stages,\n          (stage: Stage) => stage.modelVariants,\n        );\n        const ids = _.map(variants, (mv: ModelVariant) => mv.modelVersionId);\n        const modelVersions = ids.map(id => modelVersionsDict[id]);\n\n        const modelVersionsUpdated = modelVersions.map(mv => {\n          return mv.addApplication(application.name);\n        });\n\n        return of(GetModelVersionsSuccess({ payload: modelVersionsUpdated }));\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "addModelVersion$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddModelVersion),\n      withLatestFrom(this.store.pipe(select(selectAllModels))),\n      exhaustMap(([{ modelVersion }, models]) => {\n        const modelExist = models.some(\n          model => model.name === modelVersion.model.name,\n        );\n\n        if (modelExist) {\n          return of(UpsertModelVersion({ modelVersion }));\n        } else {\n          const model = this.modelBuilder.build(modelVersion.model);\n\n          return concat(\n            of(AddModel({ model })),\n            of(UpsertModelVersion({ modelVersion })),\n          );\n        }\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "deleteModelVersionsSuccess$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteModelVersionSuccess),\n      switchMap(_ => of(NotifyWarning(`Model version: ${_} has been deleted`))),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "getAllVersions$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(GetModelVersions),\n      switchMap(() =>\n        this.modelVersionsService.getAllVersions().pipe(\n          switchMap(data => {\n            const modelVersions = data.map(\n              this.modelVersionBuilder.build,\n              this.modelVersionBuilder,\n            );\n\n            const models: Model[] = _.uniqBy(\n              modelVersions.map(mv => mv.model),\n              function (model: ModelDTO) {\n                return model.id;\n              },\n            )\n              .map(this.modelBuilder.build, this.modelBuilder)\n              .map(model => {\n                return {\n                  ...model,\n                  favorite: this.favoriteService.isFavorite(model.name),\n                };\n              });\n\n            return of(\n              GetModelVersionsSuccess({ payload: modelVersions }),\n              GetModelsSuccess({ payload: models }),\n            );\n          }),\n          catchError(error => {\n            console.error(error);\n\n            return of(\n              GetModelVersionsFail({ error }),\n              NotifyError('Failed to load model versions'),\n            );\n          }),\n        ),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "upsertModelVersion$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(UpsertModelVersion),\n      map(({ modelVersion }) => {\n        switch (modelVersion.status) {\n          case ModelVersionStatus.Failed:\n            return NotifyError(\n              `Model version: ${modelVersion.nameWithId()} failed`,\n            );\n\n          case ModelVersionStatus.Released:\n            return NotifySuccess(\n              `Model version: ${modelVersion.nameWithId()} has been released`,\n            );\n          default:\n            return { type: 'NOOP' };\n        }\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ModelDTO,\n  Model,\n  ModelVersionStatus,\n  ModelVariant,\n  Stage,\n} from '@app/core/data/types';\nimport { Injectable } from '@angular/core';\nimport { FavoriteService } from '@app/core/favorite.service';\nimport { Actions, ofType, createEffect } from '@ngrx/effects';\nimport { Store, select } from '@ngrx/store';\nimport { of, concat } from 'rxjs';\nimport {\n  catchError,\n  switchMap,\n  exhaustMap,\n  withLatestFrom,\n  map,\n} from 'rxjs/operators';\nimport * as _ from 'lodash';\n\nimport { SnackbarService } from '../../snackbar.service';\n\nimport { ModelBuilder, ModelVersionBuilder } from '../../data/builders';\nimport { ModelVersionService } from '../../data/services/model-version.service';\n\nimport { HydroServingState } from '../states/root.state';\nimport { selectAllModels } from '../selectors/models.selectors';\nimport { AddModel, GetModelsSuccess } from '../actions/models.actions';\nimport { AddSuccess } from '../actions/applications.actions';\n\nimport {\n  GetModelVersions,\n  GetModelVersionsSuccess,\n  GetModelVersionsFail,\n  AddModelVersion,\n  DeleteModelVersionSuccess,\n  UpsertModelVersion,\n} from '../actions/model-versions.actions';\nimport {\n  NotifyError,\n  NotifySuccess,\n  NotifyWarning,\n} from '../actions/notifications.actions';\nimport { selectModelVersionEntities } from '@app/core/store/selectors';\n\n@Injectable()\nexport class ModelVersionsEffects {\n  getAllVersions$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(GetModelVersions),\n      switchMap(() =>\n        this.modelVersionsService.getAllVersions().pipe(\n          switchMap(data => {\n            const modelVersions = data.map(\n              this.modelVersionBuilder.build,\n              this.modelVersionBuilder,\n            );\n\n            const models: Model[] = _.uniqBy(\n              modelVersions.map(mv => mv.model),\n              function (model: ModelDTO) {\n                return model.id;\n              },\n            )\n              .map(this.modelBuilder.build, this.modelBuilder)\n              .map(model => {\n                return {\n                  ...model,\n                  favorite: this.favoriteService.isFavorite(model.name),\n                };\n              });\n\n            return of(\n              GetModelVersionsSuccess({ payload: modelVersions }),\n              GetModelsSuccess({ payload: models }),\n            );\n          }),\n          catchError(error => {\n            console.error(error);\n\n            return of(\n              GetModelVersionsFail({ error }),\n              NotifyError('Failed to load model versions'),\n            );\n          }),\n        ),\n      ),\n    ),\n  );\n\n  addModelVersion$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddModelVersion),\n      withLatestFrom(this.store.pipe(select(selectAllModels))),\n      exhaustMap(([{ modelVersion }, models]) => {\n        const modelExist = models.some(\n          model => model.name === modelVersion.model.name,\n        );\n\n        if (modelExist) {\n          return of(UpsertModelVersion({ modelVersion }));\n        } else {\n          const model = this.modelBuilder.build(modelVersion.model);\n\n          return concat(\n            of(AddModel({ model })),\n            of(UpsertModelVersion({ modelVersion })),\n          );\n        }\n      }),\n    ),\n  );\n\n  upsertModelVersion$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(UpsertModelVersion),\n      map(({ modelVersion }) => {\n        switch (modelVersion.status) {\n          case ModelVersionStatus.Failed:\n            return NotifyError(\n              `Model version: ${modelVersion.nameWithId()} failed`,\n            );\n\n          case ModelVersionStatus.Released:\n            return NotifySuccess(\n              `Model version: ${modelVersion.nameWithId()} has been released`,\n            );\n          default:\n            return { type: 'NOOP' };\n        }\n      }),\n    ),\n  );\n\n  deleteModelVersionsSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(DeleteModelVersionSuccess),\n      switchMap(_ => of(NotifyWarning(`Model version: ${_} has been deleted`))),\n    ),\n  );\n\n  addApplication$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AddSuccess),\n      withLatestFrom(this.store.pipe(select(selectModelVersionEntities))),\n      exhaustMap(([{ payload: application }, modelVersionsDict]) => {\n        const stages = application.executionGraph.stages;\n\n        const variants: ModelVariant[] = _.flatMap(\n          stages,\n          (stage: Stage) => stage.modelVariants,\n        );\n        const ids = _.map(variants, (mv: ModelVariant) => mv.modelVersionId);\n        const modelVersions = ids.map(id => modelVersionsDict[id]);\n\n        const modelVersionsUpdated = modelVersions.map(mv => {\n          return mv.addApplication(application.name);\n        });\n\n        return of(GetModelVersionsSuccess({ payload: modelVersionsUpdated }));\n      }),\n    ),\n  );\n\n  constructor(\n    private modelBuilder: ModelBuilder,\n    private modelVersionBuilder: ModelVersionBuilder,\n    private modelVersionsService: ModelVersionService,\n    private actions$: Actions,\n    private snackbar: SnackbarService,\n    private store: Store<HydroServingState>,\n    private favoriteService: FavoriteService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelBuilder",
                        "type": "ModelBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionBuilder",
                        "type": "ModelVersionBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsService",
                        "type": "ModelVersionService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 164,
                "jsdoctags": [
                    {
                        "name": "modelBuilder",
                        "type": "ModelBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionBuilder",
                        "type": "ModelVersionBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsService",
                        "type": "ModelVersionService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "favoriteService",
                        "type": "FavoriteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelVersionService",
            "id": "injectable-ModelVersionService-74bfd5e68a130164e20a4badaa14ebf3",
            "file": "src/app/core/data/services/model-version.service.ts",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getAllVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ModelVersion } from '@app/core/data/types/model-version';\nimport { environment } from '@environments/environment';\nimport { HttpService } from './http.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ModelVersionService {\n  private readonly baseAPIUrl: string;\n\n  constructor(private readonly http: HttpService) {\n    this.baseAPIUrl = `${environment.apiUrl}/model`;\n  }\n\n  public getAllVersions(): Observable<ModelVersion[]> {\n    return this.http\n      .get(`${this.baseAPIUrl}/version`)\n      .pipe(map((res: Response): any => res));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelVersionsFacade",
            "id": "injectable-ModelVersionsFacade-95fd7d8325669c294af0e45d4e209000",
            "file": "src/app/core/facades/model-versions.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "allModelVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "allModelVersionsEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "areModelVersionsLoaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFirstModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "internalModelVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "internalReleasedNonMetricModelVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "modelVersionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "modelVersionsByModelId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "siblingModelVersions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { neitherNullNorUndefined } from '@app/utils';\n\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\nimport { ModelVersion, ModelVersionId } from '@app/core/data/types';\nimport { HydroServingState } from '@app/core/store/states/root.state';\n\nimport {\n  selectSiblingModelVersions,\n  selectSelectedModelVersion,\n  selectAllModelVersions,\n  selectAllModelVersionsByModelId,\n  selectModelVersionById,\n  selectModelVersionsLoaded,\n  selectModelVersionEntities,\n  selectFirstModelVersion,\n  selectInternalModelVersions,\n  selectInternalReleasedNonMetricModelVersions,\n} from '../store/selectors/model-versions.selectors';\n\nimport { GetModelVersions } from '../store/actions/model-versions.actions';\n\n@Injectable({ providedIn: 'root' })\nexport class ModelVersionsFacade {\n  constructor(private readonly store: Store<HydroServingState>) {}\n\n  loadAll(): void {\n    this.store.dispatch(GetModelVersions());\n  }\n\n  allModelVersions(): Observable<ModelVersion[]> {\n    return this.store.pipe(select(selectAllModelVersions));\n  }\n\n  internalModelVersions(): Observable<ModelVersion[]> {\n    return this.store.pipe(select(selectInternalModelVersions));\n  }\n\n  allModelVersionsEntities() {\n    return this.store.pipe(select(selectModelVersionEntities));\n  }\n\n  getFirstModelVersion() {\n    return this.store.pipe(select(selectFirstModelVersion));\n  }\n\n  selectedModelVersion(): Observable<ModelVersion> {\n    return this.store.pipe(\n      select(selectSelectedModelVersion),\n      neitherNullNorUndefined,\n    );\n  }\n\n  siblingModelVersions(): Observable<any> {\n    return this.selectedModelVersion().pipe(\n      neitherNullNorUndefined,\n      switchMap(({ model: { id: modelId }, id: modelVersionId }) =>\n        this.store.pipe(\n          select(selectSiblingModelVersions({ modelId, modelVersionId })),\n        ),\n      ),\n    );\n  }\n\n  modelVersionById(id: ModelVersionId): Observable<ModelVersion> {\n    return this.store.pipe(select(selectModelVersionById(id)));\n  }\n\n  modelVersionsByModelId(id: number): Observable<ModelVersion[]> {\n    return this.store.pipe(select(selectAllModelVersionsByModelId(id)));\n  }\n\n  areModelVersionsLoaded(): Observable<boolean> {\n    return this.store.pipe(select(selectModelVersionsLoaded));\n  }\n\n  internalReleasedNonMetricModelVersions(): Observable<ModelVersion[]> {\n    return this.store.pipe(\n      select(selectInternalReleasedNonMetricModelVersions),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModelVersionsTagsFacade",
            "id": "injectable-ModelVersionsTagsFacade-b6aa60ed852d48ee3968bb15e484b0ea",
            "file": "src/app/modules/monitoring/components/model-versions-tags/model-versions-tags.facade.ts",
            "properties": [
                {
                    "name": "modelVersions",
                    "defaultValue": "new BehaviorSubject(\n    []\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "idsToModelVersions$",
                    "args": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersion[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ids",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ModelVersionsTagsFacade {\n  modelVersions$: Observable<ModelVersion[]>;\n  private modelVersions: BehaviorSubject<ModelVersion[]> = new BehaviorSubject(\n    []\n  );\n  constructor(private facade: ModelVersionsFacade) {\n    this.modelVersions$ = this.modelVersions.asObservable();\n  }\n  add(modelVersion: ModelVersion): void {\n    const currentList = this.modelVersions.getValue();\n    this.modelVersions.next([...currentList, modelVersion]);\n  }\n  remove(modelVersion: ModelVersion): void {\n    const currentList = this.modelVersions.getValue();\n    this.modelVersions.next(\n      currentList.filter(({ id }) => id !== modelVersion.id)\n    );\n  }\n\n  idsToModelVersions$(ids: number[]): Observable<ModelVersion[]> {\n    return this.facade\n      .allModelVersionsEntities()\n      .pipe(map(modelVersions => ids.map(id => modelVersions[id])));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonitoringFacade",
            "id": "injectable-MonitoringFacade-a9ee234465cbb2393143c96f4ade051a",
            "file": "src/app/modules/monitoring/store/monitoring.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "changeDateTimeRange",
                    "args": [
                        {
                            "name": "range",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "range",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFilterDateRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearMonitoringPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeChecksDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAggregationList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AggregationsList>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CheckCollection>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCheckToShowInDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Check>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFilterDateRange",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMaxDate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMinDate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOffset",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedAggregation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Aggregation>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isChecksLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAggregation",
                    "args": [
                        {
                            "name": "props",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadChecks",
                    "args": [
                        {
                            "name": "props",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "props",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNewerAggregation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadOlderAggregation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectAggregation",
                    "args": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showChecksDetails",
                    "args": [
                        {
                            "name": "checkId",
                            "type": "CheckId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkId",
                            "type": "CheckId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable } from 'rxjs';\n\nimport { Store, select } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\n\nimport { ModelVersion } from '@app/core/data/types';\nimport { selectCheckToShowInDetails } from '../store/selectors/ui.selectors';\n\nimport {\n  Aggregation,\n  CheckId,\n  Check,\n  AggregationsList,\n  CheckCollection,\n} from '../models';\nimport {\n  LoadChecks,\n  ClearMonitoringPage,\n  LoadOlderAggregation,\n  LoadNewerAggregation,\n  ShowCheckDetails,\n  CloseCheckDetails,\n  SetFilterDateRange,\n  ClearFilterDateRange,\n} from './actions';\nimport {\n  LoadAggregations,\n  SelectAggregation,\n} from './actions/aggregation.actions';\n\nimport {\n  selectAggregationList,\n  selectOffset,\n  selectSelectedAggregation,\n  selectChecks,\n  selectChecksLoading,\n  selectFilterDateRange,\n  selectMinDate,\n  selectMaxDate,\n} from './selectors';\n\nimport { State as MonitoringState } from './reducers';\n\n@Injectable()\nexport class MonitoringFacade {\n  constructor(private readonly store: Store<MonitoringState>) {}\n\n  getAggregationList(): Observable<AggregationsList> {\n    return this.store.pipe(select(selectAggregationList));\n  }\n\n  getOffset(): Observable<number> {\n    return this.store.pipe(select(selectOffset));\n  }\n\n  getSelectedAggregation(): Observable<Aggregation> {\n    return this.store.pipe(select(selectSelectedAggregation));\n  }\n\n  getChecks(): Observable<CheckCollection> {\n    return this.store.pipe(select(selectChecks));\n  }\n\n  getCheckToShowInDetails(): Observable<Check> {\n    return this.store.pipe(select(selectCheckToShowInDetails));\n  }\n\n  isChecksLoading(): Observable<boolean> {\n    return this.store.pipe(select(selectChecksLoading));\n  }\n\n  getMinDate(): Observable<number> {\n    return this.store.pipe(select(selectMinDate));\n  }\n\n  getMaxDate(): Observable<number> {\n    return this.store.pipe(select(selectMaxDate));\n  }\n\n  getFilterDateRange(): Observable<{ from: number; to: number }> {\n    return this.store.pipe(select(selectFilterDateRange));\n  }\n\n  clearMonitoringPage(): void {\n    this.store.dispatch(ClearMonitoringPage());\n  }\n\n  clearFilterDateRange(): void {\n    this.store.dispatch(ClearFilterDateRange());\n  }\n\n  selectAggregation(aggregation: Aggregation): void {\n    this.store.dispatch(SelectAggregation({ aggregation }));\n  }\n\n  loadAggregation(props: {\n    modelVersion: ModelVersion;\n    offset: number;\n    limit: number;\n    from: string;\n    to: string;\n  }): void {\n    this.store.dispatch(LoadAggregations(props));\n  }\n\n  loadOlderAggregation(): void {\n    this.store.dispatch(LoadOlderAggregation());\n  }\n\n  loadNewerAggregation(): void {\n    this.store.dispatch(LoadNewerAggregation());\n  }\n\n  loadChecks(props: {\n    modelVersionId: number;\n    from: string;\n    to: string;\n  }): void {\n    this.store.dispatch(LoadChecks(props));\n  }\n\n  showChecksDetails(checkId: CheckId): void {\n    this.store.dispatch(ShowCheckDetails({ checkId }));\n  }\n\n  closeChecksDetails(): void {\n    this.store.dispatch(CloseCheckDetails());\n  }\n\n  changeDateTimeRange(range: { from: number; to: number }): void {\n    this.store.dispatch(SetFilterDateRange(range));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<MonitoringState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<MonitoringState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonitoringPageService",
            "id": "injectable-MonitoringPageService-f863421532d5143338830c25642ed332",
            "file": "src/app/modules/monitoring/containers/monitoring-page/monitoring-page.service.ts",
            "properties": [
                {
                    "name": "checksSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addMetric",
                    "args": [
                        {
                            "name": "metric",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metric",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeCheckDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteMetric",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAggregationList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<AggregationsList>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<CheckCollection>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCheckToShowInDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Check>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedAggregation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Aggregation | undefined>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isChecksLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAggregations",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadMetrics",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showCheckDetails",
                    "args": [
                        {
                            "name": "checkId",
                            "type": "CheckId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "checkIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkId",
                            "type": "CheckId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "checkIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Observable, Subject, combineLatest, timer, Subscription } from 'rxjs';\nimport { tap, takeUntil, switchMap, take } from 'rxjs/operators';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\n\nimport {\n  CheckCollection,\n  AggregationsList,\n  CheckId,\n  Check,\n  Aggregation,\n} from '../../models';\n\nimport { MetricsFacade } from '../../store/facades/metrics.facade';\nimport { MonitoringFacade } from '../../store/monitoring.facade';\n\nimport { ModelVersion } from '@app/core/data/types';\nimport { neitherNullNorUndefined } from '@app/utils';\n\n@Injectable()\nexport class MonitoringPageService implements OnDestroy {\n  private destroy$: Subject<any> = new Subject<any>();\n  private checksSubscription: Subscription;\n\n  constructor(\n    private monitoringStore: MonitoringFacade,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private metricsFacade: MetricsFacade\n  ) {}\n\n  getSelectedAggregation(): Observable<Aggregation | undefined> {\n    return this.monitoringStore.getSelectedAggregation();\n  }\n\n  getChecks(): Observable<CheckCollection> {\n    return this.monitoringStore.getChecks();\n  }\n\n  isChecksLoading(): Observable<boolean> {\n    return this.monitoringStore.isChecksLoading();\n  }\n\n  getModelVersion(): Observable<ModelVersion> {\n    return this.modelVersionsFacade.selectedModelVersion();\n  }\n\n  deleteMetric(id: string): void {\n    this.metricsFacade.deleteMetric(id);\n  }\n\n  addMetric(metric: any): void {\n    this.metricsFacade.addMetric(metric);\n  }\n\n  getAggregationList(): Observable<AggregationsList> {\n    return this.monitoringStore.getAggregationList();\n  }\n\n  getCheckToShowInDetails(): Observable<Check> {\n    return this.monitoringStore.getCheckToShowInDetails();\n  }\n\n  showCheckDetails(checkId?: CheckId, checkIdx?: number): void {\n    if (checkIdx && !checkId) {\n      this.checksSubscription = this.monitoringStore\n        .getChecks()\n        .pipe(take(1))\n        .subscribe(checks => {\n          checkId = checks.getChecks()[checkIdx - 1].id;\n          this.monitoringStore.showChecksDetails(checkId);\n        });\n    } else this.monitoringStore.showChecksDetails(checkId);\n  }\n\n  closeCheckDetails(): void {\n    this.monitoringStore.closeChecksDetails();\n  }\n\n  ngOnDestroy() {\n    this.monitoringStore.clearMonitoringPage();\n    this.destroy$.next();\n    this.destroy$.complete();\n    if (this.checksSubscription) this.checksSubscription.unsubscribe();\n  }\n\n  loadChecks(): void {\n    this.monitoringStore\n      .getSelectedAggregation()\n      .pipe(\n        neitherNullNorUndefined,\n        tap(aggregation => {\n          const { modelVersionId, from, to } = aggregation;\n          this.monitoringStore.loadChecks({ modelVersionId, from, to });\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  loadMetrics(): void {\n    this.metricsFacade.loadMetrics();\n  }\n\n  loadAggregations(): void {\n    combineLatest([\n      this.modelVersionsFacade\n        .selectedModelVersion()\n        .pipe(tap(() => this.monitoringStore.clearMonitoringPage())),\n      this.monitoringStore.getOffset(),\n      this.monitoringStore.getFilterDateRange(),\n    ])\n      .pipe(\n        switchMap(([modelVersion, offset, filterDateRange]) => {\n          return timer(0, 10000).pipe(\n            tap(() => {\n              this.monitoringStore.loadAggregation({\n                modelVersion,\n                limit: 80,\n                offset,\n                from:\n                  filterDateRange &&\n                  Math.round(filterDateRange.from / 1000).toString(),\n                to:\n                  filterDateRange &&\n                  Math.round(filterDateRange.to / 1000).toString(),\n              });\n            })\n          );\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "monitoringStore",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "monitoringStore",
                        "type": "MonitoringFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonitoringService",
            "id": "injectable-MonitoringService-02f8568b645a66340344ee8c5394af71",
            "file": "src/app/modules/monitoring/services/api/monitoring.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCheck",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BareCheck>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChecks",
                    "args": [
                        {
                            "type": "GetChecksParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BareCheck[]>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "GetChecksParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChecksAggregation",
                    "args": [
                        {
                            "type": "GetChecksAggregationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ChecksAggregationResponse>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "GetChecksAggregationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChecksForComparision",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<BareCheck[]>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonitoringServiceStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { environment } from '@environments/environment';\n\nimport { BareCheck, ChecksAggregationResponse } from '../../models';\nimport { Observable } from 'rxjs';\n\nexport interface GetChecksAggregationParams {\n  modelVersionId: number;\n  limit?: number;\n  offset?: number;\n  from?: string;\n  to?: string;\n}\ninterface GetChecksParams {\n  modelVersionId: number;\n  from: string;\n  to: string;\n}\n\n@Injectable({ providedIn: 'root' })\nexport class MonitoringService {\n  private baseUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseUrl = `${environment.monitoringUrl}`;\n  }\n\n  public getMonitoringServiceStatus() {\n    return this.http.get(`${this.baseUrl}/buildinfo`);\n  }\n\n  getCheck(id: string): Observable<BareCheck> {\n    return this.http.get<BareCheck>(`${this.baseUrl}/checks/${id}`);\n  }\n\n  getChecks({\n    modelVersionId,\n    from,\n    to,\n  }: GetChecksParams): Observable<BareCheck[]> {\n    return this.http.get(`${this.baseUrl}/checks/${modelVersionId}`, {\n      params: { from, to },\n    });\n  }\n\n  getChecksAggregation({\n    modelVersionId,\n    limit = 90,\n    offset,\n    from,\n    to,\n  }: GetChecksAggregationParams): Observable<ChecksAggregationResponse> {\n    const params = {\n      limit: `${limit}`,\n      offset: `${offset}`,\n      from,\n      till: to,\n    };\n\n    return this.http.get(\n      `${this.baseUrl}/checks/aggregates/${modelVersionId}`,\n      {\n        params,\n      }\n    );\n  }\n\n  getChecksForComparision(params: {\n    originalModelVersion: number;\n    aggregationId: String;\n    comparedModelVersionId: number;\n  }): Observable<BareCheck[]> {\n    const {\n      originalModelVersion: omv,\n      aggregationId: aggId,\n      comparedModelVersionId: cmv,\n    } = params;\n\n    return this.http.get(\n      `${this.baseUrl}/checks/comparision/${omv}/${aggId}/${cmv}`\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonitoringServiceStatusEffects",
            "id": "injectable-MonitoringServiceStatusEffects-73e901d1bd885111d0fa18f8348c8d14",
            "file": "src/app/modules/monitoring/store/effects/monitoring-service-status.effects.ts",
            "properties": [
                {
                    "name": "getMonitoringServiceStatus$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(GetServiceStatusAction),\n    switchMap(_ => {\n      return this.monitoringService.getMonitoringServiceStatus().pipe(\n        map(() => SetStatusToAvailableAction()),\n        catchError(err => {\n          const is501Error = /501/i.test(err);\n          if (is501Error) {\n            return of(SetStatusToClosedForOSSAction());\n          } else {\n            const errMsg = err || 'Something went wrong';\n            return of(SetStatusToFailedAction({ error: errMsg }));\n          }\n        })\n      );\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MonitoringService } from '../../services';\nimport {\n  GetServiceStatusAction,\n  SetStatusToAvailableAction,\n  SetStatusToClosedForOSSAction,\n  SetStatusToFailedAction,\n} from '../../store/actions';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { switchMap, catchError, map } from 'rxjs/operators';\n\n@Injectable()\nexport class MonitoringServiceStatusEffects {\n  @Effect()\n  getMonitoringServiceStatus$ = this.actions$.pipe(\n    ofType(GetServiceStatusAction),\n    switchMap(_ => {\n      return this.monitoringService.getMonitoringServiceStatus().pipe(\n        map(() => SetStatusToAvailableAction()),\n        catchError(err => {\n          const is501Error = /501/i.test(err);\n          if (is501Error) {\n            return of(SetStatusToClosedForOSSAction());\n          } else {\n            const errMsg = err || 'Something went wrong';\n            return of(SetStatusToFailedAction({ error: errMsg }));\n          }\n        })\n      );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private monitoringService: MonitoringService\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringService",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringService",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NameGenerator",
            "id": "injectable-NameGenerator-bf8e8ff803e797ba3789a4898db486d8",
            "file": "src/app/core/name-generator.ts",
            "properties": [],
            "methods": [
                {
                    "name": "generate",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  uniqueNamesGenerator,\n  UniqueNamesGeneratorConfig,\n} from 'unique-names-generator';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NameGenerator {\n  private get config(): UniqueNamesGeneratorConfig {\n    return {\n      separator: '_',\n      length: 2,\n    };\n  }\n\n  generate(): string {\n    return uniqueNamesGenerator(this.config);\n  }\n}\n",
            "accessors": {
                "config": {
                    "name": "config",
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "UniqueNamesGeneratorConfig",
                        "line": 11
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "NotificationEffects",
            "id": "injectable-NotificationEffects-a4f2b240d814f5164710b56eb9edbf53",
            "file": "src/app/core/store/effects/notifications.effects.ts",
            "properties": [
                {
                    "name": "notify$",
                    "defaultValue": "createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(Notify),\n        tap(({ kind, message }) => {\n          this.snackbar.notify(kind, message);\n        }),\n      ),\n    {\n      dispatch: false,\n    },\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport { SnackbarService } from '../../snackbar.service';\nimport { Notify } from '../actions/notifications.actions';\n\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class NotificationEffects {\n  notify$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(Notify),\n        tap(({ kind, message }) => {\n          this.snackbar.notify(kind, message);\n        }),\n      ),\n    {\n      dispatch: false,\n    },\n  );\n\n  constructor(private actions$: Actions, private snackbar: SnackbarService) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PreserveFormService",
            "id": "injectable-PreserveFormService-ac10e54807d8ad4de57b52464b001cbc",
            "file": "src/app/modules/deployment-configs/components/dc-tree/dc-form/preserve-form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "defaultForm",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseDC",
                    "args": [
                        {
                            "name": "form",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DeploymentConfig",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retrieveForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { load as loadYaml } from 'js-yaml';\nimport { DeploymentConfig } from '@app/core/data/types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PreserveFormService {\n  constructor() {}\n\n  saveForm(form): void {\n    localStorage.setItem('formValue', JSON.stringify(form));\n  }\n\n  retrieveForm() {\n    if (localStorage.getItem('formValue') !== null) {\n      return JSON.parse(localStorage.getItem('formValue'));\n    } else {\n      return null;\n    }\n  }\n\n  validateForm(form: string): void {\n    let value = loadYaml(form) as DeploymentConfig;\n    if (!value.name) {\n      throw new Error('Valid name is required!');\n    }\n  }\n\n  parseDC(form: string): DeploymentConfig {\n    return loadYaml(form) as DeploymentConfig;\n  }\n\n  clearForm(): void {\n    localStorage.clear();\n  }\n\n  defaultForm(): string {\n    return `name: ''`;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "ProfilerFacade",
            "id": "injectable-ProfilerFacade-80af75299bbb22a3718da454c9730ed3",
            "file": "src/app/core/facades/profiler.facade.ts",
            "properties": [
                {
                    "name": "loadFields",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loadProfiles",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "polling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "selectedField",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Profiles } from '@app/core/data/types';\nimport { Injectable } from '@angular/core';\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport { Store, select } from '@ngrx/store';\nimport { neitherNullNorUndefined } from '@app/utils';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { selectRouterParams } from '../store/selectors/router.selectors';\nimport { ProfilerService } from '../data/services/profiler.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfilerFacade {\n  private readonly polling;\n  constructor(\n    private store: Store<HydroServingState>,\n    private profilerService: ProfilerService,\n  ) {}\n\n  selectedField(): Observable<string> {\n    return this.store.pipe(\n      select(selectRouterParams),\n      map(({ params }) => {\n        return params && params['featureName'];\n      }),\n      neitherNullNorUndefined,\n    );\n  }\n\n  loadFields: (modelVersionId) => Observable<string[]> = modelVersionId => {\n    return this.profilerService.getFields(`${modelVersionId}`);\n  };\n\n  loadProfiles: (modelVerId, fieldName) => Observable<Profiles> = (\n    modelVerId,\n    fieldName,\n  ) => {\n    return this.profilerService\n      .getProfiles(modelVerId, fieldName)\n      .pipe(map(data => new Profiles(data)));\n  };\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profilerService",
                        "type": "ProfilerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profilerService",
                        "type": "ProfilerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfilerService",
            "id": "injectable-ProfilerService-0fa823cb72109e93bfbf3f822aca2ed2",
            "file": "src/app/core/data/services/profiler.service.ts",
            "properties": [
                {
                    "name": "baseAPIUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFields",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProfilerServiceStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getProfiles",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { environment } from '@environments/environment';\n\nimport { HttpService } from './http.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ProfilerService {\n  private readonly baseAPIUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseAPIUrl = `${environment.monitoringUrl}`;\n  }\n\n  public getFields(modelVersionId: string): Observable<string[]> {\n    return this.http.get<string[]>(\n      `${this.baseAPIUrl}/fields/${modelVersionId}`\n    );\n  }\n\n  public getProfiles(modelVersionId: number, fieldName: string) {\n    return this.http\n      .get(`${this.baseAPIUrl}/profiles/${modelVersionId}/${fieldName}`)\n      .pipe(map((res: Response): any => res));\n  }\n\n  public getProfilerServiceStatus() {\n    return this.http.get(`${this.baseAPIUrl}/buildinfo`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RedirectService",
            "id": "injectable-RedirectService-71e18e80be1c21adbc4c5877b127a901",
            "file": "src/app/core/redirect.service.ts",
            "properties": [
                {
                    "name": "isRootUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "redirectToFirstEntity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "routerEvents$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Event>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "extractUriName",
                    "args": [
                        {
                            "name": "event",
                            "type": "NavigationEnd",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "NavigationEnd",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redirectToFirst",
                    "args": [
                        {
                            "name": "entities$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "entityUri",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "entities$",
                            "type": "Observable<T[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "entityUri",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sameUri",
                    "args": [
                        {
                            "name": "navigaterUri",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "settedUri",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "navigaterUri",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "settedUri",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { Event, NavigationEnd, Router, RouterEvent } from '@angular/router';\n\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map, takeWhile, tap } from 'rxjs/operators';\nimport { IsRootUrlService } from '@app/core/is-root-url.service';\n\ntype EntityWithName = { name: string };\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RedirectService implements OnDestroy {\n  isRootUrl$: Observable<boolean>;\n\n  private routerEvents$: Observable<Event>;\n  private redirectToFirstEntity: Subscription;\n\n  constructor(\n    private router: Router,\n    private rootUrlService: IsRootUrlService,\n  ) {\n    this.routerEvents$ = this.router.events.pipe(\n      filter(event => event instanceof NavigationEnd),\n    );\n    this.isRootUrl$ = this.routerEvents$.pipe(\n      map((event: RouterEvent) => {\n        return this.rootUrlService.isRootUrl(event);\n      }),\n    );\n  }\n\n  public redirectToFirst<T extends EntityWithName>(\n    entities$: Observable<T[]>,\n    entityUri,\n  ) {\n    this.redirectToFirstEntity = combineLatest([this.routerEvents$, entities$])\n      .pipe(\n        filter(([event]) =>\n          this.rootUrlService.isRootUrl(event as RouterEvent),\n        ),\n        takeWhile(([event]) =>\n          this.sameUri(this.extractUriName(event as NavigationEnd), entityUri),\n        ),\n      )\n      .subscribe(([_, entities]) => {\n        entities.length\n          ? this.router.navigate([`${entityUri}/${entities[0].name}`])\n          : this.router.navigate([`${entityUri}`]);\n      });\n  }\n\n  ngOnDestroy() {\n    this.redirectToFirstEntity.unsubscribe();\n  }\n\n  private sameUri(navigaterUri: string, settedUri: string): boolean {\n    return navigaterUri == settedUri;\n  }\n\n  private extractUriName(event: NavigationEnd): string {\n    return (event as NavigationEnd).urlAfterRedirects.split('/').filter(_ => _)[0];\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "rootUrlService",
                        "type": "IsRootUrlService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "rootUrlService",
                        "type": "IsRootUrlService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RootCauseApiService",
            "id": "injectable-RootCauseApiService-fb43c926865860cd1493aea0ddea78bb",
            "file": "src/app/modules/root-cause/services/root-cause-api.service.ts",
            "properties": [
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createExplanation",
                    "args": [
                        {
                            "name": "params",
                            "type": "ExplanationRequestPostParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "ExplanationRequestPostParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getExplanation",
                    "args": [
                        {
                            "type": "ExplanationRequestParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Explanation>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "ExplanationRequestParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { Explanation } from '../models';\nimport { Observable } from 'rxjs';\nimport { environment } from '@environments/environment';\n\nexport interface ExplanationRequestParams {\n  model_version_id: number;\n  explained_request_id: string;\n  method: string;\n  output_field: string;\n}\n\nexport interface ExplanationRequestPostParams {\n  model_version_id: string;\n  explained_request_id: string;\n  method: string;\n  output_field: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RootCauseApiService {\n  private readonly url: string;\n\n  constructor(private readonly http: HttpService) {\n    this.url = environment.rootCauseUrl;\n  }\n\n  createExplanation(params: ExplanationRequestPostParams): Observable<any> {\n    return this.http.post<any>(`${this.url}/explanation`, {\n      ...params,\n    });\n  }\n\n  getExplanation({\n    model_version_id,\n    explained_request_id,\n    method = 'anchor',\n    output_field,\n  }: ExplanationRequestParams): Observable<Explanation> {\n    return this.http.get<Explanation>(`${this.url}/explanation`, {\n      params: {\n        model_version_id: `${model_version_id}`,\n        explained_request_id,\n        method,\n        output_field,\n      },\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RootCauseState",
            "id": "injectable-RootCauseState-d0e52ac496945fdca206ecfb4b4a00b0",
            "file": "src/app/modules/root-cause/store/state.ts",
            "properties": [
                {
                    "name": "state",
                    "defaultValue": "new BehaviorSubject<State>(\n    initialState,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<State>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<State>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExplanation",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Explanation | null>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setExplanation",
                    "args": [
                        {
                            "name": "explanation",
                            "type": "Explanation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "explanation",
                            "type": "Explanation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { shareReplay, map, distinctUntilChanged } from 'rxjs/operators';\nimport { Explanation } from '../models';\n\ninterface State {\n  explanation: Explanation | null;\n}\n\nconst initialState: State = {\n  explanation: null,\n};\n\n@Injectable()\nexport class RootCauseState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState,\n  );\n\n  constructor() {\n    this.state$ = this.state.asObservable().pipe(shareReplay(1));\n  }\n\n  getExplanation(): Observable<Explanation | null> {\n    return this.state$.pipe(\n      map(({ explanation }) => explanation),\n      distinctUntilChanged(),\n    );\n  }\n\n  setExplanation(explanation: Explanation) {\n    const state = this.state.getValue();\n    this.state.next({ ...state, explanation });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "type": "injectable"
        },
        {
            "name": "ServablesEffects",
            "id": "injectable-ServablesEffects-54c6ea62b377bbc46c7ee547b4de452e",
            "file": "src/app/core/store/effects/servables.effects.ts",
            "properties": [
                {
                    "name": "deleteServable$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(deleteServable),\n    exhaustMap(({ name }) =>\n      this.servablesService.delete(name).pipe(\n        map(() => deleteServableSuccess({ name })),\n        catchError(error => {\n          return of(\n            deleteServableFailed({ error }),\n            NotifyError(error.replaceAll(',', ', ')),\n          );\n        }),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getServable$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(getServable),\n    exhaustMap(({ name }) =>\n      this.servablesService.get(name).pipe(\n        map(servable => getServableSuccess({ servable })),\n        catchError(error => of(getServableFailed({ error }))),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getServables$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(getAll),\n    exhaustMap(() =>\n      this.servablesService.getAll().pipe(\n        map(servables => getAllSuccess({ servables })),\n        catchError(error => of(getAllFailed({ error }))),\n      ),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { exhaustMap, map, catchError } from 'rxjs/operators';\n\nimport {\n  getAll,\n  getAllSuccess,\n  getAllFailed,\n  deleteServable,\n  deleteServableSuccess,\n  deleteServableFailed,\n  getServable,\n  getServableSuccess,\n  getServableFailed,\n} from '../actions/servables.actions';\nimport { ServableService } from '../../data/services/servable.service';\nimport { SnackbarService } from '@app/core/snackbar.service';\nimport { NotifyError } from '../actions/notifications.actions';\n\n@Injectable()\nexport class ServablesEffects {\n  @Effect()\n  getServables$ = this.actions$.pipe(\n    ofType(getAll),\n    exhaustMap(() =>\n      this.servablesService.getAll().pipe(\n        map(servables => getAllSuccess({ servables })),\n        catchError(error => of(getAllFailed({ error }))),\n      ),\n    ),\n  );\n\n  @Effect()\n  deleteServable$ = this.actions$.pipe(\n    ofType(deleteServable),\n    exhaustMap(({ name }) =>\n      this.servablesService.delete(name).pipe(\n        map(() => deleteServableSuccess({ name })),\n        catchError(error => {\n          return of(\n            deleteServableFailed({ error }),\n            NotifyError(error.replaceAll(',', ', ')),\n          );\n        }),\n      ),\n    ),\n  );\n\n  @Effect()\n  getServable$ = this.actions$.pipe(\n    ofType(getServable),\n    exhaustMap(({ name }) =>\n      this.servablesService.get(name).pipe(\n        map(servable => getServableSuccess({ servable })),\n        catchError(error => of(getServableFailed({ error }))),\n      ),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private servablesService: ServableService,\n    private snackbarService: SnackbarService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "servablesService",
                        "type": "ServableService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "servablesService",
                        "type": "ServableService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbarService",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServableService",
            "id": "injectable-ServableService-ccf6ffa510f7c85f176a5fb038e74881",
            "file": "src/app/core/data/services/servable.service.ts",
            "properties": [
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deploy",
                    "args": [
                        {
                            "name": "requestBody",
                            "type": "Deployable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Servable>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "requestBody",
                            "type": "Deployable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Servable[]>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { environment } from 'environments/environment';\n\nimport { HS_BASE_URL } from '@app/core/base-url.token';\n\nimport { HttpService } from './http.service';\nimport { Servable } from '../types/servable';\n\nexport interface Deployable {\n  modelName: string;\n  version: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServableService {\n  private readonly url: string;\n\n  constructor(\n    private http: HttpService,\n    @Inject(HS_BASE_URL) private baseUrl: string\n  ) {\n    const { apiUrl, servableUrl } = environment;\n    this.url = `${apiUrl}/${servableUrl}`;\n  }\n\n  getAll(): Observable<Servable[]> {\n    return this.http.get(this.url);\n  }\n\n  deploy(requestBody: Deployable): Observable<Servable> {\n    return this.http.post(this.url, requestBody) as Observable<Servable>;\n  }\n\n  delete(name: string) {\n    return this.http.delete(`${this.url}/${name}`);\n  }\n\n  get(name: string) {\n    return this.http.get<Servable>(`${this.url}/${name}`);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServablesFacade",
            "id": "injectable-ServablesFacade-b9c4a100b38eba203aa8253da4026397",
            "file": "src/app/core/facades/servables.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "allServables",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Servable[]>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectServablesByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Servable[]>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { Servable } from '@app/core/data/types';\nimport {\n  selectAllServables,\n  selectServablesByName,\n} from '@app/core/store/selectors/servables.selectors';\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport { getAll } from '../store/actions/servables.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServablesFacade {\n  constructor(private readonly store: Store<HydroServingState>) {}\n\n  loadAll(): void {\n    this.store.dispatch(getAll());\n  }\n\n  allServables(): Observable<Servable[]> {\n    return this.store.pipe(select(selectAllServables));\n  }\n\n  selectServablesByName(name: string): Observable<Servable[]> {\n    return this.store.pipe(select(selectServablesByName(name)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServicesSupportService",
            "id": "injectable-ServicesSupportService-675db233860cb38cfa23d93236f3fb49",
            "file": "src/app/modules/model-version/services-support.service.ts",
            "properties": [
                {
                    "name": "servicesSupport",
                    "defaultValue": "new BehaviorSubject<ModelVersionServicesStatus>({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "servicesSupport$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersionServicesStatus>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methods": [
                {
                    "name": "getServiceSupported",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersionServicesStatus>",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ServiceSupported>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadSupported",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { Observable, of, forkJoin, BehaviorSubject } from 'rxjs';\nimport { catchError, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport {\n  ModelVersion,\n  ModelVersionServicesStatus,\n  ServiceSupported,\n} from '@app/core/data/types';\n\nconst enum ServicesEndpoints {\n  stat = 'stat/support',\n  visualization = 'visualization/supported',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServicesSupportService {\n  servicesSupport$: Observable<ModelVersionServicesStatus>;\n\n  private servicesSupport: BehaviorSubject<{\n    [serviceName: string]: any;\n  }> = new BehaviorSubject<ModelVersionServicesStatus>({});\n\n  constructor(private http: HttpService) {\n    this.servicesSupport$ = this.servicesSupport\n      .asObservable()\n      .pipe(distinctUntilChanged(), shareReplay(1));\n  }\n\n  loadSupported(modelVersion: ModelVersion): void {\n    const toRequest = endpoint =>\n      this.http\n        .get(endpoint, { params: { model_version_id: `${modelVersion.id}` } })\n        .pipe(catchError(err => this.handleError(err)));\n\n    forkJoin({\n      stat: toRequest(ServicesEndpoints.stat),\n      visualization: toRequest(ServicesEndpoints.visualization),\n    }).subscribe(res => {\n      this.servicesSupport.next(res);\n    });\n  }\n\n  getServiceSupported(): Observable<ModelVersionServicesStatus> {\n    return this.servicesSupport$;\n  }\n\n  private handleError(error: string): Observable<ServiceSupported> {\n    const is501Error = /501/i.test(error);\n    if (is501Error) {\n      return of({ supported: false, message: 'Closed for OSS' });\n    } else {\n      const errMsg = error || 'Something went wrong';\n      return of({ supported: false, message: errMsg });\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServiceStatusesEffects",
            "id": "injectable-ServiceStatusesEffects-72e21a5e42ef20f5e86b8932ec9f32c7",
            "file": "src/app/core/store/effects/service-statuses.effects.ts",
            "properties": [
                {
                    "name": "getServiceStatuses$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(Get),\n      switchMap(action => {\n        return this.serviceStatusService.loadSupported(action.payload).pipe(\n          map(\n            res => {\n              const payload = {\n                id: action.payload,\n                statuses: res,\n              };\n              return GetSuccess({ payload });\n            },\n            catchError(error => {\n              return of(GetFail({ error }));\n            }),\n          ),\n        );\n      }),\n    ),\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Get,\n  GetFail,\n  GetSuccess,\n} from '@app/core/store/actions/service-statuses.actions';\nimport { ServiceStatusService } from '@app/core/data/services/service-status.service';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class ServiceStatusesEffects {\n  getServiceStatuses$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(Get),\n      switchMap(action => {\n        return this.serviceStatusService.loadSupported(action.payload).pipe(\n          map(\n            res => {\n              const payload = {\n                id: action.payload,\n                statuses: res,\n              };\n              return GetSuccess({ payload });\n            },\n            catchError(error => {\n              return of(GetFail({ error }));\n            }),\n          ),\n        );\n      }),\n    ),\n  );\n\n  constructor(\n    private actions$: Actions,\n    private serviceStatusService: ServiceStatusService,\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceStatusService",
                        "type": "ServiceStatusService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceStatusService",
                        "type": "ServiceStatusService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServiceStatusesFacade",
            "id": "injectable-ServiceStatusesFacade-096b2e6f2f2a5140e3840e8ffbf968f3",
            "file": "src/app/core/facades/service-statuses.facade.ts",
            "properties": [],
            "methods": [
                {
                    "name": "allStatusesEntities",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadAll",
                    "args": [
                        {
                            "name": "id",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectServiceStatusesById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersionServiceStatusesEntity>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport {\n  ModelVersionId,\n  ModelVersionServiceStatusesEntity,\n} from '@app/core/data/types';\nimport { HydroServingState } from '@app/core/store/states/root.state';\nimport { Get } from '@app/core/store/actions/service-statuses.actions';\nimport {\n  selectServiceStatusesById,\n  allStatusesEntities,\n} from '@app/core/store/selectors/service-statuses.selectors';\n\n@Injectable({ providedIn: 'root' })\nexport class ServiceStatusesFacade {\n  constructor(private readonly store: Store<HydroServingState>) {}\n\n  loadAll(id: ModelVersionId): void {\n    this.store.dispatch(Get({ payload: id }));\n  }\n\n  allStatusesEntities() {\n    return this.store.pipe(select(allStatusesEntities));\n  }\n\n  selectServiceStatusesById(\n    id: number,\n  ): Observable<ModelVersionServiceStatusesEntity> {\n    return this.store.pipe(select(selectServiceStatusesById(id)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ServiceStatusService",
            "id": "injectable-ServiceStatusService-8ba28d8b0eaddb96ec60ec2cf4be2b90",
            "file": "src/app/core/data/services/service-status.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadSupported",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersionServicesStatus>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport {\n  createServiceSupportOnFailure,\n  ModelVersionId,\n  ModelVersionServicesStatus,\n  ServiceSupported,\n} from '@app/core/data/types';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nconst enum ServicesEndpoints {\n  stat = 'stat/support',\n  visualization = 'visualization/supported',\n}\n@Injectable({\n  providedIn: 'root',\n})\nexport class ServiceStatusService {\n  constructor(private http: HttpService) {}\n\n  loadSupported(\n    modelVersionId: ModelVersionId,\n  ): Observable<ModelVersionServicesStatus> {\n    const toRequest = endpoint =>\n      this.http\n        .get<ServiceSupported>(endpoint, {\n          params: { model_version_id: `${modelVersionId}` },\n        })\n        .pipe(\n          map<ServiceSupported, ServiceSupported>(res => {\n            return {\n              supported: res.supported,\n              message: res.message || res.description || 'Empty message',\n            };\n          }),\n          catchError(err => {\n            return of(createServiceSupportOnFailure(err));\n          }),\n        );\n\n    return forkJoin({\n      stat: toRequest(ServicesEndpoints.stat),\n      visualization: toRequest(ServicesEndpoints.visualization),\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-0979fb899f8e666b7e039ed46f5511ed",
            "file": "src/app/core/snackbar.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "notify",
                    "args": [
                        {
                            "name": "type",
                            "type": "notificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'default'"
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "notificationType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'default'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { NotifierService } from 'angular-notifier';\nimport { notificationType } from './data/types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SnackbarService {\n  constructor(private notifier: NotifierService) {}\n\n  notify(type: notificationType = 'default', message: string) {\n    this.notifier.notify(type, message);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notifier",
                        "type": "NotifierService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "notifier",
                        "type": "NotifierService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SseService",
            "id": "injectable-SseService-b9352fe782479069501b5459918e27b4",
            "file": "src/app/core/sse.service.ts",
            "properties": [
                {
                    "name": "dict",
                    "defaultValue": "new Map<string, any>([\n    [\n      SSEEvents.ModelRemove,\n      modelVersionId => this.deleteModelVerions(modelVersionId),\n    ],\n    [\n      SSEEvents.ModelUpdate,\n      modelVersion => this.updateModelVersion(modelVersion),\n    ],\n    [\n      SSEEvents.ApplicationUpdate,\n      application => this.updateApplication(application),\n    ],\n    [\n      SSEEvents.ApplicationRemove,\n      applicationName => this.deleteApplication(applicationName),\n    ],\n    [SSEEvents.ServableUpdate, servable => this.updateServable(servable)],\n    [\n      SSEEvents.ServableRemove,\n      servableName => this.deleteServable(servableName),\n    ],\n    [\n      SSEEvents.DeploymentConfigurationUpdate,\n      config => this.addDepConfig(config),\n    ],\n    [\n      SSEEvents.DeploymentConfigurationRemove,\n      configName => this.deleteDepConfig(configName),\n    ],\n  ])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "eventSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventSource",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addDepConfig",
                    "args": [
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addEventHandler",
                    "args": [
                        {
                            "name": "item",
                            "type": "[string, any]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "[string, any]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createConnection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteApplication",
                    "args": [
                        {
                            "name": "applicationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "applicationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDepConfig",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteModelVerions",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteServable",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateApplication",
                    "args": [
                        {
                            "name": "data",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModelVersion",
                    "args": [
                        {
                            "name": "data",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateServable",
                    "args": [
                        {
                            "name": "servable",
                            "type": "Servable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "servable",
                            "type": "Servable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Inject } from '@angular/core';\n\nimport { environment } from 'environments/environment';\nimport { HS_BASE_URL } from '@app/core/base-url.token';\nimport {\n  Application,\n  ModelVersion,\n  Servable,\n  DeploymentConfig,\n} from './data/types';\nimport { ModelVersionBuilder, ApplicationBuilder } from './data/builders';\n\nimport { HydroServingState } from './store/states/root.state';\nimport * as fromApplications from './store/actions/applications.actions';\nimport * as fromModelVersions from './store/actions/model-versions.actions';\nimport * as fromServables from './store/actions/servables.actions';\nimport * as fromDepConfigs from './store/actions/deployment-configs.actions';\nimport { SnackbarService } from './snackbar.service';\n\nconst enum SSEEvents {\n  ModelRemove = 'ModelRemove',\n  ModelUpdate = 'ModelUpdate',\n  ApplicationUpdate = 'ApplicationUpdate',\n  ApplicationRemove = 'ApplicationRemove',\n  ServableUpdate = 'ServableUpdate',\n  ServableRemove = 'ServableRemove',\n  DeploymentConfigurationUpdate = 'DeploymentConfigurationUpdate',\n  DeploymentConfigurationRemove = 'DeploymentConfigurationRemove',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SseService {\n  private dict = new Map<string, any>([\n    [\n      SSEEvents.ModelRemove,\n      modelVersionId => this.deleteModelVerions(modelVersionId),\n    ],\n    [\n      SSEEvents.ModelUpdate,\n      modelVersion => this.updateModelVersion(modelVersion),\n    ],\n    [\n      SSEEvents.ApplicationUpdate,\n      application => this.updateApplication(application),\n    ],\n    [\n      SSEEvents.ApplicationRemove,\n      applicationName => this.deleteApplication(applicationName),\n    ],\n    [SSEEvents.ServableUpdate, servable => this.updateServable(servable)],\n    [\n      SSEEvents.ServableRemove,\n      servableName => this.deleteServable(servableName),\n    ],\n    [\n      SSEEvents.DeploymentConfigurationUpdate,\n      config => this.addDepConfig(config),\n    ],\n    [\n      SSEEvents.DeploymentConfigurationRemove,\n      configName => this.deleteDepConfig(configName),\n    ],\n  ]);\n\n  private eventSource: EventSource;\n\n  constructor(\n    private store: Store<HydroServingState>,\n    private applicationBuilder: ApplicationBuilder,\n    private snackbar: SnackbarService,\n    private modelVersionBuilder: ModelVersionBuilder,\n    @Inject(HS_BASE_URL) private baseUrl: string,\n  ) {}\n\n  createConnection() {\n    const { apiUrl } = environment;\n\n    const url = `${this.baseUrl}${apiUrl}/events`;\n    this.eventSource = new EventSource(url, {\n      withCredentials: true,\n    });\n\n    for (const item of this.dict) {\n      this.addEventHandler(item);\n    }\n  }\n\n  private updateApplication(data: Application) {\n    const application = this.applicationBuilder.build(data);\n\n    return fromApplications.SseUpdateEvent({\n      application,\n    });\n  }\n\n  private deleteApplication(applicationName: string) {\n    return fromApplications.SseDeleteEvent({ applicationName });\n  }\n\n  private updateModelVersion(data: ModelVersion) {\n    const modelVersion = this.modelVersionBuilder.build(data);\n\n    return fromModelVersions.UpsertModelVersion({\n      modelVersion,\n    });\n  }\n\n  private deleteModelVerions(modelVersionId: number) {\n    return fromModelVersions.DeleteModelVersionSuccess({ modelVersionId });\n  }\n\n  private updateServable(servable: Servable) {\n    return fromServables.updateServable({ servable });\n  }\n\n  private deleteServable(name: string) {\n    return fromServables.deleteServableSuccess({ name });\n  }\n\n  private deleteDepConfig(name: string) {\n    return fromDepConfigs.SseDeleteDeploymentConfigEvent({ name });\n  }\n\n  private addDepConfig(depConfig: DeploymentConfig) {\n    return fromDepConfigs.SseAddDeploymentConfigEvent({ depConfig });\n  }\n\n  private addEventHandler(item: [string, any]) {\n    const [evtName, action] = item;\n    this.eventSource.addEventListener(evtName, (message: MessageEvent) => {\n      try {\n        const myData = JSON.parse(message.data);\n        this.store.dispatch(action(myData));\n      } catch (err) {\n        if (message.data) {\n          this.store.dispatch(action(message.data));\n        }\n      }\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationBuilder",
                        "type": "ApplicationBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionBuilder",
                        "type": "ModelVersionBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<HydroServingState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationBuilder",
                        "type": "ApplicationBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionBuilder",
                        "type": "ModelVersionBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatApiService",
            "id": "injectable-StatApiService-f8e072ebc5ab777f540e680b91c564d3",
            "file": "src/app/modules/stat/services/stat-api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getStat",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Stat>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Stat } from '../models';\nimport { HttpService } from '@app/core/data/services/http.service';\nimport { environment } from '@environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StatApiService {\n  private readonly baseUrl: string;\n  constructor(private readonly http: HttpService) {\n    this.baseUrl = `${environment.statUrl}`;\n  }\n  getStat(params: { model_version_id: string }): Observable<Stat> {\n    return this.http.get(`${this.baseUrl}/metrics`, { params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatFacade",
            "id": "injectable-StatFacade-f8e5b06fd8c5c60a124d3dfbab0cc069",
            "file": "src/app/modules/stat/stat.facade.ts",
            "properties": [
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getStat",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Stat>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "loadStat",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnInit } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nimport { StatApiService } from './services/stat-api.service';\nimport { Stat } from './models';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { ModelVersion } from '@app/core/data/types';\n\nimport { switchMap, catchError, tap } from 'rxjs/operators';\nimport { StatState } from './store/stat.state';\nimport { neitherNullNorUndefined } from '@app/utils';\n\n@Injectable()\nexport class StatFacade implements OnInit {\n  private modelVersion$: Observable<ModelVersion>;\n\n  constructor(\n    private statState: StatState,\n    private statApi: StatApiService,\n    private modelVersionsFacade: ModelVersionsFacade\n  ) {}\n\n  ngOnInit() {\n    this.modelVersion$ = this.modelVersionsFacade\n      .selectedModelVersion()\n      .pipe(neitherNullNorUndefined);\n  }\n\n  public getStat(): Observable<Stat> {\n    return this.statState.getStat();\n  }\n\n  public isLoading(): Observable<boolean> {\n    return this.statState.isLoading();\n  }\n\n  public getError(): Observable<string | null> {\n    return this.statState.getError();\n  }\n\n  public getModelVersion(): Observable<ModelVersion> {\n    return this.modelVersion$;\n  }\n\n  public loadStat(): void {\n    this.modelVersionsFacade\n      .selectedModelVersion()\n      .pipe(\n        switchMap(modelVersion => {\n          this.statState.initLoading();\n          return this.statApi\n            .getStat({\n              model_version_id: `${modelVersion.id}`,\n            })\n            .pipe(\n              catchError(err => {\n                this.statState.setError(err);\n                return of(null);\n              })\n            );\n        })\n      )\n      .subscribe(stat => {\n        this.statState.setStat(stat);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statState",
                        "type": "StatState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "statApi",
                        "type": "StatApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "statState",
                        "type": "StatState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "statApi",
                        "type": "StatApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StatState",
            "id": "injectable-StatState-4619e1bbce8fa56aa5e039468c165f06",
            "file": "src/app/modules/stat/store/stat.state.ts",
            "properties": [
                {
                    "name": "state",
                    "defaultValue": "new BehaviorSubject<State>(\n    initialState\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<State>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<State>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string | null>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStat",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Stat | null>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setError",
                    "args": [
                        {
                            "name": "error",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStat",
                    "args": [
                        {
                            "name": "stat",
                            "type": "Stat",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "stat",
                            "type": "Stat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, distinctUntilChanged } from 'rxjs/operators';\nimport { Stat } from '../models';\n\ninterface State {\n  loading: boolean;\n  error: string | null;\n  stat: Stat | null;\n}\n\nconst initialState: State = {\n  loading: false,\n  error: null,\n  stat: null,\n};\n\n@Injectable()\nexport class StatState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState\n  );\n\n  constructor() {\n    this.state$ = this.state.asObservable();\n  }\n\n  getStat(): Observable<Stat | null> {\n    return this.state$.pipe(\n      map(({ stat }) => stat),\n      distinctUntilChanged()\n    );\n  }\n\n  isLoading(): Observable<boolean> {\n    return this.state$.pipe(\n      map(({ loading }) => loading),\n      distinctUntilChanged()\n    );\n  }\n\n  getError(): Observable<string | null> {\n    return this.state$.pipe(\n      map(({ error }) => error),\n      distinctUntilChanged()\n    );\n  }\n\n  initLoading(): void {\n    this.state.next({ ...initialState, loading: true });\n  }\n\n  setError(error: string | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, error, loading: false });\n  }\n\n  setStat(stat: Stat): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, stat, loading: false });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "type": "injectable"
        },
        {
            "name": "SvgSpriteService",
            "id": "injectable-SvgSpriteService-5245f824f434ca900d5882ab8e3110fb",
            "file": "src/app/core/svg-sprite.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "loadSvgSprite",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable, Inject } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\n\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SvgSpriteService {\n  constructor(\n    private http: HttpClient,\n    @Inject(APP_BASE_HREF) private href: string\n  ) {}\n\n  public loadSvgSprite() {\n    if (\n      !document.createElementNS ||\n      !document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n        .createSVGRect\n    ) {\n      return true;\n    }\n\n    const fileUrl = 'assets/images/sprites/hydro-sprite.svg';\n    const url = this.href + fileUrl;\n\n    this.http\n      .get(url, { observe: 'body', responseType: 'text' })\n      .pipe(\n        catchError((err: HttpErrorResponse) => {\n          console.error(`Can't load svg sprite. Error: ${err.message}`);\n          return of('');\n        })\n      )\n      .subscribe(res => {\n        const insert = () =>\n          document.body.insertAdjacentHTML('afterbegin', res);\n\n        document.body\n          ? insert()\n          : document.addEventListener('DOMContentLoaded', insert);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "href",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "href",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TestApplicationFacade",
            "id": "injectable-TestApplicationFacade-63b5392d67341c36b5f39c749a298fc2",
            "file": "src/app/modules/dialogs/components/dialog-test/test-application.facade.ts",
            "properties": [
                {
                    "name": "output",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<string>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "output$",
                    "defaultValue": "this.output.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateInput",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOutput",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "testApplication",
                    "args": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { ApplicationService } from '@app/core/data/services/application.service';\nimport { switchMap } from 'rxjs/operators';\n\n@Injectable()\nexport class TestApplicationFacade {\n  private output: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  private readonly output$ = this.output.asObservable();\n\n  constructor(\n    private readonly facade: ApplicationsFacade,\n    private readonly api: ApplicationService\n  ) {}\n\n  generateInput(): Observable<string> {\n    return this.facade.selectedApplication().pipe(\n      switchMap(({ name }) => {\n        return this.api.generateInputs(name);\n      })\n    );\n  }\n\n  testApplication(input: string) {\n    this.facade\n      .selectedApplication()\n      .pipe(\n        switchMap(application => {\n          return this.api.serveService(JSON.parse(input), application.name);\n        })\n      )\n      .subscribe(\n        output => this.output.next(JSON.stringify(output, undefined, 2)),\n        output => this.output.next(JSON.stringify(output, undefined, 2))\n      );\n  }\n\n  getOutput(): Observable<string> {\n    return this.output$;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "ApplicationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "ApplicationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UiBuildInfoService",
            "id": "injectable-UiBuildInfoService-ba89d72914f61cf4c28333bbbd65ee65",
            "file": "src/app/core/ui-build-info.service.ts",
            "properties": [
                {
                    "name": "config",
                    "defaultValue": "defaultConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiBuildInfo",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "loadConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nexport interface UiBuildInfo {\n  version?: string;\n  gitHeadCommit?: string;\n  gitCurrentBranch?: string;\n  nodeVersion?: string;\n}\n\nconst defaultConfig: UiBuildInfo = {};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UiBuildInfoService {\n  public config: UiBuildInfo = defaultConfig;\n  constructor(private readonly http: HttpClient) {}\n\n  loadConfig() {\n    return this.http\n      .get<UiBuildInfo>(`/assets/buildinfo.json`)\n      .toPromise()\n      .then((data: any) => (this.config = data))\n      .catch((_: any) => {\n        console.warn(`Couldn't load config,using default config`);\n        return Promise.resolve();\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "VisualizationApi",
            "id": "injectable-VisualizationApi-f6ca6ddf39b26ca0eca42617aadeacc2",
            "file": "src/app/modules/visualization/services/visualization-api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createTask",
                    "args": [
                        {
                            "name": "transformer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'umap'"
                        },
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskInformation>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "transformer",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'umap'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getJobResult",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<TaskInformation>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParams",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<VisualizationParams>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport { ModelVersion } from '@app/core/data/types';\nimport { HttpService } from '@app/core/data/services/http.service';\n\nimport { TaskInformation } from '../models/visualization';\nimport { VisualizationParams } from '../models/visualization-params';\n\n@Injectable({ providedIn: 'root' })\nexport class VisualizationApi {\n  private readonly baseUrl: string;\n\n  constructor(private http: HttpService) {\n    this.baseUrl = `${environment.visualizationUrl}`;\n  }\n\n  createTask(\n    transformer: string = 'umap',\n    modelVersion: ModelVersion\n  ): Observable<TaskInformation> {\n    return this.http\n      .post<TaskInformation>(\n        `${this.baseUrl}/plottable_embeddings/${transformer}`,\n        {\n          model_version_id: modelVersion.id,\n        }\n      )\n      .pipe(catchError(err => throwError(err)));\n  }\n\n  getJobResult(taskId: string): Observable<TaskInformation> {\n    return this.http\n      .get<TaskInformation>(`${this.baseUrl}/jobs?task_id=${taskId}`)\n      .pipe(catchError(err => throwError(err)));\n  }\n\n  setParams(\n    params: VisualizationParams,\n    modelVersion: ModelVersion\n  ): Observable<any> {\n    const method = 'umap';\n    const body = {\n      model_version_id: modelVersion.id,\n      ...params,\n    };\n\n    return this.http.post(`${this.baseUrl}/params/${method}`, body);\n  }\n\n  getParams(modelVersionId: number): Observable<VisualizationParams> {\n    const method = 'umap';\n\n    return this.http.get(`${this.baseUrl}/params/${method}`, {\n      params: { model_version_id: `${modelVersionId}` },\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "VisualizationFacade",
            "id": "injectable-VisualizationFacade-57159df69eaf480b5a3c86a6d0dd5622",
            "file": "src/app/modules/visualization/visualization.facade.ts",
            "properties": [
                {
                    "name": "colors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "destroy",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "selectedCheck$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Check>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "buildColorizers",
                    "args": [
                        {
                            "type": "VisualizationResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Colorizer[]",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "VisualizationResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeColorizer",
                    "args": [
                        {
                            "name": "colorizer",
                            "type": "Colorizer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorizer",
                            "type": "Colorizer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeSelectedPointIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorizers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColors",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCounterfactuals",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getParams",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<VisualizationParams>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRequestsIds",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getResult",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getScatterPlotData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ScatterPlotData>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedColorizer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedPointIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTaskId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTop100",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVisualizationMetrics",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadEmbedding",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refit",
                    "args": [
                        {
                            "name": "visParams",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "visParams",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, OnDestroy } from '@angular/core';\nimport { SnackbarService } from '@app/core/snackbar.service';\n\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { ModelVersion } from '@app/core/data/types';\n\nimport { ScatterPlotData } from '../visualization/models/scatter-plot-data.model';\nimport { Colorizer, ColorizerFabric } from '../visualization/models';\n\nimport { Check } from '../monitoring/models';\nimport { MonitoringService } from '../monitoring/services';\n\nimport { neitherNullNorUndefined } from '@app/utils';\nimport { Observable, of, Subject, timer, concat } from 'rxjs';\nimport {\n  catchError,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  takeUntil,\n  takeWhile,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { VisualizationParams } from './models';\nimport { VisualizationResponse, ETaskState } from './models/visualization';\nimport { VisualizationApi } from './services';\nimport { VisualizationState } from './store/visualization.state';\nimport * as R from 'ramda';\nimport * as D3 from 'd3';\nimport { Notify } from '@app/core/store/actions/notifications.actions';\n\nexport type ColorBy = 'class_label' | 'metric';\n\n@Injectable()\nexport class VisualizationFacade implements OnDestroy {\n  private readonly colors$: Observable<string[]>;\n  private readonly selectedCheck$: Observable<Check>;\n\n  private destroy: Subject<any> = new Subject<any>();\n\n  constructor(\n    private api: VisualizationApi,\n    private monitoringApi: MonitoringService,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private colorizerFabric: ColorizerFabric,\n    private state: VisualizationState,\n    private snackbar: SnackbarService,\n  ) {\n    this.colors$ = this.getSelectedColorizer().pipe(\n      neitherNullNorUndefined,\n      map(colorizer => colorizer.getColors()),\n      startWith([]),\n      shareReplay(1),\n    );\n\n    this.selectedCheck$ = this.getSelectedId().pipe(\n      neitherNullNorUndefined,\n      switchMap(id => this.monitoringApi.getCheck(id)),\n      map(bareCheck => new Check(bareCheck)),\n      shareReplay(1),\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n    this.destroy = null;\n  }\n\n  getStatus() {\n    return this.state.getStatus();\n  }\n\n  getTaskId() {\n    return this.state.getTaskId();\n  }\n\n  getResult() {\n    return this.state.getResult();\n  }\n\n  getColorizers() {\n    return this.state.getColorizers();\n  }\n\n  getSelectedColorizer() {\n    return this.state.getSelectedColorizer();\n  }\n\n  getSelectedPointIndex() {\n    return this.state.getSelectedPointIndex();\n  }\n\n  getTop100() {\n    return this.state.getTop100();\n  }\n\n  getCounterfactuals() {\n    return this.state.getCounterfactuals();\n  }\n\n  getVisualizationMetrics() {\n    return this.state.getVisualizationMetrics();\n  }\n\n  getRequestsIds() {\n    return this.state.getRequestsIds();\n  }\n\n  getMessage() {\n    return this.state.getMessage();\n  }\n\n  getSelectedId() {\n    return this.getSelectedPointIndex().pipe(\n      withLatestFrom(this.getRequestsIds()),\n      map(([index, ids]) => ids[index]),\n    );\n  }\n\n  getModelVersion(): Observable<ModelVersion> {\n    return this.modelVersionsFacade.selectedModelVersion();\n  }\n\n  getError(): Observable<string> {\n    return this.state.getError();\n  }\n\n  getParams(): Observable<VisualizationParams> {\n    return this.state.getParams();\n  }\n\n  getScatterPlotData(): Observable<ScatterPlotData> {\n    return this.getResult().pipe(\n      neitherNullNorUndefined,\n      map(({ data = [], training_data = [] }) => {\n        const getXCoordinates = R.compose(R.map(R.head));\n        const getYCoordinates = R.compose(R.flatten, R.map(R.tail));\n        const toScatterPlotPoint = el => {\n          return {\n            x: el[0],\n            y: el[1],\n          };\n        };\n\n        const prodXCoordinates: number[] = getXCoordinates(data);\n        const trainXCoordinates: number[] = getXCoordinates(training_data);\n\n        const prodYCoordinates: number[] = getYCoordinates(data);\n        const trainYCoordinates: number[] = getYCoordinates(training_data);\n\n        const [minX, maxX] = D3.extent(\n          R.concat(prodXCoordinates, trainXCoordinates),\n        );\n        const [minY, maxY] = D3.extent(\n          R.concat(prodYCoordinates, trainYCoordinates),\n        );\n\n        return {\n          points: data.map(toScatterPlotPoint),\n          trainingPoints: training_data.map(toScatterPlotPoint),\n          minX,\n          maxX,\n          minY,\n          maxY,\n        };\n      }),\n    );\n  }\n\n  getColors() {\n    return this.colors$;\n  }\n\n  getSelectedCheck() {\n    return this.selectedCheck$;\n  }\n\n  loadEmbedding(): void {\n    this.getModelVersion()\n      .pipe(\n        switchMap(mv =>\n          this.api.createTask('umap', mv).pipe(\n            switchMap(({ task_id }) => {\n              return concat(\n                timer(0, 5000).pipe(\n                  switchMap(() => this.api.getJobResult(task_id)),\n                  tap(task => {\n                    this.state.setResult({\n                      message: task.message,\n                      status: task.state,\n                      result: task.result,\n                      colorizers: task.result\n                        ? this.buildColorizers(task.result)\n                        : [],\n                      top100: task.result ? task.result.top_N : [],\n                      counterfactuals: task.result\n                        ? task.result.counterfactuals\n                        : [],\n                      visualizationMetrics: task.result\n                        ? task.result.visualization_metrics\n                        : undefined,\n                      requestsIds: task.result ? task.result.requests_ids : [],\n                    });\n                  }),\n                  takeWhile(({ state }) => state !== ETaskState.success),\n                  catchError(err => {\n                    this.state.setError(err);\n                    return of(\n                      Notify({\n                        kind: 'error',\n                        message: err,\n                      }),\n                    );\n                  }),\n                ),\n                this.getModelVersion().pipe(\n                  switchMap(mv => this.api.getParams(mv.id)),\n                  tap(params => {\n                    this.state.setParams(params);\n                  }),\n                ),\n              );\n            }),\n            catchError(err => {\n              this.state.setError(err);\n              return of();\n            }),\n          ),\n        ),\n        takeUntil(this.destroy.asObservable()),\n      )\n      .subscribe();\n  }\n\n  changeColorizer(colorizer: Colorizer): void {\n    this.state.setColorizer(colorizer);\n  }\n\n  changeSelectedPointIndex(index: number): void {\n    this.state.selectIndex(index);\n  }\n\n  refit(visParams: VisualizationParams): void {\n    this.getModelVersion()\n      .pipe(\n        switchMap(mv => {\n          return this.api.setParams(visParams, mv).pipe(\n            tap(() => {\n              this.loadEmbedding();\n            }),\n            catchError(err => {\n              return of(Notify({ kind: 'error', message: err }));\n            }),\n          );\n        }),\n      )\n      .subscribe();\n  }\n\n  private buildColorizers({\n    output_info,\n    metrics,\n  }: VisualizationResponse): Colorizer[] {\n    const res = [];\n    for (const [name, payload] of Object.entries(output_info)) {\n      res.push(\n        this.colorizerFabric.createColorizer('class_label', {\n          name,\n          data: payload.data,\n          coloringType: payload.coloring_type,\n          classes: payload.classes,\n        }),\n      );\n    }\n\n    for (const [name, payload] of Object.entries(metrics)) {\n      res.push(\n        this.colorizerFabric.createColorizer('metric', {\n          name,\n          data: payload.scores,\n          metric: payload,\n        }),\n      );\n    }\n    return res;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "api",
                        "type": "VisualizationApi",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorizerFabric",
                        "type": "ColorizerFabric",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "state",
                        "type": "VisualizationState",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "api",
                        "type": "VisualizationApi",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringApi",
                        "type": "MonitoringService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorizerFabric",
                        "type": "ColorizerFabric",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "state",
                        "type": "VisualizationState",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackbar",
                        "type": "SnackbarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "VisualizationState",
            "id": "injectable-VisualizationState-14d8a7c8b0fef2214524bfdad03a7f75",
            "file": "src/app/modules/visualization/store/visualization.state.ts",
            "properties": [
                {
                    "name": "state",
                    "defaultValue": "new BehaviorSubject<State>(\n    initialState\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<State>",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "state$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<State>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getColorizers",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getCounterfactuals",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getError",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getParams",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<VisualizationParams>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getRequestsIds",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getResult",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getSelectedColorizer",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getSelectedPointIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getTaskId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getTop100",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getVisualizationMetrics",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setColorizer",
                    "args": [
                        {
                            "name": "selectedColorizer",
                            "type": "Colorizer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedColorizer",
                            "type": "Colorizer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setError",
                    "args": [
                        {
                            "name": "error",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setResult",
                    "args": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTaskId",
                    "args": [
                        {
                            "name": "taskId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "taskId",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Colorizer } from '../models';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { pluck } from '@app/utils';\nimport { VisualizationResponse, ETaskState } from '../models';\nimport { VisualizationParams } from '../models/visualization-params';\nimport { ColorBy } from '../visualization.facade';\n\nexport type VisualizationTaskId = string;\nexport interface State {\n  taskId: VisualizationTaskId | null;\n  result: VisualizationResponse | null;\n  error: string | null;\n  status: ETaskState;\n  colorBy: ColorBy;\n  colorizers: Colorizer[];\n  selectedColorizer: Colorizer;\n  selectedPointIndex: number;\n  data: number[];\n  top100: number[][];\n  counterfactuals: number[][];\n  visualizationMetrics: { [name: string]: string };\n  requestsIds: string[];\n  message: string | null;\n  params: VisualizationParams;\n}\n\nconst initialState: State = {\n  taskId: null,\n  result: null,\n  error: null,\n  status: ETaskState.unknown,\n  colorBy: 'class_label',\n  colorizers: [],\n  selectedColorizer: undefined,\n  data: [],\n  selectedPointIndex: undefined,\n  top100: [],\n  counterfactuals: [],\n  visualizationMetrics: undefined,\n  requestsIds: [],\n  message: null,\n  params: null,\n};\n\n@Injectable()\nexport class VisualizationState {\n  private state$: Observable<State>;\n  private state: BehaviorSubject<State> = new BehaviorSubject<State>(\n    initialState\n  );\n\n  constructor() {\n    this.state$ = this.state.asObservable().pipe(shareReplay(1));\n  }\n\n  public getStatus() {\n    return this.state$.pipe(pluck('status'));\n  }\n\n  public getTaskId() {\n    return this.state$.pipe(pluck('taskId'));\n  }\n\n  public getResult() {\n    return this.state$.pipe(pluck('result'));\n  }\n\n  public getError() {\n    return this.state$.pipe(pluck('error'));\n  }\n\n  public getColorizers() {\n    return this.state$.pipe(pluck('colorizers'));\n  }\n\n  public getSelectedColorizer() {\n    return this.state$.pipe(pluck('selectedColorizer'));\n  }\n\n  public getSelectedPointIndex() {\n    return this.state$.pipe(pluck('selectedPointIndex'));\n  }\n\n  public getTop100() {\n    return this.state$.pipe(pluck('top100'));\n  }\n\n  public getCounterfactuals() {\n    return this.state$.pipe(pluck('counterfactuals'));\n  }\n\n  public getVisualizationMetrics() {\n    return this.state$.pipe(pluck('visualizationMetrics'));\n  }\n\n  public getRequestsIds() {\n    return this.state$.pipe(pluck('requestsIds'));\n  }\n\n  public getMessage() {\n    return this.state$.pipe(pluck('message'));\n  }\n\n  public getParams(): Observable<VisualizationParams> {\n    return this.state$.pipe(pluck('params'));\n  }\n\n  public setError(error: string | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, error, status: ETaskState.failed });\n  }\n\n  public setTaskId(taskId: string | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, taskId });\n  }\n\n  public setColorizer(selectedColorizer: Colorizer): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, selectedColorizer });\n  }\n\n  public selectIndex(index: number | null): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, selectedPointIndex: index });\n  }\n\n  public setParams(params: VisualizationParams) {\n    const state = this.state.getValue();\n    this.state.next({ ...state, params });\n  }\n\n  public setResult(params: {\n    status: ETaskState;\n    result: VisualizationResponse;\n    colorizers: Colorizer[];\n    top100: number[][];\n    counterfactuals: number[][];\n    visualizationMetrics: any;\n    requestsIds: string[];\n    message: string;\n  }): void {\n    const state = this.state.getValue();\n    this.state.next({ ...state, ...params });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 52
            },
            "type": "injectable"
        },
        {
            "name": "ZenModeService",
            "id": "injectable-ZenModeService-978e8be4a2395f71154d4eb9d1e1e188",
            "file": "src/app/core/zenmode.service.ts",
            "properties": [
                {
                    "name": "isZenMode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ZenModeService {\n  isZenMode$: Observable<boolean>;\n  constructor(private route: ActivatedRoute) {\n    this.isZenMode$ = this.route.queryParams.pipe(\n      map(queryParams => (queryParams && queryParams.zenMode) || false)\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "CanActivateApplicationGuard",
            "id": "injectable-CanActivateApplicationGuard-ff28f48de0ea23457102550185f9ce04",
            "file": "src/app/modules/applications/guards/can-activate-application.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "routerSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routerSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "redirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, first } from 'rxjs/operators';\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { Store } from '@ngrx/store';\nimport { NotifyWarning } from '@app/core/store/actions/notifications.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CanActivateApplicationGuard implements CanActivate {\n  constructor(\n    private facade: ApplicationsFacade,\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  canActivate(routerSnapshot: ActivatedRouteSnapshot): Observable<boolean> {\n    return this.loaded().pipe(\n      switchMap(() => this.facade.allApplications()),\n      switchMap(apps => {\n        const applicationName = routerSnapshot.params.name;\n        const appExist = apps.some(({ name }) => name === applicationName);\n\n        if (appExist) {\n          return of(true);\n        } else {\n          this.showMessage(applicationName);\n          this.redirect();\n          return of(false);\n        }\n      }),\n    );\n  }\n\n  private redirect(): void {\n    this.router.navigate(['/applications']);\n  }\n\n  private showMessage(name: string): void {\n    this.store.dispatch(\n      NotifyWarning(`Application with name: ${name} doesn't exist`),\n    );\n  }\n\n  private loaded(): Observable<boolean> {\n    return this.facade.areApplicationsLoaded().pipe(first(loaded => loaded));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "CanActivateDeploymentConfigGuard",
            "id": "injectable-CanActivateDeploymentConfigGuard-bae90cfb1baad9752fd5e67edcbb1812",
            "file": "src/app/modules/deployment-configs/guards/can-activate-depconfig.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "routerSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routerSnapshot",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "redirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Router, CanActivate } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, first } from 'rxjs/operators';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { Store } from '@ngrx/store';\nimport { NotifyWarning } from '@app/core/store/actions/notifications.actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CanActivateDeploymentConfigGuard implements CanActivate {\n  constructor(\n    private facade: DeploymentConfigsFacade,\n    private router: Router,\n    private store: Store,\n  ) {}\n\n  canActivate(routerSnapshot: ActivatedRouteSnapshot): Observable<boolean> {\n    return this.loaded().pipe(\n      switchMap(() => this.facade.getAll()),\n      switchMap(depconfigs => {\n        const depConfigName = routerSnapshot.params.name;\n        const depConfigExist = depconfigs.some(\n          ({ name }) => name === depConfigName,\n        );\n\n        if (depConfigExist) {\n          return of(true);\n        } else {\n          this.showMessage(depConfigName);\n          this.redirect();\n          return of(false);\n        }\n      }),\n    );\n  }\n\n  private redirect(): void {\n    this.router.navigate(['/deployment_configs']);\n  }\n\n  private showMessage(name: string): void {\n    this.store.dispatch(\n      NotifyWarning(`Deployment config with name: ${name} doesn't exist`),\n    );\n  }\n\n  private loaded(): Observable<boolean> {\n    return this.facade.areDepConfigsLoaded().pipe(first(loaded => loaded));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "CanActivateModelGuard",
            "id": "injectable-CanActivateModelGuard-e9297d6af4f9b78d0a1934ee7927b3c0",
            "file": "src/app/modules/models/guards/can-activate-model.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loaded",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "redirectToDefault",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "modelName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { switchMap, first } from 'rxjs/operators';\n\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { Model } from '@app/core/data/types';\nimport { Store } from '@ngrx/store';\nimport { NotifyWarning } from '@app/core/store/actions/notifications.actions';\n\n@Injectable({ providedIn: 'root' })\nexport class CanActivateModelGuard implements CanActivate {\n  constructor(\n    private facade: ModelsFacade,\n    private modelVersionFacade: ModelVersionsFacade,\n    private store: Store,\n    private router: Router,\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    const modelName = route.params.modelName;\n\n    return this.loaded().pipe(\n      switchMap(() => this.facade.allModels()),\n      switchMap(models => {\n        const model: Model = models.find(\n          curModel => curModel.name === modelName,\n        );\n\n        if (model) {\n          return of(true);\n        } else {\n          this.showMessage(modelName);\n          this.redirectToDefault();\n          return of(false);\n        }\n      }),\n    );\n  }\n\n  private showMessage(modelName: string): void {\n    this.store.dispatch(\n      NotifyWarning(`Models with name = ${modelName} doesn't exist`),\n    );\n  }\n\n  private redirectToDefault(): void {\n    this.router.navigate(['models']);\n  }\n\n  private loaded(): Observable<boolean> {\n    return this.facade.areModelsLoaded().pipe(first(loaded => loaded));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "CanActivateModelVersionGuard",
            "id": "injectable-CanActivateModelVersionGuard-ebc97b3c09d536258b0a6732be122140",
            "file": "src/app/modules/model-version/guards/can-activate-model-version.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loaded",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "modelName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVersionNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "modelName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVersionNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable, of, combineLatest } from 'rxjs';\nimport { switchMap, first } from 'rxjs/operators';\n\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { Store } from '@ngrx/store';\nimport { NotifyWarning } from '@app/core/store/actions/notifications.actions';\n\n@Injectable({ providedIn: 'root' })\nexport class CanActivateModelVersionGuard implements CanActivate {\n  constructor(\n    private store: Store,\n    private router: Router,\n    private modelsFacade: ModelsFacade,\n    private modelVersionsFacade: ModelVersionsFacade,\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {\n    const modelVersionNumber = Number(route.params.modelVersionNumber);\n    const modelName = route.params.modelName;\n\n    return this.loaded().pipe(\n      switchMap(() => this.modelVersionsFacade.allModelVersions()),\n      switchMap(modelVersions => {\n        const modelVersionExists = modelVersions.some(\n          modelVersion =>\n            modelVersion.modelVersion === modelVersionNumber &&\n            modelVersion.model.name === modelName,\n        );\n\n        if (modelVersionExists) {\n          return of(true);\n        } else {\n          this.showMessage(modelName, modelVersionNumber);\n          this.router.navigate(['models', modelName]);\n          return of(false);\n        }\n      }),\n    );\n  }\n\n  private loaded() {\n    return combineLatest([\n      this.modelsFacade.areModelsLoaded(),\n      this.modelVersionsFacade.areModelVersionsLoaded(),\n    ]).pipe(\n      first(\n        ([modelsLoaded, modelVersionsLoaded]) =>\n          modelsLoaded && modelVersionsLoaded,\n      ),\n    );\n  }\n\n  private showMessage(modelName: string, modelVersionNumber: number): void {\n    this.store.dispatch(\n      NotifyWarning(\n        `Models version: ${modelVersionNumber} doesn't exist for model with name:${modelName}`,\n      ),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "Aggregation",
            "id": "class-Aggregation-63b67963a3670e18d4f9678fd729d631",
            "file": "src/app/modules/monitoring/models/Aggregation.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ModelVersion } from '@app/core/data/types';\nimport { AggregationDTO } from './AggregationDTO';\n\nexport interface AggregationCheck {\n  checked: number;\n  passed: number;\n}\n\nexport class Aggregation {\n  readonly from: any;\n  readonly to: any;\n  readonly id: string;\n  readonly hs_requests: number;\n  readonly modelVersionId: number;\n  readonly metricsChecks: { [metricName: string]: AggregationCheck };\n  readonly batchesChecks: {\n    [featureName: string]: {\n      [metricName: string]: AggregationCheck;\n    };\n  };\n  readonly featuresChecks: { [featureName: string]: AggregationCheck };\n  readonly modelVersion: ModelVersion;\n\n  constructor(params: AggregationDTO, modelVersion: ModelVersion) {\n    this.id = params._id;\n    this.hs_requests = params._hs_requests || 0;\n    this.metricsChecks = params._hs_metrics || {};\n    this.batchesChecks = params._hs_batch || {};\n    this.featuresChecks = Aggregation.extractFeatureChecks(params);\n    this.from = params._hs_first_id;\n    this.to = params._hs_last_id;\n    this.modelVersionId = params._hs_model_version_id;\n    this.modelVersion = modelVersion;\n  }\n\n  private static extractFeatureChecks(params: any): {\n    [featureName: string]: AggregationCheck;\n  } {\n    const featuresChecks = Object.create(null);\n\n    for (const featureNameKey in params) {\n      if (params.hasOwnProperty(featureNameKey)) {\n        if (!featureNameKey.startsWith('_')) {\n          const check: { checks: number; passed: number } =\n            params[featureNameKey];\n          featuresChecks[featureNameKey] = {\n            checked: check.checks,\n            passed: check.passed,\n          };\n        }\n      }\n    }\n\n    return featuresChecks;\n  }\n\n  get inputFeaturesNames(): string[] {\n    return this.modelVersion.contractInputs.map(input => input.name);\n  }\n\n  get outputFeaturesNames(): string[] {\n    return this.modelVersion.contractOutputs.map(output => output.name);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "params",
                        "type": "AggregationDTO",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersion",
                        "type": "ModelVersion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "AggregationDTO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersion",
                        "type": "ModelVersion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "batchesChecks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "featuresChecks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "hs_requests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "metricsChecks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersion",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "extractFeatureChecks",
                    "args": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "inputFeaturesNames": {
                    "name": "inputFeaturesNames",
                    "getSignature": {
                        "name": "inputFeaturesNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 57
                    }
                },
                "outputFeaturesNames": {
                    "name": "outputFeaturesNames",
                    "getSignature": {
                        "name": "outputFeaturesNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 61
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AggregationsList",
            "id": "class-AggregationsList-64ffe6aea9a554397b8c6710126e5b41",
            "file": "src/app/modules/monitoring/models/AggregationsList.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Aggregation } from './Aggregation';\nimport { union, isEmpty } from 'lodash';\nimport { compose } from 'lodash/fp';\n\nexport class AggregationsList {\n  aggregations: Aggregation[] = [];\n  readonly totalBatchesCount: number;\n  readonly showedBatchesCount: number;\n  readonly minDate: Date;\n  readonly maxDate: Date;\n  constructor(\n    aggregations: Aggregation[] = [],\n    batchesCount: number = 0,\n    minDate: number,\n    maxDate: number\n  ) {\n    this.aggregations = aggregations;\n    this.totalBatchesCount = batchesCount;\n    this.showedBatchesCount = aggregations.length;\n    this.minDate = new Date(minDate * 1000);\n    this.maxDate = new Date(maxDate * 1000);\n  }\n\n  get featureNames(): string[] {\n    const firstAggregation = this.aggregations[0];\n\n    return firstAggregation ? Object.keys(firstAggregation.featuresChecks) : [];\n  }\n\n  get inputNames(): string[] {\n    const firstAggregation = this.aggregations[0];\n\n    return firstAggregation ? firstAggregation.inputFeaturesNames : [];\n  }\n\n  get outputNames(): string[] {\n    const firstAggregation = this.aggregations[0];\n\n    return firstAggregation ? firstAggregation.outputFeaturesNames : [];\n  }\n\n  get metricNames(): string[] {\n    if (this.aggregations.length > 0) {\n      const set = new Set<string>();\n      this.aggregations.forEach(agg => {\n        Object.keys(agg.metricsChecks).forEach(metricName =>\n          set.add(metricName)\n        );\n      });\n      return [...set];\n    }\n    return [];\n  }\n\n  get batchNames(): string[] {\n    return this.aggregations\n      .filter(agg => !isEmpty(agg.batchesChecks))\n      .reduce((names, { batchesChecks }) => {\n        return union(names, Object.keys(Object.values(batchesChecks)[0]));\n      }, []);\n  }\n\n  get dateFrom(): Date | null {\n    if (this.aggregations.length) {\n      return this.extractDateFromId(this.aggregations[0].id);\n    }\n    return null;\n  }\n  get dateTo(): Date | null {\n    if (this.aggregations.length) {\n      return this.extractDateFromId(\n        this.aggregations[this.aggregations.length - 1].id\n      );\n    }\n    return null;\n  }\n\n  get lastAggregation(): Aggregation | null {\n    if (this.aggregations.length) {\n      return this.aggregations[this.aggregations.length - 1];\n    } else {\n      return null;\n    }\n  }\n\n  has(aggregation: Aggregation | null): boolean {\n    if (\n      this.aggregations.length &&\n      aggregation !== null &&\n      aggregation !== undefined\n    ) {\n      return this.aggregations.some(({ id }) => id === aggregation.id);\n    } else {\n      return false;\n    }\n  }\n\n  private extractDateFromId(id: string): Date {\n    const getFirst4Bytes = str => str.slice(0, 8);\n    const convertToMicroseconds = str => parseInt(str, 16) * 1000;\n    const convertToDate = ms => new Date(ms);\n\n    return compose(convertToDate, convertToMicroseconds, getFirst4Bytes)(id);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "aggregations",
                        "type": "Aggregation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "batchesCount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "minDate",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxDate",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "aggregations",
                        "type": "Aggregation[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "batchesCount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "minDate",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maxDate",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "aggregations",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Aggregation[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "showedBatchesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "totalBatchesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "extractDateFromId",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Date",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "has",
                    "args": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "featureNames": {
                    "name": "featureNames",
                    "getSignature": {
                        "name": "featureNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 24
                    }
                },
                "inputNames": {
                    "name": "inputNames",
                    "getSignature": {
                        "name": "inputNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 30
                    }
                },
                "outputNames": {
                    "name": "outputNames",
                    "getSignature": {
                        "name": "outputNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 36
                    }
                },
                "metricNames": {
                    "name": "metricNames",
                    "getSignature": {
                        "name": "metricNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 42
                    }
                },
                "batchNames": {
                    "name": "batchNames",
                    "getSignature": {
                        "name": "batchNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 55
                    }
                },
                "dateFrom": {
                    "name": "dateFrom",
                    "getSignature": {
                        "name": "dateFrom",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 63
                    }
                },
                "dateTo": {
                    "name": "dateTo",
                    "getSignature": {
                        "name": "dateTo",
                        "type": "",
                        "returnType": "Date | null",
                        "line": 69
                    }
                },
                "lastAggregation": {
                    "name": "lastAggregation",
                    "getSignature": {
                        "name": "lastAggregation",
                        "type": "",
                        "returnType": "Aggregation | null",
                        "line": 78
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Application",
            "id": "class-Application-c0d11a972594ed294d8dd7934725baa5",
            "file": "src/app/core/data/types/application.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DeploymentConfig } from './deployment-config';\nimport { Signature } from '@app/core/data/types/signature';\n\nexport interface ApplicationCreatingRequest {\n  name: string;\n  kafkaStreaming: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface ApplicationUpdateRequest {\n  name: string;\n  kafkaStreaming?: any[];\n  executionGraph: {\n    stages: {\n      modelVariants: {\n        modelVersionId: number;\n        weight: number;\n        deploymentConfigName: string;\n      }[];\n    }[];\n  };\n  deploymentConfiguration: DeploymentConfig;\n}\n\nexport interface KafkaStreaming {\n  sourceTopic: string;\n  destinationTopic: string;\n  consumerId?: string;\n  errorTopic?: string;\n}\n\nexport enum TestStatus {\n  Failed = 'failed',\n  Pending = 'pending',\n  Success = 'success',\n  Undefined = '',\n}\n\nexport enum ApplicationStatus {\n  Assembling = 'assembling',\n  Ready = 'ready',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport interface Stage {\n  modelVariants: ModelVariant[];\n  signature: string;\n}\n\nexport interface ModelVariant {\n  servableName?: string;\n  modelVersionId: number;\n  weight: number;\n  deploymentConfigurationName: string;\n}\n\nexport interface ExecutionGraph {\n  stages: Stage[];\n}\n\nexport class Application {\n  id?: number;\n  signature?: Signature;\n  name: string;\n  executionGraph: ExecutionGraph;\n  namespace?: string;\n  kafkaStreaming?: KafkaStreaming[];\n  input: string;\n  output: string;\n  testStatus?: TestStatus;\n  error?: string;\n  status: string;\n  message?: string;\n  favorite: boolean;\n  deploymentConfiguration: DeploymentConfig;\n\n  constructor(props: any = {}) {\n    if (props.id) {\n      this.id = props.id;\n    }\n    if (props.signature) {\n      this.signature = props.signature;\n    }\n    this.name = props.name;\n    this.executionGraph = props.executionGraph;\n    this.kafkaStreaming = props.kafkaStreaming;\n    this.input = props.input || null;\n    this.output = props.output || null;\n    this.namespace = props.namespace || null;\n    this.testStatus = props.testStatus || null;\n    this.error = props.error || '';\n    this.testStatus = props.testStatus || TestStatus.Undefined;\n    this.status = props.status;\n    this.message = props.message;\n    this.favorite = props.favorite || false;\n    this.deploymentConfiguration = props.deploymentConfiguration;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "deploymentConfiguration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeploymentConfig",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "executionGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExecutionGraph",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "favorite",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "kafkaStreaming",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KafkaStreaming[]",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "namespace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "output",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "signature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Signature",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "testStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TestStatus",
                    "optional": true,
                    "description": "",
                    "line": 79
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ApplicationsHelper",
            "id": "class-ApplicationsHelper-a33f54e5242ac9ae94495a685fcb0a5c",
            "file": "e2e/production-e2e/helpers/applications.helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Page } from 'playwright';\nimport appConfig from '../app-config';\nimport { ApplicationsPage } from '../pageObjects/applications.page';\n\nexport class ApplicationsHelper {\n  private readonly applicationsPage: ApplicationsPage;\n\n  constructor(page: Page) {\n    this.applicationsPage = new ApplicationsPage(page, appConfig.url);\n  }\n\n  async getSidebar() {\n    return await this.applicationsPage.sidebar();\n  }\n\n  async getSidebarButton() {\n    return await this.applicationsPage.sidebarButton();\n  }\n\n  async getSidebarInput() {\n    return await this.applicationsPage.sidebarInput();\n  }\n\n  async getSidebarItemsLength() {\n    return await this.applicationsPage.sidebarItemsLength();\n  }\n\n  async clickOnCreateApplicationButton() {\n    await (await this.applicationsPage.createApplicationButton()).click();\n  }\n\n  async getApplicationForm() {\n    return await this.applicationsPage.applicationForm();\n  }\n\n  async fillFormInput(text) {\n    await (await this.applicationsPage.formInput()).fill(text);\n  }\n\n  async clickOnAddApplicationButton() {\n    await (await this.applicationsPage.addApplicationButton()).click();\n  }\n\n  async getApplicationsPage() {\n    return await this.applicationsPage.applicationsPage();\n  }\n\n  async getApplicationsHeaderButtons() {\n    return await this.applicationsPage.applicationsHeaderButtons();\n  }\n\n  async getApplicationsHeaderButtonsLength() {\n    return await this.applicationsPage.applicationsHeaderButtonsLength();\n  }\n\n  async clickOnDeleteApplicationButton() {\n    await (await this.applicationsPage.deleteApplicationButton()).click();\n  }\n\n  async getDeleteDialog() {\n    return await this.applicationsPage.deleteDialog();\n  }\n\n  async clickOnRemoveApplicationButton() {\n    await (await this.applicationsPage.removeApplicationButton()).click();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "page",
                        "type": "Page",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "applicationsPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationsPage",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clickOnAddApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnCreateApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnDeleteApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnRemoveApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "fillFormInput",
                    "args": [
                        {
                            "name": "text",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApplicationForm",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getApplicationsHeaderButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getApplicationsHeaderButtonsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getApplicationsPage",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDeleteDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSidebarButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSidebarInput",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSidebarItemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ApplicationsPage",
            "id": "class-ApplicationsPage-5b4986b03e299db59ead2ba23887ad3d",
            "file": "e2e/production-e2e/pageObjects/applications.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as playwright from 'playwright-core';\n\nexport class ApplicationsPage {\n  private readonly page: playwright.Page;\n  private readonly baseUrl: string;\n  readonly applicationsSidebarSelector = '.applications-page__sidebar';\n  readonly applicationsSidebarHeaderSelector = '.sidebar__header';\n  readonly applicationsSidebarButtonSelector = '.sidebar__button';\n  readonly applicationsSidebarInputSelector = '.sidebar__input';\n  readonly applicationsSidebarItemsSelector = '.sidebar__item';\n  readonly createApplicationButtonSelector = '.applications-page__button';\n  readonly createDialogSelector = '.dialog__container';\n  readonly createDialogFooterSelector = '.dialog__footer';\n  readonly initialLengthSelector = this.applicationsSidebarItemsSelector.length;\n  readonly applicationFormSelector = '.application-form';\n  readonly formInputSelector = '.hs-input__input';\n  readonly addApplicationButtonSelector = '.hs-button--flat-primary';\n  readonly applicationsPageSelector = '.applications-page__body';\n  readonly applicationsHeaderSelector = '.application__header';\n  readonly applicationsHeaderButtonsSelector = '.hs-button';\n  readonly deleteApplicationButtonSelector = '.hs-button--flat-warning';\n  readonly deleteDialogSelector = '.dialog__container';\n  readonly removeApplicationButtonSelector = '.hs-button--flat-warning';\n\n  constructor(page: playwright.Page, unifiedConsoleUrl: string) {\n    this.page = page;\n    this.baseUrl = unifiedConsoleUrl + '/applications';\n  }\n\n  async sidebar() {\n    return await this.page.$(this.applicationsSidebarSelector);\n  }\n\n  async sidebarButton() {\n    let sidebar = await this.sidebar();\n    return await sidebar.$(this.applicationsSidebarButtonSelector);\n  }\n\n  async sidebarInput() {\n    let sidebar = await this.sidebar();\n    return await sidebar.$(this.applicationsSidebarInputSelector);\n  }\n\n  async sidebarItems() {\n    let sidebar = await this.sidebar();\n    return await sidebar.$$(this.applicationsSidebarItemsSelector);\n  }\n\n  async sidebarItemsLength() {\n    let sidebarItems = await this.sidebarItems();\n    return sidebarItems.length;\n  }\n\n  async createApplicationButton() {\n    let sidebarButton = await this.sidebarButton();\n    return await sidebarButton.$(this.createApplicationButtonSelector);\n  }\n\n  async createDialog() {\n    return await this.page.$(this.createDialogSelector);\n  }\n\n  async createDialogFooter() {\n    let createDialog = await this.createDialog();\n    return await createDialog.$(this.createDialogFooterSelector);\n  }\n\n  async applicationForm() {\n    let createDialog = await this.createDialog();\n    return await createDialog.$(this.applicationFormSelector);\n  }\n\n  async formInput() {\n    let form = await this.applicationForm();\n    return await form.$(this.formInputSelector);\n  }\n\n  async addApplicationButton() {\n    let createDialogFooter = await this.createDialogFooter();\n    return await createDialogFooter.$(this.addApplicationButtonSelector);\n  }\n\n  async applicationsPage() {\n    return await this.page.$(this.applicationsPageSelector);\n  }\n\n  async applicationsHeader() {\n    let applicationsPage = await this.applicationsPage();\n    return await applicationsPage.$(this.applicationsHeaderSelector);\n  }\n\n  async applicationsHeaderButtons() {\n    let header = await this.applicationsHeader();\n    return await header.$$(this.applicationsHeaderButtonsSelector);\n  }\n\n  async applicationsHeaderButtonsLength() {\n    let headerButtons = await this.applicationsHeaderButtons();\n    return headerButtons.length;\n  }\n\n  async deleteApplicationButton() {\n    let header = await this.applicationsHeader();\n    return await header.$(this.deleteApplicationButtonSelector);\n  }\n\n  async deleteDialog() {\n    return await this.page.$(this.deleteDialogSelector);\n  }\n\n  async removeApplicationButton() {\n    let dialog = await this.deleteDialog();\n    return await dialog.$(this.removeApplicationButtonSelector);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "page",
                        "type": "playwright.Page",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "unifiedConsoleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "playwright.Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "unifiedConsoleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "addApplicationButtonSelector",
                    "defaultValue": "'.hs-button--flat-primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationFormSelector",
                    "defaultValue": "'.application-form'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsHeaderButtonsSelector",
                    "defaultValue": "'.hs-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsHeaderSelector",
                    "defaultValue": "'.application__header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsPageSelector",
                    "defaultValue": "'.applications-page__body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsSidebarButtonSelector",
                    "defaultValue": "'.sidebar__button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsSidebarHeaderSelector",
                    "defaultValue": "'.sidebar__header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsSidebarInputSelector",
                    "defaultValue": "'.sidebar__input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsSidebarItemsSelector",
                    "defaultValue": "'.sidebar__item'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "applicationsSidebarSelector",
                    "defaultValue": "'.applications-page__sidebar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "createApplicationButtonSelector",
                    "defaultValue": "'.applications-page__button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "createDialogFooterSelector",
                    "defaultValue": "'.dialog__footer'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "createDialogSelector",
                    "defaultValue": "'.dialog__container'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "deleteApplicationButtonSelector",
                    "defaultValue": "'.hs-button--flat-warning'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "deleteDialogSelector",
                    "defaultValue": "'.dialog__container'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "formInputSelector",
                    "defaultValue": "'.hs-input__input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "initialLengthSelector",
                    "defaultValue": "this.applicationsSidebarItemsSelector.length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "playwright.Page",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "removeApplicationButtonSelector",
                    "defaultValue": "'.hs-button--flat-warning'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "applicationForm",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "applicationsHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "applicationsHeaderButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "applicationsHeaderButtonsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "applicationsPage",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "createApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "createDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "createDialogFooter",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "deleteApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "deleteDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "formInput",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "removeApplicationButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "sidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "sidebarButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "sidebarInput",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "sidebarItems",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "sidebarItemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Check",
            "id": "class-Check-91196f4ba6eec9dd3ffcc5e7d388e616",
            "file": "src/app/modules/monitoring/models/Check.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as _ from 'lodash';\nimport { BareCheck } from './BareCheck';\n\nexport type CheckId = string;\nexport interface MetricCheck {\n  check: boolean;\n  description: string;\n  threshold: number;\n  value: number;\n  metricSpecId: string;\n}\nexport interface RawCheck {\n  operator?: string;\n  check: boolean;\n  description: string;\n  threshold: number;\n  value: number;\n  metricSpecId: string;\n}\n\nexport class Check {\n  id: CheckId;\n  error: string | null;\n  latency: number;\n  overallScore: number;\n  metricChecks: { [metricName: string]: MetricCheck };\n  rawChecks: {\n    overall: RawCheck[];\n  };\n  modelVersionId: number;\n  modelVersion: number;\n  modelName: string;\n  inputsOutputs: { [IOkey: string]: any };\n  timestamp: number;\n\n  constructor(params: BareCheck) {\n    this.id = params._id;\n    this.error = params._hs_error;\n    this.latency = params._hs_latency;\n    this.overallScore = params._hs_overall_score;\n    this.metricChecks = params._hs_metric_checks || {};\n    this.rawChecks = params._hs_raw_checks || { overall: [] };\n    this.modelVersionId = params._hs_model_version_id;\n    this.modelName = params._hs_model_name;\n    this.modelVersion = params._hs_model_incremental_version;\n    this.timestamp = params._hs_timestamp;\n    this.inputsOutputs = this.getInputsOutputs(params);\n  }\n\n  isFailed(): boolean {\n    return this.overallScore < 1;\n  }\n\n  hasMetricChecks(): boolean {\n    return Object.keys(this.metricChecks).length > 0;\n  }\n\n  private getInputsOutputs(bareCheck: BareCheck) {\n    const res = Object.create(null);\n\n    for (const fieldName in bareCheck) {\n      if (bareCheck.hasOwnProperty(fieldName) && !fieldName.startsWith('_')) {\n        res[fieldName] = bareCheck[fieldName];\n      }\n    }\n\n    return res;\n  }\n\n  getMetricsScore(): number {\n    if (this.hasMetricChecks()) {\n      const metricChecksArray = Object.values(this.metricChecks);\n      const count = metricChecksArray.length;\n\n      const successChecksCount = metricChecksArray.filter(({ check }) => check)\n        .length;\n\n      return successChecksCount / count;\n    }\n    return 0;\n  }\n\n  getRawScore(): number {\n    const rawChecksArray = _.flatten(Object.values(this.rawChecks));\n    const count = rawChecksArray.length;\n    const successChecksCount = rawChecksArray.filter(({ check }) => check)\n      .length;\n\n    return successChecksCount / count;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "params",
                        "type": "BareCheck",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "BareCheck",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckId",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inputsOutputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "latency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "metricChecks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "modelName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "overallScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rawChecks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methods": [
                {
                    "name": "getInputsOutputs",
                    "args": [
                        {
                            "name": "bareCheck",
                            "type": "BareCheck",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "bareCheck",
                            "type": "BareCheck",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetricsScore",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRawScore",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasMetricChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFailed",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CheckCollection",
            "id": "class-CheckCollection-2e59691edd7e2c3b7fd94ab93e439495",
            "file": "src/app/modules/monitoring/models/CheckCollection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Check, MetricCheck } from './Check';\nimport { MetricCheckAggregation } from './MetricCheckAggregation';\n\nexport interface RequestsSummaryInfo {\n  count: number;\n  failed: number;\n  success: number;\n}\n\nexport class CheckCollection {\n  private readonly checks: Check[];\n  constructor(checks: Check[]) {\n    this.checks = checks || [];\n  }\n\n  getChecks(): Check[] {\n    return this.checks;\n  }\n\n  getLatency(): number[] {\n    const getLatencyField = (check: Check) => check.latency;\n    return this.checks.map(getLatencyField);\n  }\n\n  getErrorChecks(): Array<string | []> {\n    const getErrorField = (check: Check) => check.error;\n    return this.checks.map(getErrorField) || [];\n  }\n\n  getSummaryInformation(): RequestsSummaryInfo {\n    const checks = this.checks;\n    const count = checks.length;\n    const success = checks.reduce((acc, check) => {\n      if (check.overallScore === 1) {\n        acc = acc + 1;\n      }\n      return acc;\n    }, 0);\n    return {\n      count,\n      success,\n      failed: count - success,\n    };\n  }\n\n  getTimestampRange(): { from: number; to: number } {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n\n    return {\n      from: this.getFirstElement().timestamp,\n      to: this.getLastElement().timestamp,\n    };\n  }\n\n  getFirstElement(): Check {\n    return this.checks[0];\n  }\n\n  getLastElement(): Check {\n    return this.checks[this.checks.length - 1];\n  }\n\n  isEmpty(): boolean {\n    return this.checks.length === 0;\n  }\n\n  getMetricsChecks(): Map<string, MetricCheckAggregation> {\n    const metricChecks = new Map<string, MetricCheckAggregation>();\n\n    if (this.isEmpty()) return metricChecks;\n\n    const fElem = this.getFirstElement();\n\n    function create(\n      name: string,\n      metricCheck: MetricCheck\n    ): MetricCheckAggregation {\n      return {\n        metricName: name,\n        values: [metricCheck.value],\n        threshold: metricCheck.threshold,\n        checks: [metricCheck.check],\n        modelVer: fElem.modelVersion,\n        modelName: fElem.modelName,\n        modelVerId: fElem.modelVersionId,\n      };\n    }\n\n    function update(\n      current: MetricCheckAggregation,\n      add: MetricCheck\n    ): MetricCheckAggregation {\n      return {\n        ...current,\n        values: [...current.values, add.value],\n        threshold: add.threshold,\n        checks: [...current.checks, add.check],\n      };\n    }\n\n    return this.getChecks().reduce((acc, check) => {\n      const metrics = Object.entries(check.metricChecks);\n\n      metrics.forEach(([metricName, metricCheck]) => {\n        if (metricChecks.has(metricName)) {\n          const currentFoo = metricChecks.get(metricName);\n\n          metricChecks.set(metricName, update(currentFoo, metricCheck));\n        } else {\n          metricChecks.set(metricName, create(metricName, metricCheck));\n        }\n      });\n\n      return metricChecks;\n    }, metricChecks);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "checks",
                        "type": "Check[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "checks",
                        "type": "Check[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Check[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "Check[]",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getErrorChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "Array<string | >",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFirstElement",
                    "args": [],
                    "optional": false,
                    "returnType": "Check",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLastElement",
                    "args": [],
                    "optional": false,
                    "returnType": "Check",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLatency",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMetricsChecks",
                    "args": [],
                    "optional": false,
                    "returnType": "Map<string, MetricCheckAggregation>",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSummaryInformation",
                    "args": [],
                    "optional": false,
                    "returnType": "RequestsSummaryInfo",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTimestampRange",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClassLabelColorizer",
            "id": "class-ClassLabelColorizer-67ac0232ae07d90b20e6db9124306f7a",
            "file": "src/app/modules/visualization/models/Colorizer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorsGeneratorFabric, ColorsGenerator } from './ColorGenerator';\nimport { ColoringType } from './ColoringType';\n\ntype ColorizerType = 'class_label' | 'metric';\ninterface ColorizerProps {\n  name: string;\n  data: number[];\n  coloringType?: ColoringType;\n  classes?: Array<string | number>;\n  metric?: Metric;\n}\nexport abstract class Colorizer {\n  public type: string;\n  public name: string;\n  public coloringType: ColoringType;\n  public classes: any[];\n  protected colorsGenerator: ColorsGenerator;\n  protected data: number[];\n\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    this.name = props.name;\n    this.data = props.data;\n    this.coloringType = props.coloringType;\n    this.colorsGenerator = colorsGenerator;\n    this.classes = props.classes;\n  }\n  public getColors(): string[] {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\nclass ClassLabelColorizer extends Colorizer {\n  classes: Array<string | number>;\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'ClassLabel';\n    this.classes = props.classes || [];\n  }\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\nclass MetricColorizer extends Colorizer {\n  constructor(props: ColorizerProps, colorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'Metric';\n  }\n\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorizerFabric {\n  constructor(private colorGeneratorFabric: ColorsGeneratorFabric) {}\n  public createColorizer(\n    type: ColorizerType,\n    props: ColorizerProps\n  ): Colorizer | null {\n    const colorGenerator = this.colorGeneratorFabric.createColorGenerator(\n      type,\n      props\n    );\n\n    switch (type) {\n      case 'class_label':\n        return new ClassLabelColorizer(props, colorGenerator);\n      case 'metric':\n        return new MetricColorizer(props, colorGenerator);\n      default:\n        return null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "ColorizerProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorsGenerator",
                        "type": "ColorsGenerator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "ColorizerProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorsGenerator",
                        "type": "ColorsGenerator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string | number>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "coloringType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColoringType",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "colorsGenerator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorsGenerator",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getColors",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "Colorizer"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Colorizer",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ClassLabelsColorsGenerator",
            "id": "class-ClassLabelsColorsGenerator-35730f0266ccc682d0e72600baee7c0d",
            "file": "src/app/modules/visualization/models/ColorGenerator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorMapService } from '@app/core/color-map.service';\nimport { ColoringType } from './ColoringType';\n\nimport { SCATTER_PLOT_PALETTE } from './ScatterPlotPalette';\nexport class ColorsGenerator {\n  getColors(data: number[]): string[] {\n    return data.map(() => '#00498e');\n  }\n}\n\n@Injectable()\nclass GradientColorsGenerator extends ColorsGenerator {\n  private colorMapService: ColorMapService;\n  constructor() {\n    super();\n    this.colorMapService = new ColorMapService();\n  }\n  public getColors(data: number[]) {\n    return data.map(val => {\n      const [r, g, b] = this.colorMapService.getRGB({\n        val,\n        type: 'redToBlue',\n      });\n      return `rgb(${r}, ${g}, ${b})`;\n    });\n  }\n}\n\nclass ClassLabelsColorsGenerator extends ColorsGenerator {\n  private classes: Array<string | number>;\n  constructor(classes: Array<string | number>) {\n    super();\n    this.classes = classes || [];\n  }\n  getColors(data: number[]) {\n    return data.map(val => {\n      return SCATTER_PLOT_PALETTE[this.classes.indexOf(val)];\n    });\n  }\n}\n\nclass MetricColorsGenerator implements ColorsGenerator {\n  metric: Metric;\n  constructor(metric: Metric) {\n    this.metric = metric;\n  }\n  public getColors(data: number[]) {\n    const { scores, operation, threshold } = this.metric;\n    const [successColor, failedColor] = ['#418ecc', '#ff716c'];\n    return scores.map(score => {\n      switch (operation) {\n        case 'Eq':\n          return score === threshold ? successColor : failedColor;\n        case 'NotEq':\n          return score !== threshold ? successColor : failedColor;\n        case 'Greater':\n          return score > threshold ? successColor : failedColor;\n        case 'Less':\n          return score < threshold ? successColor : failedColor;\n        case 'GreaterEq':\n          return score >= threshold ? successColor : failedColor;\n        case 'LessEq':\n          return score <= threshold ? successColor : failedColor;\n        default:\n          return successColor;\n      }\n    });\n    return [];\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorsGeneratorFabric {\n  public createColorGenerator(\n    type: 'class_label' | 'metric',\n    props: {\n      coloringType?: ColoringType;\n      classes?: Array<string | number>;\n      metric?: Metric;\n    }\n  ): ColorsGenerator {\n    switch (type) {\n      case 'class_label':\n        switch (props.coloringType) {\n          case 'class':\n            return new ClassLabelsColorsGenerator(props.classes);\n          case 'gradient':\n            return new GradientColorsGenerator();\n        }\n      case 'metric':\n        return new MetricColorsGenerator(props.metric);\n      default:\n        return new ColorsGenerator();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "classes",
                        "type": "Array<string | number>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "classes",
                        "type": "Array<string | number>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string | number>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getColors",
                    "args": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "ColorsGenerator"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "ColorsGenerator",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Colorizer",
            "id": "class-Colorizer-67ac0232ae07d90b20e6db9124306f7a",
            "file": "src/app/modules/visualization/models/Colorizer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorsGeneratorFabric, ColorsGenerator } from './ColorGenerator';\nimport { ColoringType } from './ColoringType';\n\ntype ColorizerType = 'class_label' | 'metric';\ninterface ColorizerProps {\n  name: string;\n  data: number[];\n  coloringType?: ColoringType;\n  classes?: Array<string | number>;\n  metric?: Metric;\n}\nexport abstract class Colorizer {\n  public type: string;\n  public name: string;\n  public coloringType: ColoringType;\n  public classes: any[];\n  protected colorsGenerator: ColorsGenerator;\n  protected data: number[];\n\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    this.name = props.name;\n    this.data = props.data;\n    this.coloringType = props.coloringType;\n    this.colorsGenerator = colorsGenerator;\n    this.classes = props.classes;\n  }\n  public getColors(): string[] {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\nclass ClassLabelColorizer extends Colorizer {\n  classes: Array<string | number>;\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'ClassLabel';\n    this.classes = props.classes || [];\n  }\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\nclass MetricColorizer extends Colorizer {\n  constructor(props: ColorizerProps, colorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'Metric';\n  }\n\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorizerFabric {\n  constructor(private colorGeneratorFabric: ColorsGeneratorFabric) {}\n  public createColorizer(\n    type: ColorizerType,\n    props: ColorizerProps\n  ): Colorizer | null {\n    const colorGenerator = this.colorGeneratorFabric.createColorGenerator(\n      type,\n      props\n    );\n\n    switch (type) {\n      case 'class_label':\n        return new ClassLabelColorizer(props, colorGenerator);\n      case 'metric':\n        return new MetricColorizer(props, colorGenerator);\n      default:\n        return null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "ColorizerProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorsGenerator",
                        "type": "ColorsGenerator",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "ColorizerProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorsGenerator",
                        "type": "ColorsGenerator",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "coloringType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColoringType",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "colorsGenerator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorsGenerator",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getColors",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ColorsGenerator",
            "id": "class-ColorsGenerator-35730f0266ccc682d0e72600baee7c0d",
            "file": "src/app/modules/visualization/models/ColorGenerator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorMapService } from '@app/core/color-map.service';\nimport { ColoringType } from './ColoringType';\n\nimport { SCATTER_PLOT_PALETTE } from './ScatterPlotPalette';\nexport class ColorsGenerator {\n  getColors(data: number[]): string[] {\n    return data.map(() => '#00498e');\n  }\n}\n\n@Injectable()\nclass GradientColorsGenerator extends ColorsGenerator {\n  private colorMapService: ColorMapService;\n  constructor() {\n    super();\n    this.colorMapService = new ColorMapService();\n  }\n  public getColors(data: number[]) {\n    return data.map(val => {\n      const [r, g, b] = this.colorMapService.getRGB({\n        val,\n        type: 'redToBlue',\n      });\n      return `rgb(${r}, ${g}, ${b})`;\n    });\n  }\n}\n\nclass ClassLabelsColorsGenerator extends ColorsGenerator {\n  private classes: Array<string | number>;\n  constructor(classes: Array<string | number>) {\n    super();\n    this.classes = classes || [];\n  }\n  getColors(data: number[]) {\n    return data.map(val => {\n      return SCATTER_PLOT_PALETTE[this.classes.indexOf(val)];\n    });\n  }\n}\n\nclass MetricColorsGenerator implements ColorsGenerator {\n  metric: Metric;\n  constructor(metric: Metric) {\n    this.metric = metric;\n  }\n  public getColors(data: number[]) {\n    const { scores, operation, threshold } = this.metric;\n    const [successColor, failedColor] = ['#418ecc', '#ff716c'];\n    return scores.map(score => {\n      switch (operation) {\n        case 'Eq':\n          return score === threshold ? successColor : failedColor;\n        case 'NotEq':\n          return score !== threshold ? successColor : failedColor;\n        case 'Greater':\n          return score > threshold ? successColor : failedColor;\n        case 'Less':\n          return score < threshold ? successColor : failedColor;\n        case 'GreaterEq':\n          return score >= threshold ? successColor : failedColor;\n        case 'LessEq':\n          return score <= threshold ? successColor : failedColor;\n        default:\n          return successColor;\n      }\n    });\n    return [];\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorsGeneratorFabric {\n  public createColorGenerator(\n    type: 'class_label' | 'metric',\n    props: {\n      coloringType?: ColoringType;\n      classes?: Array<string | number>;\n      metric?: Metric;\n    }\n  ): ColorsGenerator {\n    switch (type) {\n      case 'class_label':\n        switch (props.coloringType) {\n          case 'class':\n            return new ClassLabelsColorsGenerator(props.classes);\n          case 'gradient':\n            return new GradientColorsGenerator();\n        }\n      case 'metric':\n        return new MetricColorsGenerator(props.metric);\n      default:\n        return new ColorsGenerator();\n    }\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getColors",
                    "args": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CommandCreator",
            "id": "class-CommandCreator-29a5ad0d0ea01c776ad528a8f3961891",
            "file": "src/app/core/command-creator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Application } from '@app/core/data/types';\n\nexport abstract class CommandCreator {\n  abstract getCommand(application: Application, input: string): string;\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getCommand",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CommonStatistics",
            "id": "class-CommonStatistics-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "distinctCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "missing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "missingPerc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "uniquePerc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CurlCommandCreator",
            "id": "class-CurlCommandCreator-bdfd806602e2b15197949c0145c41a10",
            "file": "src/app/core/curl-command-creator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Application } from '@app/core/data/types';\nimport { CommandCreator } from './command-creator';\n\nexport class CurlCommandCreator extends CommandCreator {\n  private static removeNewLineSymbolsFromString(str: string = ''): string {\n    return str === null ? '' : str.replace(/[\\r\\n]+/g, ' ');\n  }\n  readonly headers: string = `--header 'Content-Type: application/json' --header 'Accept: application/json'`;\n\n  constructor(private url: string) {\n    super();\n  }\n\n  getCommand(application: Application, input: string): string {\n    try {\n      const { name } = application;\n\n      return `curl -X POST ${\n        this.headers\n      } -d '${CurlCommandCreator.removeNewLineSymbolsFromString(input)}' '${\n        this.url\n      }gateway/application/${name}'`.trim();\n    } catch (err) {\n      return 'invalid contract';\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "headers",
                    "defaultValue": "`--header 'Content-Type: application/json' --header 'Accept: application/json'`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCommand",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommandCreator"
                    }
                },
                {
                    "name": "removeNewLineSymbolsFromString",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "CommandCreator",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeploymentConfig",
            "id": "class-DeploymentConfig-82ee2b809b51ba494df1d284718bbaa2",
            "file": "src/app/core/data/types/deployment-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface Hpa {\n  maxReplicas: number;\n  cpuUtilization: number;\n  minReplicas: number;\n}\n\nexport interface Container {\n  resources: {\n    requests: { memory: string; cpu: string };\n    limits: { memory: string; cpu: string };\n  };\n  env?: { [key: string]: string };\n}\n\nexport interface Toleration {\n  effect: string;\n  tolerationSeconds: number;\n  value?: string;\n  key: string;\n  operator: string;\n}\n\nexport interface MatchExpression {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface MatchField {\n  values?: string[];\n  key: string;\n  operator: string;\n}\n\nexport interface Pod {\n  tolerations: Array<Toleration>;\n  nodeSelector: { [key: string]: string };\n  affinity: {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        }[];\n      };\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        preference: {\n          matchExpressions: MatchExpression[];\n          matchFields: MatchField[];\n        };\n        weight: number;\n      }[];\n    };\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        labelSelector: {\n          matchExpressions: MatchExpression[];\n        };\n        topologyKey: string;\n        namespaces: string[];\n      }[];\n      preferredDuringSchedulingIgnoredDuringExecution: {\n        podAffinityTerm: {\n          labelSelector: {\n            matchLabels: { key: string };\n            matchExpressions: MatchExpression[];\n          };\n          topologyKey: string;\n          namespaces: string[];\n        };\n        weight: number;\n      }[];\n    };\n  };\n}\n\nexport class DeploymentConfig {\n  name: string;\n  hpa: Hpa;\n  deployment: { replicaCount: number };\n  container: Container;\n  pod: Pod;\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.favorite = props.favorite || false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 103,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Container",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "deployment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "favorite",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "hpa",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Hpa",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "pod",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pod",
                    "optional": false,
                    "description": "",
                    "line": 102
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DescriptiveStatistics",
            "id": "class-DescriptiveStatistics-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 55,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "kurtosis",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "mean",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "skewness",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "standardDeviation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "variance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "variationCoef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DoubleProfile",
            "id": "class-DoubleProfile-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 138,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "commonStatistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommonStatistics",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "descriptiveStatistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DescriptiveStatistics",
                    "optional": false,
                    "description": "",
                    "line": 137,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "histogram",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Histogram",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 133,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 132,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "quantileStatistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QuantileStatistics",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Profile"
            ]
        },
        {
            "name": "GrpcCommandCreator",
            "id": "class-GrpcCommandCreator-033f52859fc2018b75d023ad3728a12d",
            "file": "src/app/core/grpc-command-creator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Application } from '@app/core/data/types';\nimport { CommandCreator } from './command-creator';\n\nexport class GrpcCommandCreator extends CommandCreator {\n  constructor(private url: string) {\n    super();\n  }\n\n  getCommand(application: Application, input: string): string {\n    const { name: appName } = application;\n    console.log(this.url);\n    const { origin, host } = new URL(this.url);\n\n    return `import grpc \\n\nfrom hydrosdk import Cluster, Application \\n\ncredentials = grpc.ssl_channel_credentials() \\n\ncluster = Cluster( \\n\n    http_address=\"${origin}\", \\n\n    grpc_address=\"${host}\", \\n\n    ssl=True,\\t\\t\\t\\t# turn off, if your Hydrosphere instance doesn't have \\n\n    grpc_credentials=credentials\\t# a TLS certificate installed \\n\n) \\n\napplication = Application.find(cluster, \"${appName}\") \\n\napplication.lock_while_starting() \\n\npredictor = application.predictor() \\n\nresult = predictor.predict(${input}) \\n\n`.trim();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "url",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [
                {
                    "name": "getCommand",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommandCreator"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommandCreator",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Histogram",
            "id": "class-Histogram-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "bars",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "bins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "frequencies",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HydroUiPage",
            "id": "class-HydroUiPage-692533976e2a2f05ccfbde941a2dab7f",
            "file": "e2e/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class HydroUiPage {\n  navigateTo() {\n    return browser.get('/');\n  }\n\n  getParagraphText() {\n    return element(by.css('app-root h1')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getParagraphText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Image",
            "id": "class-Image-ac154b7ecdc8e704123fbe985ea68ff1",
            "file": "src/app/core/data/types/image.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Image {\n  public name: string;\n  public tag: string;\n  public sha256: string;\n\n  constructor(props) {\n    this.name = props.name;\n    this.tag = props.tag;\n    this.sha256 = props.sha256;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "sha256",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Line",
            "id": "class-Line-fd635300767615cabe431ad9b96509a1",
            "file": "src/app/modules/hs-d3/model/line.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Line {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  color?: string;\n\n  constructor({ x1, y1, x2, y2, color = 'black' }) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.color = color;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "x1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "x2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "y1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "y2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MappedServable",
            "id": "class-MappedServable-3325fe4326ead1c7ad85f1b244bb6931",
            "file": "src/app/core/data/types/servable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ModelVersionId } from './model-version';\nimport { Observable } from 'rxjs';\n\nexport enum Status {\n  Serving = 'Serving',\n  NotServing = 'NotServing',\n  Starting = 'Starting',\n  Undefined = 'Undefined',\n  Warning = 'Warning',\n}\n\nexport class Servable {\n  modelVersionId: ModelVersionId;\n  fullName: string;\n  name?: string;\n  status: string;\n  statusMessage?: string;\n  message?: string;\n  logStream: Observable<any>;\n  deploymentConfigurationName?: string;\n}\n\nexport class MappedServable {\n  fullName: string;\n  name?: string;\n  status: string;\n  message?: string;\n}\n",
            "properties": [
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MetricColorizer",
            "id": "class-MetricColorizer-67ac0232ae07d90b20e6db9124306f7a",
            "file": "src/app/modules/visualization/models/Colorizer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorsGeneratorFabric, ColorsGenerator } from './ColorGenerator';\nimport { ColoringType } from './ColoringType';\n\ntype ColorizerType = 'class_label' | 'metric';\ninterface ColorizerProps {\n  name: string;\n  data: number[];\n  coloringType?: ColoringType;\n  classes?: Array<string | number>;\n  metric?: Metric;\n}\nexport abstract class Colorizer {\n  public type: string;\n  public name: string;\n  public coloringType: ColoringType;\n  public classes: any[];\n  protected colorsGenerator: ColorsGenerator;\n  protected data: number[];\n\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    this.name = props.name;\n    this.data = props.data;\n    this.coloringType = props.coloringType;\n    this.colorsGenerator = colorsGenerator;\n    this.classes = props.classes;\n  }\n  public getColors(): string[] {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\nclass ClassLabelColorizer extends Colorizer {\n  classes: Array<string | number>;\n  constructor(props: ColorizerProps, colorsGenerator: ColorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'ClassLabel';\n    this.classes = props.classes || [];\n  }\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\nclass MetricColorizer extends Colorizer {\n  constructor(props: ColorizerProps, colorsGenerator) {\n    super(props, colorsGenerator);\n    this.type = 'Metric';\n  }\n\n  getColors() {\n    return this.colorsGenerator.getColors(this.data);\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorizerFabric {\n  constructor(private colorGeneratorFabric: ColorsGeneratorFabric) {}\n  public createColorizer(\n    type: ColorizerType,\n    props: ColorizerProps\n  ): Colorizer | null {\n    const colorGenerator = this.colorGeneratorFabric.createColorGenerator(\n      type,\n      props\n    );\n\n    switch (type) {\n      case 'class_label':\n        return new ClassLabelColorizer(props, colorGenerator);\n      case 'metric':\n        return new MetricColorizer(props, colorGenerator);\n      default:\n        return null;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "ColorizerProps",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorsGenerator",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "ColorizerProps",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorsGenerator",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "classes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "coloringType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColoringType",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "colorsGenerator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorsGenerator",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "Colorizer"
                    }
                }
            ],
            "methods": [
                {
                    "name": "getColors",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "Colorizer"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "Colorizer",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MetricColorsGenerator",
            "id": "class-MetricColorsGenerator-35730f0266ccc682d0e72600baee7c0d",
            "file": "src/app/modules/visualization/models/ColorGenerator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Metric } from '@app/modules/visualization/models';\nimport { ColorMapService } from '@app/core/color-map.service';\nimport { ColoringType } from './ColoringType';\n\nimport { SCATTER_PLOT_PALETTE } from './ScatterPlotPalette';\nexport class ColorsGenerator {\n  getColors(data: number[]): string[] {\n    return data.map(() => '#00498e');\n  }\n}\n\n@Injectable()\nclass GradientColorsGenerator extends ColorsGenerator {\n  private colorMapService: ColorMapService;\n  constructor() {\n    super();\n    this.colorMapService = new ColorMapService();\n  }\n  public getColors(data: number[]) {\n    return data.map(val => {\n      const [r, g, b] = this.colorMapService.getRGB({\n        val,\n        type: 'redToBlue',\n      });\n      return `rgb(${r}, ${g}, ${b})`;\n    });\n  }\n}\n\nclass ClassLabelsColorsGenerator extends ColorsGenerator {\n  private classes: Array<string | number>;\n  constructor(classes: Array<string | number>) {\n    super();\n    this.classes = classes || [];\n  }\n  getColors(data: number[]) {\n    return data.map(val => {\n      return SCATTER_PLOT_PALETTE[this.classes.indexOf(val)];\n    });\n  }\n}\n\nclass MetricColorsGenerator implements ColorsGenerator {\n  metric: Metric;\n  constructor(metric: Metric) {\n    this.metric = metric;\n  }\n  public getColors(data: number[]) {\n    const { scores, operation, threshold } = this.metric;\n    const [successColor, failedColor] = ['#418ecc', '#ff716c'];\n    return scores.map(score => {\n      switch (operation) {\n        case 'Eq':\n          return score === threshold ? successColor : failedColor;\n        case 'NotEq':\n          return score !== threshold ? successColor : failedColor;\n        case 'Greater':\n          return score > threshold ? successColor : failedColor;\n        case 'Less':\n          return score < threshold ? successColor : failedColor;\n        case 'GreaterEq':\n          return score >= threshold ? successColor : failedColor;\n        case 'LessEq':\n          return score <= threshold ? successColor : failedColor;\n        default:\n          return successColor;\n      }\n    });\n    return [];\n  }\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ColorsGeneratorFabric {\n  public createColorGenerator(\n    type: 'class_label' | 'metric',\n    props: {\n      coloringType?: ColoringType;\n      classes?: Array<string | number>;\n      metric?: Metric;\n    }\n  ): ColorsGenerator {\n    switch (type) {\n      case 'class_label':\n        switch (props.coloringType) {\n          case 'class':\n            return new ClassLabelsColorsGenerator(props.classes);\n          case 'gradient':\n            return new GradientColorsGenerator();\n        }\n      case 'metric':\n        return new MetricColorsGenerator(props.metric);\n      default:\n        return new ColorsGenerator();\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "metric",
                        "type": "Metric",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "metric",
                        "type": "Metric",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "metric",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Metric",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methods": [
                {
                    "name": "getColors",
                    "args": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "ColorsGenerator"
            ]
        },
        {
            "name": "MetricSpecification",
            "id": "class-MetricSpecification-e6301d9abd30b251952101e1a3b4ec0e",
            "file": "src/app/core/data/types/metric-specification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Servable } from '../types/servable';\n\nexport interface MetricSpecificationConfig {\n  threshold: number;\n  modelVersionId: number;\n  thresholdCmpOperator: { kind: string };\n  servable?: Servable;\n}\nexport interface MetricSpecificationRequest {\n  name: string;\n  modelVersionId: number;\n  config: MetricSpecificationConfig;\n}\n\nexport class MetricSpecification {\n  public id: string;\n  public name: string;\n  public modelVersionId: number;\n  public config: MetricSpecificationConfig;\n\n  constructor(props: any = {}) {\n    this.id = props.id;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.config = props.config;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetricSpecificationConfig",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Model",
            "id": "class-Model-82ed66ec1f2299092c7438bf4155164c",
            "file": "src/app/core/data/types/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface ModelDTO {\n  id: number;\n  name: string;\n}\n\nexport class Model {\n  id: number;\n  name: string;\n  modelVersions: string[];\n  favorite: boolean = false;\n\n  constructor(props: any = {}) {\n    this.id = props.id;\n    this.name = props.name;\n    this.modelVersions = [];\n    this.favorite = false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "favorite",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModelsHelper",
            "id": "class-ModelsHelper-3f5c82857f1441d4e588f1425b2a1aad",
            "file": "e2e/production-e2e/helpers/models.helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Page } from 'playwright';\nimport appConfig from '../app-config';\nimport { ModelsPage } from '../pageObjects/models.page';\n\nexport class ModelsHelper {\n  private readonly modelsPage: ModelsPage;\n\n  constructor(page: Page) {\n    this.modelsPage = new ModelsPage(page, appConfig.url);\n  }\n\n  async getModelsHeader() {\n    return await this.modelsPage.modelsHeader();\n  }\n\n  async getModelsHeaderTile() {\n    return await this.modelsPage.modelsHeaderTile();\n  }\n\n  async getModelsButton() {\n    return await this.modelsPage.modelsButton();\n  }\n\n  async getModelsTitle() {\n    return await this.modelsPage.modelsTitle();\n  }\n\n  async getModelsTable() {\n    return await this.modelsPage.modelsTable();\n  }\n\n  async getModelsTableHeadersLength() {\n    return await this.modelsPage.modelsTableHeadersLength();\n  }\n\n  async getModelsTableRows() {\n    return await this.modelsPage.modelsTableRows();\n  }\n\n  async clickOnModelsTableRow() {\n    await (await this.getModelsTableRows())[0].click();\n  }\n\n  async getHeader() {\n    return await this.modelsPage.header();\n  }\n\n  async getNavigation() {\n    return await this.modelsPage.navigation();\n  }\n\n  async getLogo() {\n    return await this.modelsPage.logo();\n  }\n\n  async getLinksCount() {\n    return await this.modelsPage.linksCount();\n  }\n\n  async getModelsLink() {\n    return await this.modelsPage.modelsLink();\n  }\n\n  async getModelsLinkText() {\n    let modelsLink = await this.getModelsLink();\n    return await modelsLink.evaluate(el => el.textContent);\n  }\n\n  async clickOnModelsLink() {\n    await (await this.getModelsLink()).click();\n  }\n\n  async getApplicationsLink() {\n    return await this.modelsPage.applicationsLink();\n  }\n\n  async getApplicationsLinkText() {\n    let applicationsLink = await this.getApplicationsLink();\n    return await applicationsLink.evaluate(el => el.textContent);\n  }\n\n  async clickOnApplicationsLink() {\n    await (await this.getApplicationsLink()).click();\n  }\n\n  async getDeploymentConfigsLink() {\n    return await this.modelsPage.deploymentConfigsLink();\n  }\n\n  async getDeploymentConfigsLinkText() {\n    let deploymentConfigsLink = await this.getDeploymentConfigsLink();\n    return await deploymentConfigsLink.evaluate(el => el.textContent);\n  }\n\n  async clickOnDeploymentConfigsLink() {\n    await (await this.getDeploymentConfigsLink()).click();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "page",
                        "type": "Page",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "modelsPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelsPage",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clickOnApplicationsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnDeploymentConfigsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnModelsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnModelsTableRow",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getApplicationsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getApplicationsLinkText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDeploymentConfigsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDeploymentConfigsLinkText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getLinksCount",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getLogo",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsHeaderTile",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsLinkText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsTableHeadersLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsTableRows",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelsTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getNavigation",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModelSignature",
            "id": "class-ModelSignature-6efbfd3ffab1a8c2cd122fbc03b88cc6",
            "file": "src/app/core/data/types/model-contract.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export interface Input {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface Output {\n  profile: string;\n  dtype: string;\n  name: string;\n  shape: {\n    dim: any[];\n    unknownRank: boolean;\n  };\n}\n\nexport interface ModelSignatureDTO {\n  outputs: Output[];\n  signatureName: string;\n  inputs: Input[];\n}\n\nexport class ModelSignature {\n  signatureName: string;\n  outputs: Output[];\n  inputs: Input[];\n\n  constructor(params: ModelSignatureDTO) {\n    this.signatureName = params.signatureName;\n    this.outputs = params.outputs;\n    this.inputs = params.inputs;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "params",
                        "type": "ModelSignatureDTO",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "params",
                        "type": "ModelSignatureDTO",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Input[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "outputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Output[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "signatureName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModelsPage",
            "id": "class-ModelsPage-66928369028546e19ab8082e6971efe5",
            "file": "e2e/production-e2e/pageObjects/models.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as playwright from 'playwright-core';\n\nexport class ModelsPage {\n  private readonly page: playwright.Page;\n  private readonly baseUrl: string;\n  readonly modelsHeaderSelector = '.models-page__header';\n  readonly modelsBodySelector = '.models-page__body';\n  readonly modelsHeaderTileSelector = '.models-header__model-name';\n  readonly modelsButtonSelector = 'button';\n  readonly modelsTitleSelector = '.model-versions__header';\n  readonly modelsTableSelector = '.hydro-table.model-versions__table';\n  readonly modelsTableHeaderSelector = '.hydro-table-head';\n  readonly modelsTableBodySelector = '.hydro-table-body';\n  readonly modelsTableHeadersSelector = '.hydro-table-head__cell';\n  readonly modelsTableRowsSelector = 'hs-model-versions-row';\n\n  readonly headerSelector = 'hs-header header';\n  readonly navigationSelector = '.header-nav';\n  readonly logoSelector = '.header__logo';\n  readonly linksSelector = 'a';\n  readonly modelsLinkSelector = 'a:first-of-type';\n  readonly applicationsLinkSelector = 'a:nth-of-type(2)';\n  readonly deploymentConfigsLinkSelector = 'a:last-of-type';\n\n  constructor(page: playwright.Page, unifiedConsoleUrl: string) {\n    this.page = page;\n    this.baseUrl = unifiedConsoleUrl + '/models/census';\n  }\n\n  async modelsHeader() {\n    return await this.page.waitForSelector(this.modelsHeaderSelector);\n  }\n\n  async modelsBody() {\n    return await this.page.$(this.modelsBodySelector);\n  }\n\n  async modelsHeaderTile() {\n    let header = await this.modelsHeader();\n    return await header.$(this.modelsHeaderTileSelector);\n  }\n\n  async modelsButton() {\n    let header = await this.modelsHeader();\n    return await header.$(this.modelsButtonSelector);\n  }\n\n  async modelsTitle() {\n    return await this.page.waitForSelector(this.modelsTitleSelector);\n  }\n\n  async modelsTable() {\n    return await this.page.$(this.modelsTableSelector);\n  }\n\n  async modelsTableHeader() {\n    let table = await this.modelsTable();\n    return await table.$(this.modelsTableHeaderSelector);\n  }\n\n  async modelsTableBody() {\n    let table = await this.modelsTable();\n    return await table.$(this.modelsTableBodySelector);\n  }\n\n  async modelsTableHeaders() {\n    let tableHeader = await this.modelsTableHeader();\n    return await tableHeader.$$(this.modelsTableHeadersSelector);\n  }\n\n  async modelsTableHeadersLength() {\n    let tableHeaders = await this.modelsTableHeaders();\n    return tableHeaders.length;\n  }\n\n  async modelsTableRows() {\n    let tableBody = await this.modelsTableBody();\n    return await tableBody.$$(this.modelsTableRowsSelector);\n  }\n\n  async header() {\n    return await this.page.$(this.headerSelector);\n  }\n\n  async navigation() {\n    let header = await this.header();\n    return await header.$(this.navigationSelector);\n  }\n\n  async logo() {\n    let header = await this.header();\n    return await header.$(this.logoSelector);\n  }\n\n  async links() {\n    let navigation = await this.navigation();\n    return await navigation.$$(this.linksSelector);\n  }\n\n  async linksCount() {\n    let links = await this.links();\n    return links.length;\n  }\n\n  async modelsLink() {\n    let navigation = await this.navigation();\n    return await navigation.$(this.modelsLinkSelector);\n  }\n\n  async applicationsLink() {\n    let navigation = await this.navigation();\n    return await navigation.$(this.applicationsLinkSelector);\n  }\n\n  async deploymentConfigsLink() {\n    let navigation = await this.navigation();\n    return await navigation.$(this.deploymentConfigsLinkSelector);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "page",
                        "type": "playwright.Page",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "unifiedConsoleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "playwright.Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "unifiedConsoleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "applicationsLinkSelector",
                    "defaultValue": "'a:nth-of-type(2)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "deploymentConfigsLinkSelector",
                    "defaultValue": "'a:last-of-type'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "headerSelector",
                    "defaultValue": "'hs-header header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "linksSelector",
                    "defaultValue": "'a'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "logoSelector",
                    "defaultValue": "'.header__logo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsBodySelector",
                    "defaultValue": "'.models-page__body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsButtonSelector",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsHeaderSelector",
                    "defaultValue": "'.models-page__header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsHeaderTileSelector",
                    "defaultValue": "'.models-header__model-name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsLinkSelector",
                    "defaultValue": "'a:first-of-type'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsTableBodySelector",
                    "defaultValue": "'.hydro-table-body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsTableHeaderSelector",
                    "defaultValue": "'.hydro-table-head'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsTableHeadersSelector",
                    "defaultValue": "'.hydro-table-head__cell'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsTableRowsSelector",
                    "defaultValue": "'hs-model-versions-row'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsTableSelector",
                    "defaultValue": "'.hydro-table.model-versions__table'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelsTitleSelector",
                    "defaultValue": "'.model-versions__header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "navigationSelector",
                    "defaultValue": "'.header-nav'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "playwright.Page",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applicationsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "deploymentConfigsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "header",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "links",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "linksCount",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "logo",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsBody",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsHeaderTile",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsLink",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTableBody",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTableHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTableHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTableHeadersLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTableRows",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelsTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "navigation",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModelVersion",
            "id": "class-ModelVersion-6951aeb1cae1ecc130e509bfbb6b9a1a",
            "file": "src/app/core/data/types/model-version.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ModelSignature, Input, Output } from './model-contract';\nimport { Image } from './image';\nimport { Runtime } from './runtime';\nimport { ModelDTO } from './model';\nimport * as _ from 'lodash';\n\nexport interface ModelVersionDTO {\n  id: number;\n  created: string;\n  finished: string;\n  modelVersion: number;\n  modelSignature: ModelSignature;\n  model: ModelDTO;\n  status: ModelVersionStatus;\n  metadata: ModelVersionMetadata;\n  applications: string[];\n  image: { sha256: string; name: string; tag: string };\n  runtime: { sha256: string; name: string; tag: string };\n  isExternal: boolean;\n}\n\nexport enum ModelVersionStatus {\n  Assembling = 'assembling',\n  Released = 'released',\n  Failed = 'failed',\n  Undefined = 'undefined',\n}\n\nexport type ModelVersionMetadata = { is_metric?: boolean } & {\n  [key: string]: string;\n};\n\nexport type ModelVersionId = number;\n\nexport class ModelVersion {\n  public id: ModelVersionId;\n  public image: Image;\n  public created: string;\n  public finished: string;\n  public modelVersion: number;\n  public modelSignature: ModelSignature;\n  public runtime: Runtime;\n  public model: ModelDTO;\n  public status: ModelVersionStatus;\n  public applications: string[];\n  public metadata: ModelVersionMetadata;\n  public isExternal: boolean;\n\n  constructor(props: Partial<ModelVersion>) {\n    this.id = props.id;\n    this.image = props.image;\n    this.created = props.created;\n    this.finished = props.finished;\n    this.modelVersion = props.modelVersion;\n    this.modelSignature = props.modelSignature;\n    this.runtime = props.runtime;\n    this.model = props.model;\n    this.status = props.status;\n    this.applications = props.applications;\n    this.metadata = props.metadata;\n    this.isExternal = props.isExternal;\n  }\n\n  get contractInputs(): Input[] {\n    return this.modelSignature.inputs;\n  }\n\n  get contractOutputs(): Output[] {\n    return this.modelSignature.outputs;\n  }\n\n  isReleasedAndInternal(): boolean {\n    return this.status === ModelVersionStatus.Released && !this.isExternal;\n  }\n\n  nameWithId(): string {\n    return `${this.model.name}: ${this.modelVersion}`;\n  }\n\n  addApplication(applicationName: string): ModelVersion {\n    const newApp = _.cloneDeep<ModelVersion>(this);\n    newApp.applications = [...newApp.applications, ...applicationName];\n\n    return newApp;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "Partial<ModelVersion>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "Partial<ModelVersion>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "applications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "created",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "finished",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionId",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionMetadata",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelDTO",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelSignature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelSignature",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "runtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Runtime",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionStatus",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addApplication",
                    "args": [
                        {
                            "name": "applicationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModelVersion",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "applicationName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isReleasedAndInternal",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nameWithId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "contractInputs": {
                    "name": "contractInputs",
                    "getSignature": {
                        "name": "contractInputs",
                        "type": "[]",
                        "returnType": "Input[]",
                        "line": 64
                    }
                },
                "contractOutputs": {
                    "name": "contractOutputs",
                    "getSignature": {
                        "name": "contractOutputs",
                        "type": "[]",
                        "returnType": "Output[]",
                        "line": 68
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModelVersionHelper",
            "id": "class-ModelVersionHelper-0304df44fad385e995b4c9a428f46159",
            "file": "e2e/production-e2e/helpers/modelVersion.helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Page } from 'playwright';\nimport appConfig from '../app-config';\nimport { ModelVersionPage } from '../pageObjects/modelVersion.page';\n\nexport class ModelVersionHelper {\n  private readonly modelVersionPage: ModelVersionPage;\n\n  constructor(page: Page) {\n    this.modelVersionPage = new ModelVersionPage(page, appConfig.url);\n  }\n\n  async getModelVersionPage() {\n    return await this.modelVersionPage.modelVersion();\n  }\n\n  async getModelVersionHeaders() {\n    return await this.modelVersionPage.modelVersionHeaders();\n  }\n\n  async getModelVersionRowsLength() {\n    return await this.modelVersionPage.modelVersionRowsLength();\n  }\n\n  async getDetails() {\n    return await this.modelVersionPage.details();\n  }\n\n  async getDetailsList() {\n    return await this.modelVersionPage.detailsList();\n  }\n\n  async getDetailsStatus() {\n    return await this.modelVersionPage.detailsStatus();\n  }\n\n  async getLogContent() {\n    return await this.modelVersionPage.logContent();\n  }\n\n  async getDetailsHeader() {\n    return await this.modelVersionPage.detailsHeader();\n  }\n\n  async getDetailsHeaderText() {\n    let detailsHeader = await this.getDetailsHeader();\n    return await detailsHeader.evaluate(el => el.textContent);\n  }\n\n  async getDetailsListItemsLength() {\n    return await this.modelVersionPage.detailsListItemsLength();\n  }\n\n  async getBuildLogsButton() {\n    return await this.modelVersionPage.buildLogsButton();\n  }\n\n  async clickOnBuildLogsButton() {\n    await (await this.getBuildLogsButton()).click();\n  }\n\n  async getLogBody() {\n    return await this.modelVersionPage.logBody();\n  }\n\n  async getCloseLogsButton() {\n    return await this.modelVersionPage.closeLogsButton();\n  }\n\n  async clickOnCloseLogsButton() {\n    await (await this.getCloseLogsButton()).click();\n  }\n\n  async getServices() {\n    return await this.modelVersionPage.services();\n  }\n\n  async getServicesTitle() {\n    return await this.modelVersionPage.servicesTitle();\n  }\n\n  async getServicesTitleText() {\n    let servicesTitle = await this.getServicesTitle();\n    return await servicesTitle.evaluate(el => el.textContent);\n  }\n\n  async getServicesListItemsLength() {\n    return await this.modelVersionPage.servicesListItemsLength();\n  }\n\n  async getHeader() {\n    return await this.modelVersionPage.header();\n  }\n\n  async getHeaderText() {\n    let header = await this.getHeader();\n    return await header.evaluate(el => el.textContent.trim());\n  }\n\n  async getButton() {\n    return await this.modelVersionPage.button();\n  }\n\n  async getTable() {\n    return await this.modelVersionPage.table();\n  }\n\n  async getServablesHeader() {\n    return await this.modelVersionPage.servablesHeader();\n  }\n\n  async getServablesHeaderText() {\n    let servablesHeader = await this.getServablesHeader();\n    return await servablesHeader.evaluate(el => el.textContent);\n  }\n\n  async getShowLogsButton() {\n    return await this.modelVersionPage.showLogsButton();\n  }\n\n  async clickOnShowLogsButton() {\n    await (await this.getShowLogsButton()).click();\n  }\n\n  async getDeleteButton() {\n    return await this.modelVersionPage.deleteButton();\n  }\n\n  async clickOnDeleteButton() {\n    await (await this.getDeleteButton()).click();\n  }\n\n  async getDeleteDialogContent() {\n    return await this.modelVersionPage.deleteDialogContent();\n  }\n\n  async getSignatures() {\n    return await this.modelVersionPage.signatures();\n  }\n\n  async getSignaturesTable() {\n    return await this.modelVersionPage.signaturesTable();\n  }\n\n  async getSignaturesHeader() {\n    return await this.modelVersionPage.signaturesHeader();\n  }\n\n  async getSignaturesHeaderText() {\n    let signaturesHeader = await this.getSignaturesHeader();\n    return await signaturesHeader.evaluate(el => el.textContent);\n  }\n\n  async getMetadata() {\n    return await this.modelVersionPage.metadata();\n  }\n\n  async getMetadataTable() {\n    return await this.modelVersionPage.metadataTable();\n  }\n\n  async getMetadataHeader() {\n    return await this.modelVersionPage.metadataHeader();\n  }\n\n  async getMetadataHeaderText() {\n    let metadataHeader = await this.getMetadataHeader();\n    return await metadataHeader.evaluate(el => el.textContent);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "page",
                        "type": "Page",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "modelVersionPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionPage",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120,
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clickOnBuildLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnCloseLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnDeleteButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "clickOnShowLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getBuildLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getCloseLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDeleteButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDeleteDialogContent",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDetailsHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDetailsHeaderText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDetailsList",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDetailsListItemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getDetailsStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getHeaderText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getLogBody",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getLogContent",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getMetadataHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getMetadataHeaderText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getMetadataTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelVersionHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelVersionPage",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getModelVersionRowsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getServablesHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getServablesHeaderText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getServices",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getServicesListItemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getServicesTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getServicesTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getShowLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSignatures",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSignaturesHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSignaturesHeaderText",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getSignaturesTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "getTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ModelVersionPage",
            "id": "class-ModelVersionPage-0595438588a2dc2737bb81badf579537",
            "file": "e2e/production-e2e/pageObjects/modelVersion.page.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as playwright from 'playwright-core';\n\nexport class ModelVersionPage {\n  private readonly page: playwright.Page;\n  private readonly baseUrl: string;\n  readonly modelVersionSelector = '.model-version';\n  readonly modelVersionRowsSelector = '.model-version__row';\n  readonly columnSelector = '.model-version__col-6';\n  readonly columnsSelector = '.model-version__col-12';\n  readonly modelVersionHeaderSelector = '.model-version__item-header';\n  readonly detailsHeaderSelector = '.model-version__item-header';\n  readonly detailsListSelector = '.model-version__details-list';\n  readonly detailsListItemsSelector = 'li';\n  readonly detailsStatusSelector = '.model-version__details-status';\n  readonly buildLogsButtonSelector = '.model-version__details-status-button';\n  readonly logContentSelector = '.log__content';\n  readonly logBodySelector = '.log__body';\n  readonly closeLogsButtonSelector = '.log__close-icon';\n  readonly servicesTitleSelector = '.mv-services__title';\n  readonly servicesListSelector = '.mv-services__list';\n  readonly servicesListItemsSelector = '.mv-service';\n  readonly headerSelector = '.model-version__item-header span';\n  readonly buttonSelector = '.model-version__item-header button';\n  readonly tableSelector = '.hydro-table';\n  readonly servablesHeaderSelector = '.model-version__item-header';\n  readonly servablesTableSelector = '.hydro-table.servables-table';\n  readonly servablesButtonsSelector = '.servables-table__row-buttons';\n  readonly showLogsButtonSelector = '.hs-button--base-primary';\n  readonly deleteButtonSelector = '.hs-button--base-warning';\n  readonly deleteDialogSelector = '.dialog__container';\n  readonly deleteDialogContentSelector = '.dialog__content';\n  readonly signaturesSelector = '.model-version__col-12';\n  readonly signaturesHeaderSelector = '.model-version__item-header';\n  readonly signaturesTableSelector = '.signature';\n  readonly metadataSelector = '.model-version__col-12';\n  readonly metadataHeaderSelector = '.model-version__item-header';\n  readonly metadataTableSelector = '.metadata';\n  readonly mvcolumnSelector = '.flex-col';\n\n  constructor(page: playwright.Page, unifiedConsoleUrl: string) {\n    this.page = page;\n    this.baseUrl = unifiedConsoleUrl + '/models/census/1';\n  }\n\n  async modelVersion() {\n    return await this.page.waitForSelector(this.modelVersionSelector);\n  }\n\n  async column() {\n    let modelVersion = await this.modelVersion();\n    return await modelVersion.$(this.mvcolumnSelector);\n  }\n\n  async modelVersionRows() {\n    let column = await this.column();\n    return await column.$$(this.modelVersionRowsSelector);\n  }\n\n  async modelVersionRowsLength() {\n    let modelVersionRows = await this.modelVersionRows();\n    return modelVersionRows.length;\n  }\n\n  async columnsFirst() {\n    let columns = await this.modelVersionRows();\n    return await columns[0].$$(this.columnSelector);\n  }\n\n  async columnsSecond() {\n    let columns = await this.modelVersionRows();\n    return await columns[1].$$(this.columnSelector);\n  }\n\n  async modelVersionHeaders() {\n    let modelVersion = await this.modelVersion();\n    return await modelVersion.$$(this.modelVersionHeaderSelector);\n  }\n\n  async details() {\n    let columnsFirst = await this.columnsFirst();\n    return columnsFirst[0];\n  }\n\n  async detailsList() {\n    let details = await this.details();\n    return await details.$(this.detailsListSelector);\n  }\n\n  async detailsListItems() {\n    let detailsList = await this.detailsList();\n    return await detailsList.$$(this.detailsListItemsSelector);\n  }\n\n  async detailsListItemsLength() {\n    let detailsListItems = await this.detailsListItems();\n    return detailsListItems.length;\n  }\n\n  async detailsStatus() {\n    let details = await this.details();\n    return await details.$(this.detailsStatusSelector);\n  }\n\n  async detailsHeader() {\n    let modelVersionHeaders = await this.modelVersionHeaders();\n    return modelVersionHeaders[0];\n  }\n\n  async logContent() {\n    return await this.page.$(this.logContentSelector);\n  }\n\n  async buildLogsButton() {\n    let detailsStatus = await this.detailsStatus();\n    return await detailsStatus.$(this.buildLogsButtonSelector);\n  }\n\n  async logBody() {\n    let logContent = await this.logContent();\n    return await logContent.$(this.logBodySelector);\n  }\n\n  async closeLogsButton() {\n    let logContent = await this.logContent();\n    return await logContent.$(this.closeLogsButtonSelector);\n  }\n\n  async services() {\n    let columnsFirst = await this.columnsFirst();\n    return columnsFirst[1];\n  }\n\n  async servicesTitle() {\n    let modelVersion = await this.modelVersion();\n    return await modelVersion.$(this.servicesTitleSelector);\n  }\n\n  async servicesList() {\n    return await this.page.waitForSelector(this.servicesListSelector);\n  }\n\n  async servicesListItems() {\n    let servicesList = await this.servicesList();\n    return await servicesList.$$(this.servicesListItemsSelector);\n  }\n\n  async servicesListItemsLength() {\n    let servicesListItems = await this.servicesListItems();\n    return servicesListItems.length;\n  }\n\n  async applications() {\n    let columnsSecond = await this.columnsSecond();\n    return columnsSecond[0];\n  }\n\n  async header() {\n    let applications = await this.applications();\n    return await applications.$(this.headerSelector);\n  }\n\n  async button() {\n    let applications = await this.applications();\n    return await applications.$(this.buttonSelector);\n  }\n\n  async table() {\n    let applications = await this.applications();\n    return await applications.$(this.tableSelector);\n  }\n\n  async servables() {\n    let columnsSecond = await this.columnsSecond();\n    return columnsSecond[1];\n  }\n\n  async servablesHeader() {\n    let modelVersionHeaders = await this.modelVersionHeaders();\n    return modelVersionHeaders[2];\n  }\n\n  async servablesTable() {\n    let servables = await this.servables();\n    return await servables.$(this.servablesTableSelector);\n  }\n\n  async servablesButtons() {\n    let servablesTable = await this.servablesTable();\n    return await servablesTable.$(this.servablesButtonsSelector);\n  }\n\n  async showLogsButton() {\n    let buttons = await this.servablesButtons();\n    return await buttons.$(this.showLogsButtonSelector);\n  }\n\n  async deleteButton() {\n    let buttons = await this.servablesButtons();\n    return await buttons.$(this.deleteButtonSelector);\n  }\n\n  async deleteDialog() {\n    return await this.page.$(this.deleteDialogSelector);\n  }\n\n  async deleteDialogContent() {\n    let deleteDialog = await this.deleteDialog();\n    return await deleteDialog.$(this.deleteDialogContentSelector);\n  }\n\n  async signatures() {\n    let modelVersionRows = await this.modelVersionRows();\n    return await modelVersionRows[2].$(this.columnsSelector);\n  }\n\n  async signaturesHeader() {\n    let modelVersionHeaders = await this.modelVersionHeaders();\n    return modelVersionHeaders[3];\n  }\n\n  async signaturesTable() {\n    let signatures = await this.signatures();\n    return await signatures.$(this.signaturesTableSelector);\n  }\n\n  async metadata() {\n    let modelVersionRows = await this.modelVersionRows();\n    return await modelVersionRows[3].$(this.columnsSelector);\n  }\n\n  async metadataHeader() {\n    let metadata = await this.metadata();\n    return await metadata.$(this.metadataHeaderSelector);\n  }\n\n  async metadataTable() {\n    let metadata = await this.metadata();\n    return await metadata.$(this.metadataTableSelector);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "page",
                        "type": "playwright.Page",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "unifiedConsoleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "page",
                        "type": "playwright.Page",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "unifiedConsoleUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "buildLogsButtonSelector",
                    "defaultValue": "'.model-version__details-status-button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "buttonSelector",
                    "defaultValue": "'.model-version__item-header button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "closeLogsButtonSelector",
                    "defaultValue": "'.log__close-icon'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "columnSelector",
                    "defaultValue": "'.model-version__col-6'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "columnsSelector",
                    "defaultValue": "'.model-version__col-12'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "deleteButtonSelector",
                    "defaultValue": "'.hs-button--base-warning'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "deleteDialogContentSelector",
                    "defaultValue": "'.dialog__content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "deleteDialogSelector",
                    "defaultValue": "'.dialog__container'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "detailsHeaderSelector",
                    "defaultValue": "'.model-version__item-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "detailsListItemsSelector",
                    "defaultValue": "'li'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "detailsListSelector",
                    "defaultValue": "'.model-version__details-list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "detailsStatusSelector",
                    "defaultValue": "'.model-version__details-status'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "headerSelector",
                    "defaultValue": "'.model-version__item-header span'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "logBodySelector",
                    "defaultValue": "'.log__body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "logContentSelector",
                    "defaultValue": "'.log__content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "metadataHeaderSelector",
                    "defaultValue": "'.model-version__item-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "metadataSelector",
                    "defaultValue": "'.model-version__col-12'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "metadataTableSelector",
                    "defaultValue": "'.metadata'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelVersionHeaderSelector",
                    "defaultValue": "'.model-version__item-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelVersionRowsSelector",
                    "defaultValue": "'.model-version__row'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "modelVersionSelector",
                    "defaultValue": "'.model-version'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "mvcolumnSelector",
                    "defaultValue": "'.flex-col'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "playwright.Page",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "servablesButtonsSelector",
                    "defaultValue": "'.servables-table__row-buttons'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "servablesHeaderSelector",
                    "defaultValue": "'.model-version__item-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "servablesTableSelector",
                    "defaultValue": "'.hydro-table.servables-table'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "servicesListItemsSelector",
                    "defaultValue": "'.mv-service'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "servicesListSelector",
                    "defaultValue": "'.mv-services__list'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "servicesTitleSelector",
                    "defaultValue": "'.mv-services__title'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "showLogsButtonSelector",
                    "defaultValue": "'.hs-button--base-primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "signaturesHeaderSelector",
                    "defaultValue": "'.model-version__item-header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "signaturesSelector",
                    "defaultValue": "'.model-version__col-12'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "signaturesTableSelector",
                    "defaultValue": "'.signature'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "tableSelector",
                    "defaultValue": "'.hydro-table'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applications",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "buildLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "button",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "closeLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "column",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "columnsFirst",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "columnsSecond",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "deleteButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "deleteDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "deleteDialogContent",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "details",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "detailsHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "detailsList",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "detailsListItems",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "detailsListItemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "detailsStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "header",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "logBody",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "logContent",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "metadata",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "metadataHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "metadataTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelVersionHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelVersionRows",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "modelVersionRowsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servables",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servablesButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servablesHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servablesTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "services",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servicesList",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servicesListItems",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servicesListItemsLength",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "servicesTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "showLogsButton",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "signatures",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "signaturesHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "signaturesTable",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                },
                {
                    "name": "table",
                    "args": [],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Profiles",
            "id": "class-Profiles-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 156,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "productionProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Profile | null",
                    "optional": false,
                    "description": "",
                    "line": 156,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "trainingProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Profile | null",
                    "optional": false,
                    "description": "",
                    "line": 155,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "QuantileStatistics",
            "id": "class-QuantileStatistics-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "interquartileRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "median",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "percentile5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "percentile95",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "q1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "q3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "range",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Runtime",
            "id": "class-Runtime-663e4f88c5711f858ff9f50667caba1c",
            "file": "src/app/core/data/types/runtime.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Runtime {\n  public name: string;\n  public tag: string;\n  public sha256: string;\n\n  constructor(props: any = {}) {\n    this.name = props.id;\n    this.tag = props.name;\n    this.sha256 = props.sha256;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "sha256",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tag",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Servable",
            "id": "class-Servable-3325fe4326ead1c7ad85f1b244bb6931",
            "file": "src/app/core/data/types/servable.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ModelVersionId } from './model-version';\nimport { Observable } from 'rxjs';\n\nexport enum Status {\n  Serving = 'Serving',\n  NotServing = 'NotServing',\n  Starting = 'Starting',\n  Undefined = 'Undefined',\n  Warning = 'Warning',\n}\n\nexport class Servable {\n  modelVersionId: ModelVersionId;\n  fullName: string;\n  name?: string;\n  status: string;\n  statusMessage?: string;\n  message?: string;\n  logStream: Observable<any>;\n  deploymentConfigurationName?: string;\n}\n\nexport class MappedServable {\n  fullName: string;\n  name?: string;\n  status: string;\n  message?: string;\n}\n",
            "properties": [
                {
                    "name": "deploymentConfigurationName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "logStream",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionId",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "statusMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Signature",
            "id": "class-Signature-4977b5e0b98eeabac5fcd31cff22989c",
            "file": "src/app/core/data/types/signature.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "interface Dim {\n  size: number;\n  name: string;\n}\n\nexport interface Shape {\n  dims: Dim[];\n  unknownRank?: boolean;\n}\nexport interface Field {\n  profile: string;\n  dtype?: string;\n  name?: string;\n  shape?: Shape;\n  subfields?: Field[];\n}\n\nexport class Signature {\n  public signatureName: string;\n  public inputs: Field[];\n  public outputs: Field[];\n\n  constructor(props: any = {}) {\n    this.signatureName = props.signatureName;\n    this.inputs = props.inputs;\n    this.outputs = props.outputs;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "inputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "outputs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Field[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "signatureName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TextProfile",
            "id": "class-TextProfile-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 118,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "commonStatistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommonStatistics",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "textStatistics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TextStatistics",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Profile"
            ]
        },
        {
            "name": "TextStatistics",
            "id": "class-TextStatistics-ac0ffdb7e3854b54c5aecd7de6695c14",
            "file": "src/app/core/data/types/profiles.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "class CommonStatistics {\n  public count: number;\n  public distinctCount: number;\n  public missing: number;\n\n  public uniquePerc: number;\n  public missingPerc: number;\n\n  constructor(props: any = {}) {\n    this.count = props.count;\n    this.distinctCount = props.distinctCount;\n    this.missing = props.missing;\n\n    this.uniquePerc = Math.min(\n      Math.floor((this.distinctCount / (this.count - this.missing)) * 100),\n      100,\n    );\n    this.missingPerc = Math.min(\n      Math.floor((this.missing / this.count) * 100),\n      100,\n    );\n  }\n}\n\nclass QuantileStatistics {\n  public min: number;\n  public max: number;\n  public median: number;\n  public percentile5: number;\n  public percentile95: number;\n  public q1: number;\n  public q3: number;\n  public range: number;\n  public interquartileRange: number;\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.median = props.median;\n    this.percentile5 = props.percentile5;\n    this.percentile95 = props.percentile95;\n    this.q1 = props.q1;\n    this.q3 = props.q3;\n    this.range = props.range;\n    this.interquartileRange = props.interquartileRange;\n  }\n}\n\nclass DescriptiveStatistics {\n  public standardDeviation: number;\n  public variationCoef: number;\n  public kurtosis: number;\n  public mean: number;\n  public skewness: number;\n  public variance: number;\n\n  constructor(props: any = {}) {\n    this.standardDeviation = props.standardDeviation;\n    this.variationCoef = props.variationCoef;\n    this.kurtosis = props.kurtosis;\n    this.mean = props.mean;\n    this.skewness = props.skewness === null ? 0 : props.skewness;\n    this.variance = props.variance;\n  }\n}\n\nclass Histogram {\n  public min: number;\n  public max: number;\n  public step: number;\n  public bars: number;\n  public frequencies: number[];\n  public bins: number[];\n\n  constructor(props: any = {}) {\n    this.min = props.min;\n    this.max = props.max;\n    this.step = props.step;\n    this.bars = props.bars;\n    this.frequencies = props.frequencies;\n    this.bins = props.bins;\n  }\n}\n\nclass TextStatistics {\n  public meanCharacterLength: number;\n  public meanDepTreeDepth: number;\n  public meanLanguageProba: object;\n  public meanPOSProba: object;\n  public meanSentimentScore: object;\n  public meanTokenLength: number;\n  public meanUniqueLemmaRatio: number;\n\n  constructor(props: any = {}) {\n    this.meanCharacterLength = props.meanCharacterLength;\n    this.meanDepTreeDepth = props.meanDepTreeDepth;\n    this.meanLanguageProba = props.meanLanguageProba;\n    this.meanPOSProba = props.meanPOSProba;\n    this.meanSentimentScore = props.meanSentimentScore;\n    this.meanTokenLength = props.meanTokenLength;\n    this.meanUniqueLemmaRatio = props.meanUniqueLemmaRatio;\n  }\n}\n\nexport interface Profile {\n  kind: string;\n  name: string;\n  modelVersionId: number;\n  timestamp: number;\n}\n\nexport class TextProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public textStatistics: TextStatistics;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.textStatistics = new TextStatistics(props.textStatistics);\n  }\n}\n\nexport class DoubleProfile implements Profile {\n  public kind: string;\n  public name: string;\n  public modelVersionId: number;\n  public timestamp: number;\n  public commonStatistics: CommonStatistics;\n  public quantileStatistics: QuantileStatistics;\n  public descriptiveStatistics: DescriptiveStatistics;\n  public histogram: Histogram;\n\n  constructor(props: any = {}) {\n    this.kind = props.kind;\n    this.name = props.name;\n    this.modelVersionId = props.modelVersionId;\n    this.timestamp = props.timestamp;\n    this.commonStatistics = new CommonStatistics(props.commonStatistics);\n    this.quantileStatistics = new QuantileStatistics(props.quantileStatistics);\n    this.descriptiveStatistics = new DescriptiveStatistics(\n      props.descriptiveStatistics,\n    );\n    this.histogram = new Histogram(props.histogram);\n  }\n}\n\nexport class Profiles {\n  public trainingProfile: Profile | null;\n  public productionProfile: Profile | null;\n\n  constructor(props: any = {}) {\n    this.trainingProfile = null;\n    if (props.training) {\n      if (props.training['NumericalProfile']) {\n        this.trainingProfile = new DoubleProfile(\n          props.training['NumericalProfile'],\n        );\n        this.trainingProfile.kind = 'NumericalProfile';\n      } else if (props.training['TextProfile']) {\n        this.trainingProfile = new TextProfile(props.training['TextProfile']);\n        this.trainingProfile.kind = 'TextProfile';\n      }\n    }\n    this.productionProfile = null;\n    if (props.production) {\n      if (props.production['NumericalProfile']) {\n        this.productionProfile = new DoubleProfile(\n          props.production['NumericalProfile'],\n        );\n        this.productionProfile.kind = 'NumericalProfile';\n      } else if (props.production['TextProfile']) {\n        this.productionProfile = new TextProfile(\n          props.production['TextProfile'],\n        );\n        this.productionProfile.kind = 'TextProfile';\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "props",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "meanCharacterLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "meanDepTreeDepth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "meanLanguageProba",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "meanPOSProba",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "meanSentimentScore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "meanTokenLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "meanUniqueLemmaRatio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UnknownCommandCreator",
            "id": "class-UnknownCommandCreator-e653f4a80ff2b290ae1de26b8fc0fb14",
            "file": "src/app/core/command-creator-factory.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable, Inject } from '@angular/core';\nimport { CurlCommandCreator } from './curl-command-creator';\nimport { GrpcCommandCreator } from './grpc-command-creator';\nimport { CommandCreator } from './command-creator';\nimport { HS_ABSOLUTE_URL } from '@app/core/base-url.token';\n\nexport class UnknownCommandCreator extends CommandCreator {\n  getCommand = () => '';\n}\n\n@Injectable()\nexport class CommandCreatorFactory {\n  constructor(@Inject(HS_ABSOLUTE_URL) private url: string) {}\n\n  create(type): CommandCreator {\n    switch (type) {\n      case 'grpc':\n        return new GrpcCommandCreator(this.url);\n      case 'curl':\n        return new CurlCommandCreator(this.url);\n      default:\n        return new UnknownCommandCreator();\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "getCommand",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "getCommand",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "input",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "CommandCreator"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "CommandCreator",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AutofocusedDirective",
            "id": "directive-AutofocusedDirective-8a86c3a4033bae69db0cea6a3f1ab4cf",
            "file": "src/app/shared/directives/autofocused.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, OnInit, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[hsAutofocused]',\n})\nexport class AutofocusedDirective implements OnInit {\n  constructor(private elRef: ElementRef) {}\n\n  ngOnInit(): void {\n    setTimeout(() => this.elRef.nativeElement.focus(), 100);\n  }\n}\n",
            "selector": "[hsAutofocused]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "BuildInformationDirective",
            "id": "directive-BuildInformationDirective-82864f17578e80c10cf094db96ab1cb3",
            "file": "src/app/shared/directives/build-information.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostListener } from '@angular/core';\nimport { BuildInformationDialogComponent } from '@app/modules/dialogs/components';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\n@Directive({\n  selector: '[hsBuildInformation]',\n})\nexport class BuildInformationDirective {\n  constructor(private dialog: DialogsService) {}\n\n  @HostListener('click')\n  onclick() {\n    this.dialog.createDialog({\n      component: BuildInformationDialogComponent,\n      styles: {\n        width: '1000px',\n      },\n    });\n  }\n}\n",
            "selector": "[hsBuildInformation]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onclick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ColorByDriftDirective",
            "id": "directive-ColorByDriftDirective-72e5d1f2e25d7b357a45bb11b232e9b1",
            "file": "src/app/modules/stat/directives/color-by-drift.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit } from '@angular/core';\nimport { ColorPaletteService } from '@app/core/color-palette.service';\n\n@Directive({\n  selector: '[hsColorByDrift]',\n})\nexport class ColorByDriftDirective implements OnInit {\n  @Input() drift: number;\n\n  constructor(\n    private readonly el: ElementRef,\n    private readonly colorPalette: ColorPaletteService\n  ) {}\n\n  ngOnInit(): void {\n    if (this.drift === 0 || this.drift <= 0.35) {\n      this.el.nativeElement.style.color = this.colorPalette.successColor();\n    } else if (this.drift > 0.35 && this.drift <= 0.76) {\n      this.el.nativeElement.style.color = this.colorPalette.alertColor();\n    } else {\n      this.el.nativeElement.style.color = this.colorPalette.warningColor();\n    }\n  }\n}\n",
            "selector": "[hsColorByDrift]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "drift",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CopyToBufferDirective",
            "id": "directive-CopyToBufferDirective-ca840b7ecc19ea4d1d0e5fbfe65f81ae",
            "file": "src/app/shared/directives/copy-to-buffer.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnDestroy } from '@angular/core';\nimport { fromEvent, Subscription, BehaviorSubject } from 'rxjs';\nimport { tap, filter, delay } from 'rxjs/operators';\n\n@Directive({\n  selector: '[hsCopyToBuffer]',\n})\nexport class CopyToBufferDirective implements OnDestroy {\n  @Input() hsCopyToBuffer: string;\n  private clickSubscriprtion$: Subscription;\n  private toogleDelay = 3000;\n  private copy$ = new BehaviorSubject<boolean>(false);\n\n  constructor(public el: ElementRef) {\n    this.copy$.subscribe(copy => this.setHostElementText(copy));\n    this.clickSubscriprtion$ = this.createClickSubscription();\n  }\n\n  ngOnDestroy() {\n    this.clickSubscriprtion$.unsubscribe();\n    this.copy$.complete();\n  }\n\n  private createClickSubscription(): Subscription {\n    return fromEvent(this.el.nativeElement, 'click')\n      .pipe(\n        filter(_ => this.copy$.getValue() === false),\n        tap(_ => {\n          this.copy$.next(true);\n        }),\n        delay(this.toogleDelay),\n        tap(_ => {\n          this.copy$.next(false);\n        })\n      )\n      .subscribe();\n  }\n\n  private copyToClipboard(text: string): void {\n    const el = document.createElement('textarea');\n    el.value = text;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  }\n\n  private setHostElementText(copy: boolean): void {\n    if (copy) {\n      this.copyToClipboard(this.hsCopyToBuffer);\n      this.el.nativeElement.innerText = 'copied';\n    } else {\n      this.el.nativeElement.innerText = 'copy';\n    }\n  }\n}\n",
            "selector": "[hsCopyToBuffer]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "hsCopyToBuffer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "clickSubscriprtion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "copy$",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "toogleDelay",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createClickSubscription",
                    "args": [],
                    "optional": false,
                    "returnType": "Subscription",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setHostElementText",
                    "args": [
                        {
                            "name": "copy",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "copy",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "D3AxisDirective",
            "id": "directive-D3AxisDirective-3a209e409adb0bf60751e1f07925940d",
            "file": "src/app/modules/hs-d3/directives/d3axis.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\nimport { ScaleLinear, format } from 'd3';\n\ntype AxisPosition = 'top' | 'left' | 'bottom' | 'right';\n\n@Directive({\n  selector: '[hsD3Axis]',\n})\nexport class D3AxisDirective {\n  @Input() position: AxisPosition = 'bottom';\n\n  @Input() ticks: number = 3;\n  @Input()\n  set scale(scale: ScaleLinear<number, number>) {\n    if (!scale) {\n      return;\n    }\n    let axis;\n\n    switch (this.position) {\n      case 'left':\n        axis = d3.axisLeft(scale).ticks(this.ticks);\n        break;\n      default:\n        axis = d3.axisBottom(scale).ticks(this.ticks);\n    }\n    d3.select(this.el.nativeElement).call(axis);\n  }\n\n  @Input()\n  set transform(transform: string) {\n    if (transform) {\n      this.el.nativeElement.setAttribute('transform', transform);\n    }\n  }\n\n  constructor(public el: ElementRef) {\n    this.el.nativeElement.setAttribute('color', '#486581');\n  }\n}\n",
            "selector": "[hsD3Axis]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "AxisPosition"
                },
                {
                    "name": "scale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": ""
                },
                {
                    "name": "ticks",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number"
                },
                {
                    "name": "transform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "scale": {
                    "name": "scale",
                    "setSignature": {
                        "name": "scale",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "scale",
                                "type": "ScaleLinear<number | number>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 15,
                        "jsdoctags": [
                            {
                                "name": "scale",
                                "type": "ScaleLinear<number | number>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "transform": {
                    "name": "transform",
                    "setSignature": {
                        "name": "transform",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "transform",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "transform",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "HideInZenModeDirective",
            "id": "directive-HideInZenModeDirective-394dc63d4eb1f4461fda972daf61356c",
            "file": "src/app/shared/directives/hide-in-zen-mode.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnDestroy } from '@angular/core';\nimport { ZenModeService } from '@app/core/zenmode.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[hsHideInZenMode]',\n})\nexport class HideInZenModeDirective implements OnDestroy {\n  private subscription: Subscription;\n  constructor(private zenMode: ZenModeService, el: ElementRef) {\n    this.subscription = this.zenMode.isZenMode$.subscribe(\n      isZenMode => ((el.nativeElement as HTMLElement).hidden = isZenMode)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
            "selector": "[hsHideInZenMode]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "PixelToCanvasDirective",
            "id": "directive-PixelToCanvasDirective-d5c5f608a3d3f9cdf5de5376593fc7f0",
            "file": "src/app/shared/directives/pixel-to-canvas.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Renderer2, Input } from '@angular/core';\n\n@Directive({\n  selector: '[hsPixelToCanvas]',\n})\nexport class PixelToCanvasDirective {\n  @Input() width: number;\n  @Input() height: number;\n  @Input()\n  set pixels(pixels) {\n    this.renderer.setAttribute(this.el.nativeElement, 'width', `${this.width}`);\n    this.renderer.setAttribute(\n      this.el.nativeElement,\n      'height',\n      `${this.height}`\n    );\n    if (pixels) {\n      try {\n        const clampedArray = new Uint8ClampedArray(pixels);\n        const imgData = new ImageData(clampedArray, this.width, this.height);\n        this.context.putImageData(imgData, 0, 0);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n  private context: CanvasRenderingContext2D;\n\n  constructor(private el: ElementRef, private renderer: Renderer2) {\n    this.context = el.nativeElement.getContext('2d');\n  }\n}\n",
            "selector": "[hsPixelToCanvas]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "number"
                },
                {
                    "name": "pixels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanvasRenderingContext2D",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "pixels": {
                    "name": "pixels",
                    "setSignature": {
                        "name": "pixels",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "pixels",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 10,
                        "jsdoctags": [
                            {
                                "name": "pixels",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "ScaleImageDirective",
            "id": "directive-ScaleImageDirective-454fca929c8a9a3b50327c635b16d4f2",
            "file": "src/app/shared/directives/scale-image.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit } from '@angular/core';\n\n@Directive({\n  selector: '[hsScaleImage]',\n})\nexport class ScaleImageDirective implements OnInit {\n  @Input() width;\n  @Input() height;\n\n  private minWidth: number = 100;\n  private minHeight: number = 100;\n\n  constructor(private el: ElementRef) {}\n\n  ngOnInit(): void {\n    try {\n      this.isValidInputs();\n      if (this.imageMustBeScaled()) {\n        this.scaleImage();\n      }\n    } catch (error) {\n      console.error(error);\n      return;\n    }\n  }\n\n  private isValidInputs() {\n    if (!this.width || !this.height) {\n      throw new Error('Height and width must be exist');\n    }\n  }\n\n  private imageMustBeScaled(): boolean {\n    return this.height < this.minHeight || this.width < this.minWidth;\n  }\n\n  private scaleImage(): void {\n    let scale = 1;\n\n    if (this.width === this.height || this.width < this.minWidth) {\n      scale = this.minWidth / this.width;\n    } else {\n      scale = this.minHeight / this.height;\n    }\n\n    const transformStr = `transform: scale(${scale}); transform-origin: 0 0`;\n    (this.el.nativeElement as HTMLElement).setAttribute('style', transformStr);\n  }\n}\n",
            "selector": "[hsScaleImage]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "minHeight",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "minWidth",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "imageMustBeScaled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isValidInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scaleImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ShowInZenModeDirective",
            "id": "directive-ShowInZenModeDirective-b6c52d0973f396e616f110559de077f0",
            "file": "src/app/shared/directives/show-in-zen-mode.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnDestroy } from '@angular/core';\nimport { ZenModeService } from '@app/core/zenmode.service';\nimport { Subscription } from 'rxjs';\n\n@Directive({\n  selector: '[hsShowInZenMode]',\n})\nexport class ShowInZenModeDirective implements OnDestroy {\n  private subscription: Subscription;\n  constructor(private zenMode: ZenModeService, el: ElementRef) {\n    this.subscription = this.zenMode.isZenMode$.subscribe(\n      isZenMode => ((el.nativeElement as HTMLElement).hidden = !isZenMode)\n    );\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
            "selector": "[hsShowInZenMode]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TippyDirective",
            "id": "directive-TippyDirective-e19353c5a3751f8412cabada645092f7",
            "file": "src/app/shared/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, OnInit, ElementRef } from '@angular/core';\nimport tippy from 'tippy.js';\n\n@Directive({\n  selector: '[hsTippy]',\n})\nexport class TippyDirective implements OnInit {\n  @Input() public tippyOptions: Object;\n\n  constructor(private el: ElementRef) {\n    this.el = el;\n  }\n\n  ngOnInit() {\n    tippy(this.el.nativeElement, this.tippyOptions || {});\n  }\n}\n",
            "selector": "[hsTippy]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "tippyOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "Object"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "UpdateModelVersionDirective",
            "id": "directive-UpdateModelVersionDirective-3c632592b98ad497b55d4ae50123f1c7",
            "file": "src/testing/directives/test-update-model-version.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, Output, EventEmitter } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Directive({\n  selector: '[hsUpdateModelVersion]',\n})\nexport class UpdateModelVersionDirective {\n  @Input() modelVersion: ModelVersion;\n  @Output() handleClick: EventEmitter<any> = new EventEmitter();\n}\n",
            "selector": "[hsUpdateModelVersion]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [
                {
                    "name": "handleClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "UpdateModelVersionDirective",
            "id": "directive-UpdateModelVersionDirective-ba2bb73be36c625b1289a1e654b5b564-1",
            "file": "src/app/modules/applications/directives/update-model-version.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  ElementRef,\n  OnDestroy,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { ModelVersion, ModelVersionStatus } from '@app/core/data/types';\nimport { Subscription } from 'rxjs';\nimport { tap, filter, take } from 'rxjs/operators';\n\n@Directive({\n  selector: '[hsUpdateModelVersion]',\n})\nexport class UpdateModelVersionDirective implements OnDestroy, OnChanges {\n  @Input() modelVersion: ModelVersion;\n  @Output() handleClick: EventEmitter<any> = new EventEmitter();\n\n  private latestModelVersion: ModelVersion;\n  private modelVersionSub: Subscription;\n\n  constructor(\n    public el: ElementRef,\n    private modelVersionsFacade: ModelVersionsFacade,\n  ) {}\n\n  @HostListener('click')\n  onclick() {\n    event.stopPropagation();\n    if (this.latestModelVersion) {\n      this.handleClick.emit(this.latestModelVersion);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const {\n      model: { id },\n      modelVersion,\n    } = this.modelVersion;\n    this.modelVersionSub = this.modelVersionsFacade\n      .modelVersionsByModelId(this.modelVersion.model.id)\n      .pipe(\n        filter(modelVersions => modelVersions !== undefined),\n        tap((modelVersions: ModelVersion[]) => {\n          const latestModelVersions = modelVersions.filter(modelVer => {\n            return (\n              modelVer.model.id === id &&\n              modelVer.modelVersion > modelVersion &&\n              modelVer.status.toLocaleLowerCase() ===\n                ModelVersionStatus.Released\n            );\n          });\n          const el: HTMLElement = this.el.nativeElement;\n          if (latestModelVersions.length) {\n            el.style.display = '';\n            this.latestModelVersion = latestModelVersions[0];\n          } else {\n            this.latestModelVersion = undefined;\n            el.style.display = 'none';\n          }\n        }),\n        take(1),\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.modelVersionSub.unsubscribe();\n  }\n}\n",
            "selector": "[hsUpdateModelVersion]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [
                {
                    "name": "handleClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34
                }
            ],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "latestModelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersion",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "modelVersionSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onclick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnDestroy",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "UpdateModelVersionDirective-1"
        }
    ],
    "components": [
        {
            "name": "AddComparableComponent",
            "id": "component-AddComparableComponent-ba67e626c2c956d6b279db7c303eda6d",
            "file": "src/app/modules/monitoring/components/model-versions-tags/add-comparable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "AddComparableFacade"
                }
            ],
            "styleUrls": [
                "./add-comparable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "add-comparable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "modelVerFilter",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterChange",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectModelVersion",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, AfterViewInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { takeUntil } from 'rxjs/operators';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Observable, Subject } from 'rxjs';\nimport { AddComparableFacade } from './add-comparable.facade';\n\n@Component({\n  templateUrl: 'add-comparable.component.html',\n  styleUrls: ['./add-comparable.component.scss'],\n  providers: [AddComparableFacade],\n})\nexport class AddComparableComponent implements OnDestroy, AfterViewInit {\n  modelVerFilter = new FormControl();\n  modelVersions$: Observable<ModelVersion[]>;\n\n  private readonly destroy: Subject<any> = new Subject<any>();\n  constructor(private facade: AddComparableFacade) {\n    this.modelVersions$ = this.facade.modelVersions$;\n  }\n\n  ngAfterViewInit(): void {\n    this.modelVerFilter.valueChanges\n      .pipe(takeUntil(this.destroy))\n      .subscribe(value => {\n        this.facade.onFilterChange(value);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n  }\n\n  onSelectModelVersion(modelVersion: ModelVersion): void {\n    this.facade.onSelectModelVersion(modelVersion);\n  }\n\n  onFilterChange(str: string): void {\n    this.facade.onFilterChange(str);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.comparable {\n  min-width: 420px;\n  &__filter {\n    margin-bottom: 12px;\n  }\n  &__item {\n    display: flex;\n    border: 1px $neutral-color-800 solid;\n    color: $neutral-color-800;\n    border-radius: 4px;\n    padding: 4px;\n    justify-content: space-between;\n    cursor: pointer;\n    opacity: 0.7;\n    transition: 0.3s ease all;\n    &:hover {\n      opacity: 1;\n      border-color: $primary-color-700;\n      color: $primary-color-700;\n    }\n    & + & {\n      margin-top: 6px;\n    }\n  }\n  &__version {\n    font-family: $font-family-bold;\n    &::before {\n      display: inline-block;\n      font-size: 12px;\n      text-emphasis: 'ver:';\n    }\n  }\n}\n",
                    "styleUrl": "./add-comparable.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "AddComparableFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "AddComparableFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"comparable\">\n  <div class=\"comparable__filter\">\n    <hydro-input-text\n      bordered\n      [formControl]=\"modelVerFilter\"\n    ></hydro-input-text>\n  </div>\n  <div\n    class=\"comparable__item\"\n    *ngFor=\"let modelVersion of modelVersions$ | async\"\n    (click)=\"onSelectModelVersion(modelVersion)\"\n  >\n    <div>{{ modelVersion.model.name }}</div>\n    <div class=\"comparable__version\">{{ modelVersion.modelVersion }}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "AggregationComponent",
            "id": "component-AggregationComponent-a55b1bd7db790f5c000a7b4f3289dc1f",
            "file": "src/testing/components/mock-aggreagation.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-aggregation",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                },
                {
                    "name": "canLoadLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "canLoadRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "currentRequests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean[]"
                },
                {
                    "name": "latency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "number[]"
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean"
                },
                {
                    "name": "totalRequests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "changedSelectedColumn",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                },
                {
                    "name": "loadedNewest",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                },
                {
                    "name": "loadedOlder",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'hs-aggregation',\n  template: '',\n})\nexport class AggregationComponent {\n  @Input() aggregation: any;\n  @Input() latency: number[];\n  @Input() errors: boolean[];\n  @Input() canLoadLeft: boolean;\n  @Input() canLoadRight: boolean;\n  @Input() totalRequests: number;\n  @Input() currentRequests: number;\n  @Input() loading: boolean;\n  @Output() changedSelectedColumn = new EventEmitter<number>();\n  @Output() loadedOlder = new EventEmitter<string>();\n  @Output() loadedNewest = new EventEmitter<string>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AggregationComponent",
            "id": "component-AggregationComponent-0e39d607617fbe035f0f1532fbddede1-1",
            "file": "src/app/modules/monitoring/containers/aggregation/aggregation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "AggregationService"
                }
            ],
            "selector": "hs-aggregation",
            "styleUrls": [
                "./aggregation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aggregation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aggregationList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AggregationsList>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "canLoadNewer$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "canLoadOlder$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "filterDateRange$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "inputNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "maxDate$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Date>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "metricNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "minDate$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Date>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "outputNames",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedAggregation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Aggregation>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changeActiveColumn",
                    "args": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDateTimeRangeChange",
                    "args": [
                        {
                            "name": "range",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "range",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFilterDateReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadNewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadOlder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Component, ChangeDetectionStrategy, OnInit } from '@angular/core';\nimport { AggregationsList, Aggregation } from '../../models';\n\nimport { AggregationService } from './aggregation.service';\n\n@Component({\n  selector: 'hs-aggregation',\n  templateUrl: './aggregation.component.html',\n  styleUrls: ['./aggregation.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [AggregationService],\n})\nexport class AggregationComponent implements OnInit {\n  aggregationList$: Observable<AggregationsList>;\n  selectedAggregation$: Observable<Aggregation>;\n  canLoadOlder$: Observable<boolean>;\n  canLoadNewer$: Observable<boolean>;\n  minDate$: Observable<Date>;\n  maxDate$: Observable<Date>;\n  filterDateRange$: Observable<{ from: Date; to: Date }>;\n\n  inputNames: string[] = [];\n  outputNames: string[] = [];\n  metricNames: string[] = [];\n\n  constructor(private readonly aggregationService: AggregationService) {}\n\n  ngOnInit(): void {\n    this.aggregationList$ = this.aggregationService.getAggregationList().pipe(\n      tap(agg => {\n        this.inputNames = agg ? agg.inputNames : undefined;\n        this.outputNames = agg ? agg.outputNames : undefined;\n        this.metricNames = agg ? agg.metricNames : undefined;\n      }),\n    );\n\n    this.selectedAggregation$ =\n      this.aggregationService.getSelectedAggregation();\n\n    this.canLoadOlder$ = this.aggregationService.canLoadOlder();\n    this.canLoadNewer$ = this.aggregationService.canLoadNewer();\n    this.minDate$ = this.aggregationService.getMinDate();\n    this.maxDate$ = this.aggregationService.getMaxDate();\n    this.filterDateRange$ = this.aggregationService.getFilterDateRange();\n  }\n\n  changeActiveColumn(aggregation: Aggregation) {\n    this.aggregationService.selectAggregation(aggregation);\n  }\n\n  loadOlder() {\n    this.aggregationService.loadOlder();\n  }\n\n  loadNewer() {\n    this.aggregationService.loadNewer();\n  }\n\n  handleDateTimeRangeChange(range: { from: Date; to: Date }): void {\n    this.aggregationService.changeDateTimeRange(range);\n  }\n\n  handleFilterDateReset(): void {\n    this.aggregationService.clearDateTimeFilter();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.aggregation {\n  background: white;\n  border: 1px $neutral-color-200 solid;\n  border-radius: 4px;\n  height: 100%;\n  position: relative;\n  display: flex;\n\n  &__info {\n    position: absolute;\n    right: 2px;\n    top: 2px;\n\n    &-icon {\n      color: $neutral-color-400;\n      width: 20px;\n      height: 20px;\n      &:hover {\n        cursor: help;\n        color: $neutral-color-900;\n\n        & + .aggregation__info-legend {\n          visibility: visible;\n          opacity: 1;\n          transform: translateX(0px);\n        }\n      }\n    }\n    &-legend {\n      transition: 0.3s ease all;\n      visibility: hidden;\n      opacity: 0;\n      transform: translateY(10px);\n    }\n  }\n\n  &__sidebar {\n    min-width: 196px;\n    width: 196px;\n    background: $neutral-color-100;\n    border-right: 1px $neutral-color-200 solid;\n  }\n\n  &__body {\n    padding: 8px;\n    width: 100%;\n    overflow: auto;\n  }\n\n  &__loader {\n    color: $neutral-color-300;\n    font-family: $font-family-light;\n    left: calc(50% - 12px);\n    position: absolute;\n    top: calc(100% - 20px);\n\n    &-icon {\n      display: inline-block;\n      height: 20px;\n      width: 20px;\n    }\n  }\n\n  &__header {\n    align-items: center;\n    display: flex;\n    justify-content: center;\n  }\n\n  &__message {\n    width: 100%;\n    padding: 24px;\n    color: $neutral-color-400;\n    font-family: $font-family-bold;\n    font-size: 12px;\n    text-align: center;\n  }\n  &__label {\n    font-size: 12px;\n    font-family: $font-family-bold;\n    color: $neutral-color-700;\n    margin: 4px 108px 2px;\n  }\n}\n",
                    "styleUrl": "./aggregation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "aggregationService",
                        "type": "AggregationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "aggregationService",
                        "type": "AggregationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AggregationComponent-1",
            "templateData": "<div class=\"aggregation\" *ngIf=\"aggregationList$ | async as aggregationList\">\n  <ng-container>\n    <span class=\"aggregation__info\">\n      <hs-icon class=\"aggregation__info-icon\" type=\"info\"></hs-icon>\n      <div class=\"aggregation__info-legend\">\n        <hs-aggregation-legend></hs-aggregation-legend>\n      </div>\n    </span>\n    <div class=\"aggregation__sidebar\">\n      <hs-aggregation-sidebar\n        [minDate]=\"minDate$ | async\"\n        [maxDate]=\"maxDate$ | async\"\n        [filterDateRange]=\"filterDateRange$ | async\"\n        [aggregationsList]=\"aggregationList\"\n        (dateTimeRangeChanged)=\"handleDateTimeRangeChange($event)\"\n        (filterDateRangeReset)=\"handleFilterDateReset()\"\n      ></hs-aggregation-sidebar>\n    </div>\n\n    <div\n      class=\"aggregation__body\"\n      *ngIf=\"aggregationList.aggregations.length; else noDataAvailable\"\n    >\n      <div class=\"aggregation__label\">Inputs</div>\n      <hs-aggregation-data-section\n        type=\"features\"\n        [names]=\"inputNames\"\n        [aggregationList]=\"aggregationList\"\n        [selectedAggregation]=\"selectedAggregation$ | async\"\n        (columnClicked)=\"changeActiveColumn($event)\"\n      >\n      </hs-aggregation-data-section>\n      <div class=\"aggregation__label\">Outputs</div>\n      <hs-aggregation-data-section\n        type=\"features\"\n        [names]=\"outputNames\"\n        [aggregationList]=\"aggregationList\"\n        [selectedAggregation]=\"selectedAggregation$ | async\"\n        (columnClicked)=\"changeActiveColumn($event)\"\n      >\n      </hs-aggregation-data-section>\n\n      <ng-container *ngIf=\"metricNames.length\">\n        <div class=\"aggregation__label\">Metrics</div>\n        <hs-aggregation-data-section\n          type=\"metrics\"\n          [names]=\"metricNames\"\n          [aggregationList]=\"aggregationList\"\n          [selectedAggregation]=\"selectedAggregation$ | async\"\n          (columnClicked)=\"changeActiveColumn($event)\"\n        >\n        </hs-aggregation-data-section>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #noDataAvailable>\n  <div class=\"aggregation__message\">\n    No data available. Waiting data ...\n  </div>\n</ng-template>\n"
        },
        {
            "name": "AggregationDataSectionComponent",
            "id": "component-AggregationDataSectionComponent-f1f4cd37937de79ff1119b786c27d7bc",
            "file": "src/app/modules/monitoring/components/aggregation/data-section/aggregation-data-section.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-aggregation-data-section",
            "styleUrls": [
                "./aggregation-data-section.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aggregation-data-section.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregationList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "AggregationsList"
                },
                {
                    "name": "names",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string[]"
                },
                {
                    "name": "selectedAggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Aggregation"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"features\" | \"metrics\""
                }
            ],
            "outputsClass": [
                {
                    "name": "columnClicked",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "canvasWidth",
                    "defaultValue": "720",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "CELL_MARGIN_TOP",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "CELL_SIZE",
                    "defaultValue": "{ width: 8, height: 14 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "COLUMN_MARGIN_RIGHT",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "labelsWidth",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cellColor",
                    "args": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "aggregation",
                            "type": "Aggregation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "columnTranslate",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColor",
                    "args": [
                        {
                            "name": "check",
                            "type": "AggregationCheck",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "check",
                            "type": "AggregationCheck",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onColumnClick",
                    "args": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "column",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "rowTranslate",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport {\n  AggregationsList,\n  Aggregation,\n  AggregationCheck,\n} from '../../../models';\n\nimport { interpolateRdYlGn } from 'd3';\n\n@Component({\n  selector: 'hs-aggregation-data-section',\n  templateUrl: './aggregation-data-section.component.html',\n  styleUrls: ['./aggregation-data-section.component.scss'],\n})\nexport class AggregationDataSectionComponent {\n  @Input() names: string[];\n  @Input() type: 'features' | 'metrics';\n  @Input() aggregationList: AggregationsList;\n  @Input() selectedAggregation: Aggregation;\n  @Output() columnClicked: EventEmitter<any> = new EventEmitter<any>();\n\n  readonly labelsWidth: number = 100;\n  readonly canvasWidth: number = 720; // 80 column limit * cell.width + padding\n  readonly CELL_SIZE = { width: 8, height: 14 };\n  private readonly COLUMN_MARGIN_RIGHT = 1;\n  private readonly CELL_MARGIN_TOP = 1;\n\n  get canvasHeight() {\n    return this.names.length * (this.CELL_SIZE.height + this.CELL_MARGIN_TOP);\n  }\n\n  columnTranslate(index): string {\n    return `translate(${\n      index * this.CELL_SIZE.width + this.COLUMN_MARGIN_RIGHT * index\n    }, 0)`;\n  }\n\n  rowTranslate(index): string {\n    return `translate(0, ${\n      index * this.CELL_SIZE.height + index * this.CELL_MARGIN_TOP\n    })`;\n  }\n\n  cellColor(aggregation: Aggregation, name: string) {\n    let check: AggregationCheck;\n    switch (this.type) {\n      case 'features':\n        check = aggregation.featuresChecks[name];\n        break;\n      case 'metrics':\n        check = aggregation.metricsChecks[name];\n        break;\n    }\n\n    return this.getColor(check);\n  }\n\n  onColumnClick(column: any) {\n    this.columnClicked.next(column);\n  }\n\n  private getColor(check: AggregationCheck): string {\n    if (check === undefined) return 'lightgrey';\n\n    const { passed, checked } = check;\n    const ratio = checked / passed;\n\n    return ratio ? interpolateRdYlGn(1 / ratio) : 'lightgrey';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.column {\n  cursor: pointer;\n  opacity: 0.5;\n  transition: 0.1s all ease;\n\n  &:hover,\n  &--active {\n    opacity: 1;\n  }\n}\n\n.agg-data {\n  display: flex;\n  align-items: center;\n  margin-bottom: 16px;\n  min-width: 840px;\n  position: relative;\n  &__labels {\n    list-style: none;\n    margin: 0 8px 0 0;\n    padding: 0;\n    overflow: auto;\n    max-width: 100px;\n    width: 100px;\n  }\n\n  &__label {\n    text-align: right;\n    color: $neutral-color-800;\n    font-family: $font-family-regular;\n    font-size: 10px;\n    line-height: 14px;\n    margin-bottom: 1px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    max-width: 100px;\n    width: 100px;\n  }\n}\n",
                    "styleUrl": "./aggregation-data-section.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "canvasHeight": {
                    "name": "canvasHeight",
                    "getSignature": {
                        "name": "canvasHeight",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                }
            },
            "templateData": "<div *ngIf=\"names\" class=\"agg-data\">\n  <ng-container\n    [ngTemplateOutlet]=\"rowLabels\"\n    [ngTemplateOutletContext]=\"{ $implicit: names }\"\n  ></ng-container>\n  <div class=\"agg-data__checks\">\n    <svg [attr.height]=\"canvasHeight\" [attr.width]=\"canvasWidth\">\n      <g\n        (click)=\"onColumnClick(column)\"\n        *ngFor=\"\n          let column of aggregationList.aggregations;\n          let columnIndex = index\n        \"\n        [attr.transform]=\"columnTranslate(columnIndex)\"\n        [ngClass]=\"{\n          'column--active': column.id === selectedAggregation?.id\n        }\"\n        class=\"column\"\n      >\n        <rect\n          *ngFor=\"let name of names; let rowIndex = index\"\n          [attr.fill]=\"cellColor(column, name)\"\n          [attr.height]=\"CELL_SIZE.height\"\n          [attr.transform]=\"rowTranslate(rowIndex)\"\n          [attr.width]=\"CELL_SIZE.width\"\n        ></rect>\n      </g>\n    </svg>\n  </div>\n</div>\n\n<ng-template #rowLabels let-names>\n  <ul [ngStyle]=\"{ width: labelsWidth + 'px' }\" class=\"agg-data__labels\">\n    <li *ngFor=\"let label of names\" class=\"agg-data__label\">\n      {{ label }}\n    </li>\n  </ul>\n</ng-template>\n"
        },
        {
            "name": "AggregationDetailsSidebarComponent",
            "id": "component-AggregationDetailsSidebarComponent-9da54e93f817ab1584ac176f855dae66",
            "file": "src/app/modules/monitoring/components/batch-details/components/aggregation-details-sidebar/aggregation-details-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-aggregation-details-sidebar",
            "styleUrls": [
                "./aggregation-details-sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aggregation-details-sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checkCollection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "CheckCollection"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { CheckCollection } from '../../../../models';\n\n@Component({\n  selector: 'hs-aggregation-details-sidebar',\n  templateUrl: './aggregation-details-sidebar.component.html',\n  styleUrls: ['./aggregation-details-sidebar.component.scss'],\n})\nexport class AggregationDetailsSidebarComponent {\n  @Input() checkCollection: CheckCollection;\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.agg-details-sidebar {\n  color: $neutral-color-900;\n  background: white;\n  &__row {\n    line-height: 24px;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n  }\n  &__row + &__row {\n    margin-top: 4px;\n  }\n  &__label {\n    font-size: 12px;\n    color: $neutral-color-700;\n  }\n  &__count {\n    font-size: 16px;\n    font-family: $font-family-bold;\n  }\n  &__date {\n    font-size: 12px;\n  }\n  &__info {\n    padding: 12px;\n    border-bottom: 1px $neutral-color-200 solid;\n  }\n}\n",
                    "styleUrl": "./aggregation-details-sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"agg-details-sidebar\">\n  <div class=\"agg-details-sidebar__info\">\n    <div class=\"agg-details-sidebar__row\">\n      <span class=\"agg-details-sidebar__label\">Requests</span>\n      <span class=\"agg-details-sidebar__count\"\n        >{{ checkCollection.getSummaryInformation()?.count }}</span\n      >\n    </div>\n    <div class=\"agg-details-sidebar__row\">\n      <span class=\"agg-details-sidebar__label\">From</span>\n      <span class=\"agg-details-sidebar__date\"\n        >{{ checkCollection.getFirstElement()?.timestamp | hsFormatDate }}</span\n      >\n    </div>\n    <div class=\"agg-details-sidebar__row\">\n      <span class=\"agg-details-sidebar__label\">To</span>\n      <span class=\"agg-details-sidebar__date\">\n        {{ checkCollection.getLastElement()?.timestamp | hsFormatDate }}</span\n      >\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AggregationHeaderComponent",
            "id": "component-AggregationHeaderComponent-97fabce5f9fdf5f1ce2441d034e9000d",
            "file": "src/app/modules/monitoring/components/aggregation/header/aggregation-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-aggregation-header",
            "styleUrls": [
                "./aggregation-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aggregation-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregationList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "AggregationsList"
                },
                {
                    "name": "canLoadNewer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "canLoadOlder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "loadNewer",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "loadOlder",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onLoadNewer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadOlder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { AggregationsList } from '../../../models';\n\n@Component({\n  selector: 'hs-aggregation-header',\n  templateUrl: './aggregation-header.component.html',\n  styleUrls: ['./aggregation-header.component.scss'],\n})\nexport class AggregationHeaderComponent {\n  @Input() canLoadOlder: boolean;\n  @Input() canLoadNewer: boolean;\n  @Input() aggregationList: AggregationsList;\n\n  @Output() loadNewer: EventEmitter<any> = new EventEmitter<any>();\n  @Output() loadOlder: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor() {}\n\n  onLoadOlder(): void {\n    this.loadOlder.next();\n  }\n  onLoadNewer(): void {\n    this.loadNewer.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/styles/variables';\n\n.app-header {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  &__range {\n    margin: 0 12px;\n    text-align: center;\n    font-size: 12px;\n    color: $neutral-color-900;\n    font-family: $font-family-bold;\n  }\n  &__icon {\n    width: 14px;\n    height: 14px;\n    line-height: 14px;\n    color: $neutral-color-600;\n    transition: 0.3s ease all;\n    cursor: pointer;\n    &:hover {\n      color: $primary-color-1000;\n    }\n    &--rotated {\n      transform: rotate(180deg);\n    }\n  }\n}\n",
                    "styleUrl": "./aggregation-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div class=\"app-header\">\n  <hs-icon\n    *ngIf=\"canLoadOlder\"\n    (click)=\"onLoadOlder()\"\n    class=\"app-header__icon\"\n    type=\"next\"\n  >\n  </hs-icon>\n  <div class=\"app-header__range\">\n    <div>\n      <span>{{ aggregationList.dateFrom | hsFormatDate }}</span> -\n      <span>{{ aggregationList.dateTo | hsFormatDate }}</span>\n    </div>\n  </div>\n  <hs-icon\n    *ngIf=\"canLoadNewer\"\n    (click)=\"onLoadNewer()\"\n    class=\"app-header__icon app-header__icon--rotated\"\n    type=\"next\"\n  >\n  </hs-icon>\n</div>\n"
        },
        {
            "name": "AggregationLegendComponent",
            "id": "component-AggregationLegendComponent-3282b170873ca69a5d5f27e248558386",
            "file": "src/app/modules/monitoring/components/aggregation/aggregation-legend/aggregation-legend.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-aggregation-legend",
            "styleUrls": [
                "./aggregation-legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aggregation-legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anchorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anchor', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { ViewChild, ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'hs-aggregation-legend',\n  templateUrl: './aggregation-legend.component.html',\n  styleUrls: ['./aggregation-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AggregationLegendComponent {\n  @ViewChild('anchor', { read: ElementRef, static: true })\n  anchorElement: ElementRef;\n\n  get cells(): { color: string; label: string }[] {\n    const res = [\n      { color: d3.interpolateRdYlGn(0), label: '0% successful checks' },\n      { color: d3.interpolateRdYlGn(0.25), label: '~25% successful checks' },\n      { color: d3.interpolateRdYlGn(0.5), label: '50% successful checks' },\n      { color: d3.interpolateRdYlGn(0.75), label: '~75% successful checks' },\n      { color: d3.interpolateRdYlGn(1), label: '100% successful checks' },\n    ];\n    return res;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.agg-legend {\n  padding: 12px;\n  border: 1px $neutral-color-100 solid;\n  border-radius: 4px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 180px;\n  background: white;\n  &__row {\n    display: flex;\n    align-items: center;\n  }\n  &__cell {\n    height: 14px;\n    width: 8px;\n    min-width: 8px;\n    background: lightgray;\n    border: 1px $neutral-color-300 solid;\n    margin-right: 4px;\n  }\n  &__label {\n    font-size: 12px;\n    color: $neutral-color-800;\n  }\n  &__title {\n    font-size: 10px;\n    font-family: $font-family-bold;\n    color: $neutral-color-900;\n  }\n}\n",
                    "styleUrl": "./aggregation-legend.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "cells": {
                    "name": "cells",
                    "getSignature": {
                        "name": "cells",
                        "type": "[]",
                        "returnType": "literal type[]",
                        "line": 15
                    }
                }
            },
            "templateData": "<div class=\"agg-legend\">\n  <div class=\"agg-legend__title\">Legend</div>\n  <div class=\"agg-legend__row\">\n    <div class=\"agg-legend__cell agg-legend__cell--no-metric\"></div>\n    <div class=\"agg-legend__label\">- without checks</div>\n  </div>\n  <div *ngFor=\"let c of cells\" class=\"agg-legend__row\">\n    <div\n      class=\"agg-legend__cell\"\n      [ngStyle]=\"{ backgroundColor: c.color }\"\n    ></div>\n    <div class=\"agg-legend__label\">- {{ c.label }}</div>\n  </div>\n</div>\n"
        },
        {
            "name": "AggregationSidebarComponent",
            "id": "component-AggregationSidebarComponent-e93fdf02c540ce236df19856c39b1fa6",
            "file": "src/app/modules/monitoring/components/aggregation/aggregation-sidebar/aggregation-sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-aggregation-sidebar",
            "styleUrls": [
                "./aggregation-sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./aggregation-sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregationsList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "AggregationsList"
                },
                {
                    "name": "filterDateRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "literal type"
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Date"
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "Date"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateTimeRangeChanged",
                    "defaultValue": "new EventEmitter<{ from: Date; to: Date }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<literal type>"
                },
                {
                    "name": "filterDateRangeReset",
                    "defaultValue": "new EventEmitter<{ from: Date; to: Date }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "handleDateTimeFromChange",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { AggregationsList } from '../../../models';\n\n@Component({\n  selector: 'hs-aggregation-sidebar',\n  templateUrl: './aggregation-sidebar.component.html',\n  styleUrls: ['./aggregation-sidebar.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AggregationSidebarComponent implements OnInit {\n  @Input() minDate: Date;\n  @Input() maxDate: Date;\n  @Input() filterDateRange: { from: Date; to: Date };\n  @Input() aggregationsList: AggregationsList;\n\n  @Output() dateTimeRangeChanged: EventEmitter<{\n    from: Date;\n    to: Date;\n  }> = new EventEmitter<{ from: Date; to: Date }>();\n  @Output() filterDateRangeReset: EventEmitter<{\n    from: Date;\n    to: Date;\n  }> = new EventEmitter<{ from: Date; to: Date }>();\n\n  selected: { startDate; endDate };\n\n  constructor() {}\n\n  ngOnInit() {\n    this.selected = { startDate: this.minDate, endDate: this.minDate };\n  }\n\n  handleDateTimeFromChange($event): void {\n    if ($event.endDate && $event.startDate) {\n      this.dateTimeRangeChanged.next({\n        from: $event.startDate._d,\n        to: $event.endDate._d,\n      });\n    }\n  }\n\n  get showResetFilter(): boolean {\n    return this.filterDateRange !== undefined;\n  }\n\n  resetFilter() {\n    this.selected = { startDate: this.minDate, endDate: this.minDate };\n    this.filterDateRangeReset.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.agg-sidebar {\n  background: white;\n  border-bottom: 1px $neutral-color-200 solid;\n  padding: 12px;\n  &__header {\n    font-size: 12px;\n    line-height: 16px;\n    font-family: $font-family-bold;\n    color: $neutral-color-800;\n    width: 100%;\n    margin-bottom: 2px;\n  }\n  &__reset {\n    color: $primary-color-400;\n    cursor: pointer;\n    text-decoration: underline;\n    font-size: 10px;\n    &:hover {\n      color: $primary-color-800;\n    }\n  }\n  &__row {\n    display: flex;\n    line-height: 24px;\n    justify-content: space-between;\n    flex-wrap: wrap;\n  }\n  &__row + &__row {\n    margin-top: 12px;\n  }\n  &__label {\n    font-size: 12px;\n    color: $neutral-color-700;\n    display: block;\n    min-width: 36px;\n  }\n  &__count {\n    font-size: 16px;\n    font-family: $font-family-bold;\n  }\n  &__date {\n    font-size: 12px;\n  }\n  &__date-picker {\n    border: 1px solid $neutral-color-300;\n    border-radius: 4px;\n    font-size: 12px;\n    color: $neutral-color-900;\n    width: 100%;\n    padding: 2px 4px;\n  }\n  &__icon {\n    width: 16px;\n    height: 16px;\n    display: inline-block;\n    margin: 0 4px;\n    color: $neutral-color-400;\n    cursor: pointer;\n    &:hover {\n      color: $neutral-color-900;\n    }\n  }\n}\n",
                    "styleUrl": "./aggregation-sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 32
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "showResetFilter": {
                    "name": "showResetFilter",
                    "getSignature": {
                        "name": "showResetFilter",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 49
                    }
                }
            },
            "templateData": "<div class=\"agg-sidebar\" *ngIf=\"aggregationsList\">\n  <div class=\"agg-sidebar__row\" *ngIf=\"minDate && maxDate\">\n    <label class=\"agg-sidebar__header\" for=\"rangeFilter\">Date range: </label>\n    <input\n      id=\"rangeFilter\"\n      class=\"agg-sidebar__date-picker\"\n      ngxDaterangepickerMd\n      [(ngModel)]=\"selected\"\n      startKey=\"startDate\"\n      endKey=\"endDate\"\n      timePicker=\"true\"\n      timePickerSeconds=\"true\"\n      (datesUpdated)=\"handleDateTimeFromChange($event)\"\n    />\n    <span\n      *ngIf=\"showResetFilter\"\n      (click)=\"resetFilter()\"\n      class=\"agg-sidebar__reset\"\n    >\n      reset filter\n    </span>\n  </div>\n\n  <div class=\"agg-sidebar__row\">\n    <span class=\"agg-sidebar__header\">Total</span>\n    <span class=\"agg-sidebar__label\">Batches: </span\n    ><span class=\"agg-sidebar__count\"\n      >{{ aggregationsList.totalBatchesCount }}</span\n    >\n  </div>\n  <div class=\"agg-sidebar__row\">\n    <span class=\"agg-sidebar__header\">Displayed</span>\n    <span class=\"agg-sidebar__label\">Batches: </span\n    ><span class=\"agg-sidebar__count\"\n      >{{ aggregationsList.showedBatchesCount }}</span\n    >\n  </div>\n</div>\n"
        },
        {
            "name": "AlertMessageComponent",
            "id": "component-AlertMessageComponent-9175fd73f1bf2c88e128c898f3202ca3",
            "file": "src/app/shared/components/alert-message/alert-message.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-alert-message",
            "styleUrls": [
                "./alert-message.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"alert\">    <ng-content></ng-content>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ViewEncapsulation,\n} from '@angular/core';\n\n@Component({\n  selector: 'hs-alert-message',\n  template: `<div class=\"alert\">\n    <ng-content></ng-content>\n  </div> `,\n  styleUrls: ['./alert-message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AlertMessageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".alert {\n    padding: 8px 14px;\n    text-align: center;\n    background: #FCE588;\n    color: #ad6f13;\n    & a {\n        color: #3a3a79 !important; \n    }\n}",
                    "styleUrl": "./alert-message.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "AnchorExplanationComponent",
            "id": "component-AnchorExplanationComponent-ffd5d3fbbb498d5193021956a3d69162",
            "file": "src/app/modules/root-cause/containers/anchor-explanation/anchor-explanation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-anchor-explanation",
            "styleUrls": [
                "./anchor-explanation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./anchor-explanation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "explanation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "AnchorExplanationResult"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { AnchorExplanationResult } from '../../models';\n\n@Component({\n  selector: 'hs-anchor-explanation',\n  templateUrl: './anchor-explanation.component.html',\n  styleUrls: ['./anchor-explanation.component.scss'],\n})\nexport class AnchorExplanationComponent {\n  @Input() explanation: AnchorExplanationResult;\n\n  get coverage(): number {\n    return this.explanation.coverage;\n  }\n\n  get explanations(): string[] {\n    return this.explanation.explanation;\n  }\n\n  get precision(): number {\n    return this.explanation.precision;\n  }\n\n  get fieldName(): string {\n    return this.explanation.explained_field_name;\n  }\n\n  get fieldValue(): number | string {\n    return this.explanation.explained_field_value;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.explanation {\n  &__buttons {\n    margin-top: 12px;\n    display: flex;\n    justify-content: flex-end;\n  }\n  &__tiles {\n    display: flex;\n    margin-top: 12px;\n  }\n  &__tile + &__tile {\n    margin-left: 24px;\n  }\n  &__tile {\n    width: 80px;\n    height: 80px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    &-key {\n      font-family: $font-family-light;\n      color: $neutral-color-700;\n    }\n    &-value {\n      font-family: $font-family-bold;\n      color: $neutral-color-900;\n      font-size: 28px;\n      margin: 8px 0;\n    }\n  }\n  &__item {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    &-key {\n      color: $neutral-color-700;\n      font-family: $font-family-light;\n      text-align: center;\n    }\n    &-value {\n      text-align: center;\n      color: $neutral-color-1000;\n      font-size: 16px;\n    }\n  }\n  &__item + &__item {\n    margin-top: 8px;\n  }\n}\n\n.anchor {\n  &__title {\n    font-family: $font-family-bold;\n    text-transform: uppercase;\n    color: $neutral-color-900;\n    margin-bottom: 12px;\n  }\n  &__body {\n    display: flex;\n    align-items: center;\n    color: $neutral-color-800;\n  }\n  &__precision {\n    padding: 0 12px;\n  }\n  &__operator {\n    font-family: $font-family-bold;\n    color: $neutral-color-800;\n    //text-transform: uppercase;\n  }\n  &__accent {\n    color: $neutral-color-800;\n  }\n  &__explanations {\n    display: flex;\n    flex-direction: column;\n    & table {\n      & > tbody > tr {\n        //line-height: 18px;\n        & > td {\n          padding: 0 2px;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./anchor-explanation.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "coverage": {
                    "name": "coverage",
                    "getSignature": {
                        "name": "coverage",
                        "type": "number",
                        "returnType": "number",
                        "line": 12
                    }
                },
                "explanations": {
                    "name": "explanations",
                    "getSignature": {
                        "name": "explanations",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 16
                    }
                },
                "precision": {
                    "name": "precision",
                    "getSignature": {
                        "name": "precision",
                        "type": "number",
                        "returnType": "number",
                        "line": 20
                    }
                },
                "fieldName": {
                    "name": "fieldName",
                    "getSignature": {
                        "name": "fieldName",
                        "type": "string",
                        "returnType": "string",
                        "line": 24
                    }
                },
                "fieldValue": {
                    "name": "fieldValue",
                    "getSignature": {
                        "name": "fieldValue",
                        "type": "",
                        "returnType": "number | string",
                        "line": 28
                    }
                }
            },
            "templateData": "<!--<div class=\"explanation__item\">-->\n<!--  <div class=\"explanation__item-key\">explanation</div>-->\n<!--  <div class=\"explanation__item-value\">-->\n<!--    <div *ngFor=\"let explanation of explanations\">-->\n<!--      {{ explanation }}-->\n<!--    </div>-->\n<!--  </div>-->\n<!--</div>-->\n\n<!--<div class=\"explanation__tiles\">-->\n<!--  <div class=\"explanation__tile\">-->\n<!--    <div class=\"explanation__tile-key\">coverage</div>-->\n<!--    <div class=\"explanation__tile-value\">{{ coverage < 0.01 ? '< 0.01%' : coverage | percent }}</div>-->\n<!--  </div>-->\n<!--  <div class=\"explanation__tile\">-->\n<!--    <div class=\"explanation__tile-key\">precision</div>-->\n<!--    <div class=\"explanation__tile-value\">{{ precision < 0.01 ? '0.01%' : precision | percent }}</div>-->\n<!--  </div>-->\n<!--</div>-->\n\n<div class=\"anchor\">\n  <div class=\"anchor__body\">\n    <div class=\"anchor__class\">\n      {{ fieldName }} <span class=\"anchor__operator\">=</span> {{ fieldValue }}\n    </div>\n    <div class=\"anchor__precision\">\n      in\n      <span class=\"anchor__accent\">{{ precision | percent: '0.2-2' }}</span> of\n      cases\n    </div>\n    <div class=\"anchor__explanations\">\n      <table>\n        <tr *ngFor=\"let expl of explanations; index as i\">\n          <td class=\"anchor__operator\">{{ i === 0 ? 'if' : 'and' }}</td>\n          <td>{{ expl }}</td>\n        </tr>\n      </table>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0299372c7862c3dffd575da177c33f54",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { MdlDialogOutletService } from '@angular-mdl/core';\nimport { Component, ViewContainerRef, OnInit } from '@angular/core';\nimport { BuildInformationService } from '@app/core/build-information.service';\n\nimport { ApplicationsFacade } from './core/facades/applications.facade';\nimport { DeploymentConfigsFacade } from './core/facades/deployment-configs.facade';\nimport { ModelsFacade } from './core/facades/models.facade';\nimport { ServablesFacade } from './core/facades/servables.facade';\nimport { SvgSpriteService } from './core/svg-sprite.service';\nimport { SseService } from './core/sse.service';\nimport { ModelVersionsFacade } from './core/facades/model-versions.facade';\nimport { HydroConfigService } from './core/hydro-config.service';\n\n@Component({\n  selector: 'hs-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  constructor(\n    private dialogOutletService: MdlDialogOutletService,\n    private viewContainerRef: ViewContainerRef,\n    private sse: SseService,\n    private buildInformationService: BuildInformationService,\n    private hsConfig: HydroConfigService,\n    private readonly appFacade: ApplicationsFacade,\n    private readonly modelsFacade: ModelsFacade,\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private readonly servablesFacade: ServablesFacade,\n    private readonly deploymentConfigFacade: DeploymentConfigsFacade,\n    private readonly svgSprite: SvgSpriteService,\n  ) {\n    this.dialogOutletService.setDefaultViewContainerRef(this.viewContainerRef);\n\n    appFacade.loadAll();\n    modelVersionsFacade.loadAll();\n    servablesFacade.loadAll();\n    deploymentConfigFacade.loadAll();\n    svgSprite.loadSvgSprite();\n    sse.createConnection();\n  }\n\n  ngOnInit() {\n    this.buildInformationService.loadBuildInformation();\n  }\n\n  get showHeader(): boolean {\n    return this.hsConfig.config.showHeader;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.app {\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  &__header {\n    height: 72px;\n  }\n  &__body {\n    height: 100%;\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogOutletService",
                        "type": "MdlDialogOutletService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sse",
                        "type": "SseService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "buildInformationService",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hsConfig",
                        "type": "HydroConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appFacade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "servablesFacade",
                        "type": "ServablesFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deploymentConfigFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "svgSprite",
                        "type": "SvgSpriteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialogOutletService",
                        "type": "MdlDialogOutletService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sse",
                        "type": "SseService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "buildInformationService",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hsConfig",
                        "type": "HydroConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appFacade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "servablesFacade",
                        "type": "ServablesFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deploymentConfigFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "svgSprite",
                        "type": "SvgSpriteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "showHeader": {
                    "name": "showHeader",
                    "getSignature": {
                        "name": "showHeader",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"app\">\n  <div *ngIf=\"showHeader\" class=\"app__header\">\n    <hs-header></hs-header>\n  </div>\n  <div class=\"app__body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n\n<hs-dialog></hs-dialog>\n<hs-log></hs-log>\n<notifier-container></notifier-container>\n"
        },
        {
            "name": "ApplicationDetailsComponent",
            "id": "component-ApplicationDetailsComponent-b7a434d7ac8ae081e6246e91059617f0",
            "file": "src/app/modules/applications/containers/application-details/application-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-application-details",
            "styleUrls": [
                "./application-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./application-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "application$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "menu",
                    "defaultValue": "new BehaviorSubject(\n    initialMenuState,\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MenuState>",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "menu$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MenuState>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "mv$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Dictionary<ModelVersionServiceStatusesEntity>>",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "mvSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "editApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getModelVersionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersion>",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "ModelVersionId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getServablesByName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Servable[]>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFailed",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isReady",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickModelVariant",
                    "args": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVariant",
                            "type": "ModelVariant",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "evt",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVariant",
                            "type": "ModelVariant",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "removeApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "testApplication",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModelVersionDialog",
                    "args": [
                        {
                            "name": "lastModelVersion",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVariant",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "lastModelVersion",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVariant",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  Application,\n  ModelVariant,\n  ApplicationStatus,\n  ModelVersionServiceStatusesEntity,\n  Servable,\n  ModelVersionId,\n  ModelVersion,\n} from '@app/core/data/types';\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { ServiceStatusesFacade } from '@app/core/facades/service-statuses.facade';\nimport {\n  DialogUpdateModelVersionComponent,\n  SELECTED_MODEL_VARIANT,\n  LATEST_MODEL_VERSION,\n  DialogTestComponent,\n  SELECTED_APPLICATION,\n  DialogUpdateApplicationComponent,\n  SELECTED_UPD_APPLICATION,\n  DialogDeleteApplicationComponent,\n  SELECTED_DEL_APPLICATION,\n} from '@app/modules/dialogs/components';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport * as _ from 'lodash';\n\nimport { Observable, BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { filter } from 'rxjs/operators';\nimport { Dictionary } from '@ngrx/entity';\nimport { ServablesFacade } from '@app/core/facades/servables.facade';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\n\ninterface MenuState {\n  showed: boolean;\n  context?: ModelVariant | null;\n  top: number;\n  left: number;\n  statuses: ModelVersionServiceStatusesEntity;\n}\nconst initialMenuState: MenuState = {\n  showed: false,\n  context: null,\n  top: 0,\n  left: 0,\n  statuses: null,\n};\n\nfunction getModelVersionsIds(value: Application): ModelVersionId[] {\n  return _.flatten(\n    value.executionGraph.stages.map(stage =>\n      stage.modelVariants.map(modelVariant => modelVariant.modelVersionId),\n    ),\n  );\n}\n\n@Component({\n  selector: 'hs-application-details',\n  templateUrl: './application-details.component.html',\n  styleUrls: ['./application-details.component.scss'],\n})\nexport class ApplicationDetailsComponent implements OnInit, OnDestroy {\n  application$: Observable<Application>;\n\n  menu$: Observable<MenuState>;\n  private menu: BehaviorSubject<MenuState> = new BehaviorSubject(\n    initialMenuState,\n  );\n\n  mv$: Observable<Dictionary<ModelVersionServiceStatusesEntity>>;\n  private mvSubscription: Subscription;\n\n  constructor(\n    private readonly dialog: DialogsService,\n    private readonly facade: ApplicationsFacade,\n    private readonly serviceFacade: ServiceStatusesFacade,\n    private readonly servablesFacade: ServablesFacade,\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n  ) {\n    this.menu$ = this.menu.asObservable();\n  }\n\n  ngOnInit() {\n    this.application$ = this.facade.selectedApplication();\n\n    this.mv$ = this.serviceFacade.allStatusesEntities();\n\n    this.mvSubscription = combineLatest([this.application$, this.mv$])\n      .pipe(\n        filter(tuple => {\n          const [app, statuses] = tuple;\n          return app !== undefined;\n        }),\n        map(tuple => {\n          const [app, statuses] = tuple;\n          const mvsId = getModelVersionsIds(app);\n          return mvsId.filter(id => statuses[id] === undefined);\n        }),\n        filter(ids => {\n          return ids.length > 0;\n        }),\n        tap(ids => {\n          return ids.forEach(id => this.serviceFacade.loadAll(id));\n        }),\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.mvSubscription.unsubscribe();\n  }\n\n  public getServablesByName(name: string): Observable<Servable[]> {\n    return this.servablesFacade.selectServablesByName(name);\n  }\n\n  public getModelVersionById(id: ModelVersionId): Observable<ModelVersion> {\n    return this.modelVersionsFacade.modelVersionById(id);\n  }\n\n  public updateModelVersionDialog(lastModelVersion, modelVariant) {\n    this.dialog.createDialog({\n      component: DialogUpdateModelVersionComponent,\n      providers: [\n        { provide: SELECTED_MODEL_VARIANT, useValue: modelVariant },\n        { provide: LATEST_MODEL_VERSION, useValue: lastModelVersion },\n      ],\n    });\n  }\n\n  public testApplication(application: Application): void {\n    this.dialog.createDialog({\n      component: DialogTestComponent,\n      providers: [{ provide: SELECTED_APPLICATION, useValue: application }],\n    });\n  }\n\n  public editApplication(application: Application): void {\n    this.dialog.createDialog({\n      component: DialogUpdateApplicationComponent,\n      providers: [{ provide: SELECTED_UPD_APPLICATION, useValue: application }],\n      styles: {\n        height: '100%',\n      },\n    });\n  }\n\n  public removeApplication(application: Application) {\n    this.dialog.createDialog({\n      component: DialogDeleteApplicationComponent,\n      providers: [{ provide: SELECTED_DEL_APPLICATION, useValue: application }],\n    });\n  }\n\n  public isReady(status: string): boolean {\n    return status === ApplicationStatus.Ready;\n  }\n\n  public isFailed(status: string): boolean {\n    return status === ApplicationStatus.Failed;\n  }\n\n  public onClickModelVariant(\n    evt: MouseEvent,\n    modelVariant: ModelVariant,\n  ): void {\n    this.serviceFacade\n      .selectServiceStatusesById(modelVariant.modelVersionId)\n      .subscribe(statuses => {\n        this.menu.next({\n          showed: true,\n          context: modelVariant,\n          left: evt.clientX - 12,\n          top: evt.clientY - 12,\n          statuses: statuses,\n        });\n      });\n  }\n\n  public onMouseLeave(): void {\n    const menuState = this.menu.getValue();\n    this.menu.next({\n      showed: false,\n      context: menuState.context,\n      top: menuState.top,\n      left: menuState.left,\n      statuses: menuState.statuses,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.application {\n  padding: 24px;\n  width: 100%;\n\n  &__path {\n    font-size: 14px;\n    color: $primary-color-1000;\n\n    &-separator {\n      color: $neutral-color-300;\n      margin: 0 2px;\n    }\n  }\n\n  &__signature {\n    height: calc(100% - 40px);\n    overflow: auto;\n  }\n\n  &__error {\n    width: 100%;\n    position: fixed;\n    bottom: 0;\n    right: 0;\n    left: 250px;\n  }\n\n  &__body {\n    display: flex;\n    height: 100%;\n    width: 100%;\n  }\n\n  &__header {\n    &-title {\n      font-size: 16px;\n    }\n\n    &-monitoring-button {\n      margin-right: 8px;\n    }\n\n    &-buttons {\n      display: flex;\n      justify-content: flex-end;\n\n      button + button {\n        margin-left: 8px;\n      }\n    }\n  }\n\n  &__stages {\n    margin: 0 auto;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  &__stage {\n    display: flex;\n    flex-direction: column;\n    padding: 20px;\n    border: 1px $neutral-color-500 dashed;\n    border-radius: 10px;\n    margin-bottom: 36px;\n    position: relative;\n\n    &-header {\n      position: absolute;\n      top: -14px;\n      background: $neutral-color-100;\n      padding: 4px;\n      text-transform: uppercase;\n      letter-spacing: 1px;\n      color: $neutral-color-900;\n    }\n  }\n\n  &__stage + &__stage:before {\n    display: block;\n    content: '';\n    width: 1px;\n    height: 36px;\n    background: #5e6ca03d;\n    position: absolute;\n    left: calc(50% - 1px);\n    top: -37px;\n  }\n\n  &__model-variants {\n    display: flex;\n  }\n\n  &__model-variant {\n    background: white;\n    padding: 12px;\n    width: 200px;\n    border: 2px #788aa7 solid;\n    border-radius: 6px;\n    position: relative;\n    justify-content: space-between;\n    align-items: flex-end;\n    transition: 0.3s ease linear;\n    cursor: pointer;\n\n    &:hover {\n      border-color: #435673;\n    }\n\n    &-servable {\n      position: absolute;\n      left: calc(100% - 5px);\n      top: -14px;\n    }\n\n    &-weight {\n      display: inline-block;\n      position: absolute;\n      text-align: center;\n      font-size: 10px;\n      font-weight: 100;\n      color: #59557f;\n      font-style: italic;\n      line-height: 10px;\n      margin-top: 8px;\n      bottom: -16px;\n      left: calc(50% - 20px);\n      width: 40px;\n    }\n\n    &-model-version {\n      text-transform: uppercase;\n      letter-spacing: 1px;\n      display: flex;\n      font-size: 12px;\n    }\n\n    &-update {\n      width: 100%;\n      border-radius: 50%;\n      position: absolute;\n      left: -11px;\n      top: -12px;\n    }\n  }\n\n  &__model-variant + &__model-variant {\n    margin-left: 12px;\n  }\n\n  &__model-variant + &__model-variant::before {\n    content: '';\n    display: block;\n    width: 12px;\n    position: absolute;\n    top: calc(50% - 1px);\n    left: -14px;\n    height: 1px;\n    background: #5e6ca03d;\n  }\n}\n\n.model-version {\n  &__name {\n    text-overflow: ellipsis;\n    display: block;\n    width: 100%;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n\n  &__version {\n    font-weight: 900;\n  }\n}\n\n.alerts {\n  &-list {\n    list-style: none;\n    padding: 0;\n\n    &__item {\n      border: 1px solid #e6e9ed;\n      padding: 10px 16px 8px;\n      text-transform: uppercase;\n      background-color: #f8f9fb;\n      line-height: 1;\n      margin-bottom: 8px;\n    }\n  }\n}\n\n.navigation {\n  &-button {\n    margin-right: 8px;\n  }\n\n  &-icon {\n    margin: 0;\n  }\n}\n\n.model-variant {\n  &__cell {\n    position: relative;\n    line-height: 18px;\n    margin-right: 2px;\n    width: 18px;\n  }\n\n  &__link {\n    cursor: pointer;\n    text-decoration: underline;\n  }\n\n  &__version {\n    &-new {\n      position: absolute;\n      display: inline-block;\n      left: 6px;\n\n      &--visible {\n        cursor: pointer;\n        display: block;\n      }\n\n      &-icon {\n        height: 16px;\n        width: 16px;\n        background: white;\n        border-radius: 50%;\n        cursor: pointer;\n      }\n    }\n\n    &-text {\n      display: inline-block;\n      width: 100%;\n    }\n  }\n}\n\n@import 'variables';\n\n.menu {\n  position: absolute;\n  border: 1px $neutral-color-700 solid;\n  border-radius: 5px;\n  background: white;\n  opacity: 0;\n  visibility: hidden;\n  overflow: hidden;\n  &__item {\n    color: $neutral-color-500;\n    cursor: pointer;\n    line-height: 20px;\n    padding: 6px 18px;\n    text-transform: uppercase;\n    font-size: 12px;\n    &:hover {\n      color: $neutral-color-900;\n    }\n    &--accent {\n      background: $supportive-color-green-100;\n      color: $supportive-color-green-700;\n    }\n    &--disabled {\n      pointer-events: none;\n      opacity: 0.5;\n    }\n  }\n  &--showed {\n    visibility: visible;\n    opacity: 1;\n  }\n}\n",
                    "styleUrl": "./application-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "serviceFacade",
                        "type": "ServiceStatusesFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "servablesFacade",
                        "type": "ServablesFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "serviceFacade",
                        "type": "ServiceStatusesFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "servablesFacade",
                        "type": "ServablesFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"application\" *ngIf=\"application$ | async as application\">\n  <div class=\"application__header\">\n    <div class=\"application__header-buttons application__header-buttons--right\">\n      <button\n        hs-button\n        kind=\"flat\"\n        color=\"cyan\"\n        [disabled]=\"!isReady(application.status)\"\n        (click)=\"testApplication(application)\"\n      >\n        <hs-icon class=\"hs-button__icon\" type=\"icon-start\"></hs-icon>\n        Test\n      </button>\n      <button\n        hs-button\n        kind=\"flat\"\n        color=\"primary\"\n        (click)=\"editApplication(application)\"\n      >\n        <hs-icon class=\"hs-button__icon\" type=\"icon-edit\"></hs-icon>\n        Edit\n      </button>\n      <button\n        hs-button\n        kind=\"flat\"\n        color=\"warning\"\n        (click)=\"removeApplication(application)\"\n      >\n        <hs-icon class=\"hs-button__icon\" type=\"icon-remove\"></hs-icon>\n        remove\n      </button>\n    </div>\n  </div>\n\n  <div class=\"application__body\">\n    <div class=\"application__signature\">\n      <hs-application-signature\n        [signature]=\"application.signature\"\n      ></hs-application-signature>\n    </div>\n    <div class=\"content-info\">\n      <ul class=\"content-info__list\" *ngIf=\"application.kafkaStreaming?.length\">\n        <li class=\"content-info__list-title\">\n          Kafka Info\n        </li>\n        <li\n          class=\"content-info__list-item\"\n          *ngFor=\"let kafka of application.kafkaStreaming\"\n        >\n          <ol class=\"content-info__sublist\">\n            <li\n              class=\"content-info__sublist-item\"\n              *ngFor=\"let item of kafka | iterateAsArray\"\n            >\n              <span class=\"content-info__sublist-item-title\">{{ item }}</span>\n              <span class=\"content-info__sublist-item-value\"\n                >{{ kafka[item] }}</span\n              >\n            </li>\n          </ol>\n        </li>\n      </ul>\n    </div>\n    <div class=\"application__error\" *ngIf=\"isFailed(application.status)\">\n      <hs-error-message>\n        {{ application.message }}\n      </hs-error-message>\n    </div>\n    <div class=\"application__stages\">\n      <div\n        class=\"application__stage\"\n        *ngFor=\"let stage of application.executionGraph?.stages; let i = index\"\n      >\n        <div class=\"application__stage-header\">Stage {{ i + 1 }}</div>\n        <div class=\"application__model-variants\">\n          <div\n            class=\"application__model-variant\"\n            *ngFor=\"let modelVariant of stage.modelVariants; let j = index\"\n            (click)=\"onClickModelVariant($event, modelVariant)\"\n          >\n            <div\n              class=\"application__model-variant-servable\"\n              *ngIf=\"getServablesByName(modelVariant.servableName) | async as servables\"\n            >\n              <hs-servable-status-icon\n                *ngFor=\"let servable of servables\"\n                [servable]=\"servable | mappedServable\"\n              ></hs-servable-status-icon>\n            </div>\n            <div\n              *ngIf=\"getModelVersionById(modelVariant.modelVersionId) | async as modelVersion\"\n              class=\"application__model-variant-update tooltip\"\n              hsUpdateModelVersion\n              [modelVersion]=\"modelVersion\"\n              (handleClick)=\"updateModelVersionDialog($event, modelVariant)\"\n            >\n              <span hs-tooltip=\"Model has new version\">\n                <hs-icon\n                  type=\"icon-upgrade\"\n                  class=\"icon model-variant__version-new-icon\"\n                >\n                </hs-icon>\n              </span>\n            </div>\n            <div\n              *ngIf=\"getModelVersionById(modelVariant.modelVersionId) | async as modelVersion\"\n              class=\"application__model-variant-model-version model-version\">\n              <span class=\"model-version__name\">\n                {{ modelVersion.model.name }}\n              </span>\n              <span class=\"model-version__version\">\n                v:{{ modelVersion.modelVersion }}\n              </span>\n            </div>\n            <div class=\"application__model-variant-weight\">\n              {{ modelVariant.weight }}%\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-container *ngIf=\"menu$ | async as menu\">\n  <div\n    class=\"menu\"\n    [ngClass]=\"{ 'menu--showed': menu.showed }\"\n    [ngStyle]=\"{ left: menu.left + 'px', top: menu.top + 'px' }\"\n    (mouseleave)=\"onMouseLeave()\"\n  >\n    <ng-container *ngIf=\"menu.context\">\n      <div *ngIf=\"getModelVersionById(menu.context.modelVersionId) | async as modelVersion\">\n        <div\n          class=\"menu__item menu__item--accent\"\n          hsUpdateModelVersion\n          [modelVersion]=\"modelVersion\"\n          (handleClick)=\"updateModelVersionDialog($event, menu.context)\"\n        >\n          update to latest\n        </div>\n        <div\n          class=\"menu__item\"\n          [routerLink]=\"[\n          '/models',\n          modelVersion.model.name,\n          modelVersion.modelVersion\n        ]\"\n        >\n          details\n        </div>\n        <div\n          class=\"menu__item\"\n          [routerLink]=\"[\n          '/models',\n          modelVersion.model.name,\n          modelVersion.modelVersion,\n          'monitoring'\n        ]\"\n        >\n          monitoring\n        </div>\n        <div\n          [ngClass]=\"{\n          'menu__item--disabled': !menu.statuses?.statuses?.visualization\n            ?.supported\n        }\"\n          class=\"menu__item\"\n          [routerLink]=\"[\n          '/models',\n          modelVersion.model.name,\n          modelVersion.modelVersion,\n          'data_projection'\n        ]\"\n        >\n          data projection\n        </div>\n        <div\n          [ngClass]=\"{\n          'menu__item--disabled': !menu.statuses?.statuses?.stat?.supported\n        }\"\n          class=\"menu__item\"\n          [routerLink]=\"[\n          '/models',\n          modelVersion.model.name,\n          modelVersion.modelVersion,\n          'drift_report'\n        ]\"\n        >\n          drift report\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "ApplicationFormComponent",
            "id": "component-ApplicationFormComponent-c58d008ca6b4ae08fa6f13d7dbd9b7f2",
            "file": "src/testing/components/mock-application-form.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-application-form",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Application"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitHandle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Output, Input, Component, EventEmitter } from '@angular/core';\nimport { Application } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-application-form',\n  template: '',\n})\nexport class ApplicationFormComponent {\n  @Output() submitHandle: EventEmitter<any> = new EventEmitter();\n  @Input() application: Application;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ApplicationFormComponent",
            "id": "component-ApplicationFormComponent-cc6fae0e7fabd17eec89609f3fd8d25b-1",
            "file": "src/app/modules/applications/components/forms/application-form/application-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ModelVariantFormService"
                },
                {
                    "name": "ApplicationFormService"
                }
            ],
            "selector": "hs-application-form",
            "styleUrls": [
                "./application-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./application-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Application"
                },
                {
                    "name": "deploymentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "DeploymentConfig"
                },
                {
                    "name": "modelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ModelVersion[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitHandle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "applicationForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addModelVariantToStage",
                    "args": [
                        {
                            "name": "stage",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addStageControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "normalizeStageControlsValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onModelVariantDelete",
                    "args": [
                        {
                            "name": "stage",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "modelVariantIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "modelVariantIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeStage",
                    "args": [
                        {
                            "name": "stageIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "stageIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showRemoveModelVariantIcon",
                    "args": [
                        {
                            "name": "stage",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "stage",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showRemoveStageButton",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { FormArray, FormGroup, AbstractControl } from '@angular/forms';\n\nimport {\n  Application,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport {\n  ApplicationFormService,\n  StageFormData,\n} from './application-form.service';\nimport {\n  ModelVariantFormData,\n  ModelVariantFormService,\n} from '../model-variant-form/model-variant-form.service';\n\n@Component({\n  selector: 'hs-application-form',\n  templateUrl: './application-form.component.html',\n  styleUrls: ['./application-form.component.scss'],\n  providers: [ModelVariantFormService, ApplicationFormService],\n})\nexport class ApplicationFormComponent implements OnInit {\n  @Output() submitHandle: EventEmitter<any> = new EventEmitter();\n  @Input() application: Application;\n  @Input() modelVersions: ModelVersion[];\n  @Input() deploymentConfig: DeploymentConfig;\n\n  public applicationForm: FormGroup;\n\n  constructor(private formService: ApplicationFormService) {}\n\n  get applicationStagesFormArray() {\n    return this.applicationForm.get('stages') as FormArray;\n  }\n\n  get kafkaFormArray() {\n    return this.applicationForm.get('kafkaStreaming') as FormArray;\n  }\n\n  ngOnInit() {\n    this.applicationForm = this.formService.initForm(\n      this.application,\n      this.modelVersions,\n      this.deploymentConfig,\n    );\n  }\n\n  public addStageControl() {\n    this.formService.addStageControl();\n  }\n\n  public addModelVariantToStage(stage: AbstractControl) {\n    this.formService.addModelVariantToStage(stage);\n  }\n\n  public normalizeStageControlsValue() {\n    const stages: StageFormData[] = this.applicationForm.value.stages;\n\n    const toModelVariant = (modelVariant: ModelVariantFormData) => ({\n      modelVersionId: modelVariant.modelVersion.id,\n      weight: Number(modelVariant.weight),\n      deploymentConfigName: modelVariant.deploymentConfigName\n        ? modelVariant.deploymentConfigName\n        : undefined,\n    });\n\n    return stages.map((stage: StageFormData) => ({\n      modelVariants: stage.modelVariants.map(toModelVariant),\n    }));\n  }\n\n  public submit(): void {\n    if (this.applicationForm.invalid) {\n      this.applicationForm.get('applicationName').markAsDirty();\n      return;\n    }\n\n    const formData = {\n      name: this.applicationForm.value.applicationName,\n      kafkaStreaming: this.kafkaFormArray.value || [],\n      executionGraph: {\n        stages: this.normalizeStageControlsValue(),\n      },\n    };\n\n    this.submitHandle.emit(formData);\n  }\n\n  public showRemoveStageButton(): boolean {\n    return this.applicationStagesFormArray.value.length > 1;\n  }\n\n  public removeStage(stageIdx: number) {\n    this.applicationStagesFormArray.removeAt(stageIdx);\n  }\n\n  public showRemoveModelVariantIcon(stage: AbstractControl): boolean {\n    return stage.get('modelVariants').value.length > 1;\n  }\n\n  public onModelVariantDelete(\n    stage: AbstractControl,\n    modelVariantIdx: number,\n  ): void {\n    const modelVariants = stage.get('modelVariants') as FormArray;\n    modelVariants.removeAt(modelVariantIdx);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n@import 'hydro_input.scss';\n\n.application-name {\n  margin-bottom: 30px;\n}\n\n.application-form {\n  height: calc(100% - 36px);\n  overflow: auto;\n}\n\n.application__kafka {\n  display: block;\n  margin-bottom: 20px;\n}\n\n.stages {\n  &__label {\n    font-size: 20px;\n    line-height: 36px;\n  }\n}\n\n.stage {\n  position: relative;\n  margin-bottom: 24px;\n\n  &__header {\n    align-items: center;\n    background-color: $neutral-color-700;\n    color: $neutral-color-100;\n    position: relative;\n    text-align: center;\n  }\n\n  &__name {\n    font-size: 18px;\n    line-height: 36px;\n    padding: 0 8px;\n  }\n\n  &__remove {\n    cursor: pointer;\n    display: inline-block;\n    position: absolute;\n    top: 12px;\n  }\n\n  &__add-model-variant-button {\n    border-radius: 0;\n    color: white;\n    justify-content: center;\n    width: 100%;\n    &:hover {\n      color: white;\n    }\n  }\n}\n\n.services {\n  &__list {\n    background-color: $neutral-color-100;\n  }\n\n  &__item {\n    border-bottom: 1px $neutral-color-300 solid;\n\n    &--isLast {\n      border-bottom: none;\n      margin-bottom: 0;\n    }\n  }\n}\n\n.add-stage-button {\n  display: inline-block;\n  font-size: 14px;\n  margin-bottom: 8px;\n}\n",
                    "styleUrl": "./application-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "ApplicationFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "ApplicationFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "applicationStagesFormArray": {
                    "name": "applicationStagesFormArray",
                    "getSignature": {
                        "name": "applicationStagesFormArray",
                        "type": "",
                        "returnType": "",
                        "line": 34
                    }
                },
                "kafkaFormArray": {
                    "name": "kafkaFormArray",
                    "getSignature": {
                        "name": "kafkaFormArray",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ApplicationFormComponent-1",
            "templateData": "<form class=\"application-form\" [formGroup]=\"applicationForm\" #formElement>\n  <div class=\"application-name\">\n    <hs-input-text\n      label=\"application name\"\n      formControlName=\"applicationName\"\n      name=\"applicationName\"\n      [errors]=\"\n        applicationForm.get('applicationName').dirty &&\n        applicationForm.get('applicationName').errors\n      \"\n    ></hs-input-text>\n  </div>\n  <div formArrayName=\"stages\">\n    <div\n      *ngFor=\"\n        let stage of applicationStagesFormArray.controls;\n        index as stageIdx\n      \"\n      [formGroup]=\"stage\"\n      class=\"stage\"\n    >\n      <div class=\"stage__header\">\n        <span class=\"stage__name\">Stage_{{ stageIdx }}</span>\n        <span\n          class=\"stage__remove\"\n          (click)=\"removeStage(stageIdx)\"\n          *ngIf=\"showRemoveStageButton()\"\n        >\n          <hs-icon\n            type=\"icon-remove\"\n            class=\"icon\"\n            (click)=\"removeStage(stageIdx)\"\n          >\n            remove\n          </hs-icon>\n        </span>\n      </div>\n      <ng-container *ngIf=\"stage.get('modelVariants'); let modelVariants\">\n        <div formArrayName=\"modelVariants\" class=\"services__list\">\n          <div\n            *ngFor=\"\n              let modelVariant of modelVariants.controls;\n              index as modelVariantIdx;\n              last as isLast\n            \"\n          >\n            <div\n              class=\"services__item\"\n              [ngClass]=\"{ 'services__item--isLast': isLast }\"\n            >\n              <hs-model-variant-form\n                [group]=\"modelVariant\"\n                [index]=\"modelVariantIdx\"\n                [showRemoveIcon]=\"showRemoveModelVariantIcon(stage)\"\n                (delete)=\"onModelVariantDelete(stage, $event)\"\n              ></hs-model-variant-form>\n            </div>\n          </div>\n        </div>\n        <button\n          hs-button\n          kind=\"flat\"\n          color=\"primary\"\n          (click)=\"addModelVariantToStage(stage)\"\n          class=\"button button--flat stage__add-model-variant-button\"\n        >\n          add model variant\n        </button>\n        <ng-container *ngIf=\"stage.get('modelVariants').errors; let errors\">\n          <div\n            class=\"error-container\"\n            *ngFor=\"let error of errors | iterateAsArray\"\n          >\n            {{ errors[error] }}\n          </div>\n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n  <button\n    hs-button\n    kind=\"stroked\"\n    (click)=\"addStageControl()\"\n    class=\"add-stage-button\"\n  >\n    add stage\n  </button>\n</form>\n"
        },
        {
            "name": "ApplicationSignatureComponent",
            "id": "component-ApplicationSignatureComponent-a80b67385a5b05a90526cb8f2f80de5f",
            "file": "src/app/modules/applications/components/application-signature/application-signature.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-application-signature",
            "styleUrls": [
                "./application-signature.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./application-signature.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "signature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Signature"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Signature } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-application-signature',\n  templateUrl: './application-signature.component.html',\n  styleUrls: ['./application-signature.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplicationSignatureComponent {\n  @Input() signature: Signature;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.signature {\n  min-width: 240px;\n  max-width: 240px;\n  overflow: auto;\n  padding: 8px;\n  background-color: white;\n  border: 1px $neutral-color-300 solid;\n  border-radius: 4px;\n  max-height: 100%;\n\n  &__header {\n    line-height: 28px;\n  }\n\n  &__title {\n    color: $neutral-color-500;\n    font-family: $font-family-light;\n    text-transform: uppercase;\n    font-size: 10px;\n  }\n\n  &__label {\n    color: $neutral-color-600;\n    font-family: $font-family-light;\n  }\n\n  &__name {\n    color: $neutral-color-600;\n    text-transform: none;\n  }\n\n  &__io {\n    display: flex;\n\n    &-field {\n      &-title {\n        font-size: 10px;\n        font-family: $font-family-light;\n        color: $neutral-color-500;\n        text-transform: uppercase;\n      }\n\n      &-name {\n        color: $neutral-color-600;\n      }\n\n      &-additional-info {\n        font-style: italic;\n        color: $neutral-color-400;\n        font-size: 8px;\n        font-style: $font-family-light;\n        line-height: 10px;\n      }\n\n      &-item {\n        margin-bottom: 4px;\n      }\n    }\n\n    &-separator {\n      margin: 0 12px;\n    }\n  }\n}\n",
                    "styleUrl": "./application-signature.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"signature\" *ngIf=\"signature\">\n  <div class=\"signature__header\">\n    <span class=\"signature__title\">Signature </span>\n  </div>\n  <div class=\"signature__io\">\n    <div class=\"signature__io-field\">\n      <div class=\"signature__io-field-title\">inputs</div>\n      <div\n        class=\"signature__io-field-item\"\n        *ngFor=\"let input of signature.inputs\"\n      >\n        <div class=\"signature__io-field-name\">{{ input.name }}</div>\n        <div class=\"signature__io-field-additional-info\">\n          {{ input.profile }} : {{ input.dtype }}\n        </div>\n      </div>\n    </div>\n    <div class=\"signature__io-separator\"></div>\n    <div class=\"signature__io-field\">\n      <div class=\"signature__io-field-title\">outputs</div>\n      <div\n        class=\"signature__io-field-item\"\n        *ngFor=\"let output of signature.outputs\"\n      >\n        <div class=\"signature__io-field-name\">\n          {{ output.name }}\n        </div>\n        <div class=\"signature__io-field-additional-info\">\n          {{ output.profile }} : {{ output.dtype }}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ApplicationsItemDetailComponent",
            "id": "component-ApplicationsItemDetailComponent-28879fb4ac4e3008870e00e8f83465b8",
            "file": "src/testing/components/mock-application-item-detail.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-applications-item-detail",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-applications-item-detail',\n  template: '',\n})\nexport class ApplicationsItemDetailComponent {\n  @Input() application: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ApplicationsPageComponent",
            "id": "component-ApplicationsPageComponent-512ec9e6ad218c3f66b69a0e14f08a92",
            "file": "src/app/modules/applications/pages/applications-page/applications-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-applications-page",
            "styleUrls": [
                "./applications-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./applications-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allApplications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "applications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application[]>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedApplication$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application>",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "addApplication",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDepConfigs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleBookmark",
                    "args": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "application",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFilter",
                    "args": [
                        {
                            "name": "filterStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSidebarClick",
                    "args": [
                        {
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isButtonEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "someModelVersionIsReleased",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Boolean>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { DialogAddApplicationComponent } from '@app/modules/dialogs/components';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { Application, DeploymentConfig } from '@app/core/data/types';\nimport { RedirectService } from '@app/core/redirect.service';\n\n@Component({\n  selector: 'hs-applications-page',\n  templateUrl: './applications-page.component.html',\n  styleUrls: ['./applications-page.component.scss'],\n})\nexport class ApplicationsPageComponent {\n  allApplications$: Observable<Application[]>;\n  applications$: Observable<Application[]>;\n  selectedApplication$: Observable<Application>;\n\n  constructor(\n    private facade: ApplicationsFacade,\n    private modelsFacade: ModelsFacade,\n    private depConfigsFacade: DeploymentConfigsFacade,\n    private dialog: DialogsService,\n    private router: Router,\n    private redirectService: RedirectService,\n  ) {\n    this.allApplications$ = facade.allApplications();\n    this.selectedApplication$ = facade.selectedApplication();\n    this.applications$ = facade.visibleApplications();\n\n    this.redirectService.redirectToFirst(this.allApplications$, 'applications');\n  }\n\n  isButtonEnabled() {\n    return this.someModelVersionIsReleased().pipe(\n      map(someReleased => someReleased),\n    );\n  }\n\n  someModelVersionIsReleased(): Observable<Boolean> {\n    return this.modelsFacade.someModelVersionIsReleased();\n  }\n\n  getDepConfigs(): Observable<DeploymentConfig[]> {\n    return this.depConfigsFacade.getAll();\n  }\n\n  addApplication(): void {\n    this.dialog.createDialog({\n      component: DialogAddApplicationComponent,\n      styles: { height: '100%' },\n    });\n  }\n\n  handleFilter(filterStr: string): void {\n    this.facade.onFilter(filterStr);\n  }\n\n  handleBookmark(application: Application): void {\n    this.facade.toggleFavorite(application);\n  }\n\n  handleSidebarClick({ name }: Application): void {\n    this.router.navigate([`applications/${name}`]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.applications-page {\n  display: flex;\n  height: 100%;\n  &__button {\n    width: 100%;\n  }\n  &__sidebar {\n    width: 250px;\n    min-width: 250px;\n    overflow: auto;\n  }\n  &__body {\n    width: 100%;\n    overflow: auto;\n  }\n  &__message {\n    padding: 24px;\n    text-align: center;\n    font-size: 24px;\n\n    &-link {\n      color: $primary-color-700;\n    }\n  }\n  &__icon {\n    width: 500px;\n    height: 100%;\n    color: $primary-color-800;\n    opacity: 0.2;\n    position: fixed;\n    right: 12%;\n    max-height: 80vh;\n    top: calc(50% + 36px);\n    transform: translate(50%, -50%) scale(1.1);\n  }\n  &__content {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: 50%;\n    left: 10%;\n    transform: translateY(-50%);\n    &-text {\n      display: flex;\n      flex-direction: column;\n    }\n    &-title {\n      font-family: $font-family-regular;\n      font-size: $title-font-size * 1.5;\n    }\n    &-subtitle {\n      font-size: $base-font-size;\n      color: $label-color;\n      margin-top: 24px;\n    }\n    &-btn {\n      width: 36%;\n      padding: 11px;\n      font-size: 16px;\n      margin-top: 45px;\n      &[disabled] {\n        background-color: $primary-color-700;\n        color: $neutral-color-100;;\n        opacity: 0.3;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./applications-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"allApplications$ | async as applications\" class=\"applications-page\">\n  <div *ngIf=\"applications.length\" class=\"applications-page__sidebar\">\n    <hs-sidebar\n      [sidebarData]=\"applications$ | async\"\n      [selectedItem]=\"selectedApplication$ | async\"\n      (filtered)=\"handleFilter($event)\"\n      (bookmarked)=\"handleBookmark($event)\"\n      (clicked)=\"handleSidebarClick($event)\"\n    >\n      <button\n        class=\"button applications-page__button\"\n        hs-button\n        kind=\"flat\"\n        color=\"primary\"\n        (click)=\"addApplication()\"\n      >\n      create application\n      </button>\n    </hs-sidebar>\n  </div>\n  <div class=\"applications-page__body\">\n    <router-outlet></router-outlet>\n    <ng-container *ngIf=\"!applications.length\">\n      <hs-icon class=\"applications-page__icon\" type=\"icon-applications\"></hs-icon>\n      <div class=\"applications-page__content\">\n        <div class=\"applications-page__content-text\">\n          <div class=\"applications-page__content-title\">\n            Create an application\n          </div>\n          <div class=\"applications-page__content-subtitle\">\n            The Application handles monitoring of your models and can perform A/B traffic splits.\n          </div>\n        </div>\n        <div>\n          <ng-container\n            *ngIf=\"!(isButtonEnabled() | async); then wrapper; else button\"\n          >\n          </ng-container>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template #wrapper>\n  <div\n    hsTippy\n    [tippyOptions]=\"{\n      content: 'There are no released model versions',\n      arrow: false,\n      theme: 'basic',\n      placement: 'bottom-start',\n      delay: 100\n    }\"\n  >\n    <ng-container *ngTemplateOutlet=\"button; context: { disable: true }\">\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template\n  #button\n  let-disable=\"disable\"\n>\n    <button\n      class=\"applications-page__content-btn\"\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      (click)=\"addApplication()\"\n      [disabled]=\"disable\"\n    >\n      create application\n    </button>\n</ng-template>\n"
        },
        {
            "name": "ApplicationStatusComponent",
            "id": "component-ApplicationStatusComponent-bd345f41ca6a9806de372b10bc4d34b1",
            "file": "src/app/shared/components/application-status/application-status.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-application-status",
            "styleUrls": [
                "./application-status.component.scss"
            ],
            "styles": [],
            "template": "<hs-icon [ngClass]=\"classMap\" [type]=\"type\"></hs-icon>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "defaultValue": "ApplicationStatus.Undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ApplicationStatus"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ApplicationStatus } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-application-status',\n  template: '<hs-icon [ngClass]=\"classMap\" [type]=\"type\"></hs-icon>',\n  styleUrls: ['./application-status.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplicationStatusComponent {\n  @Input() status: ApplicationStatus = ApplicationStatus.Undefined;\n\n  get type(): string {\n    switch (this.status) {\n      case ApplicationStatus.Ready:\n        return 'circle-check';\n      case ApplicationStatus.Failed:\n        return 'circle-x';\n      case ApplicationStatus.Assembling:\n        return 'clock';\n    }\n  }\n\n  get classMap() {\n    const rootClass = 'app-status';\n    return {\n      [rootClass]: true,\n      [`${rootClass}--released`]: this.status === ApplicationStatus.Ready,\n      [`${rootClass}--assembling`]:\n        this.status === ApplicationStatus.Assembling,\n      [`${rootClass}--failed`]: this.status === ApplicationStatus.Failed,\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.app-status {\n  width: 18px;\n  height: 18px;\n\n  &--released {\n    color: $supportive-color-green-700;\n  }\n\n  &--failed {\n    color: $supportive-color-red-700;\n  }\n  &--assembling {\n    color: $primary-color-700;\n  }\n}",
                    "styleUrl": "./application-status.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "type": {
                    "name": "type",
                    "getSignature": {
                        "name": "type",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                },
                "classMap": {
                    "name": "classMap",
                    "getSignature": {
                        "name": "classMap",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            }
        },
        {
            "name": "BatchDetailsComponent",
            "id": "component-BatchDetailsComponent-985b6c21127f26ae923add0460dfd77b",
            "file": "src/app/modules/monitoring/components/batch-details/batch-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "BatchDetailsService"
                }
            ],
            "selector": "hs-batch-details",
            "styleUrls": [
                "./batch-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./batch-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "showCheckDetails",
                    "defaultValue": "new EventEmitter<\n    CheckId\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<CheckId>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "checkCollection$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CheckCollection>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "checks$",
                    "defaultValue": "of([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Check[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFilterChange",
                    "args": [
                        {
                            "name": "s",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "s",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showDetails",
                    "args": [
                        {
                            "name": "check",
                            "type": "Check",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "check",
                            "type": "Check",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Observable, of } from 'rxjs';\nimport {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { BatchDetailsService } from './batch-details.service';\nimport { CheckCollection, Check, CheckId } from '../../models';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-batch-details',\n  templateUrl: './batch-details.component.html',\n  styleUrls: ['./batch-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [BatchDetailsService],\n})\nexport class BatchDetailsComponent implements OnInit {\n  @Output() showCheckDetails: EventEmitter<CheckId> = new EventEmitter<\n    CheckId\n  >();\n\n  checks$: Observable<Check[]> = of([]);\n  checkCollection$: Observable<CheckCollection>;\n  modelVersion$: Observable<ModelVersion>;\n\n  constructor(private facade: BatchDetailsService) {}\n\n  ngOnInit() {\n    this.checks$ = this.facade.getVisibleChecks();\n    this.checkCollection$ = this.facade.getCheckCollection();\n    this.modelVersion$ = this.facade.getModelVersion();\n  }\n\n  onFilterChange(s) {\n    this.facade.setFilter(s);\n  }\n\n  showDetails(check: Check) {\n    this.showCheckDetails.next(check.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.agg-details {\n  background: $neutral-color-100;\n  border: 1px $neutral-color-200 solid;\n  border-radius: 4px;\n  display: flex;\n  &__sidebar {\n    min-width: 196px;\n    width: 196px;\n    border-right: 1px $neutral-color-200 solid;\n  }\n  &__body {\n    width: 100%;\n    background: white;\n  }\n  &__checks {\n  }\n  &__check {\n    padding: 12px 24px;\n  }\n}\n\n.details {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  width: 720px;\n  background: white;\n  z-index: 1;\n  padding: 24px;\n  overflow: auto;\n}\n",
                    "styleUrl": "./batch-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "BatchDetailsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "BatchDetailsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"agg-details\">\n  <section class=\"agg-details__sidebar\">\n    <ng-container *ngIf=\"checkCollection$ | async as checkCollection\">\n      <hs-aggregation-details-sidebar\n        [checkCollection]=\"checkCollection\"\n      ></hs-aggregation-details-sidebar>\n      <hs-requests-filter (filterChanged)=\"onFilterChange($event)\">\n      </hs-requests-filter>\n    </ng-container>\n  </section>\n  <section class=\"agg-details__body\">\n    <hs-requests\n      [requests]=\"checks$ | async\"\n      (checkClicked)=\"showDetails($event)\"\n    ></hs-requests>\n  </section>\n</div>\n"
        },
        {
            "name": "BatchLatencyComponent",
            "id": "component-BatchLatencyComponent-3e122beb7460cf082ddc8d0918070c89",
            "file": "src/app/modules/monitoring/components/batch-latency/batch-latency.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-batch-latency",
            "styleUrls": [
                "./batch-latency.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./batch-latency.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "requests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartConfig",
                    "defaultValue": "{\n    series: [\n      { name: 'latency', color: this.colorPalette.getPalette()[0], data: [] },\n    ],\n    size: {\n      height: 180,\n      margins: {\n        left: 24,\n        right: 24,\n        top: 4,\n        bottom: 18,\n      },\n    },\n    plotBands: [],\n    area: true,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { ColorPaletteService } from '@app/core/color-palette.service';\nimport { CheckCollection, ChartConfig } from '../../models';\n\n@Component({\n  selector: 'hs-batch-latency',\n  templateUrl: './batch-latency.component.html',\n  styleUrls: ['./batch-latency.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BatchLatencyComponent {\n  @Input() set requests(reqs: CheckCollection) {\n    const data: number[] = reqs.getLatency();\n\n    this.chartConfig = {\n      ...this.chartConfig,\n      series: [\n        { name: 'latency', color: this.colorPalette.getPalette()[0], data },\n      ],\n    };\n  }\n\n  chartConfig: ChartConfig = {\n    series: [\n      { name: 'latency', color: this.colorPalette.getPalette()[0], data: [] },\n    ],\n    size: {\n      height: 180,\n      margins: {\n        left: 24,\n        right: 24,\n        top: 4,\n        bottom: 18,\n      },\n    },\n    plotBands: [],\n    area: true,\n    name: '',\n  };\n\n  constructor(private colorPalette: ColorPaletteService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.batch-latency {\n  background: white;\n  border: 1px solid $neutral-color-200;\n  border-radius: 4px;\n  padding: 24px;\n}\n",
                    "styleUrl": "./batch-latency.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "requests": {
                    "name": "requests",
                    "setSignature": {
                        "name": "requests",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "reqs",
                                "type": "CheckCollection",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 19,
                        "jsdoctags": [
                            {
                                "name": "reqs",
                                "type": "CheckCollection",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"batch-latency\">\n  <hs-check-chart-v2 [config]=\"chartConfig\"></hs-check-chart-v2>\n</div>\n"
        },
        {
            "name": "BatchMetricsComponent",
            "id": "component-BatchMetricsComponent-774616f2fc702d8157ef0cb3791f8c56",
            "file": "src/testing/components/mock-batch-metrics.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-batch-metrics",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-batch-metrics',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BatchMetricsComponent {\n  @Input() aggregation: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "BatchMetricsComponent",
            "id": "component-BatchMetricsComponent-31009a96fc0b8e11b957e68132be7518-1",
            "file": "src/app/modules/monitoring/containers/batch-metrics/batch-metrics.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-batch-metrics",
            "styleUrls": [
                "./batch-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./batch-metrics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Aggregation"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "checkStatus",
                    "args": [
                        {
                            "name": "check",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BatchMetricCheckStatus",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "check",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Aggregation } from '../../models';\n\ntype BatchMetricCheckStatus = 'success' | 'fail' | 'unknown';\n\n@Component({\n  selector: 'hs-batch-metrics',\n  templateUrl: './batch-metrics.component.html',\n  styleUrls: ['./batch-metrics.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BatchMetricsComponent {\n  @Input() aggregation: Aggregation;\n\n  get batchesNames() {\n    const names = new Set([]);\n    const batch = this.aggregation.batchesChecks;\n    if (batch !== undefined) {\n      const firstFeature = Object.values(batch)[0];\n      Object.keys(firstFeature).forEach(n => {\n        names.add(n);\n      });\n    }\n\n    return names.keys();\n  }\n\n  checkStatus(check: {\n    checked: number;\n    passed: number;\n  }): BatchMetricCheckStatus {\n    if (check.checked === 0) {\n      return 'unknown';\n    }\n\n    return check.checked === check.passed ? 'success' : 'fail';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.batch-metrics {\n  background: white;\n  border-radius: 4px;\n  border: 1px $neutral-color-200 solid;\n  margin-bottom: 12px;\n  padding: 12px;\n  &__body {\n    overflow: auto;\n  }\n  &__table {\n    width: 100%;\n    border-collapse: collapse;\n    overflow: auto;\n    &-cell {\n      border: 1px $neutral-color-200 solid;\n      color: $neutral-color-600;\n      padding: 4px;\n    }\n    &-label {\n      color: $neutral-color-900;\n      font-family: $font-family-bold;\n    }\n    &-result {\n      text-align: center;\n      &--success {\n        color: $supportive-color-green-600;\n      }\n      &--fail {\n        color: $supportive-color-red-600;\n      }\n    }\n  }\n  &__label {\n    font-family: $font-family-bold;\n    color: $neutral-color-800;\n    margin-bottom: 12px;\n  }\n}\n\n.check {\n  &__icon {\n    width: 18px;\n    height: 18px;\n    &--success {\n      color: $supportive-color-green-500;\n    }\n    &--fail {\n      color: $supportive-color-red-500;\n    }\n  }\n}\n",
                    "styleUrl": "./batch-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "batchesNames": {
                    "name": "batchesNames",
                    "getSignature": {
                        "name": "batchesNames",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BatchMetricsComponent-1",
            "templateData": "<section class=\"batch-metrics\" *ngIf=\"aggregation\">\n  <header>\n    <div class=\"batch-metrics__label\">Batch metrics</div>\n  </header>\n  <div class=\"batch-metrics__body\">\n    <table class=\"batch-metrics__table\">\n      <tr class=\"batch-metrics__table-row\">\n        <td class=\"batch-metrics__table-cell\">Metric name</td>\n        <td\n          class=\"batch-metrics__table-cell\"\n          *ngFor=\"let feature of aggregation.batchesChecks | keyvalue\"\n        >\n          {{ feature.key }}\n        </td>\n      </tr>\n      <tr\n        class=\"batch-metrics__table-row\"\n        *ngFor=\"let batchName of batchesNames\"\n      >\n        <td class=\"batch-metrics__table-cell batch-metrics__table-label\">\n          {{ batchName }}\n        </td>\n        <td\n          class=\"batch-metrics__table-cell batch-metrics__table-result\"\n          *ngFor=\"let feature of aggregation.batchesChecks | keyvalue\"\n        >\n          <div [ngSwitch]=\"checkStatus(feature.value[batchName])\">\n            <hs-icon\n              class=\"check__icon check__icon--success\"\n              *ngSwitchCase=\"'success'\"\n              type=\"icon-check-success\"\n            ></hs-icon>\n            <hs-icon\n              *ngSwitchCase=\"'fail'\"\n              class=\"check__icon check__icon--fail\"\n              type=\"icon-cancel\"\n            ></hs-icon>\n            <span *ngSwitchDefault>n/a</span>\n          </div>\n        </td>\n      </tr>\n    </table>\n  </div>\n</section>\n"
        },
        {
            "name": "BivariateReportComponent",
            "id": "component-BivariateReportComponent-338f3588e0a2002418e65a2ddd60b5c4",
            "file": "src/app/modules/stat/containers/bivariate-report/bivariate-report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-bivariate-report",
            "styleUrls": [
                "./bivariate-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./bivariate-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bivariateReports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bivariateReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BivariateReport",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "hoveredItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeatmapData",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "productionHeatmapConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeatmapConfig",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "reports",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BivariateReport[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "tooltipEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltipEl', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "trainingHeatmapConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeatmapConfig",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSelectedBivariateReport",
                    "args": [
                        {
                            "name": "report",
                            "type": "BivariateReport",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "report",
                            "type": "BivariateReport",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleHoverItem",
                    "args": [
                        {
                            "name": "d",
                            "type": "HeatmapData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "HeatmapData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\nimport { BivariateReport, HeatmapConfig, HeatmapData } from '../../models';\nimport { toHeatmapData } from '../../utils/to-heatmap-data';\n\n@Component({\n  selector: 'hs-bivariate-report',\n  templateUrl: './bivariate-report.component.html',\n  styleUrls: ['./bivariate-report.component.scss'],\n})\nexport class BivariateReportComponent {\n  @Input() set bivariateReports(reports: BivariateReport[]) {\n    this.productionHeatmapConfig = undefined;\n    this.trainingHeatmapConfig = undefined;\n\n    if (this.bivariateReport) {\n      const biReport = reports.find(\n        r => r.feature_2 === this.bivariateReport.feature_2\n      );\n      if (biReport) {\n        this.changeSelectedBivariateReport(biReport);\n      }\n    }\n\n    this.reports = reports;\n    if (this.bivariateReport === undefined && this.reports.length) {\n      this.changeSelectedBivariateReport(this.reports[0]);\n    }\n  }\n\n  @ViewChild('tooltipEl', { read: ElementRef, static: true })\n  tooltipEl: ElementRef;\n\n  reports: BivariateReport[] = [];\n  bivariateReport: BivariateReport;\n  productionHeatmapConfig: HeatmapConfig;\n  trainingHeatmapConfig: HeatmapConfig;\n\n  hoveredItem: HeatmapData;\n  tooltip: {\n    xAxis: string;\n    xValue: string;\n    yAxis: string;\n    yValue: string;\n    productionValue: number;\n    trainingValue: number;\n    left: number;\n    top: number;\n  };\n\n  constructor() {}\n\n  changeSelectedBivariateReport(report: BivariateReport): void {\n    this.bivariateReport = report;\n    if (report) {\n      const xAxisName = this.bivariateReport.production_heatmap.x_axis_name;\n      const yAxisName = this.bivariateReport.production_heatmap.y_axis_name;\n\n      this.productionHeatmapConfig = {\n        title: 'Production',\n        xAxisName,\n        yAxisName,\n        xLabels: this.bivariateReport.production_heatmap.x,\n        yLabels: this.bivariateReport.production_heatmap.y,\n        data: toHeatmapData(\n          this.bivariateReport.production_heatmap.x,\n          this.bivariateReport.production_heatmap.y,\n          this.bivariateReport.production_heatmap.density\n        ),\n      };\n\n      this.trainingHeatmapConfig = {\n        title: 'Training',\n        xAxisName,\n        yAxisName,\n        xLabels: this.bivariateReport.training_heatmap.x,\n        yLabels: this.bivariateReport.training_heatmap.y,\n        data: toHeatmapData(\n          this.bivariateReport.training_heatmap.x,\n          this.bivariateReport.training_heatmap.y,\n          this.bivariateReport.training_heatmap.density\n        ),\n      };\n    }\n  }\n\n  handleHoverItem(d: HeatmapData): void {\n    this.hoveredItem = d;\n\n    if (d) {\n      const { offsetX, offsetY } = window.event as MouseEvent;\n      const yIndex = this.productionHeatmapConfig.yLabels.indexOf(d.y);\n      const xIndex = this.productionHeatmapConfig.xLabels.indexOf(d.x);\n\n      this.tooltip = {\n        xAxis: this.bivariateReport.production_heatmap.x_axis_name,\n        xValue: d.x,\n        yAxis: this.bivariateReport.production_heatmap.y_axis_name,\n        yValue: d.y,\n        productionValue: this.bivariateReport.production_heatmap.density[\n          yIndex\n        ][xIndex],\n        trainingValue: this.bivariateReport.training_heatmap.density[yIndex][\n          xIndex\n        ],\n        top: offsetY + 12,\n        left: offsetX + 12,\n      };\n    } else {\n      this.tooltip = undefined;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n$production-color: rgb(124, 181, 236);\n$training-color: rgb(255, 175, 110);\n\n.bivarite-report {\n  &__select {\n    width: 320px;\n  }\n  &__title {\n    font-size: 16px;\n    font-family: $font-family-bold;\n  }\n  &__tooltip {\n    position: absolute;\n    border: 2px $neutral-color-200 solid;\n    background: white;\n    padding: 12px;\n    transition: 0.3s all ease;\n    z-index: 999;\n    & > table {\n      color: $neutral-color-800;\n      tr {\n      }\n      td {\n        padding: 0px 8px;\n        &:first-child {\n          //font-family: $font-family-bold;\n          text-transform: capitalize;\n        }\n        &:nth-child(2) {\n          text-align: right;\n          color: $neutral-color-800;\n        }\n      }\n    }\n    &-label {\n      font-family: $font-family-bold;\n      &--prod {\n        color: $production-color;\n      }\n      &--train {\n        color: $training-color;\n      }\n    }\n    &-value {\n      color: $neutral-color-800;\n      font-family: $font-family-bold;\n    }\n  }\n  &__header {\n    margin-bottom: 24px;\n  }\n  &__heatmap + &__heatmap {\n    margin-top: 24px;\n  }\n  &__heatmaps {\n    width: 100%;\n  }\n  &__body {\n    position: relative;\n\n    display: flex;\n  }\n  &__legend {\n    width: 48px;\n  }\n}\n",
                    "styleUrl": "./bivariate-report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 48
            },
            "accessors": {
                "bivariateReports": {
                    "name": "bivariateReports",
                    "setSignature": {
                        "name": "bivariateReports",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "reports",
                                "type": "BivariateReport[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 11,
                        "jsdoctags": [
                            {
                                "name": "reports",
                                "type": "BivariateReport[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"bivarite-report\">\n  <div class=\"bivarite-report__title\">Output feature relationship report</div>\n  <ng-container *ngIf=\"reports && reports.length\">\n    <div class=\"bivarite-report__header\">\n      <div class=\"bivarite-report__select\">\n        <mdl-select\n          label=\"Select output feature\"\n          [(ngModel)]=\"bivariateReport\"\n          (change)=\"changeSelectedBivariateReport($event)\"\n        >\n          <mdl-option *ngFor=\"let biReport of reports\" [value]=\"biReport\"\n            >{{ biReport.feature_2 }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"bivariateReport\">\n      <div class=\"bivarite-report__body\">\n        <div class=\"bivarite-report__heatmaps\">\n          <div class=\"bivarite-report__heatmap\">\n            <hs-heatmap\n              *ngIf=\"productionHeatmapConfig\"\n              (hoveredItem)=\"handleHoverItem($event)\"\n              [config]=\"productionHeatmapConfig\"\n            ></hs-heatmap>\n          </div>\n          <div class=\"bivarite-report__heatmap\">\n            <hs-heatmap\n              *ngIf=\"trainingHeatmapConfig\"\n              (hoveredItem)=\"handleHoverItem($event)\"\n              [config]=\"trainingHeatmapConfig\"\n            ></hs-heatmap>\n          </div>\n        </div>\n        <div\n          class=\"bivarite-report__tooltip\"\n          *ngIf=\"tooltip\"\n          [ngStyle]=\"{ left: tooltip.left + 'px', top: tooltip.top + 'px' }\"\n        >\n          <table>\n            <tr>\n              <td>{{ tooltip.xAxis }}</td>\n              <td>{{ tooltip.xValue }}</td>\n            </tr>\n            <tr>\n              <td>{{ tooltip.yAxis }}</td>\n              <td>{{ tooltip.yValue }}</td>\n            </tr>\n            <tr>\n              <td\n                class=\"bivarite-report__tooltip-label bivarite-report__tooltip-label--prod\"\n              >\n                Production\n              </td>\n              <td class=\"bivarite-report__tooltip-value\">\n                {{ tooltip.productionValue }}\n              </td>\n            </tr>\n            <tr>\n              <td\n                class=\"bivarite-report__tooltip-label bivarite-report__tooltip-label--train\"\n              >\n                Training\n              </td>\n              <td class=\"bivarite-report__tooltip-value\">\n                {{ tooltip.trainingValue }}\n              </td>\n            </tr>\n          </table>\n        </div>\n        <div class=\"bivarite-report__legend\">\n          <hs-bivariate-report-legend></hs-bivariate-report-legend>\n        </div>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "BivariateReportLegendComponent",
            "id": "component-BivariateReportLegendComponent-263e7f470a23212d8ce4f5ca0f7a447f",
            "file": "src/app/modules/stat/components/bivariate-report-legend/bivariate-report-legend.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-bivariate-report-legend",
            "styleUrls": [
                "./bivariate-report-legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "bivariate-report-legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anchorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anchor', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  AfterViewInit,\n} from '@angular/core';\nimport { ViewChild, ElementRef } from '@angular/core';\nimport * as d3 from 'd3';\nimport { scale as coldWarmScale } from '../heatmap/coldwarm-color';\n\n@Component({\n  selector: 'hs-bivariate-report-legend',\n  templateUrl: 'bivariate-report-legend.component.html',\n  styleUrls: ['./bivariate-report-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BivariateReportLegendComponent implements AfterViewInit {\n  @ViewChild('anchor', { read: ElementRef, static: true })\n  anchorElement: ElementRef;\n\n  ngAfterViewInit() {\n    const colorScale = coldWarmScale;\n    const legendHeight = 260;\n    const legendWidth = 260;\n    const margin = { top: 10, right: 20, bottom: 10, left: 4 };\n\n    const viewWidth = legendWidth - margin.right - margin.left;\n    const viewHeight = legendHeight - margin.top - margin.bottom;\n\n    const canvas = d3\n      .select(this.anchorElement.nativeElement)\n      .style('height', legendHeight + 'px')\n      .style('width', legendWidth + 'px')\n      .style('position', 'relative')\n      .append('canvas')\n      .attr('class', 'legend')\n      .attr('height', 1)\n      .attr('width', viewWidth)\n      .style('height', 24 + 'px')\n      .style('width', viewWidth + 'px')\n      .style('border', '1px solid #000')\n      .style('position', 'absolute')\n      .style('transform', 'rotate(90deg) translate(12px, -24px)')\n      .style('transform-origin', '10px 10px')\n      .node();\n\n    const ctx = canvas.getContext('2d');\n\n    const legendScale = d3.scaleLinear().range([1, viewHeight]).domain([1, 0]);\n\n    const image = ctx.createImageData(viewWidth, 1);\n    d3.range(viewHeight).forEach(i => {\n      const { r, g, b } = d3.rgb(colorScale(legendScale.invert(i)));\n      image.data[4 * i] = r;\n      image.data[4 * i + 1] = g;\n      image.data[4 * i + 2] = b;\n      image.data[4 * i + 3] = 255;\n    });\n    ctx.putImageData(image, 0, 0);\n\n    const legendAxis = d3\n      .axisLeft(legendScale)\n      .scale(d3.scaleLinear().range([0, 234]).domain([1, 0]))\n      .tickSize(4)\n      .ticks(8);\n\n    const svg = d3\n      .select(this.anchorElement.nativeElement)\n      .append('svg')\n      .attr('height', 280 + 'px')\n      .attr('width', viewWidth + 8 + 'px')\n      .style('position', 'absolute');\n\n    svg\n      .append('g')\n      .attr('class', 'axis')\n      .style('transform', `translate(21px, 12px)`)\n      .call(legendAxis)\n      .select('.domain')\n      .remove();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.bivariate-report-legend__title {\n  color: $neutral-color-700;\n  font-family: $font-family-light;\n  text-transform: capitalize;\n}\n",
                    "styleUrl": "./bivariate-report-legend.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"bivarite-report-legend\">\n  <div class=\"bivariate-report-legend__title\">density</div>\n  <div #anchor></div>\n</div>\n"
        },
        {
            "name": "BuildInformationDialogComponent",
            "id": "component-BuildInformationDialogComponent-8df4e478678493a582fcbba83a13f2a6",
            "file": "src/app/modules/dialogs/components/dialog-build-information/build-information-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./build-information-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./build-information-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buildInfo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "uiBI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiBuildInfo",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BuildInformationService } from '@app/core/build-information.service';\nimport {\n  UiBuildInfo,\n  UiBuildInfoService,\n} from '@app/core/ui-build-info.service';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  templateUrl: './build-information-dialog.component.html',\n  styleUrls: ['./build-information-dialog.component.scss'],\n})\nexport class BuildInformationDialogComponent implements OnInit {\n  buildInfo$: Observable<any>;\n  uiBI: UiBuildInfo;\n\n  constructor(\n    private uiBuildInfo: UiBuildInfoService,\n    private buildInfo: BuildInformationService,\n    private dialog: DialogsService,\n  ) {\n    this.uiBI = uiBuildInfo.config;\n  }\n\n  ngOnInit() {\n    this.buildInfo$ = this.buildInfo.getBuildInfo();\n  }\n\n  onClose(): void {\n    this.dialog.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.build-info {\n  &__title {\n    text-transform: uppercase;\n    text-align: center;\n    font-size: 14px;\n    letter-spacing: 1px;\n    color: $neutral-color-1000;\n    margin-bottom: 24px;\n  }\n\n  &__card {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n  }\n\n  &__footer {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 18px;\n  }\n\n  &__data {\n    display: flex;\n    justify-content: flex-start;\n\n    &-version,\n    &-commit {\n      color: $neutral-color-700;\n    }\n    &-version {\n      margin-right: 20px;\n    }\n  }\n\n  &__buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n}\n\n\n.service {\n  display: flex;\n  justify-content: space-around;\n  width: 49%;\n  margin-bottom: 2%;\n  border-top: 3px solid #73aae0;\n\n  &__header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 12px;\n  }\n\n  &__chip {\n    background-color: $primary-color-100;\n  }\n\n  &__title {\n    color: $neutral-color-1000;\n    text-transform: uppercase;\n    font-family: $font-family-bold;\n  }\n\n  &__icons {\n    flex-grow: 0.16;\n  }\n\n  &__icon {\n    width: 22px;\n    height: 22px;\n\n    &--available {\n      color: $supportive-color-green-600;\n    }\n\n    &--failed {\n      color: $supportive-color-red-600;\n    }\n\n    &--unknown {\n      color: $primary-color-500;\n    }\n  }\n\n  &__text {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    color: #000;\n    padding: 5px 16px;\n\n    &-key {\n      font-family: $font-family-medium;\n      color: $neutral-color-900;\n    }\n\n    &-commit {\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n    }\n  }\n\n  &__footer {\n    display: flex;\n    align-items: center;\n    height: 45px;\n    padding: 0 12px;\n    margin: 15px 0 5px;\n\n    mdl-chip {\n      margin-right: 12px;\n    }\n  }\n}\n",
                    "styleUrl": "./build-information-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "uiBuildInfo",
                        "type": "UiBuildInfoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "uiBuildInfo",
                        "type": "UiBuildInfoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"build-info\">\n  <div class=\"build-info__title\">Build information</div>\n  <div class=\"build-info__card\">\n    <mdl-card\n      class=\"service\"\n      *ngFor=\"let serviceInfo of buildInfo$ | async | keyvalue\"\n      mdl-shadow=\"3\"\n    >\n      <div class=\"service__header\">\n        <div class=\"service__icons\">\n          <div\n            [ngSwitch]=\"serviceInfo.value.status\"\n            [ngClass]=\"{\n              'service__icon--available':\n                serviceInfo.value.status === 'Available',\n              'service__icon--failed':\n                serviceInfo.value.status === 'Failed' ||\n                serviceInfo.value.status === 'Closed for OSS',\n              'service__icon--unknown': serviceInfo.value.status === 'Unknown'\n            }\"\n          >\n            <hs-icon\n              *ngSwitchCase=\"'Available'\"\n              class=\"service__icon\"\n              type=\"circle-check\"\n            >\n            </hs-icon>\n            <hs-icon\n              *ngSwitchCase=\"'Failed'\"\n              class=\"service__icon\"\n              type=\"circle-x\"\n            >\n            </hs-icon>\n            <hs-icon\n              *ngSwitchCase=\"'Unknown'\"\n              class=\"service__icon\"\n              type=\"help\"\n            >\n            </hs-icon>\n            <hs-icon\n              *ngSwitchCase=\"'Closed for OSS'\"\n              class=\"service__icon\"\n              type=\"circle-x\"\n            >\n            </hs-icon>\n          </div>\n        </div>\n        <h5 class=\"service__title\" mdl-card-subtitle-text>\n          {{ serviceInfo.value.name || serviceInfo.key }}\n        </h5>\n        <mdl-chip\n          *ngIf=\"serviceInfo.value.version\"\n          class=\"service__chip\"\n          mdl-label=\"v. {{\n            serviceInfo.value.version.length > 5\n              ? (serviceInfo.value.version | slice: 0:4) + '...'\n              : serviceInfo.value.version\n          }}\"\n        >\n        </mdl-chip>\n      </div>\n      <div *ngIf=\"serviceInfo.value.status === 'Available'\">\n        <mdl-card-supporting-text *ngIf=\"serviceInfo.value.gitCurrentBranch\" class=\"service__text\">\n          <div class=\"service__text-key\">Git current branch</div>\n          <div class=\"service__text-value\">\n            {{ serviceInfo.value.gitCurrentBranch }}\n          </div>\n        </mdl-card-supporting-text>\n\n        <mdl-card-supporting-text *ngIf=\"serviceInfo.value.gitCurrentTags\" class=\"service__text\">\n          <div class=\"service__text-key\">Git current tags</div>\n          <div class=\"service__text-value\">\n            {{ serviceInfo.value.gitCurrentTags &&\n          serviceInfo.value.gitCurrentTags.length > 0 ?\n            serviceInfo.value.gitCurrentTags : '-' }}\n          </div>\n        </mdl-card-supporting-text>\n\n        <mdl-card-supporting-text *ngIf=\"serviceInfo.value.gitHeadCommit\" class=\"service__text\">\n          <div class=\"service__text-key\">Git head commit</div>\n          <div class=\"service__text-value service__text-commit\">\n            {{ serviceInfo.value.gitHeadCommit }}\n          </div>\n        </mdl-card-supporting-text>\n\n        <div class=\"service__footer\">\n          <mdl-chip\n            class=\"service__chip\"\n            *ngIf=\"serviceInfo.value.scalaVersion\"\n            mdl-label=\"scala version: {{ serviceInfo.value.scalaVersion }}\"\n          >\n          </mdl-chip>\n          <mdl-chip\n            class=\"service__chip\"\n            *ngIf=\"serviceInfo.value.sbtVersion\"\n            mdl-label=\"sbt version: {{ serviceInfo.value.sbtVersion }}\"\n          >\n          </mdl-chip>\n          <mdl-chip\n            class=\"service__chip\"\n            *ngIf=\"serviceInfo.value.pythonVersion\"\n            mdl-label=\"python version: {{ serviceInfo.value.pythonVersion }}\"\n          >\n          </mdl-chip>\n        </div>\n      </div>\n    </mdl-card>\n  </div>\n  <div class=\"build-info__footer\">\n    <div class=\"build-info__data\">\n      <div class=\"build-info__data-version\">UI: {{uiBI.version}}</div>\n      <div class=\"build-info__data-commit\">Commit: {{(uiBI.gitHeadCommit | slice: 0:5) + '..'}}</div>\n    </div>\n    <div class=\"build-info__buttons\">\n      <button hs-button hsAutofocused (click)=\"onClose()\">close</button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-79a7be05ab1c27f4bb990a1c1f80f3d8",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-button",
            "styleUrls": [
                "./button.scss"
            ],
            "styles": [],
            "template": "<button   hs-button\n   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [disabled]=\"disabled\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"base\" | \"primary\" | \"accent\" | \"warning\" | \"cyan\""
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean"
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"base\" | \"flat\" | \"stroked\""
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'hs-button',\n  template: ` <button\n    hs-button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [disabled]=\"disabled\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.scss'],\n})\nexport default class ButtonComponent {\n  @Input()\n  kind: 'base' | 'flat' | 'stroked';\n\n  @Input()\n  disabled = false;\n\n  @Input()\n  color: 'base' | 'primary' | 'accent' | 'warning' | 'cyan';\n\n  @Input()\n  label = 'Button';\n\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    return [\n      'hs-button',\n      `hs-button--${this.kind}`,\n      `hs-button--${this.kind}-${this.color}`,\n    ];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.hs-button {\n  background: transparent;\n  border: none;\n  border-radius: 3px;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 6px 12px;\n  text-transform: capitalize;\n  transition: 0.3s color cubic-bezier(0.075, 0.82, 0.165, 1);\n  cursor: pointer;\n\n  &[disabled] {\n    cursor: default;\n  }\n\n  &__icon {\n    width: 12px;\n    height: 12px;\n  }\n}\n\n.hs-button--base {\n  color: $neutral-color-1000;\n\n  &:not([disabled]):hover {\n    background: $neutral-color-100;\n  }\n\n  &-primary {\n    color: $primary-color-700;\n\n    &:not([disabled]):hover {\n      background: $primary-color-100;\n    }\n  }\n\n  &-accent {\n    color: $accent-color-700;\n\n    &:not([disabled]):hover {\n      background: $accent-color-100;\n    }\n  }\n\n  &-warning {\n    color: $supportive-color-red-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-red-100;\n    }\n  }\n\n  &-cyan {\n    color: $supportive-color-cyan-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-cyan-100;\n    }\n  }\n\n  &[disabled] {\n    color: $neutral-color-200;\n  }\n}\n\n.hs-button--stroked {\n  color: $neutral-color-1000;\n  border: 1px solid $neutral-color-200;\n  padding: 5px 11px;\n\n  &:not([disabled]):hover {\n    background: $neutral-color-100;\n  }\n\n  &-primary {\n    color: $primary-color-700;\n\n    &:not([disabled]):hover {\n      background: $primary-color-100;\n    }\n  }\n\n  &-accent {\n    color: $accent-color-700;\n\n    &:not([disabled]):hover {\n      background: $accent-color-100;\n    }\n  }\n\n  &-warning {\n    color: $supportive-color-red-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-red-100;\n    }\n  }\n\n  &-cyan {\n    color: $supportive-color-cyan-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-cyan-100;\n    }\n  }\n\n  &[disabled] {\n    color: $neutral-color-200;\n    border-color: $neutral-color-100;\n  }\n}\n\n.hs-button--flat {\n  color: $neutral-color-1000;\n  background: white;\n\n  &-primary {\n    background: $primary-color-700;\n    color: $neutral-color-100;\n  }\n\n  &-accent {\n    background: $accent-color-700;\n    color: $neutral-color-100;\n  }\n\n  &-warning {\n    background: $supportive-color-red-700;\n    color: $neutral-color-100;\n  }\n\n  &-cyan {\n    background: $supportive-color-cyan-700;\n    color: $neutral-color-100;\n  }\n\n  &[disabled] {\n    background-color: $neutral-color-100;\n    color: $neutral-color-200;\n  }\n}\n",
                    "styleUrl": "./button.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-da54184f55159033cbc74d2898eb59e8-1",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "button [hs-button]",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "buttonColors"
                },
                {
                    "name": "kind",
                    "defaultValue": "'base'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "buttonKinds"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\n\ntype buttonKinds = 'base' | 'flat' | 'stroked';\ntype buttonColors = 'base' | 'primary' | 'accent' | 'warning' | 'cyan';\n\n@Component({\n  selector: 'button [hs-button]',\n  template: `<ng-content></ng-content>`,\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class ButtonComponent implements OnInit {\n  @Input() kind: buttonKinds = 'base';\n  @Input() color: buttonColors = 'base';\n\n  constructor(private elRef: ElementRef) {}\n\n  ngOnInit() {\n    (this.elRef.nativeElement as HTMLElement).classList.add('hs-button');\n    (this.elRef.nativeElement as HTMLElement).classList.add(\n      `hs-button--${this.kind}`,\n    );\n    (this.elRef.nativeElement as HTMLElement).classList.add(\n      `hs-button--${this.kind}-${this.color}`,\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.hs-button {\n  background: transparent;\n  border: none;\n  border-radius: 3px;\n  font-size: 12px;\n  font-weight: 500;\n  padding: 6px 12px;\n  text-transform: capitalize;\n  transition: 0.3s color cubic-bezier(0.075, 0.82, 0.165, 1);\n  cursor: pointer;\n\n  &[disabled] {\n    cursor: default;\n  }\n\n  &__icon {\n    width: 12px;\n    height: 12px;\n  }\n}\n\n.hs-button--base {\n  color: $neutral-color-1000;\n\n  &:not([disabled]):hover {\n    background: $neutral-color-100;\n  }\n\n  &-primary {\n    color: $primary-color-700;\n\n    &:not([disabled]):hover {\n      background: $primary-color-100;\n    }\n  }\n\n  &-accent {\n    color: $accent-color-700;\n\n    &:not([disabled]):hover {\n      background: $accent-color-100;\n    }\n  }\n\n  &-warning {\n    color: $supportive-color-red-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-red-100;\n    }\n  }\n\n  &-cyan {\n    color: $supportive-color-cyan-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-cyan-100;\n    }\n  }\n\n  &[disabled] {\n    color: $neutral-color-200;\n  }\n}\n\n.hs-button--stroked {\n  color: $neutral-color-1000;\n  border: 1px solid $neutral-color-200;\n  padding: 5px 11px;\n\n  &:not([disabled]):hover {\n    background: $neutral-color-100;\n  }\n\n  &-primary {\n    color: $primary-color-700;\n\n    &:not([disabled]):hover {\n      background: $primary-color-100;\n    }\n  }\n\n  &-accent {\n    color: $accent-color-700;\n\n    &:not([disabled]):hover {\n      background: $accent-color-100;\n    }\n  }\n\n  &-warning {\n    color: $supportive-color-red-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-red-100;\n    }\n  }\n\n  &-cyan {\n    color: $supportive-color-cyan-700;\n\n    &:not([disabled]):hover {\n      background: $supportive-color-cyan-100;\n    }\n  }\n\n  &[disabled] {\n    color: $neutral-color-200;\n    border-color: $neutral-color-100;\n  }\n}\n\n.hs-button--flat {\n  color: $neutral-color-1000;\n  background: white;\n\n  &-primary {\n    background: $primary-color-700;\n    color: $neutral-color-100;\n  }\n\n  &-accent {\n    background: $accent-color-700;\n    color: $neutral-color-100;\n  }\n\n  &-warning {\n    background: $supportive-color-red-700;\n    color: $neutral-color-100;\n  }\n\n  &-cyan {\n    background: $supportive-color-cyan-700;\n    color: $neutral-color-100;\n  }\n\n  &[disabled] {\n    background-color: $neutral-color-100;\n    color: $neutral-color-200;\n  }\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1"
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-332a917899824371fd6912f1c637624c",
            "file": "src/testing/components/mock-chart.components.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-chart",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "liveUpdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                },
                {
                    "name": "timeBoundary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-chart',\n  template: '',\n})\nexport class ChartComponent {\n  @Input() metrics;\n  @Input() liveUpdate;\n  @Input() timeBoundary;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ChartsComponent",
            "id": "component-ChartsComponent-93adf7570749c2b685693bb6bafaf9d4",
            "file": "src/testing/components/mock-charts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-charts",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "detailedCharts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "siblingModelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "timeInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "addedModelVersionIdToCompare",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\n@Component({\n  selector: 'hs-charts',\n  template: '',\n})\nexport class ChartsComponent {\n  @Input() timeInterval: any;\n  @Input() detailedCharts: any;\n  @Input() siblingModelVersions: any;\n  @Output()\n  addedModelVersionIdToCompare: EventEmitter<any> = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CheckChartComponent",
            "id": "component-CheckChartComponent-74fd1455001b7627e2523def66f31c1d",
            "file": "src/testing/components/monitoring/mock-check-chart.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-check-chart",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-check-chart',\n  template: '',\n})\nexport class CheckChartComponent {\n  @Input() config: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CheckChartComponent",
            "id": "component-CheckChartComponent-2baf868d8cce693baa8a19fba9376b28-1",
            "file": "src/app/modules/monitoring/components/checks/check-chart/check-chart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-check-chart",
            "styleUrls": [
                "./check-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./check-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_config",
                    "defaultValue": "new BehaviorSubject(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ChartConfig>",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "activeCircles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "activePoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "axisGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'axisGroup', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "cfg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "chartHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "chartWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "clipUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "containerEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'containerEl', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "dataTranslate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "excludedSeries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "margins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "mouseIn",
                    "defaultValue": "new BehaviorSubject(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "noData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "plotBands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "rectRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'trackableRect', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "scaleX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScaleLinear<any | any>",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "scaleY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScaleLinear<any | any>",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "supportiveLinesGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'supportiveLines', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "thresholdTranslate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tooltip | null",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "viewHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "viewWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "visibleSeries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "xAxisTranslate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "methodsClass": [
                {
                    "name": "addToExcludeList",
                    "args": [
                        {
                            "name": "seriesName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "seriesName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawAxis",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawSupportiveLines",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawXAxis",
                    "args": [
                        {
                            "name": "xScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "xScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawYAxis",
                    "args": [
                        {
                            "name": "yScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "yScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getXTicks",
                    "args": [
                        {
                            "name": "xScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "xScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseMove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onMouseOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "removeFromExcludeList",
                    "args": [
                        {
                            "name": "seriesName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "seriesName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "toggleExclude",
                    "args": [
                        {
                            "name": "seriesName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "seriesName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  Output,\n  OnInit,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  EventEmitter,\n} from '@angular/core';\nimport { ChartConfig } from '../../../models';\nimport { MonitoringPageService } from '../../../containers/monitoring-page/monitoring-page.service';\nimport {\n  format,\n  ticks,\n  extent,\n  mouse,\n  scaleLinear,\n  ScaleLinear,\n  select,\n  axisLeft,\n  axisBottom,\n} from 'd3';\nimport { BehaviorSubject } from 'rxjs';\n\ninterface Tooltip {\n  x: number;\n  y: number;\n  values: Array<{\n    name: string;\n    color: string;\n    value: number;\n  }>;\n}\n\n@Component({\n  selector: 'hs-check-chart',\n  templateUrl: './check-chart.component.html',\n  styleUrls: ['./check-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckChartComponent implements OnInit {\n  @ViewChild('trackableRect', { read: ElementRef, static: true })\n  rectRef: ElementRef;\n  @ViewChild('containerEl', { read: ElementRef, static: true })\n  containerEl: ElementRef;\n  @ViewChild('axisGroup', { read: ElementRef, static: true })\n  axisGroup: ElementRef;\n  @ViewChild('supportiveLines', { read: ElementRef, static: true })\n  supportiveLinesGroup: ElementRef;\n\n  // config vars\n  name: string = '';\n  threshold: number;\n  margins: ChartConfig['size']['margins'];\n\n  // chart vars\n  chartWidth: number;\n  chartHeight: number;\n  viewHeight: number;\n  viewWidth: number;\n  scaleX: ScaleLinear<any, any>;\n  scaleY: ScaleLinear<any, any>;\n  series: ChartConfig['series'];\n  visibleSeries: ChartConfig['series'];\n  plotBands: any[];\n  activePoint: { x: number; y: number } | null;\n  activeCircles: Array<{ x: number; y: number; color: string }>;\n  tooltip: Tooltip | null;\n\n  // translates\n  dataTranslate: string;\n  xAxisTranslate: string;\n  thresholdTranslate: string;\n\n  noData: boolean = false;\n  clipUrl: string;\n  cfg: ChartConfig;\n  _config: BehaviorSubject<ChartConfig> = new BehaviorSubject(null);\n\n  private mouseIn: BehaviorSubject<boolean> = new BehaviorSubject(false);\n  private excludedSeries: string[] = [];\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private monitoringPageService: MonitoringPageService\n  ) {}\n\n  @Input() set config(cfg: ChartConfig) {\n    this.cfg = cfg;\n\n    this.name = cfg.name;\n    this.clipUrl = `url(#${this.name}-clip-url)`;\n    this.threshold = cfg.threshold;\n    this.chartWidth =\n      cfg.size.width || this.containerEl.nativeElement.offsetWidth;\n\n    this.chartHeight = cfg.size.height || 180;\n    this.margins = cfg.size.margins;\n\n    const { top, bottom, left, right } = cfg.size.margins;\n    const viewWidth = this.chartWidth - left - right;\n\n    this.viewWidth = viewWidth > 0 ? viewWidth : 0;\n\n    this.viewHeight = this.chartHeight - top - bottom;\n\n    this.dataTranslate = `translate(${left}, ${top})`;\n    this.xAxisTranslate = `translate(${left}, ${top + this.viewHeight})`;\n    this.thresholdTranslate = `translate(0, ${top})`;\n    this.plotBands = cfg.plotBands;\n\n    this.render();\n  }\n\n  ngOnInit() {\n    select(this.rectRef.nativeElement).on('mouseout', () => this.onMouseOut());\n    select(this.rectRef.nativeElement).on('mousemove', () =>\n      this.onMouseMove()\n    );\n    select(this.rectRef.nativeElement).on('click', () => this.onClick());\n  }\n\n  toggleExclude(seriesName: string): void {\n    if (this.excludedSeries.includes(seriesName)) {\n      this.removeFromExcludeList(seriesName);\n    } else {\n      this.addToExcludeList(seriesName);\n    }\n    this.render();\n  }\n\n  private render() {\n    const cfg = this.cfg;\n\n    this.series = cfg.series;\n\n    this.visibleSeries = cfg.series.filter(\n      series => !this.excludedSeries.includes(series.name)\n    );\n\n    this.noData = this.visibleSeries.length === 0;\n\n    if (!this.noData) {\n      const allValues = cfg.series.reduce(\n        (acc, cur) => [...acc, ...cur.data],\n        []\n      );\n      const countPoints = cfg.series[0].data.length;\n      const [min, max] = extent(allValues);\n\n      this.scaleY = scaleLinear()\n        .domain([max, min])\n        .range([0, this.viewHeight])\n        .nice();\n\n      this.scaleX = scaleLinear()\n        .domain([1, countPoints])\n        .range([0, this.viewWidth]);\n\n      this.drawAxis({ xScale: this.scaleX, yScale: this.scaleY });\n      this.drawSupportiveLines({ xScale: this.scaleX, yScale: this.scaleY });\n    }\n\n    this.cdr.detectChanges();\n  }\n\n  private addToExcludeList(seriesName: string): void {\n    this.excludedSeries = [...this.excludedSeries, seriesName];\n  }\n\n  private removeFromExcludeList(seriesName: string): void {\n    this.excludedSeries = this.excludedSeries.filter(\n      name => name !== seriesName\n    );\n  }\n\n  onClick() {\n    const [xCoordinate] = mouse(this.rectRef.nativeElement);\n    const newXPosition = this.scaleX(\n      Math.round(this.scaleX.invert(xCoordinate))\n    );\n    const index = Math.floor(this.scaleX.invert(newXPosition));\n    this.monitoringPageService.showCheckDetails(null, index);\n  }\n\n  private onMouseMove(): void {\n    if (this.noData) {\n      if (this.activePoint) {\n        this.activePoint = null;\n        this.activeCircles = [];\n        this.tooltip = null;\n        this.cdr.detectChanges();\n      }\n    } else {\n      const [xCoordinate] = mouse(this.rectRef.nativeElement);\n      const xValue = Math.round(this.scaleX.invert(xCoordinate));\n\n      const { left, top } = this.margins;\n      const newXPosition = this.scaleX(xValue);\n\n      if (this.activePoint == null || newXPosition !== this.activePoint.x) {\n        this.activePoint = { x: newXPosition + left, y: 0 };\n\n        const index = Math.floor(this.scaleX.invert(newXPosition));\n        // generate circles\n        this.activeCircles = this.series.reduce((acc, series) => {\n          const inverted = Math.floor(this.scaleX.invert(newXPosition) - 1);\n\n          if (series.data[inverted]) {\n            acc.push({\n              x: newXPosition + left,\n              y: this.scaleY(series.data[inverted]) + top,\n              color: series.color,\n            });\n          }\n\n          return acc;\n        }, []);\n\n        // generate tooltip\n        // make shift position\n        const tXPos =\n          index === this.series[0].data.length\n            ? newXPosition - 100\n            : newXPosition;\n\n        const inverted = Math.floor(this.scaleX.invert(newXPosition) - 1);\n        const tYPos = this.scaleY(\n          this.series\n            .map(({ data }) => data[inverted])\n            .reduce((acc, cur) => acc + cur, 0) / this.series.length\n        );\n\n        this.tooltip = {\n          x: tXPos + left + 4,\n          y: tYPos + 4,\n          values: this.series.reduce((acc, series) => {\n            if (series.data[inverted] !== undefined) {\n              acc.push({\n                name: series.name,\n                color: series.color,\n                value: series.data[inverted],\n              });\n            }\n\n            return acc;\n          }, []),\n        };\n\n        this.cdr.detectChanges();\n      }\n    }\n  }\n\n  private drawAxis({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }) {\n    this.drawXAxis(xScale);\n    this.drawYAxis(yScale);\n\n    select(this.axisGroup.nativeElement).selectAll('path.domain').remove();\n    select(this.axisGroup.nativeElement)\n      .selectAll('.tick > line')\n      .attr('color', '#8392a1');\n\n    select(this.axisGroup.nativeElement)\n      .selectAll('.tick > text')\n      .attr('font-size', '11px')\n      .attr('font-weight', 'bold')\n      .attr('fill', '#486581');\n  }\n\n  private drawYAxis(yScale: ScaleLinear<number, number>): void {\n    const yAxis = axisLeft(yScale)\n      .ticks(this.viewHeight / 40)\n      .tickSize(0);\n\n    select(this.axisGroup.nativeElement).select('g.yAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr('transform', `translate(${this.margins.left}, ${this.margins.top})`)\n      .attr('class', 'yAxis')\n      .call(yAxis);\n  }\n\n  private drawXAxis(xScale: ScaleLinear<number, number>): void {\n    const xAxis = axisBottom(xScale)\n      .tickValues(this.getXTicks(xScale))\n      .tickFormat(format(',.0f'))\n      .tickSize(4);\n\n    select(this.axisGroup.nativeElement).select('g.xAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr(\n        'transform',\n        `translate(${this.margins.left}, ${this.viewHeight + 2})`\n      )\n      .attr('class', 'xAxis')\n      .call(xAxis);\n  }\n\n  private getXTicks(xScale: ScaleLinear<number, number>): number[] {\n    const [min, max] = xScale.domain();\n\n    const lessThan5 = max < 5;\n    const higherThan10 = max > 10;\n    const count = lessThan5 ? 1 : higherThan10 ? 10 : max;\n\n    return ticks(min, max, count);\n  }\n\n  private drawSupportiveLines({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }): void {\n    const groupSelection = select(this.supportiveLinesGroup.nativeElement);\n    const lineColor = 'rgb(237, 239, 243)';\n    groupSelection.selectAll('line').remove();\n\n    groupSelection\n      .selectAll('line.yLine')\n      .data(yScale.ticks(this.viewHeight / 40))\n      .join(enter =>\n        enter\n          .append('line')\n          .attr('class', 'yLine')\n          .attr('x1', this.margins.left)\n          .attr('y1', d => yScale(d) + this.margins.top)\n          .attr('x2', this.chartWidth - this.margins.right)\n          .attr('y2', d => yScale(d) + this.margins.top)\n          .style('stroke', lineColor)\n      );\n  }\n\n  private onMouseOut(): void {\n    if (!this.noData) {\n      this.activePoint = null;\n      this.activeCircles = [];\n      this.tooltip = null;\n      this.cdr.detectChanges();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.check-chart {\n  position: relative;\n  &__title {\n    color: $neutral-color-900;\n    font-family: $font-family-bold;\n    line-height: 24px;\n    font-size: 12px;\n    text-align: center;\n  }\n\n  &__dot {\n    pointer-events: none;\n  }\n\n  &__tooltip {\n    top: 0;\n    left: 0;\n    background: white;\n    border-radius: 4px;\n    border: 2px $neutral-color-200 solid;\n    position: absolute;\n    padding: 8px;\n    font-size: 12px;\n    color: $neutral-color-800;\n    pointer-events: none;\n    font-family: $font-family-bold;\n  }\n\n  &__no-data {\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: $neutral-color-300;\n    font-family: $font-family-bold;\n    font-size: 14px;\n  }\n  &__rect:hover {\n    cursor: pointer;\n  }\n}\n\n.legend {\n  display: flex;\n  justify-content: center;\n\n  &__item {\n    margin-right: 12px;\n    cursor: pointer;\n\n    &-color {\n      display: inline-block;\n      width: 12px;\n      height: 12px;\n      margin-right: 4px;\n      border-radius: 50%;\n    }\n  }\n}\n",
                    "styleUrl": "./check-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringPageService",
                        "type": "MonitoringPageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringPageService",
                        "type": "MonitoringPageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "cfg",
                                "type": "ChartConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 92,
                        "jsdoctags": [
                            {
                                "name": "cfg",
                                "type": "ChartConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CheckChartComponent-1",
            "templateData": "<div #containerEl class=\"check-chart\">\n  <div class=\"check-chart__title\">\n    {{ name }}\n  </div>\n  <svg #svgContainer [attr.height]=\"chartHeight\" [attr.width]=\"chartWidth\">\n    <defs>\n      <clipPath [attr.id]=\"name + '-clip-url'\">\n        <rect\n          [attr.height]=\"viewHeight\"\n          [attr.width]=\"viewWidth\"\n          [attr.x]=\"margins.left\"\n          [attr.y]=\"margins.top\"\n        ></rect>\n      </clipPath>\n    </defs>\n    <g #supportiveLines></g>\n    <g #axisGroup></g>\n    <!--    <g-->\n    <!--      *ngIf=\"!noData\"-->\n    <!--      [attr.transform]=\"dataTranslate\"-->\n    <!--      [scale]=\"scaleY\"-->\n    <!--      hsD3Axis-->\n    <!--      position=\"left\"-->\n    <!--    ></g>-->\n    <!--    <g-->\n    <!--      *ngIf=\"!noData\"-->\n    <!--      [attr.transform]=\"xAxisTranslate\"-->\n    <!--      [scale]=\"scaleX\"-->\n    <!--      hsD3Axis-->\n    <!--    ></g>-->\n    <line\n      *ngIf=\"activePoint\"\n      [attr.x1]=\"activePoint.x\"\n      [attr.x2]=\"activePoint.x\"\n      [attr.y1]=\"0\"\n      [attr.y2]=\"viewHeight + margins.top\"\n      style=\"stroke: rgba(78, 112, 151, 0.336); stroke-width: 1;\"\n    />\n    <g *ngIf=\"!noData\">\n      <g\n        *ngFor=\"let plotBand of plotBands\"\n        [attr.transform]=\"dataTranslate\"\n        [height]=\"viewHeight\"\n        [hs-d3-plot-band]=\"plotBand\"\n        [xScale]=\"scaleX\"\n        fill=\"#e12d393d\"\n      ></g>\n    </g>\n    <g\n      *ngFor=\"let s of visibleSeries\"\n      [attr.stroke]=\"s.color\"\n      [attr.transform]=\"dataTranslate\"\n      [data]=\"s.data\"\n      [hs-d3line]\n      [xScale]=\"scaleX\"\n      [yScale]=\"scaleY\"\n    ></g>\n    <rect\n      class=\"check-chart__rect\"\n      #trackableRect\n      [attr.height]=\"viewHeight\"\n      [attr.transform]=\"dataTranslate\"\n      [attr.width]=\"viewWidth\"\n      opacity=\"0\"\n    ></rect>\n    <g\n      *ngIf=\"threshold !== undefined\"\n      [attr.clip-path]=\"clipUrl\"\n      [attr.transform]=\"thresholdTranslate\"\n      [hs-d3threshold]=\"threshold\"\n      [width]=\"chartWidth\"\n      [yScale]=\"scaleY\"\n    ></g>\n    <circle\n      *ngFor=\"let circle of activeCircles\"\n      [attr.cx]=\"circle.x\"\n      [attr.cy]=\"circle.y\"\n      [attr.fill]=\"circle.color\"\n      [ngStyle]=\"{ display: mouseIn ? 'block' : 'none' }\"\n      class=\"check-chart__dot\"\n      r=\"4\"\n    />\n  </svg>\n  <div class=\"legend\">\n    <div\n      *ngFor=\"let s of series\"\n      class=\"legend__item\"\n      (click)=\"toggleExclude(s.name)\"\n      [ngStyle]=\"{ opacity: excludedSeries.includes(s.name) ? '0.5' : '1' }\"\n    >\n      <span\n        [ngStyle]=\"{ backgroundColor: s.color }\"\n        class=\"legend__item-color\"\n      ></span>\n      <span>{{ s.name }}</span>\n    </div>\n  </div>\n  <div\n    *ngIf=\"tooltip\"\n    [ngStyle]=\"{ left: tooltip.x + 'px', top: tooltip.y + 'px' }\"\n    class=\"check-chart__tooltip\"\n  >\n    <div *ngFor=\"let value of tooltip.values\">\n      <span [ngStyle]=\"{ color: value.color }\">{{ value.name }}: </span\n      ><span>{{ value.value }}</span>\n    </div>\n  </div>\n  <div *ngIf=\"noData\" class=\"check-chart__no-data\">\n    <span>no data available</span>\n  </div>\n</div>\n"
        },
        {
            "name": "CheckChartComponentV2",
            "id": "component-CheckChartComponentV2-835deefe34a0b7b9c929aad4cf30f56d",
            "file": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-check-chart-v2",
            "styleUrls": [
                "./check-chart_v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./check-chart_v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cfg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "chartOptions",
                    "defaultValue": "{\n    title: {},\n    tooltip: {},\n    series: [\n      {\n        name: 'test',\n        data: [],\n        type: 'spline',\n      },\n    ],\n    credits: {\n      enabled: false,\n    },\n    lang: {},\n    noData: {},\n    xAxis: {\n      plotBands: [],\n    },\n    yAxis: {\n      title: {\n        text: undefined,\n      },\n      plotLines: [],\n    },\n    plotOptions: {\n      spline: {\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        marker: {\n          enabled: false,\n        },\n      },\n      series: {\n        cursor: 'pointer',\n        point: {\n          events: {},\n        },\n      },\n    },\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "createPlotBand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreatePlotBand",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "Highcharts",
                    "defaultValue": "Highcharts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "monitoringPageService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonitoringPageService",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "series",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "updateFormInput",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "addPlotBand",
                    "args": [
                        {
                            "name": "cfg",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cfg",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addPlotLine",
                    "args": [
                        {
                            "name": "cfg",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cfg",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateData",
                    "args": [
                        {
                            "name": "cfg",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cfg",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport * as Highcharts from 'highcharts';\nimport { CreatePlotBand, PlotBandData } from './createPlotBand.service';\nimport { ChartConfig } from '@app/modules/monitoring/models';\nimport { MonitoringPageService } from '@app/modules/monitoring/containers/monitoring-page/monitoring-page.service';\nimport { initializeChartOptions } from '@app/modules/monitoring/components/checks/check-chart_v2/initializeChartOptions';\n\nexport interface PlotBand {\n  from: number;\n  to: number;\n}\n\nconst noData = require('highcharts/modules/no-data-to-display');\nnoData(Highcharts);\n\n@Component({\n  selector: 'hs-check-chart-v2',\n  templateUrl: './check-chart_v2.component.html',\n  styleUrls: ['./check-chart_v2.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckChartComponentV2 implements OnChanges {\n  name: string = '';\n  threshold: number;\n  data: number[];\n  cfg: ChartConfig;\n  series: ChartConfig['series'];\n\n  @Input() set config(cfg: ChartConfig) {\n    this.cfg = cfg;\n\n    this.name = cfg.name;\n    this.threshold = cfg.threshold;\n    this.series = cfg.series;\n  }\n\n  Highcharts: typeof Highcharts = Highcharts;\n\n  updateFormInput: boolean = true;\n\n  constructor(\n    public createPlotBand: CreatePlotBand,\n    public monitoringPageService: MonitoringPageService,\n  ) {}\n\n  chartOptions = {\n    title: {},\n    tooltip: {},\n    series: [\n      {\n        name: 'test',\n        data: [],\n        type: 'spline',\n      },\n    ],\n    credits: {\n      enabled: false,\n    },\n    lang: {},\n    noData: {},\n    xAxis: {\n      plotBands: [],\n    },\n    yAxis: {\n      title: {\n        text: undefined,\n      },\n      plotLines: [],\n    },\n    plotOptions: {\n      spline: {\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        marker: {\n          enabled: false,\n        },\n      },\n      series: {\n        cursor: 'pointer',\n        point: {\n          events: {},\n        },\n      },\n    },\n  };\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.config.firstChange) {\n      this.chartOptions = initializeChartOptions(changes.config);\n    }\n\n    if (\n      changes.config.currentValue &&\n      changes.config.currentValue.series.length !== 0\n    ) {\n      this.updateData(changes.config.currentValue);\n      this.addPlotLine(changes.config.currentValue);\n      this.addPlotBand(changes.config.currentValue);\n    }\n  }\n\n  updateData(cfg: ChartConfig) {\n    let self = this;\n\n    this.chartOptions = {\n      tooltip: {\n        headerFormat: undefined,\n        pointFormat: `<span style=\"color: #4098d7; font-weight: bold\">\n           ${cfg.series[0].name}</span>: <b>{point.y}</b>`,\n        crosshairs: {\n          color: 'lightgrey',\n        },\n      },\n      title: {\n        text: `${cfg.name}`,\n      },\n      series: [\n        {\n          name: `${cfg.series[0].name}`,\n          data: cfg.series[0].data,\n          type: 'spline',\n        },\n      ],\n      credits: {\n        enabled: false,\n      },\n      lang: {\n        noData: 'no data available',\n      },\n      noData: {\n        style: {\n          fontWeight: 'bold',\n          fontSize: '14px',\n          color: '#bcccdc',\n        },\n      },\n      xAxis: {\n        plotBands: [],\n      },\n      yAxis: {\n        title: {\n          text: undefined,\n        },\n        plotLines: [],\n      },\n      plotOptions: {\n        spline: {\n          lineWidth: 2,\n          states: {\n            hover: {\n              lineWidth: 2,\n            },\n          },\n          marker: {\n            enabled: false,\n          },\n        },\n        series: {\n          cursor: 'pointer',\n          point: {\n            events: {\n              click: function () {\n                self.monitoringPageService.showCheckDetails(null, this.x);\n              },\n            },\n          },\n        },\n      },\n    };\n  }\n\n  addPlotLine(cfg: ChartConfig) {\n    this.chartOptions.yAxis.plotLines = [\n      {\n        color: '#cf1124',\n        value: cfg.threshold,\n        width: 2,\n        dashStyle: 'Dash',\n      },\n    ];\n  }\n\n  addPlotBand(cfg: ChartConfig) {\n    const pbd: PlotBandData = {\n      data: cfg.series[0].data,\n      threshold: cfg.threshold,\n    };\n\n    const result = this.createPlotBand.create(pbd);\n    let plotBands = [];\n    let fromArr = result.map(item => item.from);\n    let toArr = result.map(item => item.to);\n    let i = 0;\n    while (i < toArr.length) {\n      plotBands.push({\n        color: '#ff9b9b',\n        width: 2,\n        from: fromArr[i],\n        to: toArr[i],\n      });\n      i++;\n    }\n    this.chartOptions.xAxis.plotBands = plotBands;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.check-chart_v2 {\n  position: relative;\n  width: 100%;\n  height: 300px;\n  &__no-data_v2 {\n    position: absolute;\n    top: 50%;\n    left: 0;\n    right: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: $neutral-color-300;\n    font-family: $font-family-bold;\n    font-size: 14px;\n  }\n}\n",
                    "styleUrl": "./check-chart_v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "createPlotBand",
                        "type": "CreatePlotBand",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monitoringPageService",
                        "type": "MonitoringPageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "createPlotBand",
                        "type": "CreatePlotBand",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monitoringPageService",
                        "type": "MonitoringPageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "cfg",
                                "type": "ChartConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 37,
                        "jsdoctags": [
                            {
                                "name": "cfg",
                                "type": "ChartConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"check-chart_v2\">\n  <highcharts-chart\n    [Highcharts]=\"Highcharts\"\n    [options]=\"chartOptions\"\n    [(update)]=\"updateFormInput\"\n    style=\"width: 100%; height: 300px; display: block;\"\n  >\n  </highcharts-chart>\n</div>\n"
        },
        {
            "name": "CommandTemplateComponent",
            "id": "component-CommandTemplateComponent-40ce7ec1d878f76de1fa366738589670",
            "file": "src/app/shared/components/command-template/command-template.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "CommandCreatorFactory"
                }
            ],
            "selector": "hs-command-template",
            "styleUrls": [
                "./command-template.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./command-template.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Application"
                },
                {
                    "name": "input",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string"
                },
                {
                    "name": "isValidInput",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "codeExample",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "commandCreator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandCreator",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "commandCreatorFactory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CommandCreatorFactory",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isGrpc",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "simpleChanges",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommandCreator } from '@app/core/command-creator';\nimport { CommandCreatorFactory } from '@app/core/command-creator-factory.service';\nimport { Application } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-command-template',\n  templateUrl: './command-template.component.html',\n  styleUrls: ['./command-template.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [CommandCreatorFactory],\n})\nexport class CommandTemplateComponent implements OnChanges {\n  @Input() application: Application;\n  @Input() type: string;\n  @Input() isValidInput: boolean = true;\n  @Input() input: string;\n\n  public codeExample: string;\n  private commandCreator: CommandCreator;\n\n  constructor(public commandCreatorFactory: CommandCreatorFactory) {}\n\n  public isGrpc(): boolean {\n    return this.type === 'grpc';\n  }\n\n  ngOnChanges(simpleChanges: SimpleChanges): void {\n    if (simpleChanges.type && simpleChanges.type.isFirstChange) {\n      this.commandCreator = this.commandCreatorFactory.create(\n        simpleChanges.type.currentValue\n      );\n    }\n\n    if (simpleChanges.input) {\n      this.codeExample = this.commandCreator.getCommand(\n        this.application,\n        (simpleChanges.input && simpleChanges.input.currentValue) || ''\n      );\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".code {\n  background: #f7f7f9;\n  border: 1px grey solid;\n  border-radius: 2px;\n  color: black;\n  display: flex;\n  font-family: monospace;\n  font-size: 14px;\n  padding: 38px 12px 12px;\n  position: relative;\n  line-height: 16px;\n  &--wrap-space {\n    white-space: pre;\n  }\n  &__comment {\n    font-style: italic;\n    color: grey;\n    user-select: none;\n  }\n  & > code {\n    overflow-x: scroll;\n    padding-bottom: 12px;\n  }\n}\n\n.copy {\n  border-radius: 2px;\n  background: #4d9bf1;\n  cursor: pointer;\n  color: white;\n  font-size: 16px;\n  line-height: 28px;\n  padding: 0px;\n  position: absolute;\n  right: 4px;\n  text-align: center;\n  top: 4px;\n  width: 64px;\n  &:hover {\n    background: #468dda;\n  }\n}\n",
                    "styleUrl": "./command-template.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "commandCreatorFactory",
                        "type": "CommandCreatorFactory",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "commandCreatorFactory",
                        "type": "CommandCreatorFactory",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"code code--wrap-space\" *ngIf=\"isValidInput; else error\">\n  <ng-container>\n    <code>\n      <span>{{ codeExample }}</span>\n    </code>\n    <div class=\"copy\" [hsCopyToBuffer]=\"codeExample\"></div>\n  </ng-container>\n</div>\n\n<ng-template #error>\n  <div class=\"error-container\">Wrong input's format</div>\n</ng-template>\n"
        },
        {
            "name": "CsContainerComponent",
            "id": "component-CsContainerComponent-8ddf6b21d5849efdd9b818cd13dc7687",
            "file": "src/app/modules/code-snippet/containers/cs-container/cs-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cs-container",
            "styleUrls": [
                "./cs-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cs-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commands",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cs-container',\n  templateUrl: './cs-container.component.html',\n  styleUrls: ['./cs-container.component.scss'],\n})\nexport class CsContainerComponent {\n  @Input() commands: string[];\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/assets/styles/variables\";\n\n.container {\n  margin-top: 30px;\n  background-color: #fdfeff;\n  border-radius: 5px;\n  padding: 20px;\n  width: 740px;\n  box-shadow: 0 2px 1px -1px rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 1px 3px 0 rgb(0 0 0 / 12%);\n\n  &__snippets {\n    color: #000;\n    font-family: $font-family-mono;\n    font-size: 15px;\n  }\n}\n",
                    "styleUrl": "./cs-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"container\">\n  <div *ngFor=\"let command of commands\" class=\"container__snippets\">\n    <cs-line [command]=\"command\"></cs-line>\n  </div>\n</div>\n"
        },
        {
            "name": "CsLineComponent",
            "id": "component-CsLineComponent-100e847aed3cd3d62635bbe80b45ec31",
            "file": "src/app/modules/code-snippet/components/cs-line/cs-line.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cs-line",
            "styleUrls": [
                "./cs-line.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cs-line.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "copy",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "copySnippet",
                    "args": [
                        {
                            "name": "line",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "line",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'cs-line',\n  templateUrl: './cs-line.component.html',\n  styleUrls: ['./cs-line.component.scss'],\n})\nexport class CsLineComponent {\n  @Input() command: string;\n  public copy = false;\n\n  constructor() {}\n\n  copySnippet(line) {\n    window.navigator.clipboard.writeText(line.value);\n    this.copy = true;\n    setTimeout(() => {\n      this.copy = false;\n    }, 5000);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"src/assets/styles/variables\";\n\n.snippet {\n  padding: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n\n  &__line {\n    border: none;\n    color: #000;\n    font-family: $font-family-mono;\n    font-size: 15px;\n    width: 100%;\n    caret: unset;\n  }\n  &__icon {\n    opacity: 0.3;\n    width: 24px;\n    height: 24px;\n    cursor: pointer;\n    background-image: url(\"~assets/images/_icons/icon-copy.svg\");\n\n    &:hover {\n      opacity: 0.9;\n      transition: 0.3s ease all;\n    }\n\n    &-copied {\n      opacity: 0.9;\n      width: 24px;\n      height: 24px;\n      cursor: pointer;\n      background-image: url(\"~assets/images/_icons/icon-copy.svg\");\n    }\n  }\n}\n",
                    "styleUrl": "./cs-line.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"snippet\">\n  <input class=\"snippet__line\" value=\"{{command}}\" readonly=\"readonly\" #line>\n  <ng-container *ngIf=\"!copy; else copied\">\n    <div\n      class=\"snippet__icon\"\n      hsTippy\n      [tippyOptions]=\"{\n      content: 'Copy code snippet',\n      arrow: false,\n      theme: 'basic',\n      placement: 'bottom',\n      zIndex: 1\n      }\"\n      (click)=\"copySnippet(line)\"\n    ></div>\n  </ng-container>\n  <ng-template #copied>\n    <div\n      class=\"snippet__icon-copied\"\n      hsTippy\n      [tippyOptions]=\"{\n      content: 'Code copied',\n      arrow: false,\n      theme: 'basic',\n      placement: 'bottom',\n      zIndex: 1\n      }\"\n      (click)=\"copySnippet(line)\"\n    ></div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "CustomCheckComponent",
            "id": "component-CustomCheckComponent-90b15ee5b24be638578debc62c5e0338",
            "file": "src/testing/components/mock-custom-check.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-custom-check",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-custom-check',\n  template: '',\n})\nexport class CustomCheckComponent {\n  @Input()\n  check: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CustomChecksComponent",
            "id": "component-CustomChecksComponent-9c771b832d5ff009e2740ebdd6217b23",
            "file": "src/testing/components/mock-custom-checks.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-custom-checks",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customChecks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any[]"
                },
                {
                    "name": "customMetrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any[]"
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Input, Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-custom-checks',\n  template: '',\n})\nexport class CustomChecksComponent {\n  @Input() customMetrics: any[];\n  @Input() customChecks: any[];\n  @Input() loading: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "CustomMetricsComponent",
            "id": "component-CustomMetricsComponent-3189ee8adad454a26d779e1ef51e75e3",
            "file": "src/testing/components/monitoring/mock-custom-metrics.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-custom-metrics",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-custom-metrics',\n  template: '',\n})\nexport class CustomMetricsComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            }
        },
        {
            "name": "CustomMetricsComponent",
            "id": "component-CustomMetricsComponent-4078ceae4bafad3ffe6f3443b828699f-1",
            "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MetricChartsState"
                },
                {
                    "name": "CustomMetricsFacade"
                }
            ],
            "selector": "hs-custom-metrics",
            "styleUrls": [
                "./custom-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-metrics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartConfigs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ChartConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "comparableModelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "customMetricsChecks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "comparableModelVersionsChanged",
                    "args": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chartConfig",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartConfig",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DialogMetricsComponent } from '@app/modules/dialogs/components';\nimport { Observable } from 'rxjs';\n\nimport { ModelVersion } from '@app/core/data/types';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\nimport { MetricChartsState } from '../../store/metric-charts.state';\nimport { CustomMetricsFacade } from './custom-metrics.facade';\n\nimport { ChartConfig } from '../../models';\n\n@Component({\n  selector: 'hs-custom-metrics',\n  templateUrl: './custom-metrics.component.html',\n  styleUrls: ['./custom-metrics.component.scss'],\n  providers: [MetricChartsState, CustomMetricsFacade],\n})\nexport class CustomMetricsComponent implements OnInit {\n  customMetricsChecks$: Observable<any>;\n  comparableModelVersions$: Observable<ModelVersion[]>;\n  chartConfigs$: Observable<ChartConfig[]>;\n\n  constructor(\n    private facade: CustomMetricsFacade,\n    private dialog: DialogsService\n  ) {}\n\n  ngOnInit() {\n    this.customMetricsChecks$ = this.facade.getCustomMetrics();\n    this.comparableModelVersions$ = this.facade.getModelVersionsToCompare();\n    this.chartConfigs$ = this.facade.getChartConfigs();\n  }\n\n  comparableModelVersionsChanged(modelVersions: ModelVersion[]): void {\n    this.facade.comparableModelVersionsChanged(modelVersions);\n  }\n\n  openSettings(): void {\n    this.dialog.createDialog({\n      component: DialogMetricsComponent,\n      styles: {\n        width: '800px',\n        height: '600px',\n        padding: '0px',\n      },\n    });\n  }\n\n  trackByFn(_, chartConfig: ChartConfig): string {\n    return chartConfig.name;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.custom-metrics {\n  &__header {\n    margin-bottom: 12px;\n    display: flex;\n    justify-content: space-between;\n\n    &-title {\n      font-size: 14px;\n      color: $neutral-color-1000;\n      font-family: $font-family-bold;\n      line-height: 20px;\n    }\n  }\n}\n\n.charts {\n  &__column {\n    width: 100%;\n    min-width: calc(100% / 2 - 120px);\n  }\n  &__column + &__column {\n    margin-left: 24px;\n  }\n  &__item {\n    background: white;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 5px;\n\n    padding: 12px;\n  }\n  &__item + &__item {\n    margin-top: 18px;\n  }\n}\n",
                    "styleUrl": "./custom-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "CustomMetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "CustomMetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CustomMetricsComponent-1",
            "templateData": "<div class=\"custom-metrics\">\n  <div class=\"custom-metrics__header\">\n    <span class=\"custom-metrics__header-title\">Custom metrics</span>\n    <button\n      class=\"custom-checks__button\"\n      color=\"primary\"\n      kind=\"flat\"\n      hs-button\n      (click)=\"openSettings()\"\n    >\n      Configure metrics\n    </button>\n  </div>\n  <div class=\"custom-metrics__config\" *ngIf=\"chartConfigs$ | async as configs\">\n    <hs-model-versions-tags\n      *ngIf=\"configs.length\"\n      (listChanged)=\"comparableModelVersionsChanged($event)\"\n    ></hs-model-versions-tags>\n    <div\n      *ngIf=\"(comparableModelVersions$ | async).length\"\n      class=\"custom-metrics__header-regime-selector\"\n    ></div>\n  </div>\n  <div class=\"charts\">\n    <div\n      class=\"charts__item\"\n      *ngFor=\"let chartConfig of chartConfigs$ | async; trackBy: trackByFn\"\n    >\n      <hs-check-chart [config]=\"chartConfig\"></hs-check-chart>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CustomMetricsComponentV2",
            "id": "component-CustomMetricsComponentV2-0a1d41d44722df94f9e13901f70bbdd5",
            "file": "src/app/modules/monitoring/containers/custom-metrics_v2/custom-metrics_v2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MetricChartsState"
                },
                {
                    "name": "CustomMetricsFacade"
                }
            ],
            "selector": "hs-custom-metrics-v2",
            "styleUrls": [
                "./custom-metrics_v2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./custom-metrics_v2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartConfigs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ChartConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "comparableModelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "customMetricsChecks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "comparableModelVersionsChanged",
                    "args": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersions",
                            "type": "ModelVersion[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chartConfig",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chartConfig",
                            "type": "ChartConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { DialogMetricsComponent } from '@app/modules/dialogs/components';\nimport { Observable } from 'rxjs';\n\nimport { ModelVersion } from '@app/core/data/types';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\nimport { MetricChartsState } from '../../store/metric-charts.state';\n\nimport { ChartConfig } from '../../models';\nimport { CustomMetricsFacade } from '@app/modules/monitoring/containers/custom-metrics/custom-metrics.facade';\n\n@Component({\n  selector: 'hs-custom-metrics-v2',\n  templateUrl: './custom-metrics_v2.component.html',\n  styleUrls: ['./custom-metrics_v2.component.scss'],\n  providers: [MetricChartsState, CustomMetricsFacade],\n})\nexport class CustomMetricsComponentV2 implements OnInit {\n  customMetricsChecks$: Observable<any>;\n  comparableModelVersions$: Observable<ModelVersion[]>;\n  chartConfigs$: Observable<ChartConfig[]>;\n\n  constructor(\n    private facade: CustomMetricsFacade,\n    private dialog: DialogsService,\n  ) {}\n\n  ngOnInit() {\n    this.customMetricsChecks$ = this.facade.getCustomMetrics();\n    this.comparableModelVersions$ = this.facade.getModelVersionsToCompare();\n    this.chartConfigs$ = this.facade.getChartConfigs();\n  }\n\n  comparableModelVersionsChanged(modelVersions: ModelVersion[]): void {\n    this.facade.comparableModelVersionsChanged(modelVersions);\n  }\n\n  openSettings(): void {\n    this.dialog.createDialog({\n      component: DialogMetricsComponent,\n      styles: {\n        width: '800px',\n        height: '600px',\n        padding: '0px',\n      },\n    });\n  }\n\n  trackByFn(_, chartConfig: ChartConfig): string {\n    return chartConfig.name;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.custom-metrics {\n  &__header {\n    margin-bottom: 12px;\n    display: flex;\n    justify-content: space-between;\n\n    &-title {\n      font-size: 14px;\n      color: $neutral-color-1000;\n      font-family: $font-family-bold;\n      line-height: 20px;\n    }\n  }\n}\n\n.charts {\n  &__column {\n    width: 100%;\n    min-width: calc(100% / 2 - 120px);\n  }\n  &__column + &__column {\n    margin-left: 24px;\n  }\n  &__item {\n    background: white;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 5px;\n    padding: 12px;\n  }\n  &__item + &__item {\n    margin-top: 18px;\n  }\n  &__notification {\n    background: white;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 5px;\n    width: 100%;\n    padding: 15px;\n    color: $neutral-color-400;\n    font-family: $font-family-bold;\n    font-size: 12px;\n    text-align: center;\n  }\n}\n",
                    "styleUrl": "./custom-metrics_v2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "CustomMetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "CustomMetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"custom-metrics\">\n  <div class=\"custom-metrics__header\">\n    <span class=\"custom-metrics__header-title\">Custom metrics</span>\n    <button\n      class=\"custom-checks__button\"\n      color=\"primary\"\n      kind=\"flat\"\n      hs-button\n      (click)=\"openSettings()\"\n    >\n      Configure metrics\n    </button>\n  </div>\n  <div class=\"custom-metrics__config\" *ngIf=\"chartConfigs$ | async as configs\">\n<!--        <hs-model-versions-tags-->\n<!--          *ngIf=\"configs.length\"-->\n<!--          (listChanged)=\"comparableModelVersionsChanged($event)\"-->\n<!--        ></hs-model-versions-tags>-->\n    <div\n      *ngIf=\"(comparableModelVersions$ | async).length\"\n      class=\"custom-metrics__header-regime-selector\"\n    ></div>\n  </div>\n  <div class=\"charts\" *ngIf=\"chartConfigs$ | async as configs\">\n    <ng-container *ngIf=\"configs.length > 0; else notification\">\n      <div\n        class=\"charts__item\"\n        *ngFor=\"let chartConfig of configs; trackBy: trackByFn\"\n      >\n        <hs-check-chart-v2 [config]=\"chartConfig\"></hs-check-chart-v2>\n      </div>\n    </ng-container>\n    <ng-template #notification>\n      <div class=\"charts__notification\">\n        Metrics list is empty\n      </div>\n    </ng-template>\n  </div>\n</div>\n"
        },
        {
            "name": "D3AreaComponent",
            "id": "component-D3AreaComponent-a2c884e3fc24543f7034be9f40f22f9c",
            "file": "src/app/modules/hs-d3/components/area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-d3area",
            "styleUrls": [],
            "styles": [],
            "template": "<svg:path #path></svg:path>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": ""
                },
                {
                    "name": "hs-d3area",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any"
                },
                {
                    "name": "stroke",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any"
                },
                {
                    "name": "xScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "y0",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                },
                {
                    "name": "yScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "area",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'path', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n} from '@angular/core';\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'hs-d3area',\n  template: `<svg:path #path></svg:path> `,\n})\nexport class D3AreaComponent implements AfterViewInit {\n  @ViewChild('path', { read: ElementRef, static: true })\n  path: ElementRef;\n\n  @Input() 'hs-d3area';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() y0 = 0;\n  @Input() set data(d: Array<[number, number]>) {\n    d3.select(this.path.nativeElement)\n      .data([d])\n      .transition()\n      .duration(500)\n      .ease(d3.easeLinear)\n      .attr('d', this.area);\n  }\n  @Input() stroke;\n\n  private area;\n  ngAfterViewInit(): void {\n    this.area = d3\n      .area()\n      .x((d: any) => {\n        const x = this.xScale(d[0]);\n        console.dir({\n          d0: d[0],\n          x,\n        });\n        return this.xScale(d[0]);\n      })\n      .y1((d: any) => {\n        console.dir({\n          d1: d[1],\n          y: this.yScale(d[1]),\n        });\n        return this.yScale(d[1]);\n      })\n      .y0(this.yScale(this.y0));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "d",
                                "type": "Array<>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 22,
                        "jsdoctags": [
                            {
                                "name": "d",
                                "type": "Array<>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "D3LineComponent",
            "id": "component-D3LineComponent-38ee44158ed88ac645593150b8c7df8b",
            "file": "src/app/modules/hs-d3/components/line.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-d3line",
            "styleUrls": [],
            "styles": [],
            "template": "<svg:path #path></svg:path>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number[]"
                },
                {
                    "name": "hs-d3line",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "xScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any"
                },
                {
                    "name": "yScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'path', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  ViewChild,\n} from '@angular/core';\nimport { easeLinear, line, select, curveMonotoneX } from 'd3';\n\n@Component({\n  selector: 'hs-d3line',\n  template: `<svg:path #path></svg:path> `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class D3LineComponent implements OnChanges {\n  @ViewChild('path', { read: ElementRef, static: true })\n  path: ElementRef;\n  @Input() 'hs-d3line';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() data: number[];\n\n  ngOnChanges(changes) {\n    const xScale = changes.xScale.currentValue;\n    const yScale = changes.yScale.currentValue;\n    const data = changes.data\n      ? changes.data.currentValue.map((v, i) => [i + 1, v])\n      : this.data.map((v, i) => [i + 1, v]);\n\n    const valueline = line()\n      .x(d => xScale(d[0]))\n      .y(d => yScale(d[1]))\n      .curve(curveMonotoneX);\n\n    select(this.path.nativeElement)\n      .data([data])\n      .transition()\n      .duration(500)\n      .ease(easeLinear)\n      .attr('d', valueline)\n      .attr('stroke-width', '1px')\n      .attr('fill', 'none');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "D3PlotBandComponent",
            "id": "component-D3PlotBandComponent-caeae79f67ed29a7fe9387dd3b9dd247",
            "file": "src/app/modules/hs-d3/components/plot-band.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-d3-plot-band",
            "styleUrls": [],
            "styles": [],
            "template": "<svg:rect    [attr.x]=\"x\"\n    y=\"0\"\n    [attr.width]=\"width\"\n    [attr.height]=\"height\"\n  ></svg:rect>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any"
                },
                {
                    "name": "hs-d3-plot-band",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "literal type"
                },
                {
                    "name": "xScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "width",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "x",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-d3-plot-band',\n  template: `<svg:rect\n    [attr.x]=\"x\"\n    y=\"0\"\n    [attr.width]=\"width\"\n    [attr.height]=\"height\"\n  ></svg:rect>`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class D3PlotBandComponent {\n  @Input() 'hs-d3-plot-band': { from: number; to: number };\n  @Input() height;\n  @Input()\n  set xScale(scale) {\n    if (this['hs-d3-plot-band']) {\n      const { to, from } = this['hs-d3-plot-band'];\n      const y = scale(to);\n      this.x = scale(from);\n      this.width = y - this.x;\n    }\n  }\n\n  x: number = 0;\n  width: number = 0;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "xScale": {
                    "name": "xScale",
                    "setSignature": {
                        "name": "xScale",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "scale",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "scale",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "D3ThresholdComponent",
            "id": "component-D3ThresholdComponent-d749875474904aee58b79fe6c6531509",
            "file": "src/app/modules/hs-d3/components/threshold.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-d3threshold",
            "styleUrls": [],
            "styles": [],
            "template": "<svg:line    x1=\"0\"\n    [attr.x2]=\"x2\"\n    [attr.y1]=\"y1\"\n    [attr.y2]=\"y2\"\n    stroke=\"#E12D39\"\n    stroke-dasharray=\"10px\"\n  ></svg:line>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hs-d3threshold",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "any"
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number"
                },
                {
                    "name": "yScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "x2",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "y1",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "y2",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n@Component({\n  selector: 'hs-d3threshold',\n  template: `<svg:line\n    x1=\"0\"\n    [attr.x2]=\"x2\"\n    [attr.y1]=\"y1\"\n    [attr.y2]=\"y2\"\n    stroke=\"#E12D39\"\n    stroke-dasharray=\"10px\"\n  ></svg:line> `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class D3ThresholdComponent implements OnChanges {\n  @Input() yScale;\n  @Input() 'hs-d3threshold';\n  @Input() width: number;\n\n  y1: number = 0;\n  y2: number = 0;\n  x2: number = 0;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const threshold = changes['hs-d3threshold']\n      ? changes['hs-d3threshold']\n      : this['hs-d3threshold'];\n    const yScale = changes.yScale ? changes.yScale.currentValue : this.yScale;\n    const width = changes.width ? changes.width.currentValue : this.width;\n\n    if (threshold !== undefined && yScale) {\n      const y = yScale(threshold) || 0;\n      this.y1 = y;\n      this.y2 = y;\n      this.x2 = width;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnChanges"
            ]
        },
        {
            "name": "DcFormComponent",
            "id": "component-DcFormComponent-9b9ae0963ca77d54da05e4490f7304c1",
            "file": "src/app/modules/deployment-configs/components/dc-tree/dc-form/dc-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-dc-form",
            "styleUrls": [
                "./dc-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dc-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "formIsValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "warning",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { PreserveFormService } from './preserve-form.service';\n\n@Component({\n  selector: 'hs-dc-form',\n  templateUrl: './dc-form.component.html',\n  styleUrls: ['./dc-form.component.scss'],\n})\nexport class DcFormComponent implements OnInit {\n  form: string;\n  formIsValid: boolean;\n  warning: string = '';\n\n  constructor(\n    private readonly facade: DeploymentConfigsFacade,\n    private router: Router,\n    private formPreserver: PreserveFormService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formPreserver.retrieveForm()\n      ? this.formPreserver.retrieveForm()\n      : this.formPreserver.defaultForm();\n    this.onChange(this.form);\n  }\n\n  onChange(e: string) {\n    try {\n      this.formPreserver.validateForm(this.form);\n      this.formIsValid = true;\n      this.formPreserver.saveForm(this.form);\n      this.warning = '';\n    } catch (err) {\n      this.formIsValid = false;\n      this.warning = err;\n    }\n  }\n\n  onSave() {\n    let value = this.formPreserver.parseDC(this.form);\n    this.facade.add(value);\n    this.formPreserver.clearForm();\n    this.router.navigate([`deployment_configs/${value.name}`]);\n  }\n\n  resetForm() {\n    this.form = this.formPreserver.defaultForm();\n    this.formPreserver.clearForm();\n    this.formIsValid = false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n:host ::ng-deep .CodeMirror{\n  height: auto;\n  }\n\n.dc-form {\n  color: $neutral-color-900;\n  margin: 24px;\n  padding: 10px;\n  border: 1px $neutral-color-200 solid;\n  border-radius: 4px;\n  position: relative;\n  background: white;\n\n  .warning-container {\n    color: crimson;\n    background-color: #f5d6d3;\n    padding: 4px;\n  }\n\n  &__footer {\n    display: flex;\n    justify-content: center;\n\n    button {\n      font-size: 16px;\n      margin-right: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./dc-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formPreserver",
                        "type": "PreserveFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formPreserver",
                        "type": "PreserveFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dc-form\">\n  <div class=\"warning-container\" *ngIf=\"warning\">\n    {{ warning }}\n  </div>\n  <form (submit)=\"onSave()\">\n    <label>New Config File</label>\n    <ngx-codemirror\n      [(ngModel)]=\"form\"\n      (ngModelChange)=\"onChange($event)\"\n      name=\"input\"\n      [options]=\"{\n        lineNumbers: true,\n        mode: 'yaml'\n      }\"\n    >\n    </ngx-codemirror>\n    <div class=\"dc-form__footer\">\n      <button\n        hs-button\n        kind=\"flat\"\n        color=\"cyan\"\n        [disabled]=\"!formIsValid\"\n        type=\"submit\"\n      >\n        Save\n      </button>\n      <button\n        hs-button\n        kind=\"flat\"\n        color=\"primary\"\n        type=\"button\"\n        (click)=\"resetForm()\"\n      >\n        Reset\n      </button>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "DcTreeComponent",
            "id": "component-DcTreeComponent-16ef78dd2cc4ad7be817966a1a264f50",
            "file": "src/app/modules/deployment-configs/components/dc-tree/dc-tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-dc-tree",
            "styleUrls": [
                "./dc-tree.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dc-tree.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "DeploymentConfig"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { DeploymentConfig } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-dc-tree',\n  templateUrl: './dc-tree.component.html',\n  styleUrls: ['./dc-tree.component.scss'],\n})\nexport class DcTreeComponent {\n  @Input() config: DeploymentConfig;\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n$lh: 24px;\n\n$groupMargin: 12px;\n$groupPadding: 4px;\n\n$borderColor: $neutral-color-400;\n\n.dc-tree {\n  &__text {\n    line-height: $lh;\n  }\n  &__name {\n    font-size: 24px;\n  }\n  &__group {\n    position: relative;\n    padding-left: $groupPadding;\n    &:before {\n      content: '';\n      display: block;\n      position: absolute;\n      height: calc(100% - 12px);\n      border-left: 1px $borderColor solid;\n    }\n  }\n\n  &__field {\n    line-height: 24px;\n    display: flex;\n    align-items: center;\n    &:before {\n      content: '';\n      display: block;\n      width: 12px;\n      height: 1px;\n      border-top: 1px $borderColor solid;\n    }\n  }\n\n  &__sub {\n    position: relative;\n    padding-left: 12px;\n    &:before {\n      content: '';\n      display: block;\n      position: absolute;\n      width: 12px;\n      border-top: 1px $borderColor solid;\n      left: 0;\n      top: 12px;\n    }\n  }\n\n  &__title {\n    line-height: $lh;\n    color: $neutral-color-600;\n    padding-left: 4px;\n  }\n}\n",
                    "styleUrl": "./dc-tree.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div class=\"dc-tree\" *ngIf=\"config\">\n  <div class=\"dc-tree__name\">{{ config.name }}</div>\n  <div class=\"dc-tree__group\">\n    <div class=\"dc-tree__sub\" *ngIf=\"config.hpa as hpa\">\n      <div class=\"dc-tree__title\">hpa</div>\n      <div class=\"dc-tree__group\">\n        <div class=\"dc-tree__field\" *ngFor=\"let item of hpa | keyvalue\">\n          <hs-dc-tree-field\n            [name]=\"item.key\"\n            [value]=\"item.value\"\n          ></hs-dc-tree-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"dc-tree__sub\" *ngIf=\"config.deployment as deployment\">\n      <div class=\"dc-tree__title\">deployment</div>\n      <div class=\"dc-tree__group\" *ngIf=\"deployment.replicaCount\">\n        <div class=\"dc-tree__field\">\n          <hs-dc-tree-field\n            name=\"replicaCount\"\n            [value]=\"deployment.replicaCount\"\n          ></hs-dc-tree-field>\n        </div>\n      </div>\n    </div>\n    <div class=\"dc-tree__sub\" *ngIf=\"config.container as container\">\n      <div class=\"dc-tree__title\">container</div>\n      <div class=\"dc-tree__group\">\n        <div class=\"dc-tree__sub\" *ngIf=\"container.resources as req\">\n          <div class=\"dc-tree__title\">resources</div>\n          <div class=\"dc-tree__group\">\n            <div class=\"dc-tree__sub\" *ngIf=\"req.requests as requests\">\n              <div class=\"dc-tree__title\">requests</div>\n              <div class=\"dc-tree__group\">\n                <div\n                  class=\"dc-tree__field\"\n                  *ngFor=\"let item of requests | keyvalue\"\n                >\n                  <hs-dc-tree-field\n                    [name]=\"item.key\"\n                    [value]=\"item.value\"\n                  ></hs-dc-tree-field>\n                </div>\n              </div>\n            </div>\n            <div class=\"dc-tree__sub\" *ngIf=\"req.limits as limits\">\n              <div class=\"dc-tree__title\">limits</div>\n              <div class=\"dc-tree__group\">\n                <div\n                  class=\"dc-tree__field\"\n                  *ngFor=\"let item of limits | keyvalue\"\n                >\n                  <hs-dc-tree-field\n                    [name]=\"item.key\"\n                    [value]=\"item.value\"\n                  ></hs-dc-tree-field>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"dc-tree__group\">\n        <div class=\"dc-tree__sub\" *ngIf=\"container.env as envs\">\n          <div class=\"dc-tree__title\">env</div>\n          <div class=\"dc-tree__group\">\n            <hs-dc-tree-field\n              class=\"dc-tree__field\"\n              *ngFor=\"let env of envs | keyvalue\"\n              [name]=\"env.key\"\n              [value]=\"env.value\"\n            ></hs-dc-tree-field>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"dc-tree__sub\" *ngIf=\"config.pod as pod\">\n    <div class=\"dc-tree__title\">pod</div>\n    <div class=\"dc-tree__group\">\n      <div class=\"dc-tree__sub\" *ngIf=\"pod.tolerations as tolerations\">\n        <div class=\"dc-tree__title\">tolerations</div>\n        <div *ngFor=\"let toleration of tolerations\">\n          <div class=\"dc-tree__group\">\n            <div\n              class=\"dc-tree__field\"\n              *ngFor=\"let item of toleration | keyvalue\"\n            >\n              <hs-dc-tree-field\n                [name]=\"item.key\"\n                [value]=\"item.value\"\n              ></hs-dc-tree-field>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"dc-tree__sub\">\n        <div class=\"dc-tree__title\">nodeSelector</div>\n        <div class=\"dc-tree__group\">\n          <div\n            class=\"dc-tree__sub\"\n            *ngFor=\"let item of pod.nodeSelector | keyvalue\"\n          >\n            <hs-dc-tree-field\n              [name]=\"item.key\"\n              [value]=\"item.value\"\n            ></hs-dc-tree-field>\n          </div>\n        </div>\n      </div>\n      <div class=\"dc-tree__sub\" *ngIf=\"pod.affinity as affinity\">\n        <div class=\"dc-tree__title\">affinity</div>\n        <div class=\"dc-tree__group\">\n          <div class=\"dc-tree__sub\" *ngIf=\"affinity.nodeAffinity as na\">\n            <div class=\"dc-tree__title\">nodeAffinity</div>\n            <ng-container\n              [ngTemplateOutlet]=\"nodeAffinityTmpl\"\n              [ngTemplateOutletContext]=\"{ $implicit: na }\"\n            ></ng-container>\n          </div>\n          <div class=\"dc-tree__sub\">\n            <div class=\"dc-tree__title\" *ngIf=\"affinity.podAffinity as pf\">\n              podAffinity\n              <ng-container\n                [ngTemplateOutlet]=\"affinityTmpl\"\n                [ngTemplateOutletContext]=\"{ $implicit: pf }\"\n              ></ng-container>\n            </div>\n          </div>\n          <div class=\"dc-tree__sub\" *ngIf=\"affinity.podAntiAffinity as paf\">\n            <div class=\"dc-tree__title\">\n              podAntiAffinity\n            </div>\n            <ng-container\n              [ngTemplateOutlet]=\"affinityTmpl\"\n              [ngTemplateOutletContext]=\"{ $implicit: paf }\"\n            ></ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<!--templates-->\n<ng-template #nodeAffinityTmpl let-aff>\n  <div class=\"dc-tree__group\">\n    <div\n      class=\"dc-tree__sub\"\n      *ngIf=\"aff.requiredDuringSchedulingIgnoredDuringExecution\"\n    >\n      <div class=\"dc-tree__title\">\n        requiredDuringSchedulingIgnoredDuringExecution\n      </div>\n      <div class=\"dc-tree__group\">\n        <div class=\"dc-tree__sub\" *ngIf=\"aff.nodeSelectorTerms\">\n          <div class=\"dc-tree__title\">\n            nodeSelectorTerms\n          </div>\n          <div\n            class=\"dc-tree__group\"\n            *ngFor=\"let term of aff.nodeSelectorTerms as nst\"\n          >\n            <div\n              class=\"dc-tree__sub\"\n              *ngIf=\"nst.matchExpressions as matchExprs\"\n            >\n              <div class=\"dc-tree__title\">matchExpressions</div>\n              <div class=\"dc-tree__group\" *ngFor=\"let matchExpr of matchExprs\">\n                <ng-container\n                  [ngTemplateOutlet]=\"matchExprOrFieldTpl\"\n                  [ngTemplateOutletContext]=\"{ $implicit: matchExpr }\"\n                ></ng-container>\n              </div>\n            </div>\n            <div class=\"dc-tree__sub\" *ngIf=\"nst.matchFields as matchFields\">\n              <div class=\"dc-tree__title\">matchFields</div>\n              <div\n                class=\"dc-tree__group\"\n                *ngFor=\"let matchfield of matchFields\"\n              >\n                <ng-container\n                  [ngTemplateOutlet]=\"matchExprOrFieldTpl\"\n                  [ngTemplateOutletContext]=\"{ $implicit: matchfield }\"\n                ></ng-container>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"dc-tree__sub\"\n      *ngIf=\"aff.preferredDuringSchedulingIgnoredDuringExecution as prefs\"\n    >\n      <div class=\"dc-tree__title\">\n        preferredDuringSchedulingIgnoredDuringExecution\n      </div>\n      <div class=\"dc-tree__group\" *ngFor=\"let pref of prefs\">\n        <div class=\"dc-tree__sub\" *ngIf=\"pref.preference as preference\">\n          <div class=\"dc-tree__title\">Preference</div>\n          <div\n            class=\"dc-tree__group\"\n            *ngIf=\"preference.matchExpressions as matchExprs\"\n          >\n            <div class=\"dc-tree__sub\">\n              <div class=\"dc-tree__title\">Match Expressions</div>\n              <div class=\"dc-tree__group\" *ngFor=\"let matchfield of matchExprs\">\n                <ng-container\n                  [ngTemplateOutlet]=\"matchExprOrFieldTpl\"\n                  [ngTemplateOutletContext]=\"{ $implicit: matchfield }\"\n                ></ng-container>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #affinityTmpl let-aff>\n  <div class=\"dc-tree__group\">\n    <div\n      class=\"dc-tree__sub\"\n      *ngIf=\"aff.requiredDuringSchedulingIgnoredDuringExecution as pafReqs\"\n    >\n      <div class=\"dc-tree__title\">\n        requiredDuringSchedulingIgnoredDuringExecution\n      </div>\n      <div class=\"dc-tree__group\" *ngFor=\"let pafReq of pafReqs\">\n        <ng-container\n          [ngTemplateOutlet]=\"smth\"\n          [ngTemplateOutletContext]=\"{ $implicit: pafReq }\"\n        ></ng-container>\n      </div>\n    </div>\n    <div\n      class=\"dc-tree__sub\"\n      *ngIf=\"aff.preferredDuringSchedulingIgnoredDuringExecution as pafPref\"\n    >\n      <div class=\"dc-tree__title\">\n        preferredDuringSchedulingIgnoredDuringExecution\n      </div>\n      <ng-container\n        [ngTemplateOutlet]=\"affinityPref\"\n        [ngTemplateOutletContext]=\"{ $implicit: pafPref }\"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #affinityPref let-pref>\n  <div class=\"dc-tree__group\">\n    <div class=\"dc-tree__field\" *ngIf=\"pref.weight\">\n      <hs-dc-tree-field name=\"weight\" [value]=\"pref.weight\"></hs-dc-tree-field>\n    </div>\n    <div class=\"dc-tree__sub\" *ngIf=\"pref.podAffinityTerm as pAT\">\n      <div class=\"dc-tree__title\">\n        podAffinityTerm\n      </div>\n      <ng-container\n        [ngTemplateOutlet]=\"smth\"\n        [ngTemplateOutletContext]=\"{ $implicit: pAT }\"\n      ></ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<!-- TODO: rename -->\n<ng-template #smth let-item>\n  <div class=\"dc-tree__field\">\n    <hs-dc-tree-field\n      name=\"topologyKey\"\n      [value]=\"item.topologyKey\"\n    ></hs-dc-tree-field>\n  </div>\n  <div class=\"dc-tree__sub\" *ngIf=\"item.labelSelector as labelSelector\">\n    <div class=\"dc-tree__title\">\n      labelSelector\n    </div>\n    <div\n      class=\"dc-tree__group\"\n      *ngIf=\"labelSelector.matchExpressions as matchExprs\"\n    >\n      <div class=\"dc-tree__sub\">\n        <div class=\"dc-tree__title\">\n          matchExpressions\n          <div class=\"dc-tree__group\" *ngFor=\"let matchExpr of matchExprs\">\n            <ng-container\n              [ngTemplateOutlet]=\"matchExprOrFieldTpl\"\n              [ngTemplateOutletContext]=\"{ $implicit: matchExpr }\"\n            ></ng-container>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"dc-tree__group\"\n      *ngIf=\"labelSelector.matchLabels as matchLabels\"\n    >\n      <div class=\"dc-tree__sub\">\n        <div class=\"dc-tree__title\">\n          matchLabels\n          <div\n            class=\"dc-tree__group\"\n            *ngFor=\"let item of matchLabels | keyvalue\"\n          >\n            <hs-dc-tree-field\n              [name]=\"item.key\"\n              [value]=\"item.value\"\n            ></hs-dc-tree-field>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"dc-tree__sub\" *ngIf=\"item.namespaces\">\n    <div class=\"dc-tree__title\">namespaces</div>\n    <div class=\"dc-tree__group\">\n      <div class=\"dc-tree__sub\" *ngFor=\"let namespace of item.namespaces\">\n        {{ namespace }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #matchExprOrFieldTpl let-expr>\n  <div class=\"dc-tree__field\">\n    <hs-dc-tree-field name=\"key\" [value]=\"expr.key\"></hs-dc-tree-field>\n  </div>\n  <div class=\"dc-tree__field\">\n    <hs-dc-tree-field\n      name=\"operator\"\n      [value]=\"expr.operator\"\n    ></hs-dc-tree-field>\n  </div>\n  <div class=\"dc-tree__sub\" *ngIf=\"expr.values as values\">\n    <div class=\"dc-tree__title\">values</div>\n    <div class=\"dc-tree__group\">\n      <div class=\"dc-tree__sub\" *ngFor=\"let val of values\">\n        <span class=\"dc-tree__text\">{{ val }}</span>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #envMap let-envs>\n  <hs-dc-tree-field\n    *ngFor=\"let env of envs | keyvalue\"\n    [name]=\"env.key\"\n    [value]=\"env.value\"\n  ></hs-dc-tree-field>\n</ng-template>\n"
        },
        {
            "name": "DcTreeFieldComponent",
            "id": "component-DcTreeFieldComponent-3e9350cc6f9e2d30fe22e76990b03596",
            "file": "src/app/modules/deployment-configs/components/dc-tree-field/dc-tree-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-dc-tree-field",
            "styleUrls": [
                "./dc-tree-field.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"dc-tree-field\">    <div class=\"dc-tree-field__name\">{{ name }}</div>\n    <div class=\"dc-tree-field__value\">{{ value }}</div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string | number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-dc-tree-field',\n  template: `<div class=\"dc-tree-field\">\n    <div class=\"dc-tree-field__name\">{{ name }}</div>\n    <div class=\"dc-tree-field__value\">{{ value }}</div>\n  </div> `,\n  styleUrls: ['./dc-tree-field.component.scss'],\n})\nexport class DcTreeFieldComponent {\n  @Input() name: string;\n  @Input() value: string | number;\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.dc-tree-field {\n  display: flex;\n  padding: 0 4px;\n  width: 180px;\n  justify-content: space-between;\n\n  &__name {\n    color: $neutral-color-1000;\n  }\n\n  &__value {\n    color: $neutral-color-1000;\n    font-family: $font-family-bold;\n  }\n}\n",
                    "styleUrl": "./dc-tree-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            }
        },
        {
            "name": "DeploymentConfigDetailsComponent",
            "id": "component-DeploymentConfigDetailsComponent-c36fd9bdcc67f03f2e5639a008cf198b",
            "file": "src/app/modules/deployment-configs/containers/deployment-config-details/deployment-config-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-deployment-config-details",
            "styleUrls": [
                "./deployment-config-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./deployment-config-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "defaultDepConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "editMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { DeploymentConfig } from '@app/core/data/types';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport {\n  DEPLOYMENT_CONFIG_TOKEN,\n  DialogDeleteDeploymentConfigComponent,\n} from '@app/modules/dialogs/components';\nimport { defaultDepConfig } from '@app/modules/deployment-configs/mocks/depconfig.mock';\n\n@Component({\n  selector: 'hs-deployment-config-details',\n  templateUrl: './deployment-config-details.component.html',\n  styleUrls: ['./deployment-config-details.component.scss'],\n})\nexport class DeploymentConfigDetailsComponent implements OnInit {\n  config$: Observable<DeploymentConfig>;\n  editMode: boolean;\n  defaultDepConfig: string;\n  constructor(\n    private readonly facade: DeploymentConfigsFacade,\n    private readonly dialog: DialogsService\n  ) {}\n\n  ngOnInit() {\n    this.config$ = this.facade.selectedConfig();\n    this.defaultDepConfig = defaultDepConfig;\n  }\n\n  removeConfig(config: DeploymentConfig) {\n    this.dialog.createDialog({\n      component: DialogDeleteDeploymentConfigComponent,\n      providers: [{ provide: DEPLOYMENT_CONFIG_TOKEN, useValue: config }],\n    });\n  }\n\n  onDelete(name: string) {\n    this.facade.delete(name);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.deployment-config {\n  color: $neutral-color-900;\n  margin: 24px;\n  padding: 24px;\n  border: 1px $neutral-color-200 solid;\n  border-radius: 4px;\n  position: relative;\n  background: white;\n  &__buttons {\n    position: absolute;\n    right: 24px;\n    top: 24px;\n  }\n}\n",
                    "styleUrl": "./deployment-config-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"deployment-config\" *ngIf=\"config$ | async as config\">\n  <button\n    *ngIf=\"config.name !== defaultDepConfig\"\n    hs-button\n    kind=\"flat\"\n    color=\"warning\"\n    class=\"deployment-config__buttons\"\n    (click)=\"removeConfig(config)\"\n  >\n    delete\n  </button>\n\n  <hs-dc-tree [config]=\"config\"></hs-dc-tree>\n</div>\n"
        },
        {
            "name": "DeploymentConfigsPageComponent",
            "id": "component-DeploymentConfigsPageComponent-d63ea70b8aa247f395c59bb7995f1c32",
            "file": "src/app/modules/deployment-configs/pages/deployment-configs-page/deployment-configs-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-deployment-configs-page",
            "styleUrls": [
                "./deployment-configs-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./deployment-configs-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "all$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "configs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "error",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<string>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "toggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addDeploymentConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleBookmark",
                    "args": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSidebarClick",
                    "args": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { DeploymentConfig } from '@app/core/data/types';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { RedirectService } from '@app/core/redirect.service';\n\n@Component({\n  selector: 'hs-deployment-configs-page',\n  templateUrl: './deployment-configs-page.component.html',\n  styleUrls: ['./deployment-configs-page.component.scss'],\n})\nexport class DeploymentConfigsPageComponent implements OnDestroy {\n  configs$: Observable<DeploymentConfig[]>;\n  selectedConfig$: Observable<DeploymentConfig>;\n  error$: Observable<string>;\n\n  private all$: Observable<DeploymentConfig[]>;\n  private error: Subject<string> = new Subject<string>();\n\n  private toggle: boolean;\n\n  constructor(\n    private readonly facade: DeploymentConfigsFacade,\n    private readonly router: Router,\n    private redirectService: RedirectService,\n  ) {\n    this.error$ = this.error.asObservable();\n\n    this.all$ = this.facade.getAll();\n    this.configs$ = this.facade.visibleDepConfigs$;\n\n    this.selectedConfig$ = this.facade.selectedConfig();\n\n    this.redirectService.redirectToFirst(this.all$, 'deployment_configs');\n\n    this.toggle = false;\n  }\n\n  addDeploymentConfig(): void {\n    this.toggle = true;\n    this.router.navigate([`deployment_configs/create`]);\n  }\n\n  ngOnDestroy() {\n    this.toggle = false;\n  }\n\n  handleSidebarClick(config: DeploymentConfig): void {\n    this.router.navigate([`deployment_configs/${config.name}`]);\n  }\n\n  handleFilter(filter: string): void {\n    this.facade.onFilter(filter);\n  }\n\n  handleBookmark(config: DeploymentConfig): void {\n    this.facade.toggleFavorite(config);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.deployment-config-page {\n  display: flex;\n  height: 100%;\n\n  &__sidebar {\n    min-width: 250px;\n    width: 250px;\n  }\n\n  &__button {\n    width: 100%;\n  }\n\n  &__body {\n    height: calc(100% - 72px);\n    overflow: auto;\n    width: 100%;\n  }\n\n  &__message {\n    font-size: 24px;\n    padding: 24px;\n    text-align: center;\n\n    &-link {\n      color: $primary-color-700;\n    }\n  }\n}\n",
                    "styleUrl": "./deployment-configs-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<div class=\"deployment-config-page\">\n  <div class=\"deployment-config-page__sidebar\" hsHideInZenMode>\n    <hs-sidebar\n      [sidebarData]=\"configs$ | async\"\n      [selectedItem]=\"selectedConfig$ | async\"\n      (filtered)=\"handleFilter($event)\"\n      (bookmarked)=\"handleBookmark($event)\"\n      (clicked)=\"handleSidebarClick($event)\"\n    >\n      <button\n        class=\"button deployment-config-page__button\"\n        hs-button\n        kind=\"flat\"\n        color=\"primary\"\n        (click)=\"addDeploymentConfig()\"\n        #button\n      >\n        create config\n      </button>\n    </hs-sidebar>\n  </div>\n  <div class=\"deployment-config-page__body\" *ngIf=\"configs$ | async as configs\">\n    <ng-container *ngIf=\"(configs && configs.length) || toggle; else notify\">\n      <router-outlet></router-outlet>\n    </ng-container>\n  </div>\n\n  <ng-template #notify>\n    <div class=\"deployment-config-page__message\">\n      <a\n        class=\"deployment-config-page__message-link\"\n        href=\"https://docs.hydrosphere.io/quickstart/tutorials/deployment-configuration\"\n        target=\"_blank\"\n        >Upload</a\n      >\n      first deployment config\n    </div>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "DialogAddApplicationComponent",
            "id": "component-DialogAddApplicationComponent-861185feffce4ac3742c055e06c6c08e",
            "file": "src/app/modules/dialogs/components/dialog-add-application/dialog-add-application.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog-add-application.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ApplicationFormComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'applicationForm', {static: true}"
                        }
                    ]
                },
                {
                    "name": "deploymentConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\n\nimport { DialogsService } from '../../dialogs.service';\nimport { ApplicationFormComponent } from '@app/modules/applications/components/forms';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { Observable } from 'rxjs';\nimport { DeploymentConfig, ModelVersion } from '@app/core/data/types';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\n\n@Component({\n  templateUrl: './dialog-add-application.component.html',\n})\nexport class DialogAddApplicationComponent {\n  @ViewChild('applicationForm', { static: true })\n  ApplicationFormComponent: ApplicationFormComponent;\n\n  modelVersions$: Observable<ModelVersion[]>;\n  deploymentConfig$: Observable<DeploymentConfig>;\n\n  constructor(\n    private dialog: DialogsService,\n    private facade: ApplicationsFacade,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private depConfigsFacade: DeploymentConfigsFacade,\n  ) {\n    this.modelVersions$ =\n      modelVersionsFacade.internalReleasedNonMetricModelVersions();\n    this.deploymentConfig$ = depConfigsFacade.defaultDepConfig();\n  }\n\n  public onClose(): void {\n    this.dialog.closeDialog();\n  }\n\n  public onSubmit(data): void {\n    this.facade.addApplication(data);\n    this.onClose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<hs-application-form\n  (submitHandle)=\"onSubmit($event)\"\n  [modelVersions]=\"modelVersions$ | async\"\n  [deploymentConfig]=\"deploymentConfig$ | async\"\n  #form\n></hs-application-form>\n<div class=\"dialog__footer\">\n  <div class=\"dialog__buttons\">\n    <button hs-button (click)=\"onClose()\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      [disabled]=\"!form?.applicationForm?.valid\"\n      (click)=\"form.submit()\"\n    >\n      add application\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-4017f42caca3316eb31a5052028537af",
            "file": "src/app/modules/dialogs/containers/dialog/dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "containerElRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "containerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anchor', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isAnimationDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "layoutRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'layout', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAnimationEvent",
                    "args": [
                        {
                            "name": "e",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "AnimationEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEsc",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onLayoutClick",
                    "args": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ViewContainerRef,\n  ElementRef,\n  HostListener,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport { DialogsService } from '../../dialogs.service';\n\nimport {\n  group,\n  state,\n  trigger,\n  style,\n  transition,\n  animate,\n  query,\n  AnimationEvent,\n} from '@angular/animations';\n\n@Component({\n  selector: 'hs-dialog',\n  templateUrl: './dialog.component.html',\n  styleUrls: ['./dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('openClose', [\n      state('close', style({ transform: 'scale(0)', display: 'none' })),\n      transition('close => open', [\n        style({ transform: 'scale(1)', display: 'flex' }),\n        query('.dialog__container', [\n          style({ opacity: 0, top: '-60px' }),\n          animate('.2s ease-in', style({ opacity: 1, top: 0 })),\n        ]),\n      ]),\n      transition('open => close', [\n        group([\n          query('.dialog__container', [\n            animate('.2s ease-in', style({ top: '60px' })),\n          ]),\n          animate('.2s', style({ opacity: 0 })),\n        ]),\n      ]),\n    ]),\n  ],\n})\nexport class DialogComponent implements OnInit {\n  @ViewChild('anchor', { read: ViewContainerRef, static: true })\n  containerRef: ViewContainerRef;\n\n  @ViewChild('container', { read: ElementRef, static: true })\n  containerElRef: ElementRef;\n\n  @ViewChild('layout', { static: true })\n  layoutRef: ElementRef;\n\n  public isAnimationDisabled: boolean = false;\n\n  constructor(public dialog: DialogsService) {}\n\n  @HostListener('document:keydown.escape')\n  public onEsc(): void {\n    this.dialog.closeDialog();\n  }\n\n  ngOnInit(): void {\n    this.dialog.setViewContainerRef(this.containerRef);\n    this.dialog.setContainerElementRef(this.containerElRef);\n  }\n\n  onLayoutClick(e: Event): void {\n    if (e.target === this.layoutRef.nativeElement) {\n      this.closeDialog();\n    }\n  }\n\n  closeDialog() {\n    this.dialog.closeDialog();\n  }\n\n  onAnimationEvent(e: AnimationEvent): void {\n    if (e.fromState === 'open' && e.toState === 'close') {\n      this.dialog.clearContainer();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/styles/variables';\n\n.dialog {\n  &__layout {\n    will-change: transform;\n    width: 100%;\n    background: rgba(0, 0, 0, 0.24);\n    height: 100%;\n    box-sizing: border-box;\n    position: absolute;\n    top: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 9999;\n  }\n\n  &__container {\n    position: relative;\n    background: white;\n    padding: 24px 24px 20px;\n    box-shadow: 0px 0px 40px -10px black;\n    max-height: calc(100% - 48px);\n    max-width: calc(100% - 48px);\n    overflow-y: scroll;\n  }\n\n  &__close-icon {\n    cursor: pointer;\n    color: black;\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: 16px;\n    width: 16px;\n  }\n\n  &__header {\n  }\n\n  &__content {\n    &--question {\n      display: inline-block;\n      line-height: 18px;\n      max-width: 300px;\n      min-width: 240px;\n      text-align: center;\n    }\n  }\n\n  &__text {\n    font-size: 12px;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    text-align: center;\n    color: $neutral-color-400;\n\n    &--is-alert {\n      color: $supportive-color-red-700;\n    }\n  }\n\n  &__footer {\n    border-top: 1px grey solid;\n  }\n\n  &__buttons {\n    margin-top: 12px;\n    display: flex;\n    justify-content: space-between;\n\n    &--column {\n      width: 100%;\n      flex-direction: column;\n\n      button + button {\n        margin-top: 8px;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  class=\"dialog__layout\"\n  [@.disabled]=\"isAnimationDisabled\"\n  [@openClose]=\"(this.dialog.show$ | async) ? 'open' : 'close'\"\n  (@openClose.done)=\"onAnimationEvent($event)\"\n  (click)=\"onLayoutClick($event)\"\n  #layout\n>\n  <div class=\"dialog__container\" #container>\n    <ng-container #anchor></ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogDeleteApplicationComponent",
            "id": "component-DialogDeleteApplicationComponent-686b1ce216d34dfaecd1f586ea8c1f7e",
            "file": "src/app/modules/dialogs/components/dialog-delete-application/dialog-delete-application.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog-delete-application.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\n\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { Application } from '@app/core/data/types';\n\nimport { DialogsService } from '../../dialogs.service';\n\nexport const SELECTED_DEL_APPLICATION = new InjectionToken<Application>(\n  'selectedApplication'\n);\n\n@Component({\n  templateUrl: './dialog-delete-application.component.html',\n})\nexport class DialogDeleteApplicationComponent {\n  get name(): string {\n    return this.application.name;\n  }\n\n  constructor(\n    private facade: ApplicationsFacade,\n    public dialog: DialogsService,\n    @Inject(SELECTED_DEL_APPLICATION)\n    private application: Application\n  ) {}\n\n  public onDelete() {\n    this.facade.deleteApplication(this.application);\n    this.dialog.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"dialog__content dialog__content--center\">\n  <span class=\"dialog__content--question\">Remove application?</span>\n  <p class=\"dialog__text dialog__text--is-alert\">{{ name }}</p>\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"dialog.closeDialog()\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"warning\"\n      (click)=\"onDelete()\"\n      hsAutofocused\n    >\n      Remove\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogDeleteDeploymentConfigComponent",
            "id": "component-DialogDeleteDeploymentConfigComponent-89c00f6e81489c6257ed5c3b5d710949",
            "file": "src/app/modules/dialogs/components/dialog-delete-deployment-config/dialog-delete-deployment-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog-delete-deployment-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-delete-deployment-config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\n\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { DeploymentConfig } from '@app/core/data/types';\n\nimport { DialogsService } from '../../dialogs.service';\n\nexport const DEPLOYMENT_CONFIG_TOKEN = new InjectionToken(\n  'deployment config name'\n);\n\n@Component({\n  templateUrl: './dialog-delete-deployment-config.component.html',\n  styleUrls: ['./dialog-delete-deployment-config.component.scss'],\n})\nexport class DialogDeleteDeploymentConfigComponent {\n  get name(): string {\n    return this.config.name;\n  }\n\n  constructor(\n    public dialog: DialogsService,\n    private facade: DeploymentConfigsFacade,\n    @Inject(DEPLOYMENT_CONFIG_TOKEN)\n    private config: DeploymentConfig\n  ) {}\n\n  onDelete() {\n    this.facade.delete(this.config.name);\n    this.dialog.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px;\n  &__text {\n    font-size: 14px;\n    letter-spacing: 2px;\n    text-transform: uppercase;\n    margin-bottom: 16px;\n    text-align: center;\n  }\n  &__servable-name {\n    font-size: 12px;\n    color: #4a4b5285;\n  }\n  &__buttons {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  &__button {\n    justify-content: center;\n    padding: 12px;\n  }\n\n  &__button + &__button {\n    margin-top: 4px;\n  }\n}",
                    "styleUrl": "./dialog-delete-deployment-config.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "config",
                        "type": "DeploymentConfig",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "config",
                        "type": "DeploymentConfig",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 17
                    }
                }
            },
            "templateData": "<div class=\"dialog__content\">\n  <span class=\"dialog__content--question\">Remove deployment config?</span>\n  <p class=\"dialog__text dialog__text--is-alert\">{{ name }}</p>\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"dialog.closeDialog()\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"warning\"\n      (click)=\"onDelete()\"\n      hsAutofocused\n    >\n      Remove\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogDeleteMetricComponent",
            "id": "component-DialogDeleteMetricComponent-218622b2334315306097c885e006f2d5",
            "file": "src/app/modules/dialogs/components/dialog-delete-metric/dialog-delete-metric.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "dialog-delete-metric.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "dialog-delete-metric.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metricId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  InjectionToken,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\n\nimport { DialogsService } from '../../dialogs.service';\nimport { MetricsFacade } from '../../../monitoring/store/facades/metrics.facade';\n\nexport const METRIC_ID_VALUE = new InjectionToken<string>('metric id value');\n\n@Component({\n  templateUrl: 'dialog-delete-metric.component.html',\n  styleUrls: ['dialog-delete-metric.component.scss'],\n})\nexport class DialogDeleteMetricComponent {\n  @Output() closed: EventEmitter<any> = new EventEmitter();\n  @Input() metricId: string;\n  constructor(private dialog: DialogsService, private facade: MetricsFacade) {}\n\n  public onClose(): void {\n    this.closed.next();\n  }\n\n  public onDelete() {\n    this.facade.deleteMetric(this.metricId);\n    this.closed.next();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host-context {\n  position: absolute;\n  width: 100%;\n  left: 0;\n}\n\n.wrapper {\n  position: absolute;\n  left: calc(50% - 142px);\n  top: -24px;\n  width: 284px;\n  padding: 24px;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  animation: dropDown .3s ease-in forwards;\n  box-shadow: 0 2px 4px -2px black;\n}\n\n@keyframes dropDown {\n  0% { transform: translateY(-100%); }\n  100% { transform: translateY(0%);}\n}\n",
                    "styleUrl": "dialog-delete-metric.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"dialog__content wrapper\">\n  <div class=\"doalog__question\">\n    <span>Remove metric?</span>\n  </div>\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"onClose()\" type=\"button\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"warning\"\n      (click)=\"onDelete()\"\n      hsAutofocused\n    >\n      Remove\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogDeleteModelComponent",
            "id": "component-DialogDeleteModelComponent-fcd62f60bac3f698502f33ec497337dd",
            "file": "src/app/modules/dialogs/components/dialog-delete-model/dialog-delete-model.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-dialog-delete-model",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog-delete-model.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { Model } from '@app/core/data/types';\n\nexport const SELECTED_MODEL = new InjectionToken<Model>('selected model');\n\n@Component({\n  selector: 'hs-dialog-delete-model',\n  templateUrl: './dialog-delete-model.component.html',\n})\nexport class DialogDeleteModelComponent {\n  get name(): string {\n    return this.model.name;\n  }\n\n  constructor(\n    public dialog: DialogsService,\n    private modelsFacade: ModelsFacade,\n    @Inject(SELECTED_MODEL) private model: Model\n  ) {}\n\n  onClose(): void {\n    this.dialog.closeDialog();\n  }\n\n  onDelete(): void {\n    this.modelsFacade.deleteModel(this.model.id);\n    this.onClose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "model",
                        "type": "Model",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "model",
                        "type": "Model",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "templateData": "<div class=\"dialog__content model__delete\">\n  <span class=\"dialog__content--question\">Remove model?</span>\n  <p class=\"dialog__text dialog__text--is-alert model-delete__name\">\n    {{ name }}\n  </p>\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"onClose()\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"warning\"\n      (click)=\"onDelete()\"\n      hsAutofocused\n      class=\"model-delete__button\"\n    >\n      Remove\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogDeleteServableComponent",
            "id": "component-DialogDeleteServableComponent-b2f0394a43b54fcead38dd9beae0d562",
            "file": "src/app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog-delete-servable.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-delete-servable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "servableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { DialogsService } from '../../dialogs.service';\n\nimport { deleteServable } from '@app/core/store/actions/servables.actions';\nimport { State } from '@app/core/store/states/servables.state';\n\nexport const SERVABLE_NAME_TOKEN = new InjectionToken('servable full name');\n\n@Component({\n  templateUrl: './dialog-delete-servable.component.html',\n  styleUrls: ['./dialog-delete-servable.component.scss'],\n})\nexport class DialogDeleteServableComponent {\n  servableName: string;\n  constructor(\n    private dialogService: DialogsService,\n    @Inject(SERVABLE_NAME_TOKEN) servableName: string,\n    private store: Store<State>\n  ) {\n    this.servableName = servableName;\n  }\n\n  onDelete() {\n    this.store.dispatch(deleteServable({ name: this.servableName }));\n    this.onClose();\n  }\n  onClose() {\n    this.dialogService.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 12px;\n  &__text {\n    font-size: 14px;\n    letter-spacing: 2px;\n    text-transform: uppercase;\n    margin-bottom: 16px;\n    text-align: center;\n  }\n  &__servable-name {\n    font-size: 12px;\n    color: #4a4b5285;\n  }\n  &__buttons {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  &__button {\n    justify-content: center;\n    padding: 12px;\n  }\n\n  &__button + &__button {\n    margin-top: 4px;\n  }\n}",
                    "styleUrl": "./dialog-delete-servable.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "servableName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "servableName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<State>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"dialog__content\">\n  <span class=\"dialog__content--question\">Remove servable?</span>\n  <div class=\"dialog__text\">\n    {{ servableName }}\n  </div>\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"onClose()\">\n      cancel\n    </button>\n    <button hs-button kind=\"flat\" color=\"warning\" (click)=\"onDelete()\">\n      Remove\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogMetricComponent",
            "id": "component-DialogMetricComponent-965802b871d37248a767226901dc8409",
            "file": "src/app/modules/dialogs/components/dialog-metric/dialog-metric.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog-metric.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-metric.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allModelVersions$",
                    "defaultValue": "this.modelVersionsFacade\n    .allModelVersions()\n    .pipe(map(mvs => mvs.filter(mv => !mv.isExternal)))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "models$",
                    "defaultValue": "this.modelsFacade.allModels()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model[]>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "geOutputNames",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  InjectionToken,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport {\n  Model,\n  ModelVersion,\n  MetricSpecification,\n  MetricSpecificationRequest,\n} from '@app/core/data/types';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\n\nimport { cmpOperators } from '../../../monitoring/models';\nimport { MetricsFacade } from '../../../monitoring/store/facades/metrics.facade';\n\nexport const metricSpec = new InjectionToken<MetricSpecification>(\n  'metric spec id'\n);\n\n@Component({\n  templateUrl: './dialog-metric.component.html',\n  styleUrls: ['./dialog-metric.component.scss'],\n})\nexport class DialogMetricComponent implements OnInit {\n  @Input() modelVersion: ModelVersion;\n  @Output() closed: EventEmitter<any> = new EventEmitter();\n\n  form: FormGroup;\n  models$: Observable<Model[]> = this.modelsFacade.allModels();\n\n  allModelVersions$: Observable<\n    ModelVersion[]\n  > = this.modelVersionsFacade\n    .allModelVersions()\n    .pipe(map(mvs => mvs.filter(mv => !mv.isExternal)));\n  modelVersions$: Observable<ModelVersion[]>;\n\n  constructor(\n    private fb: FormBuilder,\n    private modelsFacade: ModelsFacade,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private customValidators: CustomValidatorsService,\n    private metricsFacade: MetricsFacade\n  ) {}\n  ngOnInit() {\n    this.createForm();\n\n    const modelChange = this.form.get('config').get('model').valueChanges;\n    modelChange.subscribe();\n\n    this.modelVersions$ = combineLatest([\n      modelChange,\n      this.allModelVersions$,\n    ]).pipe(\n      map(([model, modelVersions]) => {\n        return modelVersions.filter(mv => mv.model.id === model.id);\n      })\n    );\n  }\n\n  geOutputNames(modelVersion: ModelVersion): string[] {\n    return modelVersion ? modelVersion.contractOutputs.map(_ => _.name) : [];\n  }\n\n  onSubmit() {\n    if (this.form.invalid) {\n      return;\n    }\n\n    const {\n      config: { threshold, thresholdCmpOperator, modelVersionId },\n      name,\n    } = this.form.value;\n\n    const params: MetricSpecificationRequest = {\n      name,\n      modelVersionId: this.modelVersion.id,\n      config: {\n        threshold: +threshold,\n        thresholdCmpOperator,\n        modelVersionId,\n      },\n    };\n\n    this.metricsFacade.addMetric(params);\n    this.onClose();\n  }\n\n  onClose() {\n    this.closed.next();\n  }\n\n  private createForm() {\n    this.form = this.fb.group({\n      name: [\n        '',\n        [\n          Validators.required,\n          Validators.maxLength(50),\n          this.customValidators.metricNameFormat(),\n        ],\n      ],\n      config: this.fb.group({\n        threshold: this.fb.control('', [\n          Validators.required,\n          this.customValidators.pattern(\n            this.customValidators.VALIDATION_PATTERNS.floatNumber\n          ),\n        ]),\n        thresholdCmpOperator: this.fb.control(\n          cmpOperators[0],\n          Validators.required\n        ),\n        model: this.fb.control('', Validators.required),\n        modelVersionId: this.fb.control('', Validators.required),\n      }),\n      kind: ['CustomModelMetricSpec', Validators.required],\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables.scss\";\n:host-context {\n  position: absolute;\n  width: 100%;\n  left: 0;\n}\n\n.dform {\n  padding: 24px;\n  background: white;\n  position: absolute;\n  top: -24px;\n  right: 0;\n  left: 0;\n  z-index: 9999;\n  transform: translateY(-100%);\n  animation: dropDown .4s ease-in forwards;\n  box-shadow: 0px 0px 10px 0px $neutral-color-700;\n}\n\n@keyframes dropDown {\n  0% { transform: translateY(-100%); }\n  100% { transform: translateY(0%);}\n}\n\nlabel.disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.form-actions {\n  &__button {\n    margin-right: 24px;\n  }\n}\n\n.buttons {\n  margin-top: 12px;\n  display: flex;\n  justify-content: flex-end;\n  button + button {\n    margin-left: 8px;\n  }\n  \n}\n\n.row {\n  padding: 10px 0;\n}\n\n.input {\n  border: none;\n  font-size: 16px;\n  margin-left: 4px;\n  // color: #3c435a;\n  font-weight: bold;\n  letter-spacing: 1px;\n}\n\n.config {\n  margin-bottom: 12px\n}\n\n.metric {\n  &__error-list {\n    position: relative;\n    width: 100%\n  }\n}",
                    "styleUrl": "./dialog-metric.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dform\">\n  <form [formGroup]=\"form\" class=\"form\">\n    <hs-input-text\n      class=\"metric__name\"\n      name=\"metricName\"\n      label=\"Metric Name\"\n      formControlName=\"name\"\n    >\n    </hs-input-text>\n    <ng-container\n      *ngIf=\"\n        form.get('name').dirty && form.get('name').getError('format');\n        let error\n      \"\n    >\n      <ul class=\"error__list metric__error-list\">\n        <li class=\"error__item\">\n          {{ error }}\n        </li>\n      </ul>\n    </ng-container>\n    <div>\n      <hs-metric-spec-config\n        class=\"config\"\n        [parent]=\"form\"\n        [models]=\"models$ | async\"\n        [modelVersions]=\"modelVersions$ | async\"\n      >\n      </hs-metric-spec-config>\n    </div>\n  </form>\n  <div class=\"buttons\">\n    <button hs-button (click)=\"onClose()\" hsAutofocused>\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      [disabled]=\"!form.valid\"\n      (click)=\"onSubmit()\"\n    >\n      Add Metric\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogMetricsComponent",
            "id": "component-DialogMetricsComponent-633c593dd9cbbddc68ba64ff44bc0807",
            "file": "src/app/modules/dialogs/components/dialog-metrics/dialog-metrics.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-dialog-metrics",
            "styleUrls": [
                "./dialog-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-metrics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "layout",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "metrics$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<MetricSpecification[]>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "modelVersion$",
                    "defaultValue": "this.modelVersionsFacade.selectedModelVersion()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "vcr",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ViewContainerRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "modelVersionById$",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddMetric",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteMetric",
                    "args": [
                        {
                            "name": "metricId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metricId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n  Component,\n} from '@angular/core';\nimport { DialogMetricComponent } from '../dialog-metric/dialog-metric.component';\nimport { DialogDeleteMetricComponent } from '../dialog-delete-metric/dialog-delete-metric.component';\nimport { Observable } from 'rxjs';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { MetricSpecification, ModelVersion } from '@app/core/data/types';\n\nimport { MetricsFacade } from '../../../monitoring/store/facades/metrics.facade';\n\n@Component({\n  selector: 'hs-dialog-metrics',\n  templateUrl: './dialog-metrics.component.html',\n  styleUrls: ['./dialog-metrics.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DialogMetricsComponent implements OnInit {\n  layout: boolean = false;\n  metrics$: Observable<MetricSpecification[]>;\n  modelVersion$: Observable<ModelVersion> =\n    this.modelVersionsFacade.selectedModelVersion();\n\n  @ViewChild('container', { read: ViewContainerRef, static: true })\n  private vcr: ViewContainerRef;\n\n  constructor(\n    private dialog: DialogsService,\n    private resolver: ComponentFactoryResolver,\n    private metricsFacade: MetricsFacade,\n    private modelVersionsFacade: ModelVersionsFacade,\n  ) {}\n\n  onAddMetric(modelVersion: ModelVersion) {\n    event.preventDefault();\n    try {\n      this.layout = true;\n      this.vcr.clear();\n      const factory = this.resolver.resolveComponentFactory(\n        DialogMetricComponent,\n      );\n      const component = this.vcr.createComponent(factory);\n      component.instance.modelVersion = modelVersion;\n      component.instance.closed.subscribe(_ => {\n        this.layout = false;\n        this.vcr.clear();\n      });\n    } catch (error) {\n      console.error(error);\n      this.vcr.clear();\n    }\n  }\n\n  ngOnInit() {\n    this.metrics$ = this.metricsFacade.getSelectedMetrics();\n  }\n\n  modelVersionById$(id) {\n    return this.modelVersionsFacade.modelVersionById(id);\n  }\n\n  onDeleteMetric(metricId: string) {\n    try {\n      this.layout = true;\n      this.vcr.clear();\n      const factory = this.resolver.resolveComponentFactory(\n        DialogDeleteMetricComponent,\n      );\n      const component = this.vcr.createComponent(factory);\n      component.instance.metricId = metricId;\n      component.instance.closed.subscribe(() => {\n        this.layout = false;\n        this.vcr.clear();\n      });\n    } catch (error) {\n      this.vcr.clear();\n    }\n  }\n\n  onClose() {\n    this.dialog.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.add-metric-button {\n  margin: 8px 0;\n  display: block;\n}\n\n.wrap {\n  padding: 24px;\n  overflow: auto;\n  position: relative;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.layout {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #3c4344ab;\n}\n\n.buttons {\n  display: flex;\n  justify-content: flex-end;\n  .button {\n    padding: 12px;\n  }\n}\n\n.metrics {\n  &__table {\n    border-collapse: collapse;\n    width: 100%;\n    margin-bottom: 12px;\n    &-row {\n      border-bottom: 1px solid $neutral-color-200;\n      &--disabled {\n        background: $neutral-color-100;\n      }\n    }\n    &-cell {\n      padding: 10px 6px;\n      color: $neutral-color-800;\n      font-family: $font-family-light;\n    }\n    &-head {\n      color: $neutral-color-900;\n      font-family: $font-family-bold;\n      font-size: 12px;\n    }\n  }\n  &__empty {\n    position: absolute;\n    top: 22%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: $neutral-color-400;\n    font-family: $font-family-bold;\n    font-size: 12px;\n  }\n}\n\n.metric {\n  &__actions {\n    display: flex;\n  }\n  &__action {\n    cursor: pointer;\n    color: $neutral-color-700;\n    margin-left: 8px;\n    &:hover {\n      color: $neutral-color-900;\n    }\n  }\n}\n",
                    "styleUrl": "./dialog-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metricsFacade",
                        "type": "MetricsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrap\">\n  <ng-container #container></ng-container>\n\n  <div class=\"metrics\">\n    <ng-container *ngIf=\"modelVersion$ | async as modelVersion\">\n      <button\n        hs-button\n        kind=\"flat\"\n        color=\"primary\"\n        (click)=\"onAddMetric(modelVersion)\"\n      >\n        add metric\n      </button>\n    </ng-container>\n\n    <table class=\"metrics__table\">\n      <tr class=\"metrics__table-row\">\n        <td class=\"metrics__table-cell metrics__table-head\">Name</td>\n        <td class=\"metrics__table-cell metrics__table-head\">ModelVersion</td>\n        <td class=\"metrics__table-cell metrics__table-head\">Servable</td>\n        <td class=\"metrics__table-cell metrics__table-head\">Operator</td>\n        <td class=\"metrics__table-cell metrics__table-head\">Threshold</td>\n        <td class=\"metrics__table-cell metrics__table-head\">Actions</td>\n      </tr>\n      <ng-container *ngIf=\"metrics$ | async as metrics\">\n        <ng-container *ngIf=\"metrics.length > 0; else emptyMetrics\">\n          <tr\n            class=\"metrics__table-row\"\n            *ngFor=\"let metric of metrics$ | async\"\n            [ngClass]=\"{\n          'metrics__table-row--disabled': metric.id.startsWith('fake-id')\n        }\"\n          >\n            <td class=\"metrics__table-cell\">{{ metric.name }}</td>\n            <td class=\"metrics__table-cell\">\n              <ng-container\n                *ngIf=\"\n              modelVersionById$(metric.config?.modelVersionId)\n                | async as modelVersion\n            \"\n              >\n                {{ modelVersion.model.name }}:{{ modelVersion.modelVersion }}\n              </ng-container>\n            </td>\n            <td class=\"metrics__table-cell\">\n              {{ metric.config?.servable?.fullName }}\n            </td>\n            <td class=\"metrics__table-cell\">\n              {{ metric.config?.thresholdCmpOperator?.kind }}\n            </td>\n            <td class=\"metrics__table-cell\">{{ metric.config?.threshold }}</td>\n            <td class=\"metrics__table-cell\">\n              <div class=\"metric__actions\" *ngIf=\"!metric.id.startsWith('fake-id')\">\n                <div class=\"metric__action\" (click)=\"onDeleteMetric(metric.id)\">\n                  <hs-icon\n                    class=\"hs-button__icon metric__action-icon\"\n                    type=\"icon-remove\"\n                  ></hs-icon>\n                </div>\n              </div>\n            </td>\n          </tr>\n        </ng-container>\n        <ng-template #emptyMetrics>\n          <div class=\"metrics__empty\">\n            Metrics list is empty\n          </div>\n        </ng-template>\n      </ng-container>\n    </table>\n  </div>\n\n  <div class=\"buttons\">\n    <button hs-button (click)=\"onClose()\" hsAutofocused>close</button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogRequestsErrorsComponent",
            "id": "component-DialogRequestsErrorsComponent-ded193c8a7876057dcadb4a5d0816fb6",
            "file": "src/app/modules/dialogs/components/dialog-requests-errors/dialog-requests-errors.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog-requests-errors.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-requests-errors.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "REQUESTS_ERRORS"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\nexport const REQUESTS_ERRORS = new InjectionToken<Array<null | string>>(\n  'requests errors array'\n);\n\n@Component({\n  templateUrl: './dialog-requests-errors.component.html',\n  styleUrls: ['./dialog-requests-errors.component.scss'],\n})\nexport class DialogRequestsErrorsComponent {\n  constructor(\n    private dialog: DialogsService,\n    @Inject(REQUESTS_ERRORS) public errors: Array<string | null>\n  ) {}\n\n  close() {\n    this.dialog.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.request-errors {\n  &__table {\n    border-collapse: collapse;\n  }\n\n  &__cell, &__head {\n    color: $neutral-color-900;\n    border: 1px $neutral-color-300 solid;\n    padding: 4px 8px;\n  }\n\n  &__cell {\n    &--failed {\n      background: $supportive-color-red-100;\n      color: $supportive-color-red-800;\n    }\n  }\n\n  &__head {\n    background-color: $neutral-color-100;\n    color: $neutral-color-700;\n    font-family: $font-family-light;\n  }\n}",
                    "styleUrl": "./dialog-requests-errors.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "errors",
                        "type": "Array<string | null>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errors",
                        "type": "Array<string | null>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"dialog__content request-errors\">\n  <table class=\"request-errors__table\">\n    <tr class=\"request-errors__row\">\n      <td class=\"request-errors__head\">Request</td>\n      <td class=\"request-errors__head\">error</td>\n    </tr>\n    <tr class=\"request-errors__row\" *ngFor=\"let error of errors; let i = index\">\n      <td class=\"request-errors__cell\">{{ i }}</td>\n      <td\n        class=\"request-errors__cell\"\n        [ngClass]=\"{ 'request-errors__cell--failed': error }\"\n      >\n        {{ error }}\n      </td>\n    </tr>\n  </table>\n\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"close()\" type=\"button\">\n      close\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogTestComponent",
            "id": "component-DialogTestComponent-60336c7b8d0c5d5b9a0b99f670c25468",
            "file": "src/app/modules/dialogs/components/dialog-test/dialog-test.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TestApplicationFacade"
                }
            ],
            "styleUrls": [
                "./dialog-test.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-test.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "SELECTED_APPLICATION"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "generatingInput",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "generatingInputError",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "input",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "inputCodeMirror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodemirrorComponent",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputCodeMirror', {static: true}"
                        }
                    ]
                },
                {
                    "name": "inputOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "inputValid$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isValidInput",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "output",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "outputCodeMirror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CodemirrorComponent",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'outputCodeMirror', {static: true}"
                        }
                    ]
                },
                {
                    "name": "outputOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "isFailedTest",
                    "args": [
                        {
                            "name": "status",
                            "type": "TestStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "TestStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPending",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "input",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  InjectionToken,\n  Inject,\n  ViewChild,\n} from '@angular/core';\n\nimport { TestApplicationFacade } from './test-application.facade';\nimport { TestStatus, Application } from '@app/core/data/types';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\nimport 'codemirror/addon/display/placeholder.js';\nimport 'codemirror/addon/edit/closebrackets.js';\nimport 'codemirror/addon/edit/matchbrackets.js';\nimport 'codemirror/mode/javascript/javascript.js';\n\nimport { CodemirrorComponent } from '@ctrl/ngx-codemirror';\nimport { tap } from 'rxjs/operators';\n\nexport const SELECTED_APPLICATION = new InjectionToken<Application>(\n  'selectedApplication',\n);\n@Component({\n  templateUrl: './dialog-test.component.html',\n  styleUrls: ['./dialog-test.component.scss'],\n  providers: [TestApplicationFacade],\n})\nexport class DialogTestComponent implements OnInit {\n  inputValid$: Observable<boolean>;\n\n  inputOptions: {};\n  outputOptions: {};\n\n  input: string = '';\n  output: Observable<string>;\n  isValidInput: boolean = true;\n  generatingInput: boolean = false;\n  generatingInputError: string = '';\n\n  @ViewChild('inputCodeMirror', { static: true })\n  inputCodeMirror: CodemirrorComponent;\n\n  @ViewChild('outputCodeMirror', { static: true })\n  outputCodeMirror: CodemirrorComponent;\n\n  constructor(\n    public dialog: DialogsService,\n    private facade: ApplicationsFacade,\n    private testAppFacade: TestApplicationFacade,\n    @Inject(SELECTED_APPLICATION) public application: Application,\n  ) {\n    this.inputOptions = {\n      matchBrackets: true,\n      autoCloseBrackets: true,\n      mode: { name: 'javascript', json: true },\n      lineWrapping: true,\n      readOnly: false,\n      scrollbarStyle: 'null',\n    };\n    this.outputOptions = {\n      matchBrackets: true,\n      autoCloseBrackets: true,\n      mode: { name: 'javascript', json: true },\n      lineWrapping: true,\n      readOnly: true,\n      scrollbarStyle: 'null',\n    };\n  }\n\n  public onClose(): void {\n    this.dialog.closeDialog();\n  }\n\n  ngOnInit(): void {\n    this.output = this.testAppFacade.getOutput();\n\n    this.testAppFacade\n      .generateInput()\n      .pipe(tap(() => (this.generatingInput = true)))\n      .subscribe(\n        generatedInput => {\n          this.generatingInput = false;\n          this.input = JSON.stringify(generatedInput, undefined, 2);\n        },\n        err => {\n          this.generatingInput = false;\n          this.input = JSON.stringify({});\n          this.generatingInputError = err;\n        },\n      );\n  }\n\n  public onSubmit(): void {\n    this.testAppFacade.testApplication(this.input);\n  }\n\n  public onChange(input) {\n    console.log('change');\n    try {\n      JSON.parse(this.input);\n      this.isValidInput = true;\n    } catch (err) {\n      this.isValidInput = false;\n    }\n  }\n\n  public isFailedTest(status: TestStatus) {\n    return status === TestStatus.Failed;\n  }\n\n  public isPending(state) {\n    return state.status === TestStatus.Pending;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.test-application {\n  position: relative;\n  max-width: 700px;\n  min-width: 700px;\n\n  &__close-icon {\n    cursor: pointer;\n    top: 0;\n    right: 0;\n    height: 24px;\n    position: absolute;\n    width: 24px;\n  }\n}\n\n.CodeMirror {\n  background-color: #f2f4f7 !important;\n\n  &:last-of-type {\n    background-color: #f2f4f7;\n  }\n}\n\n.cm-s-output {\n  background-color: #f2f4f7 !important;\n}\n\n.buttons {\n  margin-top: 12px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.form-button {\n  margin-right: 8px;\n  font-size: 14px;\n}\n\n.input {\n  &-text {\n    &__input {\n      font-family: monospace;\n    }\n  }\n}\n\n.test-fields {\n  display: flex;\n  margin-bottom: 8px;\n\n  &__item {\n    flex: 1;\n    margin: 0 4px;\n    overflow: auto;\n\n    &-header {\n      display: flex;\n      justify-content: space-between;\n    }\n  }\n}\n\n.status {\n  font-size: 12px;\n  width: 90px;\n\n  &__text {\n    background: $neutral-color-200;\n    border-radius: 2px;\n    padding: 0 4px;\n\n    &--failed {\n      color: $supportive-color-red-500;\n    }\n\n    &--pending {\n      color: $neutral-color-500;\n    }\n\n    &--success {\n      color: $supportive-color-green-600;\n    }\n  }\n}\n\n.application-name {\n  font-size: 18px;\n}\n\n.error-container {\n  color: white;\n  background: $supportive-color-red-100;\n  color: $supportive-color-red-700;\n  padding: 12px;\n}\n\n.warning-container {\n  color: white;\n  background: $accent-color-100;\n  color: $accent-color-700;\n  padding: 12px;\n}\n",
                    "styleUrl": "./dialog-test.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "testAppFacade",
                        "type": "TestApplicationFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "testAppFacade",
                        "type": "TestApplicationFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"test-application\">\n  <div class=\"test-application\">\n    <hs-icon\n      type=\"icon-close\"\n      class=\"icon test-application__close-icon\"\n      (click)=\"onClose()\"\n      б\n    ></hs-icon>\n    <p class=\"application-name\">{{ application.name }}</p>\n    <div class=\"warning-container\" *ngIf=\"generatingInputError\">\n      Couldn't generate input. <br />\n      {{ generatingInputError }}\n    </div>\n  </div>\n  <hs-loading [loading]=\"generatingInput\">\n    <div class=\"test-application__content\">\n      <mdl-tabs mdl-ripple mdl-tab-active-index=\"0\">\n        <mdl-tab-panel mdl-tab-panel-title=\"web\">\n          <form (ngSubmit)=\"onSubmit()\">\n            <div>\n              <div class=\"test-fields\">\n                <div class=\"test-fields__item __input\">\n                  <label>Input</label>\n                  <ngx-codemirror\n                    [(ngModel)]=\"input\"\n                    name=\"input\"\n                    (ngModelChange)=\"onChange($event)\"\n                    [options]=\"{\n                      lineNumbers: true,\n                      theme: 'material',\n                      mode: 'markdown'\n                    }\"\n                  ></ngx-codemirror>\n                </div>\n                <div class=\"test-fields__item __output\">\n                  <div class=\"test-fields__item-header\">\n                    <label>Output</label>\n                    <!--                    <span *ngIf=\"testStatus | async; let status\" class=\"status\">-->\n                    <!--                      status-->\n                    <!--                      <span class=\"status__text status__text&#45;&#45;{{ status }}\">-->\n                    <!--                        {{ status }}-->\n                    <!--                      </span>-->\n                    <!--                    </span>-->\n                  </div>\n                  <ng-container *ngIf=\"output | async; let output\">\n                    <ngx-codemirror\n                      [ngModel]=\"output\"\n                      name=\"output\"\n                      [options]=\"{\n                        lineNumbers: true,\n                        theme: 'material',\n                        mode: 'markdown'\n                      }\"\n                    ></ngx-codemirror>\n                  </ng-container>\n                </div>\n              </div>\n              <div class=\"error-container\" *ngIf=\"!isValidInput\">\n                Wrong input's format. JSON validation error\n              </div>\n              <div class=\"buttons\">\n                <button\n                  hs-button\n                  kind=\"flat\"\n                  color=\"primary\"\n                  hsAutofocused\n                  [disabled]=\"!isValidInput\"\n                >\n                  test app\n                </button>\n              </div>\n            </div>\n          </form>\n        </mdl-tab-panel>\n        <mdl-tab-panel mdl-tab-panel-title=\"cURL\">\n          <hs-command-template\n            type=\"curl\"\n            [input]=\"input\"\n            [application]=\"application\"\n            [isValidInput]=\"isValidInput\"\n          >\n          </hs-command-template>\n        </mdl-tab-panel>\n        <mdl-tab-panel mdl-tab-panel-title=\"Python\">\n          <hs-command-template\n            type=\"grpc\"\n            [input]=\"input\"\n            [application]=\"application\"\n            [isValidInput]=\"isValidInput\"\n          >\n          </hs-command-template>\n        </mdl-tab-panel>\n      </mdl-tabs>\n    </div>\n  </hs-loading>\n</div>\n"
        },
        {
            "name": "DialogUpdateApplicationComponent",
            "id": "component-DialogUpdateApplicationComponent-2c2271557ea4aa1abd9a105e818a6129",
            "file": "src/app/modules/dialogs/components/dialog-update-application/dialog-update-application.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ModelVariantFormService"
                }
            ],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dialog-update-application.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "application",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "SELECTED_UPD_APPLICATION"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "deploymentConfig$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "facade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationsFacade",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "modelVersionsFacade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ModelVersionsFacade",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "formData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject } from '@angular/core';\n\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport {\n  Application,\n  DeploymentConfig,\n  ModelVersion,\n} from '@app/core/data/types';\nimport { ModelVariantFormService } from '@app/modules/applications/components/forms/model-variant-form/model-variant-form.service';\nimport { Observable } from 'rxjs';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { applicationToUpdateRequest } from '@app/core/data/utils';\n\nexport let SELECTED_UPD_APPLICATION = new InjectionToken<Application>(\n  'selectedApplication',\n);\n\n@Component({\n  templateUrl: './dialog-update-application.component.html',\n  providers: [ModelVariantFormService],\n})\nexport class DialogUpdateApplicationComponent {\n  modelVersions$: Observable<ModelVersion[]>;\n  deploymentConfig$: Observable<DeploymentConfig>;\n\n  constructor(\n    @Inject(SELECTED_UPD_APPLICATION)\n    public application: Application,\n    public facade: ApplicationsFacade,\n    public modelVersionsFacade: ModelVersionsFacade,\n    private depConfigsFacade: DeploymentConfigsFacade,\n    public dialog: DialogsService,\n  ) {\n    this.modelVersions$ =\n      modelVersionsFacade.internalReleasedNonMetricModelVersions();\n    this.deploymentConfig$ = depConfigsFacade.defaultDepConfig();\n  }\n\n  public onClose(): void {\n    this.dialog.closeDialog();\n  }\n\n  public onSubmit(formData) {\n    formData.id = this.application.id;\n    this.facade.editApplication(\n      applicationToUpdateRequest(new Application(formData)),\n    );\n    this.onClose();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "application",
                        "type": "Application",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<hs-application-form\n  (submitHandle)=\"onSubmit($event)\"\n  [application]=\"application\"\n  [modelVersions]=\"modelVersions$ | async\"\n  [deploymentConfig]=\"deploymentConfig$ | async\"\n  #form\n>\n</hs-application-form>\n<div class=\"dialog__footer\">\n  <div class=\"dialog__buttons\">\n    <button hs-button (click)=\"onClose()\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      [disabled]=\"!form?.applicationForm?.valid\"\n      (click)=\"form.submit()\"\n    >\n      edit application\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogUpdateModelVersionComponent",
            "id": "component-DialogUpdateModelVersionComponent-8fef0e62fb587cda99647b289aee158e",
            "file": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./dialog-update-model-version.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-update-model-version.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroySubscriptions",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogsService",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "selectedApplication$",
                    "defaultValue": "this.facade.selectedApplication()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getModelVersionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateImmediatly",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateModelVariant",
                    "args": [
                        {
                            "name": "app",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Application",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "app",
                            "type": "Application",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Inject, OnDestroy } from '@angular/core';\nimport { isEqual } from 'lodash';\n\nimport {\n  Application,\n  ModelVersion,\n  ModelVariant,\n  Stage,\n} from '@app/core/data/types';\nimport { Observable, Subject, of } from 'rxjs';\nimport { catchError, takeUntil, take, map } from 'rxjs/operators';\n\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { ApplicationBuilder } from '@app/core/data/builders';\nimport { DialogsService } from '../../dialogs.service';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { applicationToUpdateRequest } from '@app/core/data/utils';\n\nexport const SELECTED_MODEL_VARIANT = new InjectionToken<any>(\n  'selected model variant',\n);\nexport const LATEST_MODEL_VERSION = new InjectionToken<ModelVersion>(\n  'latest model version',\n);\n@Component({\n  templateUrl: './dialog-update-model-version.component.html',\n  styleUrls: ['./dialog-update-model-version.component.scss'],\n})\nexport class DialogUpdateModelVersionComponent implements OnDestroy {\n  private destroySubscriptions: Subject<any> = new Subject<any>();\n  private selectedApplication$: Observable<Application> =\n    this.facade.selectedApplication();\n\n  constructor(\n    public dialog: DialogsService,\n    private facade: ApplicationsFacade,\n    private modelVersionsFacade: ModelVersionsFacade,\n    private applicationBuilder: ApplicationBuilder,\n    @Inject(SELECTED_MODEL_VARIANT) private selectedModelVariant: ModelVariant,\n    @Inject(LATEST_MODEL_VERSION) private latestModelVersion: ModelVersion,\n  ) {}\n\n  onClose(): void {\n    this.dialog.closeDialog();\n  }\n\n  onSubmit(): void {\n    this.updateImmediatly();\n    this.onClose();\n  }\n\n  ngOnDestroy(): void {\n    this.destroySubscriptions.next();\n    this.destroySubscriptions.complete();\n  }\n\n  get inputsEqual(): Observable<boolean> {\n    return this.getModelVersionById(\n      this.selectedModelVariant.modelVersionId,\n    ).pipe(\n      map(res => {\n        const oldInputs = res.contractInputs;\n        const newInputs = this.latestModelVersion.modelSignature.inputs;\n        return isEqual(oldInputs, newInputs);\n      }),\n    );\n  }\n\n  get outputsEqual(): Observable<boolean> {\n    return this.getModelVersionById(\n      this.selectedModelVariant.modelVersionId,\n    ).pipe(\n      map(res => {\n        const oldOutputs = res.contractOutputs;\n        const newOutputs = this.latestModelVersion.modelSignature.outputs;\n        return isEqual(oldOutputs, newOutputs);\n      }),\n    );\n  }\n\n  private getModelVersionById(id: number) {\n    return this.modelVersionsFacade.modelVersionById(id);\n  }\n\n  private updateImmediatly(): void {\n    this.selectedApplication$\n      .pipe(\n        map(application => {\n          this.facade.editApplication(\n            applicationToUpdateRequest(this.updateModelVariant(application)),\n          );\n        }),\n        catchError(err => {\n          console.error(err);\n          return of(err);\n        }),\n        take(1),\n        takeUntil(this.destroySubscriptions),\n      )\n      .subscribe();\n  }\n\n  private updateModelVariant(app: Application): Application {\n    const stages = app.executionGraph.stages;\n    const newStages: Stage[] = stages.map(stage => {\n      return {\n        signature: stage.signature,\n        modelVariants: stage.modelVariants.map(mv => {\n          if (mv == this.selectedModelVariant) {\n            return {\n              ...mv,\n              modelVersionId: this.latestModelVersion.id,\n            };\n          } else {\n            return mv;\n          }\n        }),\n      };\n    });\n\n    return { ...app, executionGraph: { stages: newStages } };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.contract {\n  text-align: center;\n  line-height: 18px;\n  font-size: 14px;\n  &__label {\n    font-family: $font-family-light;\n    color: $neutral-color-500;\n    text-transform: uppercase;\n    font-size: 12px;\n    margin: 8px 0px 0px;\n  }\n  &__field {\n    font-family: $font-family-light;\n    color: $neutral-color-500;\n  }\n  &__status {\n    font-weight: bolder;\n    &--is-equal {\n      color: $supportive-color-green-700;\n    }\n    &--is-different {\n      color: $supportive-color-red-700;\n    }\n  }\n}",
                    "styleUrl": "./dialog-update-model-version.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationBuilder",
                        "type": "ApplicationBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selectedModelVariant",
                        "type": "ModelVariant",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "latestModelVersion",
                        "type": "ModelVersion",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationBuilder",
                        "type": "ApplicationBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selectedModelVariant",
                        "type": "ModelVariant",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "latestModelVersion",
                        "type": "ModelVersion",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "inputsEqual": {
                    "name": "inputsEqual",
                    "getSignature": {
                        "name": "inputsEqual",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 57
                    }
                },
                "outputsEqual": {
                    "name": "outputsEqual",
                    "getSignature": {
                        "name": "outputsEqual",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 69
                    }
                }
            },
            "templateData": "<div class=\"dialog__content\">\n  <span class=\"dialog__question\"\n    >Are you sure you want to update this model?</span\n  >\n  <div class=\"contract\">\n    <div class=\"contract__label\">Contracts:</div>\n    <div class=\"contract__field\">\n      inputs:\n      <span\n        class=\"contract__status contract__status--is-{{\n          inputsEqual ? 'equal' : 'different'\n        }}\"\n        >{{ inputsEqual ? 'equal' : 'different' }}</span\n      >\n    </div>\n    <div class=\"contract__field\">\n      outputs:\n      <span\n        class=\"contract__status contract__status--is-{{\n          outputsEqual ? 'equal' : 'different'\n        }}\"\n        >{{ outputsEqual ? 'equal' : 'different' }}</span\n      >\n    </div>\n  </div>\n  <div class=\"dialog__buttons dialog__buttons--column\">\n    <button hs-button (click)=\"onClose()\" type=\"button\">\n      cancel\n    </button>\n    <button\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      type=\"submit\"\n      (click)=\"onSubmit()\"\n      hsAutofocused\n    >\n      update\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DriftStatusComponent",
            "id": "component-DriftStatusComponent-8ba55f50977219057d4901bc3c1b5f11",
            "file": "src/app/modules/stat/components/drift-status/drift-status.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-drift-status",
            "styleUrls": [
                "./drift-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "drift-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "drift",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number"
                },
                {
                    "name": "justIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "16",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n} from '@angular/core';\n\ntype DriftStatusIconType = 'icon-error-outline' | 'check' | 'warning';\n\n@Component({\n  selector: 'hs-drift-status',\n  templateUrl: 'drift-status.component.html',\n  styleUrls: ['./drift-status.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DriftStatusComponent {\n  @Input() drift: number;\n  @Input() size: number = 16;\n  @Input() justIcon: boolean = true;\n\n  get stylesMap() {\n    return {\n      width: `${this.size}px`,\n      height: `${this.size}px`,\n    };\n  }\n\n  constructor() {}\n\n  get iconType(): DriftStatusIconType {\n    if (this.drift === 0 || this.drift <= 0.25) {\n      return 'check';\n    } else if (this.drift > 0.25 && this.drift <= 0.75) {\n      return 'icon-error-outline';\n    } else {\n      return 'warning';\n    }\n  }\n\n  get backgroundColor(): string {\n    if (this.drift === 0 || this.drift <= 0.25) {\n      return '#3ebd93';\n    } else if (this.drift > 0.25 && this.drift <= 0.5) {\n      return '#f7c948';\n    } else if (this.drift > 0.5 && this.drift <= 0.75) {\n      return '#cb6e17';\n    } else {\n      return '#e12d39';\n    }\n  }\n\n  get statusText(): string {\n    if (this.drift === 0 || this.drift <= 0.25) {\n      return 'Normal';\n    } else if (this.drift > 0.25 && this.drift <= 0.5) {\n      return 'Low';\n    } else if (this.drift > 0.5 && this.drift <= 0.75) {\n      return 'Medium';\n    } else {\n      return 'Severe';\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.drift-status {\n  border-radius: 24px;\n  &__icon {\n    color: white;\n  }\n  &__text {\n    color: white;\n    padding: 0 4px 0 4px;\n    font-size: 12px;\n    font-family: $font-family-bold;\n  }\n}\n",
                    "styleUrl": "./drift-status.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "accessors": {
                "stylesMap": {
                    "name": "stylesMap",
                    "getSignature": {
                        "name": "stylesMap",
                        "type": "",
                        "returnType": "",
                        "line": 21
                    }
                },
                "iconType": {
                    "name": "iconType",
                    "getSignature": {
                        "name": "iconType",
                        "type": "",
                        "returnType": "DriftStatusIconType",
                        "line": 30
                    }
                },
                "backgroundColor": {
                    "name": "backgroundColor",
                    "getSignature": {
                        "name": "backgroundColor",
                        "type": "string",
                        "returnType": "string",
                        "line": 40
                    }
                },
                "statusText": {
                    "name": "statusText",
                    "getSignature": {
                        "name": "statusText",
                        "type": "string",
                        "returnType": "string",
                        "line": 52
                    }
                }
            },
            "templateData": "<div\n  class=\"drift-status\"\n  [ngStyle]=\"{\n    background: backgroundColor,\n    padding: justIcon ? '1px' : '2px 8px'\n  }\"\n>\n  <hs-icon\n    class=\"drift-status__icon\"\n    [type]=\"iconType\"\n    [ngStyle]=\"stylesMap\"\n  ></hs-icon>\n  <span class=\"drift-status__text\" *ngIf=\"!justIcon\">{{ statusText }}</span>\n</div>\n"
        },
        {
            "name": "ErrorCheckComponent",
            "id": "component-ErrorCheckComponent-9fbf9a9be42e0e05d2df27b364cc1dd3",
            "file": "src/testing/components/mock-error-check.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-error-check",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "Array<string | null>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-error-check',\n  template: '',\n})\nexport class ErrorCheckComponent {\n  @Input() data: Array<string | null> = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ErrorCheckComponent",
            "id": "component-ErrorCheckComponent-34e1dbc30db8e3b310bd281403075727-1",
            "file": "src/app/modules/monitoring/components/checks/error-check/error-check.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-error-check",
            "styleUrls": [
                "error-check.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "error-check.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "Array<string | null>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "CELL_MARGINS",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "CHART_HEIGHT",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "CHART_MARGIN_LEFT",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "CHART_MARGIN_RIGHT",
                    "defaultValue": "6",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "CHART_WIDTH",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "VIEW_WIDTH",
                    "defaultValue": "this.CHART_WIDTH - this.CHART_MARGIN_LEFT - this.CHART_MARGIN_RIGHT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "xAxisScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScaleLinear<number | number>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "xScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScaleLinear<number | number>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "openErrorsDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport {\n  DialogRequestsErrorsComponent,\n  REQUESTS_ERRORS,\n} from '../../../../dialogs/components';\nimport { ScaleLinear } from 'd3';\n\n@Component({\n  selector: 'hs-error-check',\n  templateUrl: 'error-check.component.html',\n  styleUrls: ['error-check.component.scss'],\n})\nexport class ErrorCheckComponent {\n  readonly CELL_MARGINS: number = 4;\n  readonly CHART_HEIGHT: number = 40;\n  readonly CHART_MARGIN_LEFT: number = 40;\n  readonly CHART_MARGIN_RIGHT: number = 6;\n  readonly CHART_WIDTH: number = 300;\n  readonly VIEW_WIDTH: number =\n    this.CHART_WIDTH - this.CHART_MARGIN_LEFT - this.CHART_MARGIN_RIGHT;\n\n  xScale: ScaleLinear<number, number>;\n  xAxisScale: ScaleLinear<number, number>;\n\n  @Input() data: Array<string | null> = [];\n\n  get cellWidth(): number {\n    if (this.data.length) {\n      return this.VIEW_WIDTH / this.data.length - this.CELL_MARGINS;\n    } else {\n      return 0;\n    }\n  }\n\n  constructor(private dialog: DialogsService) {}\n\n  openErrorsDialog(): void {\n    this.dialog.createDialog({\n      component: DialogRequestsErrorsComponent,\n      styles: {\n        width: '640px',\n      },\n      providers: [{ provide: REQUESTS_ERRORS, useValue: this.data }],\n    });\n  }\n\n  get errorsCount(): number {\n    if (this.data) {\n      const withError = el => el !== null;\n      return this.data.filter(withError).length;\n    }\n\n    return 0;\n  }\n\n  get showButton(): boolean {\n    if (this.data) {\n      return this.errorsCount >= 1;\n    }\n\n    return false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.error-check {\n  &__information {\n    min-width: 60px;\n    &-name {\n      font-size: 14px;\n      color: $neutral-color-800;\n      font-family: $font-family-bold;\n    }\n  }\n  &__button {\n    margin: 6px 0;\n    width: 100%\n  }\n  &__count {\n    text-align: center;\n    margin: 16px 0;\n    font-size: 32px;\n    color: $supportive-color-green-400;\n    &--failed {\n      color: $supportive-color-red-400;\n    }\n  }\n}",
                    "styleUrl": "error-check.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "cellWidth": {
                    "name": "cellWidth",
                    "getSignature": {
                        "name": "cellWidth",
                        "type": "number",
                        "returnType": "number",
                        "line": 28
                    }
                },
                "errorsCount": {
                    "name": "errorsCount",
                    "getSignature": {
                        "name": "errorsCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 48
                    }
                },
                "showButton": {
                    "name": "showButton",
                    "getSignature": {
                        "name": "showButton",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 57
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ErrorCheckComponent-1",
            "templateData": "<div class=\"error-check\">\n  <div class=\"error-check__information\">\n    <div class=\"error-check__information-name\">\n      Errors\n    </div>\n  </div>\n  <div\n    class=\"error-check__count\"\n    [ngClass]=\"{ 'error-check__count--failed': errorsCount > 0 }\"\n  >\n    {{ errorsCount }}\n  </div>\n  <button\n    (click)=\"openErrorsDialog()\"\n    class=\"error-check__button\"\n    color=\"accent\"\n    hs-button\n    *ngIf=\"showButton\"\n  >\n    show errors\n  </button>\n</div>\n"
        },
        {
            "name": "ErrorMessageComponent",
            "id": "component-ErrorMessageComponent-5f09d44eee9283e393678e055e5ac2f4",
            "file": "src/app/shared/components/error-message/error-message.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-error-message",
            "styleUrls": [
                "./error-message.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"error\">    <ng-content></ng-content>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-error-message',\n  template: `<div class=\"error\">\n    <ng-content></ng-content>\n  </div> `,\n  styleUrls: ['./error-message.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ErrorMessageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.error {\n  background: $supportive-color-red-100;\n  color: $supportive-color-red-700;\n  border-radius: 5px;\n  padding: 12px;\n\n  & a {\n    color: #3a3a79 !important;\n  }\n}\n",
                    "styleUrl": "./error-message.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ExplanationButtonComponent",
            "id": "component-ExplanationButtonComponent-2fa173a784f599c7a07eb2b9a2668c12",
            "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-exp-button",
            "styleUrls": [
                "./explanation-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./explanation-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ModelVersionId"
                },
                {
                    "name": "outputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string"
                },
                {
                    "name": "requestId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "explain",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, InjectionToken, Input } from '@angular/core';\nimport { ModelVersionId } from '@app/core/data/types';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport { ExplanationDialogComponent } from '@app/modules/dialogs/components';\n\nexport const MODEL_VERSION_ID = new InjectionToken<ModelVersionId>(\n  'selected model id',\n);\nexport const OUTPUT_FIELD = new InjectionToken<string>('output field');\nexport const REQUEST_ID = new InjectionToken<string>('request id');\nexport const METHOD = new InjectionToken<string>('method');\n\n@Component({\n  selector: 'hs-exp-button',\n  templateUrl: './explanation-button.component.html',\n  styleUrls: ['./explanation-button.component.scss'],\n})\nexport class ExplanationButtonComponent {\n  @Input() modelVersionId: ModelVersionId;\n  @Input() requestId: string;\n  @Input() outputField: string;\n\n  constructor(private dialogService: DialogsService) {}\n\n  explain() {\n    this.dialogService.createDialog({\n      component: ExplanationDialogComponent,\n      providers: [\n        {\n          provide: MODEL_VERSION_ID,\n          useValue: this.modelVersionId,\n        },\n        {\n          provide: REQUEST_ID,\n          useValue: this.requestId,\n        },\n        {\n          provide: METHOD,\n          useValue: 'anchor',\n        },\n        {\n          provide: OUTPUT_FIELD,\n          useValue: this.outputField,\n        },\n      ],\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.exp-button {\n  display: inline-block;\n  &__icon {\n    color: $primary-color-700;\n    width: 18px;\n    height: 18px;\n  }\n}\n",
                    "styleUrl": "./explanation-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"exp-button\"\n  hsTippy\n  [tippyOptions]=\"{\n      content: 'Get explanation',\n      arrow: false,\n      theme: 'basic',\n      placement: 'top'\n    }\"\n>\n  <div>\n    <hs-icon class=\"exp-button__icon\" [type]=\"'icon-help'\" (click)=\"explain()\"></hs-icon>\n  </div>\n</div>\n"
        },
        {
            "name": "ExplanationDialogComponent",
            "id": "component-ExplanationDialogComponent-a4053332a41cbcb0d13490b48981be7f",
            "file": "src/app/modules/dialogs/components/explanation-dialog/explanation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "RootCauseState"
                },
                {
                    "name": "ExplanationFacade"
                }
            ],
            "selector": "app-explanation-dialog",
            "styleUrls": [
                "./explanation-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./explanation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "explanation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Explanation>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "method",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "METHOD"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MODEL_VERSION_ID"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "outputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "OUTPUT_FIELD"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "requestId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "REQUEST_ID"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport {\n  METHOD,\n  MODEL_VERSION_ID,\n  OUTPUT_FIELD,\n  REQUEST_ID,\n} from '@app/modules/root-cause/containers/explanation-button/explanation-button.component';\nimport { ExplanationFacade } from '@app/modules/root-cause/explanation.facade';\nimport { Explanation } from '@app/modules/root-cause/models';\nimport { Observable } from 'rxjs';\nimport { RootCauseState } from '@app/modules/root-cause/store/state';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\n\n@Component({\n  selector: 'app-explanation-dialog',\n  templateUrl: './explanation-dialog.component.html',\n  styleUrls: ['./explanation-dialog.component.scss'],\n  providers: [RootCauseState, ExplanationFacade],\n})\nexport class ExplanationDialogComponent implements OnInit {\n  explanation$: Observable<Explanation>;\n\n  constructor(\n    @Inject(MODEL_VERSION_ID) public modelVersionId: number,\n    @Inject(REQUEST_ID) public requestId: string,\n    @Inject(OUTPUT_FIELD) public outputField: string,\n    @Inject(METHOD) public method: string,\n    private facade: ExplanationFacade,\n    private dialogService: DialogsService,\n  ) {\n    this.explanation$ = facade.getExplanation();\n  }\n\n  ngOnInit() {\n    this.facade.createExplanation(\n      this.modelVersionId,\n      this.requestId,\n      this.method,\n      this.outputField,\n    );\n  }\n\n  closeDialog() {\n    this.dialogService.closeDialog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.exp {\n  max-width: 600px;\n  &__title {\n    font-family: $font-family-bold;\n    font-size: 20px;\n    margin-bottom: 24px;\n  }\n  &__params {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 24px;\n    font-size: 12px;\n    &-item {\n      display: flex;\n      line-height: 16px;\n      margin-bottom: 3px;\n    }\n    &-key {\n      padding-right: 8px;\n      font-family: $font-family-light;\n      color: $neutral-color-700;\n      min-width: 120px;\n    }\n    &-value {\n      font-family: $font-family-bold;\n    }\n  }\n\n  &__status {\n    display: flex;\n    justify-content: left;\n    border-radius: 6px;\n    padding: 4px;\n    margin-bottom: 12px;\n    &--success {\n      background-color: $supportive-color-green-100\n    }\n    &--not-supported {\n      background-color: $accent-color-200\n    }\n    &--started {\n      background-color: $primary-color-100\n    }\n    &--failed {\n      background-color: $supportive-color-red-100\n    }\n    &-icon {\n      width: 20px;\n      height: 20px;\n      &--success {\n        color: $supportive-color-green-700\n      }\n      &--not-supported {\n        color: $accent-color-600;\n      }\n      &--started {\n        color: $primary-color-700\n      }\n      &--failed {\n        color: $supportive-color-red-700\n      }\n    }\n    &-text {\n      padding-left: 6px;\n      font-family: $font-family-medium;\n    }\n  }\n}\n",
                    "styleUrl": "./explanation-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelVersionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "requestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "outputField",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "facade",
                        "type": "ExplanationFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "modelVersionId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "requestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outputField",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "method",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "facade",
                        "type": "ExplanationFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"dialog__content exp\">\n  <div>\n    <p class=\"exp__title\">Explanation for</p>\n\n    <div class=\"exp__params\">\n      <div class=\"exp__params-item\">\n        <div class=\"exp__params-key\">Model version id:</div>\n        <div class=\"exp__params-value\">{{ modelVersionId}}</div>\n      </div>\n      <div class=\"exp__params-item\">\n        <div class=\"exp__params-key\">Request id:</div>\n        <div class=\"exp__params-value\">{{ requestId}}</div>\n      </div>\n      <div class=\"exp__params-item\">\n        <div class=\"exp__params-key\">Method:</div>\n        <div class=\"exp__params-value\">{{ method}}</div>\n      </div>\n      <div class=\"exp__params-item\">\n        <div class=\"exp__params-key\">Output field:</div>\n        <div class=\"exp__params-value\">{{ outputField}}</div>\n      </div>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"explanation$ | async as explanation; else waiting\">\n    <ng-container [ngSwitch]=\"explanation.state\">\n      <div *ngSwitchCase=\"'SUCCESS'\">\n        <div class=\"exp__status exp__status--success\">\n          <hs-icon class=\"exp__status-icon exp__status-icon--success\" [type]=\"'icon-check-success'\"></hs-icon>\n          <div class=\"exp__status-text\">{{explanation.description}}</div>\n        </div>\n\n        <div>\n          <hs-anchor-explanation [explanation]=\"explanation.result\"></hs-anchor-explanation>\n        </div>\n      </div>\n      <div *ngSwitchCase=\"'NOT_SUPPORTED'\">\n        <div class=\"exp__status exp__status--not-supported\">\n          <hs-icon class=\"exp__status-icon exp__status-icon--not-supported\" [type]=\"'icon-warning'\"></hs-icon>\n          <div class=\"exp__status-text\">{{explanation.description}}</div>\n        </div>\n      </div>\n      <div *ngSwitchCase=\"'STARTED'\">\n        <div class=\"exp__status exp__status--started\">\n          <hs-icon class=\"exp__status-icon exp__status-icon--started\" [type]=\"'icon-pending'\"></hs-icon>\n          <div class=\"exp__status-text\">{{explanation.description}}</div>\n        </div>\n      </div>\n      <div *ngSwitchCase=\"'FAILED'\">\n        <div class=\"exp__status exp__status--failed\">\n          <hs-icon class=\"exp__status-icon exp__status-icon--failed\" [type]=\"'icon-check-fail'\"></hs-icon>\n          <div class=\"exp__status-text\">{{explanation.description}}</div>\n        </div>\n      </div>\n    </ng-container>\n\n  </ng-container>\n\n  <ng-template #waiting>\n    Waiting for some response...\n  </ng-template>\n\n  <div class=\"dialog__buttons\">\n    <div class=\"dialog__buttons dialog__buttons--column\">\n      <button hs-button (click)=\"closeDialog()\">\n        Close\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "FeatureReportComponent",
            "id": "component-FeatureReportComponent-fc9762aeb2c7e43a99f88702f8039d07",
            "file": "src/app/modules/stat/components/feature-report/feature-report.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-feature-report",
            "styleUrls": [
                "./feature-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feature-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "perFeatureReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": ""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedFeatureReport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FeatureReport",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { FeatureReport, Stat } from '../../models';\n\n@Component({\n  selector: 'hs-feature-report',\n  templateUrl: './feature-report.component.html',\n  styleUrls: ['./feature-report.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FeatureReportComponent implements OnInit {\n  @Input() perFeatureReport: Stat['per_feature_report'];\n\n  selectedFeatureReport: FeatureReport;\n\n  ngOnInit() {\n    if (this.perFeatureReport) {\n      this.selectedFeatureReport = this.perFeatureReport[this.featureNames[0]];\n    }\n  }\n\n  get featureNames(): string[] {\n    return this.perFeatureReport ? Object.keys(this.perFeatureReport) : [];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.feature-report {\n  &__icon {\n    width: 14px;\n    height: 14px;\n  }\n  &__header {\n    align-items: flex-end;\n    display: flex;\n    margin-bottom: 24px;\n  }\n\n  &__input {\n    margin-right: 12px;\n    width: 320px;\n\n    &-label {\n      color: $neutral-color-1000;\n      font-family: $font-family-bold;\n      font-size: 12px;\n      line-height: 16px;\n    }\n  }\n\n  &__select {\n    &-option {\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      &-drift {\n        font-size: 12px;\n        font-family: $font-family-bold;\n      }\n    }\n  }\n\n  &__drift {\n    color: $neutral-color-900;\n    font-family: $font-family-light;\n    line-height: 24px;\n\n    &-value {\n      color: $neutral-color-1000;\n      font-family: $font-family-bold;\n    }\n  }\n\n  &__histogram {\n    margin-bottom: 24px;\n  }\n}\n\n.statistics {\n  margin-bottom: 24px;\n  &__label {\n    color: $neutral-color-900;\n    font-family: $font-family-bold;\n    font-size: 16px;\n    line-height: 32px;\n  }\n\n  &__wrapper {\n    border: 2px $neutral-color-300 solid;\n    border-radius: 5px;\n    overflow: hidden;\n  }\n\n  &__drift {\n    font-family: $font-family-bold;\n    &--changed {\n      color: $supportive-color-red-700;\n    }\n  }\n\n  &__table {\n    border-collapse: collapse;\n    width: 100%;\n\n    & > thead {\n      border-bottom: 1px solid $neutral-color-200;\n\n      & > tr {\n        & > th {\n          color: $neutral-color-700;\n          font-family: $font-family-bold;\n          padding: 8px 8px;\n          text-align: left;\n        }\n      }\n    }\n\n    & > tbody {\n      & > tr {\n        & > td {\n          padding: 8px 8px;\n          text-align: left;\n        }\n\n        &:nth-of-type(2n - 1) {\n          background: $neutral-color-100;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./feature-report.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "featureNames": {
                    "name": "featureNames",
                    "getSignature": {
                        "name": "featureNames",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 26
                    }
                }
            },
            "templateData": "<div class=\"feature-report\" *ngIf=\"perFeatureReport\">\n  <div class=\"feature-report__header\">\n    <div class=\"feature-report__input\">\n      <div class=\"feature-report__input-label\">\n        Select a feature for a profile comparison:\n      </div>\n      <mdl-select [(ngModel)]=\"selectedFeatureReport\" label=\"Choose feature\">\n        <mdl-option\n          *ngFor=\"let featureReport of perFeatureReport | keyvalue\"\n          [value]=\"featureReport.value\"\n        >\n          <div class=\"feature-report__select-option\">\n            <span>{{ featureReport.key }}</span>\n            <span class=\"feature-report__select-option-drift\">\n              <hs-drift-status\n                class=\"feature-report__icon\"\n                [drift]=\"featureReport.value['drift-probability']\"\n              ></hs-drift-status>\n            </span>\n          </div>\n        </mdl-option>\n      </mdl-select>\n    </div>\n  </div>\n  <div class=\"feature-report__histogram\">\n    <hs-histogram [config]=\"selectedFeatureReport.histogram\"></hs-histogram>\n  </div>\n\n  <div class=\"statistics\">\n    <div class=\"statistics__label\">Statistics</div>\n    <div class=\"statistics__wrapper\">\n      <table class=\"statistics__table\">\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>training data</th>\n            <th>production data</th>\n            <th>change's status</th>\n          </tr>\n        </thead>\n        <tr\n          *ngFor=\"let statistic of selectedFeatureReport.statistics | keyvalue\"\n        >\n          <td>{{ statistic.key }}</td>\n          <td>{{ statistic.value.training }}</td>\n          <td>{{ statistic.value.deployment }}</td>\n          <td\n            class=\"statistics__drift\"\n            [ngClass]=\"{\n              'statistics__drift--changed': statistic.value.has_changed\n            }\"\n          >\n            {{ statistic.value.message }}\n          </td>\n        </tr>\n      </table>\n    </div>\n  </div>\n  <hs-bivariate-report\n    [bivariateReports]=\"selectedFeatureReport.bivariate_reports\"\n  ></hs-bivariate-report>\n</div>\n"
        },
        {
            "name": "GradientLegendComponent",
            "id": "component-GradientLegendComponent-0e29c2b31d710a9f97735fecb0da4623",
            "file": "src/testing/components/mock-gradient-legend.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-gradient-legend",
            "styleUrls": [],
            "styles": [],
            "template": "Gradient legend",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-gradient-legend',\n  template: 'Gradient legend',\n})\nexport class GradientLegendComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "GradientLegendComponent",
            "id": "component-GradientLegendComponent-5e18d54445cb6a386678c49f6ecf1fb5-1",
            "file": "src/app/modules/visualization/components/gradient-legend/gradient-legend.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-gradient-legend",
            "styleUrls": [
                "./gradient-legend.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"gradient-legend\" #anchor></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anchorElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anchor', {read: ElementRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport * as d3 from 'd3';\n\n@Component({\n  selector: 'hs-gradient-legend',\n  template: `<div class=\"gradient-legend\" #anchor></div> `,\n  styleUrls: ['./gradient-legend.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class GradientLegendComponent implements AfterViewInit {\n  @ViewChild('anchor', { read: ElementRef, static: true })\n  anchorElement: ElementRef;\n\n  ngAfterViewInit() {\n    const colorScale = d3.scaleSequential(d3.interpolateRdBu).domain([0, 1]);\n    const legendHeight = 48;\n    const legendWidth = this.anchorElement.nativeElement.offsetWidth;\n    const gradientHeight = 24;\n    const margin = { top: 10, right: 20, bottom: 10, left: 4 };\n\n    const viewWidth = legendWidth - margin.right - margin.left;\n\n    const canvas = d3\n      .select(this.anchorElement.nativeElement)\n      .style('height', legendHeight + 'px')\n      .style('width', legendWidth + 'px')\n      .style('position', 'relative')\n      .append('canvas')\n      .attr('class', 'legend')\n      .attr('height', 1)\n      .attr('width', viewWidth)\n      .style('height', gradientHeight + 'px')\n      .style('width', viewWidth + 'px')\n      .style('border', '1px solid #000')\n      .style('position', 'absolute')\n      .node();\n\n    const ctx = canvas.getContext('2d');\n\n    const legendScale = d3\n      .scaleLinear()\n      .range([1, viewWidth])\n      .domain(colorScale.domain());\n\n    const image = ctx.createImageData(viewWidth, 1);\n    d3.range(viewWidth).forEach(i => {\n      const { r, g, b } = d3.rgb(colorScale(legendScale.invert(i)));\n      image.data[4 * i] = r;\n      image.data[4 * i + 1] = g;\n      image.data[4 * i + 2] = b;\n      image.data[4 * i + 3] = 255;\n    });\n    ctx.putImageData(image, 0, 0);\n\n    const legendAxis = d3\n      .axisBottom(legendScale)\n      .scale(\n        d3\n          .scaleLinear()\n          .range([0, viewWidth - 1])\n          .domain([0, 1])\n      )\n      .tickSize(6)\n      .ticks(8);\n\n    const svg = d3\n      .select(this.anchorElement.nativeElement)\n      .append('svg')\n      .attr('height', legendHeight + 'px')\n      .attr('width', viewWidth + 8 + 'px')\n      .style('position', 'absolute');\n\n    svg\n      .append('g')\n      .attr('class', 'axis')\n      .style('transform', `translate(0px, ${gradientHeight - 1}px)`)\n      .call(legendAxis);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".gradient-legend {\n  width: 100%;\n}",
                    "styleUrl": "./gradient-legend.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GradientLegendComponent-1"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-f867b767eb7561131734f252fe58879d-1",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-header",
            "styleUrls": [
                "header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isZenMode$",
                    "defaultValue": "this.zenMode.isZenMode$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ZenModeService } from '@app/core/zenmode.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'hs-header',\n  templateUrl: 'header.component.html',\n  styleUrls: ['header.component.scss'],\n})\nexport class HeaderComponent {\n  isZenMode$: Observable<boolean> = this.zenMode.isZenMode$;\n  constructor(private zenMode: ZenModeService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.header {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n  padding: 0 8px;\n  height: 100%;\n  background: $primary-color-700;\n\n  &__logo {\n    cursor: pointer;\n    outline: none;\n    position: relative;\n    left: 2px;\n    width: 150px;\n\n    &-icon {\n      width: 152px;\n      height: 42px;\n    }\n  }\n}\n",
                    "styleUrl": "header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header class=\"header\">\n  <span class=\"header__logo\" [routerLink]=\"['/']\" queryParamsHandling=\"merge\">\n    <img class=\"header__logo\" src=\"./assets/images/logo/logo.svg\" alt=\"logo\" />\n  </span>\n  <hs-header-nav></hs-header-nav>\n  <hs-header-info></hs-header-info>\n</header>\n"
        },
        {
            "name": "HeaderInfoComponent",
            "id": "component-HeaderInfoComponent-637313cc39bb328b88c240b0d903eb77",
            "file": "src/app/layout/header-info/header-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-header-info",
            "styleUrls": [
                "./header-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hs-header-info',\n  templateUrl: './header-info.component.html',\n  styleUrls: ['./header-info.component.scss'],\n})\nexport class HeaderInfoComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.header-info {\n  font-family: $font-family-light;\n  &__link {\n    cursor: pointer;\n    color: $neutral-color-100;\n    transition: color 0.3s ease;\n    text-decoration: none;\n    text-transform: uppercase;\n    font-weight: 100;\n    font-size: 10px;\n    padding-left: 12px;\n    letter-spacing: 1px;\n\n    &:hover {\n      color: $primary-color-100;\n    }\n  }\n}\n",
                    "styleUrl": "./header-info.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<div class=\"header-info\">\n  <a\n    class=\"header-info__link\"\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    href=\"https://docs.hydrosphere.io/\"\n  >\n    documentation\n  </a>\n  <a class=\"header-info__link\" hsBuildInformation>\n    build information\n  </a>\n</div>\n"
        },
        {
            "name": "HeaderNavComponent",
            "id": "component-HeaderNavComponent-b1155eec6c081556f9d8a02041b10da8",
            "file": "src/app/layout/header-nav/header-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-header-nav",
            "styleUrls": [
                "./header-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hs-header-nav',\n  templateUrl: './header-nav.component.html',\n  styleUrls: ['./header-nav.component.scss'],\n})\nexport class HeaderNavComponent {\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header-nav {\n  &__item {\n    text-decoration: none;\n    color: white;\n    opacity: 0.5;\n    &:hover,\n    &--active {\n      opacity: 1;\n    }\n  }\n  &__item + &__item {\n    margin-left: 32px;\n  }\n  &__icon {\n    width: 24px;\n    height: 24px;\n    margin-right: 8px;\n  }\n}\n",
                    "styleUrl": "./header-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<nav class=\"header-nav\">\n  <a\n    class=\"header-nav__item\"\n    [routerLink]=\"['/models']\"\n    routerLinkActive=\"header-nav__item--active\"\n  >\n    <hs-icon type=\"icon-models\" class=\"header-nav__icon\"></hs-icon>\n    <span>Models</span>\n  </a>\n  <a\n    class=\"header-nav__item\"\n    [routerLink]=\"['/applications']\"\n\n    routerLinkActive=\"header-nav__item--active\"\n  >\n    <hs-icon type=\"icon-applications\" class=\"header-nav__icon\"></hs-icon>\n    <span>Applications</span>\n  </a>\n  <a\n    class=\"header-nav__item\"\n    [routerLink]=\"['/deployment_configs']\"\n    routerLinkActive=\"header-nav__item--active\"\n  >\n    <hs-icon type=\"dc\" class=\"header-nav__icon\"></hs-icon>\n    <span>Deployment configs</span>\n  </a>\n</nav>\n"
        },
        {
            "name": "HealthTimelineComponent",
            "id": "component-HealthTimelineComponent-2ca2c6794b0550926296506534ba5530",
            "file": "src/testing/components/mock-health-timeline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-health-timeline",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "detailedAggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "fullAggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "isLive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "timeBound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any"
                },
                {
                    "name": "timeInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "started",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "stopped",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "timeBoundChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "timeIntervalChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'hs-health-timeline',\n  template: '',\n})\nexport class HealthTimelineComponent {\n  @Input() timeInterval;\n  @Input() detailedAggregation;\n  @Input() isLive;\n  @Input() fullAggregation;\n  @Input() timeBound;\n  @Output() stopped: EventEmitter<any> = new EventEmitter();\n  @Output() started: EventEmitter<any> = new EventEmitter();\n  @Output() timeIntervalChanged: EventEmitter<any> = new EventEmitter();\n  @Output() timeBoundChanged: EventEmitter<any> = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "HeatmapComponent",
            "id": "component-HeatmapComponent-b54f53f74c1fe54d9baabbcc9e9c13ef",
            "file": "src/app/modules/stat/components/heatmap/heatmap.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-heatmap",
            "styleUrls": [
                "./heatmap.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./heatmap.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "hoveredItem",
                    "defaultValue": "new EventEmitter<\n    HeatmapData\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<HeatmapData>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeatmapConfig",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "axisLabelsColor",
                    "defaultValue": "'#334e68'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "height",
                    "defaultValue": "160",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "margins",
                    "defaultValue": "{\n    top: 12,\n    right: 24,\n    bottom: 96,\n    left: 96,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "rootEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'rootElement', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "svgEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'sgvEl', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "width",
                    "defaultValue": "1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "render",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { HeatmapConfig, HeatmapData } from '../../models';\nimport * as d3 from 'd3';\nimport { getColdWarmColor } from './coldwarm-color';\n\n@Component({\n  selector: 'hs-heatmap',\n  templateUrl: './heatmap.component.html',\n  styleUrls: ['./heatmap.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeatmapComponent implements OnInit {\n  private _config: HeatmapConfig;\n  @Input() set config(cfg: HeatmapConfig) {\n    this._config = cfg;\n    this.render();\n  }\n  @Output() hoveredItem: EventEmitter<HeatmapData> = new EventEmitter<\n    HeatmapData\n  >();\n\n  @ViewChild('sgvEl', { read: ElementRef, static: true }) svgEl: ElementRef;\n  @ViewChild('rootElement', { read: ElementRef, static: true })\n  rootEl: ElementRef;\n\n  private readonly axisLabelsColor: string = '#334e68';\n\n  width: number = 1000;\n  height: number = 160;\n  margins = {\n    top: 12,\n    right: 24,\n    bottom: 96,\n    left: 96,\n  };\n\n  constructor() {}\n\n  ngOnInit() {\n    this.render();\n  }\n\n  private render(): void {\n    const self = this;\n    const config = this._config;\n    // this.width = Math.max(\n    //   this.rootEl.nativeElement.getBoundingClientRect().width,\n    //   config.xLabels.length * 16\n    // );\n\n    this.width = this.rootEl.nativeElement.getBoundingClientRect().width;\n\n    // tickvalues\n    let tickValues = null;\n    if (this.width < config.xLabels.length * 16) {\n      tickValues = [\n        config.xLabels[0],\n        config.xLabels[config.xLabels.length - 1],\n      ];\n    }\n\n    const onMouseOver = function (d: HeatmapData) {\n      self.hoveredItem.next(d);\n    };\n\n    const onMouseLeave = function () {\n      self.hoveredItem.next(undefined);\n    };\n\n    const svg = d3.select(this.svgEl.nativeElement);\n\n    svg.selectAll('g').remove();\n    svg.selectAll('text').remove();\n\n    // scales\n    const xScale = d3\n      .scaleBand()\n      .domain(this._config.xLabels)\n      .range([0, this.width - this.margins.left - this.margins.right])\n      .padding(0.05);\n\n    const yScale = d3\n      .scaleBand()\n      .domain(config.yLabels)\n      .range([this.height - this.margins.bottom - this.margins.top, 0]);\n    // .padding(0.05);\n\n    // axis\n    const xAxis = d3\n      .axisBottom(xScale)\n      .tickSize(0)\n      .tickPadding(6)\n      .tickValues(tickValues);\n\n    const yAxis = d3.axisLeft(yScale).tickSize(0).tickPadding(10);\n\n    const xAxisSelection = svg\n      .append('g')\n      .call(xAxis)\n      .classed('xAxis', true)\n      .style(\n        'transform',\n        `translate(${this.margins.left}px, ${\n          this.height - this.margins.bottom\n        }px)`\n      );\n\n    xAxisSelection\n      .selectAll('text')\n      .style('transform', 'rotate(-45deg)')\n      .style('transform-origin', '20px 46px');\n    xAxisSelection.select('.domain').remove();\n\n    svg\n      .append('text')\n      .attr(\n        'transform',\n        'translate(' + this.width / 2 + ' ,' + (this.height - 12) + ')'\n      )\n      .style('text-anchor', 'middle')\n      .style('fill', this.axisLabelsColor)\n      .text(config.xAxisName);\n\n    svg\n      .append('g')\n      .call(yAxis)\n      .style(\n        'transform',\n        `translate(${this.margins.left}px, ${this.margins.top}px)`\n      )\n      .select('.domain')\n      .remove();\n\n    svg\n      .append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('y', 0)\n      .attr('x', -46)\n      .attr('dy', '1em')\n      .style('text-anchor', 'middle')\n      .style('fill', this.axisLabelsColor)\n      .text(config.yAxisName);\n\n    // draw data\n\n    const dataContainer = svg\n      .append('g')\n      .style(\n        'transform',\n        `translate(${this.margins.left}px, ${this.margins.top}px)`\n      );\n\n    dataContainer\n      .selectAll('rect')\n      .data(config.data)\n      .join(enter =>\n        enter\n          .append('rect')\n          .attr('x', d => xScale(d.x))\n          .attr('y', d => yScale(d.y))\n          .attr('rx', 4)\n          .attr('ry', 0)\n          .attr('width', xScale.bandwidth())\n          .attr('height', yScale.bandwidth())\n          .style('fill', ({ value }) => getColdWarmColor(value))\n          .on('mouseover', onMouseOver)\n          .on('mouseleave', onMouseLeave)\n      );\n  }\n\n  get title() {\n    return this._config.title;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.heatmap {\n  &__wrapper {\n    overflow: scroll;\n  }\n  &__title {\n    text-align: center;\n    font-size: 14px;\n    font-family: $font-family-bold;\n  }\n}\n",
                    "styleUrl": "./heatmap.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "cfg",
                                "type": "HeatmapConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "cfg",
                                "type": "HeatmapConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "title": {
                    "name": "title",
                    "getSignature": {
                        "name": "title",
                        "type": "",
                        "returnType": "",
                        "line": 180
                    }
                }
            },
            "templateData": "<div class=\"heatmap\" #rootElement>\n  <div class=\"heatmap__title\">{{ title }}</div>\n  <div class=\"heatmap__wrapper\">\n    <svg #sgvEl [attr.width]=\"width\" [attr.height]=\"height\"></svg>\n  </div>\n</div>\n"
        },
        {
            "name": "HistogramComponent",
            "id": "component-HistogramComponent-b01ce4388b76799f2143624edcb671de",
            "file": "src/app/modules/stat/components/histogram/histogram.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-histogram",
            "styleUrls": [
                "./histogram.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./histogram.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FeatureReportHistogram"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anchor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'anchor', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Chart",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { ColorPaletteService } from '@app/core/color-palette.service';\nimport * as Highcharts from 'highcharts';\nimport { Chart } from 'highcharts';\nimport { FeatureReportHistogram } from '../../models';\n\n@Component({\n  selector: 'hs-histogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HistogramComponent implements OnChanges, AfterViewInit {\n  @Input() config: FeatureReportHistogram;\n  @ViewChild('anchor', { read: ElementRef, static: true }) anchor: ElementRef;\n  private chart: Chart;\n\n  constructor(private readonly colorPalette: ColorPaletteService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.config && changes.config.currentValue && this.chart) {\n      const { bins, training, deployment } = changes.config\n        .currentValue as FeatureReportHistogram;\n      this.chart.series[0].update({ type: 'column', data: training });\n      this.chart.series[1].update({ type: 'column', data: deployment });\n      this.chart.axes[0].update({ categories: bins as string[] });\n\n      this.chart.tooltip.update({\n        formatter: function () {\n          return chooseFormatter.call(this, bins, deployment);\n        },\n      });\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const bins = this.config.bins as string[];\n    const deployment = this.config.deployment;\n    const [\n      trainingColor,\n      productionColor,\n    ] = this.colorPalette.getComplementaryColors();\n    this.chart = Highcharts.chart(this.anchor.nativeElement, {\n      chart: {\n        type: 'histogram',\n      },\n      yAxis: {\n        title: {\n          text: 'Density',\n        },\n        min: 0,\n      },\n      title: {\n        text: '',\n      },\n      tooltip: {\n        shared: true,\n        useHTML: true,\n        formatter: function () {\n          return chooseFormatter.call(this, bins, deployment);\n        },\n      },\n      plotOptions: {\n        column: {\n          grouping: false,\n          shadow: false,\n          groupPadding: 0,\n          borderWidth: 0,\n          pointPadding: 0,\n        },\n      },\n      xAxis: {\n        categories: this.config.bins as string[],\n        labels: {\n          format: '{value:,.5f}',\n        },\n      },\n      series: [\n        {\n          type: 'column',\n          name: 'Training Data',\n          data: this.config.training,\n          color: trainingColor,\n          opacity: 0.8,\n        },\n        {\n          type: 'column',\n          name: 'Production Data',\n          data: this.config.deployment,\n          color: productionColor,\n          opacity: 0.8,\n        },\n      ],\n    });\n  }\n}\n\nfunction chooseFormatter(bins, deployment) {\n  if (bins.length > deployment.length) {\n    const binIndex = bins.indexOf((this as any).x);\n    return `\n            <div style=\"color: #102A43;line-height: 24px;font-weight: bold\">${\n              bins[binIndex]\n            } - ${bins[binIndex + 1]}</div>\n            <div style=\"color: #334E68;line-height: 18px\">${\n              this.points[0].series.name\n            }: <span style=\"color: ${this.points[0].color};font-weight: bold\">${\n      this.points[0].y\n    }</span></div>\n            <div style=\"color: #334E68;line-height: 18px\">${\n              this.points[1].series.name\n            }: <span style=\"color: ${this.points[1].color};font-weight: bold\">${\n      this.points[1].y\n    }</span></div> \n          `;\n  } else {\n    return `\n            <div style=\"color: #102A43;line-height: 24px;font-weight: bold\">${this.x}</div>\n            <div style=\"color: #334E68;line-height: 18px\">${this.points[0].series.name}: <span style=\"color: ${this.points[0].color};font-weight: bold\">${this.points[0].y}</span></div>\n            <div style=\"color: #334E68;line-height: 18px\">${this.points[1].series.name}: <span style=\"color: ${this.points[1].color};font-weight: bold\">${this.points[1].y}</span></div> \n          `;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}",
                    "styleUrl": "./histogram.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "templateData": "<div #anchor></div>\n"
        },
        {
            "name": "IconComponent",
            "id": "component-IconComponent-ee1c1d859561e6ecd88f155674b17e03",
            "file": "src/app/shared/components/icons/icons.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-icon",
            "styleUrls": [
                "./icons.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icons.template.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'hs-icon',\n  templateUrl: './icons.template.html',\n  styleUrls: ['./icons.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class IconComponent {\n  @Input() type: string;\n  @Input() title: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.hydro-icon {\n  width: inherit;\n  height: inherit;\n}\n\n[data-class=\"spinner\"] {\n  fill: none;\n  stroke: $neutral-color-600;\n  stroke-width: 2;\n  stroke-dasharray: 2px 36px;\n  stroke-linecap: round;\n  animation: spin 2s linear infinite;\n  transform-origin: 50%;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n}",
                    "styleUrl": "./icons.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<svg class=\"hydro-icon\">\n  <title *ngIf=\"title\">{{ title }}</title>\n  <use attr.xlink:href=\"{{ '#' + type }}\" />\n</svg>\n"
        },
        {
            "name": "InputTextComponent",
            "id": "component-InputTextComponent-a98e1f850b6028ba3c87aa066e52b0f5",
            "file": "src/app/shared/components/form/input-text/input-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputTextComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "hs-input-text",
            "styleUrls": [
                "./input-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "literal type | null"
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string"
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "noop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "noop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "hasErrors",
                    "args": [
                        {
                            "name": "input",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "input",
                            "type": "NgModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "_",
                                    "type": "any",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgModel,\n} from '@angular/forms';\n\nconst noop = (_?: any) => {};\n\n@Component({\n  selector: 'hs-input-text',\n  templateUrl: './input-text.component.html',\n  styleUrls: ['./input-text.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @angular-eslint/no-forward-ref\n      useExisting: forwardRef(() => InputTextComponent),\n      multi: true,\n    },\n  ],\n})\nexport class InputTextComponent implements ControlValueAccessor {\n  get value(): any {\n    return this._value;\n  }\n\n  set value(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n      this.onChange(value);\n    }\n  }\n\n  @Input() public name: string;\n  @Input() public label: string;\n  @Input() public icon: string;\n  @Input() public errors: { [err: string]: string } | null;\n  @Input() public disabled: boolean;\n  @Input() public placeholder: string;\n\n  protected _value: any;\n  protected onChange: (_: any) => void = noop;\n  protected onTouched: () => void = noop;\n\n  get inputClassMap(): { [p: string]: boolean } {\n    const rootClass = 'hs-input__input';\n    return {\n      [rootClass]: true,\n      [`${rootClass}--with-icon`]: this.icon !== undefined,\n    };\n  }\n\n  public writeValue(value: any) {\n    if (value !== this._value) {\n      this._value = value;\n    }\n  }\n\n  public registerOnChange(fn: (_: any) => void) {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: () => void) {\n    this.onTouched = fn;\n  }\n\n  public hasErrors(input: NgModel): boolean {\n    return input.touched && this.errors != null;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.hs-input {\n  &__control {\n    position: relative;\n  }\n  &__label {\n    color: $neutral-color-1000;\n    text-transform: uppercase;\n    font-size: 10px;\n    line-height: 12px;\n  }\n\n  &__icon {\n    color: $neutral-color-300;\n    height: 24px;\n    left: 4px;\n    position: absolute;\n    top: 2px;\n    width: 24px;\n  }\n\n  &__input {\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    color: $neutral-color-800;\n    font-size: 14px;\n    height: 28px;\n    padding: 2px 8px;\n    width: 100%;\n    &--with-icon {\n      padding-left: 28px;\n    }\n  }\n\n  &__errors {\n    display: flex;\n    align-items: center;\n    background: $supportive-color-red-500;\n    color: $neutral-color-100;\n    position: absolute;\n    font-size: 12px;\n    padding: 4px;\n    line-height: 14px;\n    width: 100%;\n    top: calc(100% + 4px);\n    border-radius: 4px;\n  }\n\n  &__error{\n    position: relative;\n    padding-left: 10px;\n    margin-right: 7px;\n    &::before {\n      content: '';\n      position: absolute;\n      width: 8px;\n      height: 8px;\n      background-color: white;\n      border-radius: 50%;\n      top: 50%;\n      left: 2%;\n      transform: translate(-50%, -50%);\n    }\n  }\n}\n",
                    "styleUrl": "./input-text.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 29,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "any",
                        "returnType": "any",
                        "line": 25
                    }
                },
                "inputClassMap": {
                    "name": "inputClassMap",
                    "getSignature": {
                        "name": "inputClassMap",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"hs-input\">\n  <label *ngIf=\"label\" class=\"hs-input__label\" [attr.for]=\"name\"\n    >{{ label }}</label\n  >\n  <div class=\"hs-input__control\">\n    <hs-icon *ngIf=\"icon\" class=\"hs-input__icon\" [type]=\"icon\"></hs-icon>\n    <input [ngClass]=\"inputClassMap\" [(ngModel)]=\"value\" [attr.id]=\"name\" />\n    <ng-container *ngIf=\"errors\">\n      <div class=\"hs-input__errors\">\n        <div class=\"hs-input__error\" *ngFor=\"let error of errors | keyvalue\">\n          {{ error.value }}\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "KafkaFormComponent",
            "id": "component-KafkaFormComponent-42ce7e0cd5bb0140c99e3a5c30c7f639",
            "file": "src/app/modules/applications/components/forms/kafka-form/kafka-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-kafka-form",
            "styleUrls": [
                "./kafka-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./kafka-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "kafkaFormArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormArray"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isKafkaEnabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "addKafkaControl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "buildKafkaSourceControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "removeAllKafkaControls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "removeKafkaControlAtIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleKafkaEnabled",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'hs-kafka-form',\n  templateUrl: './kafka-form.component.html',\n  styleUrls: ['./kafka-form.component.scss'],\n})\nexport class KafkaFormComponent {\n  @Input()\n  public kafkaFormArray: FormArray;\n\n  isKafkaEnabled: boolean = false;\n\n  constructor(private fb: FormBuilder) {}\n\n  public addKafkaControl(): void {\n    this.kafkaFormArray.push(this.buildKafkaSourceControl());\n  }\n\n  public removeKafkaControlAtIndex(index: number): void {\n    this.kafkaFormArray.removeAt(index);\n\n    if (this.kafkaFormArray.length === 0) {\n      this.isKafkaEnabled = false;\n    }\n  }\n\n  public toggleKafkaEnabled(event): void {\n    this.isKafkaEnabled = event.target.checked;\n\n    if (this.isKafkaEnabled) {\n      this.addKafkaControl();\n    } else {\n      this.removeAllKafkaControls();\n    }\n  }\n\n  private buildKafkaSourceControl(): FormGroup {\n    return this.fb.group({\n      sourceTopic: new FormControl(),\n      destinationTopic: new FormControl(),\n    });\n  }\n\n  private removeAllKafkaControls(): void {\n    while (this.kafkaFormArray.length) {\n      this.removeKafkaControlAtIndex(0);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.kafka {\n  &__item {\n    align-items: flex-end;\n    margin-bottom: 4px;\n    display: flex;\n  }\n  &__input {\n    margin-right: 12px;\n  }\n  &__icon {\n    cursor: pointer;\n    height: 14px;\n    line-height: 14px;\n    width: 14px;\n    color: $neutral-color-600;\n    margin-bottom: 6px;\n    &:hover {\n      color: $supportive-color-red-600;\n    }\n  }\n  &__button {\n    font-size: 12px;\n    margin: 4px 0;\n    padding: 4px;\n  }\n}\n",
                    "styleUrl": "./kafka-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"kafka-sources\">\n  <label class=\"hydro-checkbox\">\n    <span class=\"hydro-checkbox__label\">use kafka source</span>\n    <input\n      type=\"checkbox\"\n      [checked]=\"isKafkaEnabled\"\n      (change)=\"toggleKafkaEnabled($event)\"\n    />\n    <span></span>\n  </label>\n  <div *ngFor=\"let kafkaSource of kafkaFormArray.controls; index as i\">\n    <div [formGroup]=\"kafkaSource\" class=\"kafka__item\">\n      <hs-input-text\n        class=\"kafka__input\"\n        name=\"inputTopic\"\n        formControlName=\"sourceTopic\"\n        label=\"input topic\"\n      >\n      </hs-input-text>\n      <hs-input-text\n        class=\"kafka__input\"\n        name=\"outputTopic\"\n        formControlName=\"destinationTopic\"\n        label=\"destination topic\"\n      >\n      </hs-input-text>\n      <hs-icon\n        type=\"icon-remove\"\n        class=\"icon kafka__icon\"\n        (click)=\"removeKafkaControlAtIndex(i)\"\n      ></hs-icon>\n    </div>\n  </div>\n\n  <div *ngIf=\"isKafkaEnabled\" class=\"kafka__button\">\n    <button hs-button (click)=\"addKafkaControl()\">\n      add kafka source\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "LatencyCheckComponent",
            "id": "component-LatencyCheckComponent-6e2b3159cdf63ee2bc56ab942b077f82",
            "file": "src/testing/components/mock-latency-check.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-latency-check",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-latency-check',\n  template: '',\n})\nexport class LatencyCheckComponent {\n  @Input() data: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LatencyCheckComponent",
            "id": "component-LatencyCheckComponent-3e2c357bcc6496b3f6e49b769ad7f058-1",
            "file": "src/app/modules/monitoring/components/checks/latency-check/latency-check.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-latency-check",
            "styleUrls": [
                "latency-check.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "latency-check.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartConfig",
                    "defaultValue": "{\n    series: [\n      { name: 'latency', color: this.colorPalette.getPalette()[0], data: [] },\n    ],\n    size: {\n      height: 54,\n      margins: {\n        left: 24,\n        right: 24,\n        top: 4,\n        bottom: 18,\n      },\n    },\n    plotBands: [],\n    area: true,\n    name: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartConfig",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { ChartConfig } from '../../../models';\nimport { ColorPaletteService } from '@app/core/color-palette.service';\n\n@Component({\n  selector: 'hs-latency-check',\n  templateUrl: 'latency-check.component.html',\n  styleUrls: ['latency-check.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LatencyCheckComponent {\n  @Input()\n  set data(data: number[]) {\n    if (data) {\n      this.chartConfig = {\n        ...this.chartConfig,\n        series: [\n          { name: 'latency', color: this.colorPalette.getPalette()[0], data },\n        ],\n      };\n    }\n  }\n\n  chartConfig: ChartConfig = {\n    series: [\n      { name: 'latency', color: this.colorPalette.getPalette()[0], data: [] },\n    ],\n    size: {\n      height: 54,\n      margins: {\n        left: 24,\n        right: 24,\n        top: 4,\n        bottom: 18,\n      },\n    },\n    plotBands: [],\n    area: true,\n    name: '',\n  };\n\n  constructor(private colorPalette: ColorPaletteService) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.latency-check {\n  height: 120px;\n  &__information {\n    min-width: 120px;\n    &-name {\n      color: $neutral-color-800;\n      font-family: $font-family-bold;\n      font-size: 14px\n    }\n  }\n}\n",
                    "styleUrl": "latency-check.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "colorPalette",
                        "type": "ColorPaletteService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "data": {
                    "name": "data",
                    "setSignature": {
                        "name": "data",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "number[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "number[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LatencyCheckComponent-1",
            "templateData": "<div class=\"latency-check\">\n  <div class=\"latency-check__information\">\n    <div class=\"latency-check__information-name\">\n      Latency, ms\n    </div>\n  </div>\n  <div class=\"latency-check__chart\">\n    <hs-check-chart [config]=\"chartConfig\"></hs-check-chart>\n  </div>\n</div>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-a8066adb54a23c3d936419e7d212f07a",
            "file": "src/app/shared/components/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.scss'],\n})\nexport class LoaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".loader {\n  height: inherit;\n  width: inherit;\n  transform-origin: center center;\n  animation: aaa 1.3s infinite linear;\n  &__icon {\n    width: inherit;\n    height: inherit;\n  }\n}\n\n@keyframes aaa {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(180deg);\n  }\n}",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"loader\">\n  <hs-icon type=\"icon-loader\" class=\"loader__icon\"></hs-icon>\n</div>\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-7e164acbed7c261992d81fd5b4e5cb8d",
            "file": "src/app/shared/components/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-loading',\n  templateUrl: './loading.component.html',\n  styleUrls: ['./loading.component.scss'],\n})\nexport class LoadingComponent {\n  @Input() loading: boolean;\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.loading {\n  position: relative;\n  &__layout {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: rgba(244, 240, 248, 0.5);\n    z-index: 9999;\n  }\n  &__icon {\n    display: block;\n    margin: 0 auto;\n    height: 48px;\n    width: 48px;\n  }\n}\n",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "templateData": "<div class=\"loading\">\n  <div class=\"loading__layout\" *ngIf=\"loading\">\n    <hs-loader class=\"loading__icon\"></hs-loader>\n  </div>\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "LogComponent",
            "id": "component-LogComponent-b8f0d82d09ad475c5f9183669f64f8dd",
            "file": "src/testing/components/mock-log.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-log",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]"
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-log',\n  template: '',\n})\nexport class LogComponent {\n  @Input() modelVersion: ModelVersion;\n  @Input() checks: any[] = [];\n  @Input() loading: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LogComponent",
            "id": "component-LogComponent-11cc71ea58a6560b48026b3fff3da97f-1",
            "file": "src/app/shared/components/log/log.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-log",
            "styleUrls": [
                "./log.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./log.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isVisible$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "logContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'logContainer', {read: ViewContainerRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeGlobalLog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEsc",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape'"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  HostListener,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { LogsService } from '@app/modules/model-version/logs.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'hs-log',\n  templateUrl: './log.component.html',\n  styleUrls: ['./log.component.scss'],\n})\nexport class LogComponent implements AfterViewInit {\n  @ViewChild('logContainer', { read: ViewContainerRef })\n  logContainer: ViewContainerRef;\n  isVisible$: Observable<boolean>;\n\n  constructor(private readonly logs: LogsService) {\n    this.isVisible$ = logs.logIsVisible$;\n  }\n\n  ngAfterViewInit() {\n    this.logs.setViewContainerRef(this.logContainer);\n  }\n\n  public closeGlobalLog(): void {\n    this.logs.closeGlobalLog();\n  }\n\n  @HostListener('document:keydown.escape')\n  public onEsc(): void {\n    this.logs.closeGlobalLog();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.log {\n  top: 72px;\n  left: 0px;\n  position: fixed;\n  right: 0;\n  height: 100%;\n  right: 0;\n  visibility: hidden;\n  z-index: 2;\n  &__layout {\n    background: #000000b5;\n    top: 0;\n    left: 0;\n    position: absolute;\n    right: 0;\n    height: 100%;\n    right: 0;\n    opacity: 0;\n    transition: 0.4s all cubic-bezier(0.165, 0.84, 0.44, 1);\n  }\n\n  &__content {\n    display: flex;\n    opacity: 0;\n    background: #e2e4ea;\n    height: 100%;\n    position: absolute;\n    top: 0px;\n    width: 60%;\n    right: 0;\n    padding: 24px 38px 24px;\n    transform: translateX(360px);\n    transition: 0.4s all cubic-bezier(0.165, 0.84, 0.44, 1);\n  }\n\n  &--is-visible {\n    visibility: visible;\n\n    .log__content {\n      opacity: 1;\n      transform: translateX(0);\n      transition: 0.6s all cubic-bezier(0.165, 0.84, 0.44, 1);\n    }\n\n    .log__layout {\n      opacity: 1;\n      transition: 0.6s all cubic-bezier(0.165, 0.84, 0.44, 1);\n    }\n  }\n}\n",
                    "styleUrl": "./log.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logs",
                        "type": "LogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "logs",
                        "type": "LogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogComponent-1",
            "templateData": "<div class=\"log\" [ngClass]=\"{ 'log--is-visible': isVisible$ | async }\">\n  <div class=\"log__layout\" (click)=\"closeGlobalLog()\"></div>\n  <div class=\"log__content\">\n    <ng-container #logContainer></ng-container>\n  </div>\n</div>\n"
        },
        {
            "name": "LogComponent",
            "id": "component-LogComponent-c594f7196b63564df4024e913474b553-2",
            "file": "src/app/modules/request-details/components/log/log.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-log",
            "styleUrls": [
                "log.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "log.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "CheckCollection"
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedCheck",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Check",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "size",
                    "defaultValue": "'full'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"mini\" | \"full\"",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "changeSize",
                    "args": [
                        {
                            "name": "size",
                            "type": "\"mini\" | \"full\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "\"mini\" | \"full\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectItem",
                    "args": [
                        {
                            "name": "check",
                            "type": "Check",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "check",
                            "type": "Check",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Check, CheckCollection } from '../../../monitoring/models';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-log',\n  templateUrl: 'log.component.html',\n  styleUrls: ['log.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LogComponent implements OnChanges {\n  selectedCheck: Check;\n  size: 'mini' | 'full' = 'full';\n\n  @Input() modelVersion: ModelVersion;\n  @Input() checks: CheckCollection;\n  @Input() loading: boolean;\n\n  selectItem(check: Check) {\n    this.selectedCheck = check;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.checks && changes.checks.currentValue) {\n      const checks = changes.checks.currentValue as CheckCollection;\n      this.selectItem(checks.getFirstElement());\n    }\n  }\n\n  get requestsSummaryInfo(): {\n    count: number;\n    failed: number;\n    success: number;\n  } {\n    return this.checks.getSummaryInformation();\n  }\n\n  changeSize(size: 'mini' | 'full'): void {\n    this.size = size;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.log {\n  position: relative;\n  &__title {\n    font-size: 18px;\n    font-family: $font-family-bold;\n    line-height: 32px;\n  }\n\n  &__header {\n    position: relative;\n  }\n\n  &--shrinked {\n    height: 32px;\n  }\n  &__mini {\n    display: flex;\n    padding: 12px;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    &-item {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      &-count {\n        font-size: 24px;\n        font-family: $font-family-bold;\n        color: $neutral-color-1000;\n        &--failed {\n          color: $supportive-color-red-600;\n        }\n        &--success {\n          color: $supportive-color-green-600;\n        }\n      }\n      &-label {\n        font-family: $font-family-light;\n        color: $neutral-color-800;\n      }\n    }\n    &-item + &-item {\n      margin-left: 48px;\n    }\n  }\n  &__size {\n    right: 6px;\n    top: 12px;\n    position: absolute;\n    &-trigger {\n      display: inline-block;\n      cursor: pointer;\n      width: 12px;\n      height: 12px;\n      &:hover {\n        border-color: $neutral-color-800;\n        // background: $neutral-color-800;\n      }\n      &--mini {\n        border-bottom: 4px $neutral-color-400 solid;\n      }\n      &--full {\n        border-bottom: 12px $neutral-color-400 solid;\n      }\n    }\n    &-trigger + &-trigger {\n      margin-left: 6px;\n    }\n  }\n\n  &__loader {\n    color: $primary-color-800;\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    background: #ffffffb5;\n    border-radius: 4px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 1;\n\n    &-icon {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n  &__body {\n    display: flex;\n    background: white;\n    border-radius: 4px;\n    border: 1px $neutral-color-200 solid;\n    position: relative;\n  }\n\n  &__ids {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    background: $neutral-color-100;\n    min-width: 146px;\n    max-height: 720px;\n    overflow: auto;\n    &-item {\n      padding: 8px 12px;\n      color: $neutral-color-800;\n      cursor: pointer;\n      font-family: $font-family-light;\n      font-size: 12px;\n      opacity: 0.7;\n\n      &:hover {\n        opacity: 1;\n      }\n\n      &--selected {\n        opacity: 1;\n        background: white;\n      }\n\n      &--failed {\n        color: $supportive-color-red-800;\n      }\n    }\n  }\n\n  &__detailed {\n    padding: 12px;\n    max-height: 720px;\n    overflow: auto;\n  }\n\n  &__message {\n    width: 100%;\n    padding: 12px 0;\n    text-align: center;\n    color: $neutral-color-600;\n    font-family: $font-family-light;\n  }\n}\n",
                    "styleUrl": "log.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "requestsSummaryInfo": {
                    "name": "requestsSummaryInfo",
                    "getSignature": {
                        "name": "requestsSummaryInfo",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 36
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "LogComponent-2",
            "templateData": "<div class=\"log\">\n  <div class=\"log__header\">\n    <div class=\"log__title\">Requests</div>\n    <div class=\"log__size\">\n      <span\n        class=\"log__size-trigger log__size-trigger--mini\"\n        (click)=\"changeSize('mini')\"\n      ></span>\n      <span\n        class=\"log__size-trigger log__size-trigger--full\"\n        (click)=\"changeSize('full')\"\n      ></span>\n    </div>\n  </div>\n  <div class=\"log__loader\" *ngIf=\"loading\">\n    <hs-loader class=\"log__loader-icon\"></hs-loader>\n  </div>\n  <ng-container *ngIf=\"size === 'full'; else minified\">\n    <div class=\"log__body\">\n      <ul class=\"log__ids\">\n        <li\n          *ngFor=\"let check of checks.getChecks(); let i = index\"\n          class=\"log__ids-item\"\n          [ngClass]=\"{\n            'log__ids-item--selected': check === selectedCheck,\n            'log__ids-item--failed': check.isFailed()\n          }\"\n          (click)=\"selectItem(check)\"\n        >\n          {{ check.id | checkIdToTime | hsFormatDate }}\n        </li>\n      </ul>\n      <div class=\"log__detailed\">\n        <hs-log-detail\n          *ngIf=\"selectedCheck\"\n          [check]=\"selectedCheck\"\n          [modelVersion]=\"modelVersion\"\n        ></hs-log-detail>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #minified>\n  <div class=\"log__body\">\n    <div class=\"log__mini\">\n      <div class=\"log__mini-item\">\n        <div class=\"log__mini-item-count\">{{ requestsSummaryInfo.count }}</div>\n        <div class=\"log__mini-item-label\">requests</div>\n      </div>\n      <div class=\"log__mini-item\">\n        <div class=\"log__mini-item-count log__mini-item-count--success\">\n          {{ requestsSummaryInfo.success }}\n        </div>\n        <div class=\"log__mini-item-label\">success</div>\n      </div>\n      <div class=\"log__mini-item\">\n        <div class=\"log__mini-item-count log__mini-item-count--failed\">\n          {{ requestsSummaryInfo.failed }}\n        </div>\n        <div class=\"log__mini-item-label\">failed</div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<ng-template #noDataAvailable>\n  <div class=\"log__message\">\n    No data available\n  </div>\n</ng-template>\n"
        },
        {
            "name": "LogDetailComponent",
            "id": "component-LogDetailComponent-ec182b687935bfb76d3f9dee50f5353f",
            "file": "src/testing/components/monitoring/mock-log-detail.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-log-detail",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-log-detail',\n  template: '',\n})\nexport class LogDetailComponent {\n  @Input() check: any;\n  @Input() modelVersion: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LogDetailComponent",
            "id": "component-LogDetailComponent-be8e3abfcf9f8d29c19ea99bca103a65-1",
            "file": "src/app/modules/request-details/components/log-detail/log-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-log-detail",
            "styleUrls": [
                "log-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "log-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Check"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "inputKeys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "outputKeys",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Check } from '../../../monitoring/models';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-log-detail',\n  templateUrl: 'log-detail.component.html',\n  styleUrls: ['log-detail.component.scss'],\n})\nexport class LogDetailComponent implements OnInit {\n  @Input() check: Check;\n  @Input() modelVersion: ModelVersion;\n\n  inputKeys: string[];\n  outputKeys: string[];\n\n  ngOnInit(): void {\n    const { inputs, outputs } = this.modelVersion.modelSignature;\n    this.inputKeys = inputs.map(el => el.name);\n    this.outputKeys = outputs.map(el => el.name);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.log-detail {\n  &__label {\n    color: $neutral-color-800;\n    line-height: 24px;\n    font-family: $font-family-bold;\n    margin-bottom: 4px;\n    font-size: 14px;\n  }\n\n  &__section {\n    margin-bottom: 18px;\n  }\n}\n",
                    "styleUrl": "log-detail.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LogDetailComponent-1",
            "templateData": "<div class=\"log-detail\">\n  <div *ngIf=\"check.error\">\n    <div>Error:</div>\n    <hs-error-message>\n      {{ check.error }}\n    </hs-error-message>\n  </div>\n  <ng-container>\n    <section class=\"log-detail__section\">\n      <hs-raw-checks\n        class=\"log-detail__section\"\n        [check]=\"check\"\n        [inputKeys]=\"inputKeys\"\n        [outputKeys]=\"outputKeys\"\n        [modelVersion]=\"modelVersion\"\n      >\n      </hs-raw-checks>\n    </section>\n    <section *ngIf=\"check.hasMetricChecks()\">\n      <div class=\"log-detail__label\">metrics</div>\n      <hs-metrics-checks [metrics]=\"check.metricChecks\"></hs-metrics-checks>\n    </section>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "LogMetricsTableComponent",
            "id": "component-LogMetricsTableComponent-9e8d9cb7de29ecb6060d587914d7b9b5",
            "file": "src/testing/components/mock-log-metrics-table.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-log-metrics-table",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-log-metrics-table',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LogMetricsTableComponent {\n  @Input() metrics: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LogsComponent",
            "id": "component-LogsComponent-18553226871e3cfe323ba6e6f56a6292",
            "file": "src/app/shared/components/logs/logs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-logs",
            "styleUrls": [
                "./logs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./logs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Logs'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "logs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "Observable<string>"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "activateRetryButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "autoScroll",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "destroy",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "lastLog",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "logBody",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'logBody', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "logs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogItem[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "logSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "retryButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'retryButton'"
                        }
                    ]
                },
                {
                    "name": "retryCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "addScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "trackByFn",
                    "args": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewChild,\n  ElementRef,\n  AfterViewChecked,\n  AfterViewInit,\n  Output,\n  EventEmitter,\n  OnInit,\n  OnDestroy,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Observable, Subscription, Subject, fromEvent, iif, of } from 'rxjs';\nimport { tap, mergeMap, retryWhen, takeUntil } from 'rxjs/operators';\n\ntype LogItem = {\n  logText: string;\n  count: number;\n};\n\n@Component({\n  selector: 'hs-logs',\n  templateUrl: './logs.component.html',\n  styleUrls: ['./logs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LogsComponent\n  implements OnInit, AfterViewChecked, AfterViewInit, OnDestroy {\n  @Input() logs$: Observable<string>;\n  @Input() header: string = 'Logs';\n\n  @Output() closed: EventEmitter<any> = new EventEmitter<any>();\n\n  @ViewChild('logBody', { read: ElementRef, static: true }) logBody: ElementRef;\n  @ViewChild('retryButton') retryButton: ElementRef;\n  autoScroll: boolean = true;\n\n  logs: LogItem[] = [];\n  error: string = '';\n  retryCount: number = 0;\n  activateRetryButton: boolean = false;\n  lastLog: string = null;\n  private destroy = new Subject();\n  private logSubscription: Subscription;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.logSubscription = this.logs$\n      .pipe(\n        takeUntil(this.destroy),\n        retryWhen(errors =>\n          errors.pipe(\n            tap(() => {\n              if (this.retryCount === 3) {\n                this.activateRetryButton = true;\n                this.error = 'Internal error, stream was stopped.';\n              } else {\n                this.retryCount++;\n                this.error = `Internal error, retrying the request (${this.retryCount}/3)...`;\n              }\n              this.cdr.detectChanges();\n            }),\n            mergeMap(() =>\n              iif(\n                () => this.activateRetryButton,\n                fromEvent<any>(this.retryButton.nativeElement, 'click').pipe(\n                  tap(() => {\n                    this.error = '';\n                    this.cdr.detectChanges();\n                  })\n                ),\n                of(null)\n              )\n            )\n          )\n        )\n      )\n      .subscribe((val: string) => {\n        this.error = '';\n        let newLogs = val.trim().split('\\n');\n        newLogs.forEach(log => {\n          if (log === this.lastLog) {\n            this.logs[this.logs.length - 1].count++;\n          } else {\n            this.logs.push({ logText: log, count: 1 });\n            this.lastLog = log;\n          }\n        });\n        this.cdr.detectChanges();\n      });\n  }\n\n  ngAfterViewInit(): void {\n    this.addScrollListener();\n  }\n\n  ngAfterViewChecked(): void {\n    if (this.logBody && this.autoScroll) {\n      this.scrollDown();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroy.next();\n    this.destroy.complete();\n    this.destroy = null;\n    this.logSubscription.unsubscribe();\n  }\n\n  get isEmptyLog(): boolean {\n    return this.logs.length === 0;\n  }\n\n  onClose(): void {\n    this.closed.emit();\n  }\n\n  trackByFn(index) {\n    return index;\n  }\n\n  private scrollDown() {\n    const el: HTMLElement = this.logBody.nativeElement;\n    el.scrollTop = el.scrollHeight;\n  }\n\n  private addScrollListener(): void {\n    const el: HTMLElement = this.logBody.nativeElement;\n    el.addEventListener('scroll', () => {\n      const { scrollHeight, scrollTop } = el;\n      const { height } = el.getBoundingClientRect();\n      const thisIsEnd = scrollTop === scrollHeight - height;\n\n      this.autoScroll = thisIsEnd;\n      this.cdr.detectChanges();\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n:host {\n  width: 100%;\n}\n\n.log {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  &__header {\n    color: $neutral-color-800;\n    font-family: $font-family-light;\n    font-size: 14px;\n    letter-spacing: 1px;\n    margin-bottom: 8px;\n    position: relative;\n    text-transform: uppercase;\n  }\n\n  &__body {\n    background: $neutral-color-1000;\n    display: flex;\n    flex-direction: column;\n    height: calc(100% - 76px);\n    min-height: 60px;\n    overflow: auto;\n    word-break: break-all;\n    padding: 12px;\n    width: 100%;\n  }\n\n  &__item {\n    white-space: pre-wrap;\n\n    &-index {\n      color: $neutral-color-400;\n      padding-right: 8px;\n    }\n\n    &-text {\n      color: $neutral-color-100;\n    }\n\n    &-counter {\n      color: $neutral-color-100;\n      height: 18px;\n      width: 18px;\n      font-size: 10px;\n      font-family: $font-family-bold;\n      background-color: $neutral-color-800;\n      border-radius: 100%;\n      display: flex;\n      justify-content: center;\n    }\n  }\n\n  &__scroller {\n    position: relative;\n    top: -32px;\n    padding: 4px;\n    background: #94afc13b;\n    text-align: center;\n    color: rgba(255, 255, 255, 0.466);\n    cursor: pointer;\n\n    &-icon {\n      height: 24px;\n      width: 24px;\n    }\n\n    &:hover {\n      color: $neutral-color-100;\n    }\n  }\n\n  &--is-empty {\n    text-align: center;\n    font-size: 12px;\n    text-transform: uppercase;\n    color: $neutral-color-500;\n    font-family: $font-family-light;\n    font-style: italic;\n  }\n\n  &__close-icon {\n    position: absolute;\n    top: calc(50% - 58px);\n    left: -28px;\n    width: 20px;\n    height: 20px;\n    cursor: pointer;\n    color: $neutral-color-600;\n    transition: 0.3s ease all;\n    &:hover {\n      color: $neutral-color-1000;\n    }\n  }\n\n  &__retry {\n    background-color: crimson;\n    color: white;\n    height: 30px;\n    width: 60px;\n    border: 1px solid white;\n    &:hover {\n      cursor: pointer;\n    }\n  }\n}\n",
                    "styleUrl": "./logs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewChecked",
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "isEmptyLog": {
                    "name": "isEmptyLog",
                    "getSignature": {
                        "name": "isEmptyLog",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 113
                    }
                }
            },
            "templateData": "<section class=\"log\">\n  <div class=\"log__header\">\n    {{ header }}\n  </div>\n  <hs-error-message [hidden]=\"!error\">\n    {{ error }}\n    <button [hidden]=\"!activateRetryButton\" class=\"log__retry\" #retryButton>\n      Retry\n    </button>\n  </hs-error-message>\n  <div class=\"log__body\" #logBody>\n    <table>\n      <tr\n        class=\"log__item\"\n        *ngFor=\"let item of logs; index as i; trackBy: trackByFn\"\n      >\n        <td class=\"log__item-index\">{{ i }}</td>\n        <td class=\"log__item-text\">{{ item.logText }}</td>\n        <td *ngIf=\"item.count > 1\">\n          <div class=\"log__item-counter\">{{ item.count }}</div>\n        </td>\n      </tr>\n    </table>\n  </div>\n  <div class=\"log__scroller\" *ngIf=\"!autoScroll\" (click)=\"scrollDown()\">\n    <hs-icon\n      class=\"icon log__scroller-icon\"\n      type=\"icon-arrow-down\"\n    ></hs-icon>\n  </div>\n  <hs-icon\n    class=\"icon log__close-icon\"\n    type=\"icon-close-sidebar\"\n    (click)=\"onClose()\"\n  ></hs-icon>\n</section>\n"
        },
        {
            "name": "MetadataComponent",
            "id": "component-MetadataComponent-014abd8774dab01f1d1af0433b57cf88",
            "file": "src/app/modules/model-version/components/metadata/metadata.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-metadata",
            "styleUrls": [
                "./metadata.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metadata.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metadata",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "object"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { isEmpty } from 'lodash';\n\n@Component({\n  selector: 'hs-metadata',\n  templateUrl: './metadata.component.html',\n  styleUrls: ['./metadata.component.scss'],\n})\nexport class MetadataComponent {\n  @Input()\n  metadata: object;\n\n  isEmpty() {\n    return isEmpty(this.metadata);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.metadata {\n\n  &__empty {\n    text-align: center;\n    color: $neutral-color-400;\n  }\n  &__key {\n    font-family: $font-family-light;\n    color: $neutral-color-1000;\n  }\n}",
                    "styleUrl": "./metadata.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"metadata\">\n  <table class=\"metadata__table\" *ngIf=\"!isEmpty(); else empty\">\n    <tr class=\"metadata__item\" *ngFor=\"let item of metadata | keyvalue\">\n      <td class=\"metadata__key\">{{ item.key }} :</td>\n      <td class=\"metadata__value\">{{ item.value }}</td>\n    </tr>\n  </table>\n</div>\n\n<ng-template #empty>\n  <div class=\"metadata__empty\">\n    Metadata is empty\n  </div>\n</ng-template>\n"
        },
        {
            "name": "MetricComponent",
            "id": "component-MetricComponent-4555bdcbc9f88a78a9f55966b15fb9d8",
            "file": "src/testing/components/mock-metric.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-metric",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metric",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteMetric",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'hs-metric',\n  template: '',\n})\nexport class MetricComponent {\n  @Input() metric;\n  @Output() deleteMetric = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MetricsChecksComponent",
            "id": "component-MetricsChecksComponent-adbeaeeb0e10e71594904726b29352be",
            "file": "src/app/modules/request-details/components/metrics-checks/metrics-checks.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-metrics-checks",
            "styleUrls": [
                "./metrics-checks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metrics-checks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { RawCheck } from '../../../monitoring/models';\n\n@Component({\n  selector: 'hs-metrics-checks',\n  templateUrl: './metrics-checks.component.html',\n  styleUrls: ['./metrics-checks.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsChecksComponent {\n  @Input() metrics: { [metricName: string]: RawCheck };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.metric-checks {\n  border: 2px $neutral-color-200 solid;\n  border-radius: 5px;\n  overflow: hidden;\n  table {\n    border-collapse: collapse;\n    width: 100%;\n    text-align: left;\n    & > thead {\n      font-family: $font-family-bold;\n      & > tr {\n        border-bottom: 1px $neutral-color-300 solid;\n        & > td {\n          padding: 6px 8px;\n          color: $neutral-color-600;\n          font-size: 12px;\n        }\n      }\n    }\n    & > tbody {\n      & > tr {\n        &:nth-of-type(2n) {\n          background: $neutral-color-100;\n        }\n        & > td {\n          text-align: left;\n          padding: 4px 8px;\n          color: $neutral-color-1000;\n          vertical-align: top;\n          font-size: 12px;\n        }\n      }\n    }\n  }\n  &__check {\n    font-family: $font-family-bold;\n    color: $supportive-color-green-700;\n    &--failed {\n      color: $supportive-color-red-700;\n    }\n  }\n}\n",
                    "styleUrl": "./metrics-checks.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"metric-checks\">\n  <table>\n    <thead>\n      <tr>\n        <td>Metric name</td>\n        <td>value</td>\n        <td>Operator</td>\n        <td>Threshold</td>\n        <td>Check</td>\n      </tr>\n    </thead>\n    <tr *ngFor=\"let item of metrics | keyvalue\">\n      <td>{{ item.value.description }}</td>\n      <td>\n        {{ item.value.value }}\n      </td>\n      <td>{{ item.value.operator }}</td>\n      <td>{{ item.value.threshold }}</td>\n      <td>\n        <span\n          class=\"metric-checks__check\"\n          [ngClass]=\"{ 'metric-checks__check--failed': !item.value.check }\"\n          >{{ item.value.check }}</span\n        >\n      </td>\n    </tr>\n  </table>\n</div>\n"
        },
        {
            "name": "MetricsComponent",
            "id": "component-MetricsComponent-d582472b0e574502fb3db6c9f5b307f8",
            "file": "src/testing/components/mock-metrics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-metrics",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-metrics',\n  template: '',\n})\nexport class MetricsComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "MetricSpecConfigComponent",
            "id": "component-MetricSpecConfigComponent-53ba59dfc34bc20fe6c3007c47195391",
            "file": "src/app/modules/dialogs/components/dialog-metric/metric-spec-config/metric-spec-config.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-metric-spec-config",
            "styleUrls": [
                "./metric-spec-config.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "metric-spec-config.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "models",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Model[]"
                },
                {
                    "name": "modelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ModelVersion[]"
                },
                {
                    "name": "parent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "thresholdCmpOperators",
                    "defaultValue": "cmpOperators",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Model, ModelVersion } from '@app/core/data/types';\nimport { cmpOperators } from '@app/modules/monitoring/models';\n\n@Component({\n  selector: 'hs-metric-spec-config',\n  templateUrl: 'metric-spec-config.component.html',\n  styleUrls: ['./metric-spec-config.component.scss'],\n})\nexport class MetricSpecConfigComponent {\n  @Input()\n  parent: FormGroup;\n\n  @Input()\n  models: Model[];\n\n  @Input()\n  modelVersions: ModelVersion[];\n\n  thresholdCmpOperators = cmpOperators;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n.config {\n  &__row {\n    display: flex;\n    padding: 10px 0 10px 0;\n\n  }\n\n  &__cell {\n    width: 100%;\n    position: relative;\n  }\n\n  &__cell + &__cell  {\n    margin-left: 12px;\n  }\n}\n  \n\n.label {\n  color: $neutral-color-900;\n  font-size: 12px;\n  font-family: $font-family-bold;\n}\n\n.metric-spec-config {\n  &__error-list {\n    width: 180px;\n    position: absolute;\n  }\n}",
                    "styleUrl": "./metric-spec-config.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [formGroup]=\"parent\">\n  <div formGroupName=\"config\" *ngIf=\"parent.get('config')\">\n    <div class=\"config__row\">\n      <div class=\"config__cell\">\n        <label class=\"label\">Monitoring model: </label>\n        <mdl-select\n          [formControl]=\"parent.get('config').get('model')\"\n          label=\"Choose monitoring model\"\n        >\n          <mdl-option *ngFor=\"let model of models\" [value]=\"model\"\n            >{{ model.name }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n      <div class=\"config__cell\">\n        <label class=\"label\">Version: </label>\n        <mdl-select\n          name=\"modelVersion\"\n          [formControl]=\"parent.get('config').get('modelVersionId')\"\n          label=\"Choose version\"\n        >\n          <mdl-option\n            *ngFor=\"let modelVersion of modelVersions\"\n            [value]=\"modelVersion.id\"\n            >{{ modelVersion.modelVersion }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n    </div>\n    <div\n      class=\"config__row\"\n      *ngIf=\"parent.get('config').get('thresholdCmpOperator')\"\n    >\n      <div class=\"config__cell\">\n        <label class=\"label\" for=\"thresholdCmpOperator\"\n          >Comparison operator:\n        </label>\n        <mdl-select\n          name=\"thresholdCmpOperator\"\n          [formControl]=\"parent.get('config').get('thresholdCmpOperator')\"\n          label=\"Comparison operator\"\n        >\n          <mdl-option\n            *ngFor=\"let operator of thresholdCmpOperators\"\n            [value]=\"operator\"\n            >{{ operator.kind }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n      <div class=\"config__cell\">\n        <hs-input-text\n          name=\"threshold\"\n          label=\"Threshold\"\n          [formControl]=\"parent.get('config').get('threshold')\"\n          bordered=\"true\"\n        >\n        </hs-input-text>\n        <ng-container\n          *ngIf=\"\n            parent.get('config').get('threshold').dirty &&\n              parent.get('config').get('threshold').getError('pattern');\n            let error\n          \"\n        >\n          <ul class=\"error__list metric-spec-config__error-list\">\n            <li class=\"error__item\">\n              {{ error }}\n            </li>\n          </ul>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ModelDetailsComponent",
            "id": "component-ModelDetailsComponent-6129c40a58d174bcd21c0887e49e7fb8",
            "file": "src/app/modules/models/containers/model-details/model-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-details",
            "styleUrls": [
                "./model-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { ModelVersion } from '@app/core/data/types/model-version';\n\n@Component({\n  selector: 'hs-model-details',\n  templateUrl: './model-details.component.html',\n  styleUrls: ['./model-details.component.scss'],\n})\nexport class ModelDetailsComponent implements OnInit {\n  modelVersions$: Observable<ModelVersion[]>;\n\n  constructor(private facade: ModelsFacade) {}\n\n  ngOnInit() {\n    this.modelVersions$ = this.facade.selectedModelVersions();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.model-page {\n  padding: 24px;\n  height: 100%;\n  &__header {\n    height: 32px;\n    background: $neutral-color-100;\n    color: $neutral-color-900;\n    text-align: center;\n    line-height: 32px;\n    font-size: 16px;\n    font-family: $font-family-bold;\n    display: flex;\n    justify-content: center;\n  }\n  &__name {\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./model-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"model-page\">\n  <hs-model-versions\n    [modelVersions]=\"modelVersions$ | async\"\n  ></hs-model-versions>\n</div>\n"
        },
        {
            "name": "ModelsHeaderComponent",
            "id": "component-ModelsHeaderComponent-298b018950e722539a3336c4c0804af6",
            "file": "src/testing/components/models/mock-models-header.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-models-header",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-models-header',\n  template: '',\n})\nexport class ModelsHeaderComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelsHeaderComponent",
            "id": "component-ModelsHeaderComponent-3fcd5bc63dc27afe0404e565f7124706-1",
            "file": "src/app/modules/models/layout/models-header/models-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ModelsHeaderService"
                }
            ],
            "selector": "hs-models-header",
            "styleUrls": [
                "./models-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./models-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isRoot",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "service$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "showButton$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "siblings$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "siblingsEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'siblings'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickSibling",
                    "args": [
                        {
                            "name": "sibling",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sibling",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild, ElementRef, Input } from '@angular/core';\n\nimport { ModelsHeaderService } from './models-header.service';\nimport { Observable } from 'rxjs';\nimport { ModelVersion, Model } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-models-header',\n  templateUrl: './models-header.component.html',\n  styleUrls: ['./models-header.component.scss'],\n  providers: [ModelsHeaderService],\n})\nexport class ModelsHeaderComponent implements OnInit {\n  @Input() isRoot: boolean;\n\n  @ViewChild('siblings')\n  siblingsEl: ElementRef;\n\n  showButton$: Observable<boolean>;\n  model$: Observable<Model>;\n  modelVersion$: Observable<ModelVersion>;\n  siblings$: Observable<ModelVersion[]>;\n  service$: Observable<string>;\n\n  constructor(private readonly service: ModelsHeaderService) {}\n\n  ngOnInit() {\n    this.showButton$ = this.service.isButtonShowed();\n    this.model$ = this.service.getModel();\n    this.modelVersion$ = this.service.getModelVersion();\n    this.siblings$ = this.service.getSiblings();\n    this.service$ = this.service.getService();\n  }\n\n  onEnter() {\n    this.siblingsEl.nativeElement.classList.add(\n      'models-header__siblings-showed'\n    );\n  }\n\n  onLeave() {\n    this.siblingsEl.nativeElement.classList.remove(\n      'models-header__siblings-showed'\n    );\n  }\n\n  onClickModel() {\n    this.service.onClickModel();\n  }\n\n  onClickModelVersion() {\n    this.service.onClickModelVersion();\n  }\n\n  onClickSibling(sibling: ModelVersion) {\n    this.service.onClickSibling(sibling);\n  }\n\n  onDelete() {\n    this.service.onDelete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n@mixin modelVersion {\n  font-size: 14px;\n  padding-right: 4px;\n  &:hover {\n    color: $primary-color-900;\n  }\n  &:before {\n    display: inline-block;\n    content: 'ver: ';\n    padding-right: 2px;\n    font-size: 12px;\n    font-family: $font-family-light;\n  }\n}\n\n.models-header {\n  background: white;\n  z-index: 1;\n  box-shadow: 0px 5px 6px -8px $neutral-color-600;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-right: 24px;\n  &__tile {\n    min-width: 80px;\n    color: $neutral-color-900;\n    position: relative;\n    &:not(:last-child) {\n      cursor: pointer;\n      background: $neutral-color-100;\n      border-right: 1px $neutral-color-200 solid;\n      &:after {\n        z-index: 2;\n        content: '';\n        display: block;\n        width: 8px;\n        height: 8px;\n        background: $neutral-color-100;\n        border-top: 1px $neutral-color-200 solid;\n        border-right: 1px $neutral-color-200 solid;\n        position: absolute;\n        right: -5px;\n        top: 19px;\n        transform-origin: center;\n        transform: rotate(45deg);\n      }\n      &:hover {\n        color: $neutral-color-1000;\n        background: white;\n        &:after {\n          background: white;\n        }\n      }\n    }\n  }\n  &__path {\n    display: flex;\n  }\n  &__model-name {\n    cursor: pointer;\n    font-size: 14px;\n    padding: 12px 24px;\n  }\n  &__icon {\n    height: 12px;\n    width: 12px;\n    margin: 0 4px;\n    color: $neutral-color-500;\n    line-height: 45px;\n  }\n  &__service-name {\n    padding: 12px;\n    text-transform: capitalize;\n  }\n  &__model-version {\n    position: relative;\n    cursor: pointer;\n    display: flex;\n    padding: 12px;\n    width: 96px;\n    &--no-cursor {\n      cursor: default;\n    }\n    &-icon {\n      height: 10px;\n      width: 10px;\n      display: inline-block;\n      transform: rotate(90deg);\n      transform-origin: 2px 7px;\n      color: $neutral-color-500;\n      margin-left: 8px;\n    }\n    &-ver {\n      @include modelVersion;\n    }\n  }\n\n  &__siblings {\n    visibility: hidden;\n    background: white;\n    position: absolute;\n    //border: 1px $neutral-color-200 solid;\n    //border-top: none;\n    box-shadow: 0px 2px 4px -2px $neutral-color-900;\n    border-bottom-left-radius: 2px;\n    border-top-right-radius: 2px;\n    left: 0;\n    width: 80px;\n    transform: translate(0px, -8px);\n    transition: 0.3s transform ease;\n    max-height: 124px;\n    width: 96px;\n    overflow-y: scroll;\n    z-index: 2;\n    opacity: 0;\n    &-showed {\n      opacity: 1;\n      visibility: visible;\n      transform: translate(0px, -2px);\n    }\n  }\n  &__sibling {\n    cursor: pointer;\n    padding: 4px 12px;\n    &-ver {\n      @include modelVersion;\n    }\n  }\n}\n",
                    "styleUrl": "./models-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ModelsHeaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ModelsHeaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelsHeaderComponent-1",
            "templateData": "<div class=\"models-header\" *ngIf=\"model$ | async\" hsHideInZenMode>\n  <div class=\"models-header__path\">\n    <div class=\"models-header__tile\" (click)=\"onClickModel()\">\n      <div class=\"models-header__model-name\">{{ (model$ | async)?.name }}</div>\n    </div>\n    <ng-container *ngIf=\"!isRoot\">\n      <ng-container *ngIf=\"modelVersion$ | async as modelVersion\">\n        <ng-container\n          [ngTemplateOutlet]=\"modelVersionsTile\"\n          [ngTemplateOutletContext]=\"{ $implicit: modelVersion }\"\n        ></ng-container>\n        <ng-container\n          *ngIf=\"service$ | async as serviceName\"\n          [ngTemplateOutlet]=\"servicesTile\"\n          [ngTemplateOutletContext]=\"{ $implicit: serviceName }\"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <button\n    *ngIf=\"showButton$ | async\"\n    hs-button\n    color=\"warning\"\n    kind=\"flat\"\n    (click)=\"onDelete()\"\n  >\n    delete\n  </button>\n</div>\n\n<ng-template #modelVersionsTile let-modelVersion>\n  <div\n    *ngIf=\"(siblings$ | async)?.length; else simple\"\n    class=\"models-header__tile\"\n    (mouseenter)=\"onEnter()\"\n    (mouseleave)=\"onLeave()\"\n  >\n    <div class=\"models-header__model-version\" (click)=\"onClickModelVersion()\">\n      <span class=\"models-header__model-version-ver\"\n        >{{ modelVersion.modelVersion }}\n      </span>\n      <hs-icon\n        class=\"models-header__model-version-icon\"\n        type=\"icon-right\"\n      ></hs-icon>\n    </div>\n    <div class=\"models-header__siblings\" #siblings>\n      <div\n        class=\"models-header__sibling\"\n        *ngFor=\"let sibling of siblings$ | async\"\n        (click)=\"onClickSibling(sibling)\"\n      >\n        <span class=\"models-header__sibling-ver\"\n          >{{ sibling.modelVersion }}</span\n        >\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #servicesTile let-name>\n  <div class=\"models-header__tile models-header__service-name\">\n    {{ name }}\n  </div>\n</ng-template>\n\n<ng-template #simple>\n  <div class=\"models-header__tile\">\n    <div\n      class=\"models-header__model-version models-header__model-version--no-cursor\"\n      (click)=\"onClickModelVersion()\"\n    >\n      <span class=\"models-header__model-version-ver\"\n        >{{ (modelVersion$ | async)?.modelVersion }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n\n<div hsShowInZenMode>\n  <hs-models-header-zen-mode></hs-models-header-zen-mode>\n</div>\n"
        },
        {
            "name": "ModelsHeaderZenModeComponent",
            "id": "component-ModelsHeaderZenModeComponent-e03601f2345f6fabaa5ea732cb521486",
            "file": "src/app/modules/models/layout/models-header/models-header-zen-mode/models-header-zen-mode.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ModelsHeaderService"
                }
            ],
            "selector": "hs-models-header-zen-mode",
            "styleUrls": [
                "./models-header-zen-mode.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./models-header-zen-mode.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "service$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickModelVersion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { ModelsHeaderService } from '../models-header.service';\nimport { Observable } from 'rxjs';\nimport { Model, ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-models-header-zen-mode',\n  templateUrl: './models-header-zen-mode.component.html',\n  styleUrls: ['./models-header-zen-mode.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [ModelsHeaderService],\n})\nexport class ModelsHeaderZenModeComponent implements OnInit {\n  model$: Observable<Model>;\n  modelVersion$: Observable<ModelVersion>;\n  service$: Observable<string>;\n\n  constructor(private readonly service: ModelsHeaderService) {}\n\n  ngOnInit() {\n    this.model$ = this.service.getModel();\n    this.modelVersion$ = this.service.getModelVersion();\n    this.service$ = this.service.getService();\n  }\n\n  onClickModelVersion() {\n    this.service.onClickModelVersion();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n@mixin modelVersion {\n  font-size: 14px;\n  padding-right: 4px;\n  font-family: $font-family-bold;\n  &:before {\n    display: inline-block;\n    content: 'ver: ';\n    padding-right: 2px;\n    font-size: 12px;\n    font-family: $font-family-light;\n  }\n}\n\n.models-header {\n  background: white;\n  z-index: 1;\n  box-shadow: 0px 5px 6px -8px $neutral-color-600;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-right: 24px;\n  &__container {\n    max-width: 1030px;\n    min-width: 1030px;\n    margin: 0 auto;\n    display: flex;\n  }\n  &__tile {\n    min-width: 80px;\n    color: $neutral-color-900;\n    position: relative;\n    display: flex;\n    padding: 12px;\n    &:not(:last-child) {\n      cursor: pointer;\n      background: $neutral-color-100;\n      border-right: 1px $neutral-color-200 solid;\n      &:after {\n        z-index: 2;\n        content: '';\n        display: block;\n        width: 8px;\n        height: 8px;\n        background: $neutral-color-100;\n        border-top: 1px $neutral-color-200 solid;\n        border-right: 1px $neutral-color-200 solid;\n        position: absolute;\n        right: -5px;\n        top: 19px;\n        transform-origin: center;\n        transform: rotate(45deg);\n      }\n      &:hover {\n        color: $neutral-color-1000;\n        background: white;\n        &:after {\n          background: white;\n        }\n      }\n    }\n  }\n  &__model-name {\n    font-size: 14px;\n    font-family: $font-family-bold;\n  }\n  &__service-name {\n    text-transform: capitalize;\n  }\n  &__model-version {\n    position: relative;\n    display: flex;\n    padding-left: 8px;\n    &-ver {\n      @include modelVersion;\n    }\n  }\n}\n",
                    "styleUrl": "./models-header-zen-mode.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ModelsHeaderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ModelsHeaderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"models-header\">\n  <div class=\"models-header__container\">\n    <div\n      class=\"models-header__tile\"\n      *ngIf=\"service$ | async; else modelsWithoutLink\"\n      (click)=\"onClickModelVersion()\"\n    >\n      <ng-container [ngTemplateOutlet]=\"modelsTile\"></ng-container>\n    </div>\n    <ng-container\n      *ngIf=\"service$ | async as serviceName\"\n      [ngTemplateOutlet]=\"servicesTile\"\n      [ngTemplateOutletContext]=\"{ $implicit: serviceName }\"\n    ></ng-container>\n  </div>\n</div>\n\n<ng-template #modelsWithoutLink>\n  <div class=\"models-header__tile\">\n    <ng-container [ngTemplateOutlet]=\"modelsTile\"></ng-container>\n  </div>\n</ng-template>\n\n<ng-template #modelsTile>\n  <span class=\"models-header__model-name\">{{ (model$ | async)?.name }}</span>\n  <div\n    *ngIf=\"modelVersion$ | async\"\n    class=\"models-header__model-version models-header__model-version--no-cursor\"\n  >\n    <span class=\"models-header__model-version-ver\"\n      >{{ (modelVersion$ | async)?.modelVersion }}\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #modelVersionTile>\n  <div class=\"models-header__tile\">\n    <div\n      class=\"models-header__model-version models-header__model-version--no-cursor\"\n    >\n      <span class=\"models-header__model-version-ver\"\n        >{{ (modelVersion$ | async)?.modelVersion }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #servicesTile let-name>\n  <div class=\"models-header__tile models-header__service-name\">\n    {{ name }}\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ModelsPageComponent",
            "id": "component-ModelsPageComponent-d48ee8e3750902cb69d89caa0fe920f0",
            "file": "src/app/modules/models/page/models-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-models-page",
            "styleUrls": [
                "./models-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./models-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "commands",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isRootUrl$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "metricModelsAreHidden$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedModel$",
                    "defaultValue": "this.modelsFacade.selectedModel()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "visibleModels$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "handleFilter",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSidebarClick",
                    "args": [
                        {
                            "name": "model",
                            "type": "Model",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Model",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleToggleFavoriteModel",
                    "args": [
                        {
                            "name": "model",
                            "type": "Model",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Model",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleHideMetricModels",
                    "args": [
                        {
                            "name": "hide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hide",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { ZenModeService } from '@app/core/zenmode.service';\nimport { ModelsSidebarService } from './models-sidebar.service';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\n\nimport { Model } from '@app/core/data/types/model';\nimport { RedirectService } from '@app/core/redirect.service';\nimport { ModelUploadingCommandsService } from '@app/core/model-uploading-commands.service';\n\n@Component({\n  selector: 'hs-models-page',\n  templateUrl: './models-page.component.html',\n  styleUrls: ['./models-page.component.scss'],\n})\nexport class ModelsPageComponent {\n  visibleModels$: Observable<Model[]>;\n  selectedModel$: Observable<Model> = this.modelsFacade.selectedModel();\n  metricModelsAreHidden$: Observable<boolean>;\n  isRootUrl$: Observable<boolean>;\n  commands: string[] = [];\n\n  constructor(\n    private modelsFacade: ModelsFacade,\n    private router: Router,\n    private zenMode: ZenModeService,\n    private modelsSidebarService: ModelsSidebarService,\n    private redirectService: RedirectService,\n    private modelUploadingCommands: ModelUploadingCommandsService,\n  ) {\n    this.visibleModels$ = this.modelsSidebarService.visibleModels();\n    this.metricModelsAreHidden$ =\n      this.modelsSidebarService.metricModelsAreHidden();\n    this.isRootUrl$ = this.redirectService.isRootUrl$;\n    this.redirectService.redirectToFirst(this.visibleModels$, 'models');\n    this.commands = modelUploadingCommands.getCommands();\n  }\n\n  get isZenMode$(): Observable<boolean> {\n    return this.zenMode.isZenMode$;\n  }\n\n  handleFilter(str: string): void {\n    this.modelsSidebarService.changeFilter(str);\n  }\n\n  handleToggleFavoriteModel(model: Model): void {\n    this.modelsFacade.toggleFavorite(model);\n  }\n\n  handleSidebarClick(model: Model): void {\n    this.router.navigate([`models/${model.name}`]);\n  }\n\n  toggleHideMetricModels(hide: boolean) {\n    this.modelsSidebarService.changeMetricModelsHide(hide);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.models-page {\n  height: 100%;\n  display: flex;\n  &__hider {\n    margin: 6px 0;\n  }\n  &__sidebar {\n    width: 250px;\n    min-width: 250px;\n  }\n\n  &__main {\n    width: 100%;\n    height: 100%;\n  }\n\n  &__body {\n    width: 100%;\n    height: 100%;\n    &--zenMode {\n      margin: 0 auto;\n      min-width: 1100px;\n      max-width: 1100px;\n    }\n  }\n\n  &__icon {\n    width: 500px;\n    height: 100%;\n    color: $primary-color-800;\n    opacity: 0.2;\n    position: fixed;\n    right: 12%;\n    max-height: 80vh;\n    top: calc(50% + 36px);\n    transform: translate(50%, -50%) scale(1.1);\n  }\n\n  &__content {\n    display: flex;\n    flex-direction: column;\n    position: absolute;\n    top: calc(50% + 36px);\n    left: 10%;\n    max-height: 80vh;\n    transform: translateY(-50%);\n    &-text {\n      display: flex;\n      flex-direction: column;\n    }\n    &-title {\n      font-family: $font-family-regular;\n      font-size: $title-font-size * 1.5;\n    }\n    &-subtitle {\n      font-size: $base-font-size;\n      color: $label-color;\n      margin-top: 24px;\n    }\n    &-message {\n      margin-top: 55px;\n      display: flex;\n      align-items: center;\n    }\n    &-icon {\n      width: 24px;\n      height: 24px;\n      color: $primary-color-700;\n      margin-right: 5px;\n    }\n    &-link {\n      font-family: $font-family-medium;\n      text-decoration: none;\n      font-size: 16px;\n      color: $primary-color-700;\n\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./models-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsSidebarService",
                        "type": "ModelsSidebarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelUploadingCommands",
                        "type": "ModelUploadingCommandsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "zenMode",
                        "type": "ZenModeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsSidebarService",
                        "type": "ModelsSidebarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "redirectService",
                        "type": "RedirectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelUploadingCommands",
                        "type": "ModelUploadingCommandsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isZenMode$": {
                    "name": "isZenMode$",
                    "getSignature": {
                        "name": "isZenMode$",
                        "type": "",
                        "returnType": "Observable<boolean>",
                        "line": 42
                    }
                }
            },
            "templateData": "<div *ngIf=\"visibleModels$ | async as models\" class=\"models-page\">\n  <div *ngIf=\"models.length\" class=\"models-page__sidebar\" hsHideInZenMode>\n    <hs-sidebar\n      [sidebarData]=\"visibleModels$ | async\"\n      [selectedItem]=\"selectedModel$ | async\"\n      (filtered)=\"handleFilter($event)\"\n      (bookmarked)=\"handleToggleFavoriteModel($event)\"\n      (clicked)=\"handleSidebarClick($event)\"\n    >\n      <div class=\"models-page__hider hide\">\n        <mdl-checkbox\n          [ngModel]=\"metricModelsAreHidden$ | async\"\n          (change)=\"toggleHideMetricModels($event)\"\n        >\n          Hide metric models\n        </mdl-checkbox>\n      </div>\n    </hs-sidebar>\n  </div>\n  <div class=\"models-page__main\">\n    <div class=\"models-page__header\">\n      <hs-models-header [isRoot]=\"isRootUrl$ | async\"></hs-models-header>\n    </div>\n    <div\n      class=\"models-page__body\"\n      [ngClass]=\"{ 'models-page__body--zenMode': isZenMode$ | async }\"\n    >\n      <router-outlet></router-outlet>\n      <ng-container *ngIf=\"!models.length\">\n        <hs-icon class=\"models-page__icon\" type=\"icon-models\"></hs-icon>\n        <div class=\"models-page__content\">\n          <div class=\"models-page__content-text\">\n            <div class=\"models-page__content-title\">\n              Create a model\n            </div>\n            <div class=\"models-page__content-subtitle\">\n              The Model consumes provided inputs and produces predictions or transformations.\n            </div>\n            <cs-container [commands]=\"commands\"></cs-container>\n            <div class=\"models-page__content-message\">\n              <hs-icon class=\"models-page__content-icon\" type=\"icon-upload\"></hs-icon>\n              <a\n                class=\"models-page__content-link\"\n                href=\"https://docs.hydrosphere.io/quickstart/getting-started\"\n                target=\"_blank\"\n              >How to upload model</a\n              >\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "ModelVariantFormComponent",
            "id": "component-ModelVariantFormComponent-005ce9fb051b4cc7cffaf8366c88f6c4",
            "file": "src/app/modules/applications/components/forms/model-variant-form/model-variant-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ModelVariantFormService"
                }
            ],
            "selector": "hs-model-variant-form",
            "styleUrls": [
                "./model-variant-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-variant-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormGroup"
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number"
                },
                {
                    "name": "showRemoveIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deploymentConfigs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<DeploymentConfig[]>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "models$",
                    "defaultValue": "this.modelsFacade.modelsWithReleasedVersions()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Model[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "selectedModelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  Self,\n} from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\n\nimport { Model, ModelVersion, DeploymentConfig } from '@app/core/data/types';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\n\nimport { merge, Observable, of } from 'rxjs';\nimport { ModelVariantFormService } from './model-variant-form.service';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\n\n@Component({\n  selector: 'hs-model-variant-form',\n  templateUrl: './model-variant-form.component.html',\n  styleUrls: ['./model-variant-form.component.scss'],\n  providers: [ModelVariantFormService],\n})\nexport class ModelVariantFormComponent implements OnInit {\n  @Input() group: FormGroup;\n  @Input() index: number;\n  @Input() showRemoveIcon: boolean = false;\n\n  @Output() delete = new EventEmitter();\n\n  models$: Observable<Model[]> = this.modelsFacade.modelsWithReleasedVersions();\n  modelVersions$: Observable<ModelVersion[]>;\n  deploymentConfigs$: Observable<DeploymentConfig[]>;\n  selectedModelVersion$: Observable<ModelVersion>;\n\n  get modelControl(): FormControl {\n    return this.group.get('modelId') as FormControl;\n  }\n\n  get modelVersionControl(): FormControl {\n    return this.group.get('modelVersion') as FormControl;\n  }\n\n  get weightControl(): FormControl {\n    return this.group.get('weight') as FormControl;\n  }\n\n  constructor(\n    private modelsFacade: ModelsFacade,\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private deploymentConfFacade: DeploymentConfigsFacade,\n    @Self() private formService: ModelVariantFormService,\n  ) {\n    this.deploymentConfigs$ = formService.getDeploymentConfigs();\n\n    this.selectedModelVersion$ = of(undefined);\n  }\n\n  ngOnInit() {\n    const modelVersions$ = this.modelControl.valueChanges.pipe(\n      switchMap((modelId: number) =>\n        this.modelVersionsFacade\n          .internalReleasedNonMetricModelVersions()\n          .pipe(\n            map(modelVersions =>\n              modelVersions.filter(mv => mv.model.id === modelId),\n            ),\n          ),\n      ),\n      tap(mv => this.modelVersionControl.setValue(mv[0])),\n    );\n\n    const initialModelVersions$ = of(this.group.value.modelId).pipe(\n      switchMap((modelId: number) =>\n        this.modelVersionsFacade\n          .internalReleasedNonMetricModelVersions()\n          .pipe(\n            map(modelVersions =>\n              modelVersions.filter(mv => mv.model.id === modelId),\n            ),\n          ),\n      ),\n    );\n\n    this.modelVersions$ = merge(initialModelVersions$, modelVersions$);\n  }\n\n  public onDelete(): void {\n    this.delete.emit(this.index);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.service {\n  display: flex;\n  min-width: 716px;\n  position: relative;\n  justify-content: space-between;\n\n  &__index {\n    align-items: center;\n    display: flex;\n    justify-content: center;\n    width: 32px;\n    color: $neutral-color-700;\n  }\n\n  &__inputs {\n    flex-grow: 1;\n    padding: 12px;\n  }\n\n  &__row {\n    display: flex;\n    margin-bottom: 12px;\n  }\n\n  &__field {\n    display: flex;\n    flex-direction: column;\n    margin-right: 12px;\n    position: relative;\n    width: 160px;\n\n    &-label {\n      font-size: 12px;\n      line-height: 12px;\n      margin-bottom: 5px;\n      color: $neutral-color-900;\n      font-family: $font-family-bold;\n    }\n\n    &-input {\n      padding: 4px 8px;\n      font-size: 14px;\n      line-height: 16px;\n      border: 1px $neutral-color-500 solid;\n      color: $neutral-color-700;\n\n      &:focus {\n        border-color: $primary-color-700;\n      }\n\n      &.ng-invalid {\n        border-color: $supportive-color-red-500;\n      }\n\n      &--weight {\n        text-align: right;\n      }\n    }\n\n    &--model-name {\n      width: 368px;\n    }\n\n    &--model-version {\n      width: 80px;\n    }\n\n    &--runtime {\n      width: 368px;\n    }\n\n    &--is-last {\n      margin-right: 0;\n    }\n\n    &--hostSelector {\n      width: 80px;\n    }\n\n    &--weight {\n      width: 50px;\n\n      &::after {\n        content: '%';\n        color: $neutral-color-700;\n        display: block;\n        position: absolute;\n        left: 54px;\n        font-size: 14px;\n        top: 22px;\n      }\n    }\n  }\n\n  &__remove {\n    &-container {\n      align-items: center;\n      color: $neutral-color-800;\n      cursor: pointer;\n      display: flex;\n      transition: 0.3s all ease-in;\n      transition: 0s color ease-in;\n      justify-content: center;\n      width: 24px;\n\n      &:hover {\n        background: $supportive-color-red-400;\n        color: white;\n      }\n    }\n\n    &-icon {\n      line-height: 14px;\n      right: 0px;\n      top: 0px;\n      width: 14px;\n      height: 14px;\n    }\n  }\n}\n\n.form-group {\n  display: flex;\n}\n\n.hydro-select {\n  & .mdl-select .mdl-textfield__input {\n    border-radius: 0;\n  }\n}\n\n.docker-image {\n  color: $neutral-color-800;\n  &__name {\n    flex: 1;\n  }\n\n  &__tag {\n    color: $neutral-color-600;\n  }\n}\n\n.docker-image__name {\n}\n\n::ng-deep .mdl-list__item:hover {\n  .docker-image__version,\n  .docker-image__repository {\n    color: $neutral-color-800;\n  }\n}\n\n::ng-deep\n  .parameters__field.parameters__row-field-runtime\n  .mdl-select\n  .mdl-popover {\n  min-width: 200% !important;\n}\n",
                    "styleUrl": "./model-variant-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deploymentConfFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "ModelVariantFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deploymentConfFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "ModelVariantFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "modelControl": {
                    "name": "modelControl",
                    "getSignature": {
                        "name": "modelControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 38
                    }
                },
                "modelVersionControl": {
                    "name": "modelVersionControl",
                    "getSignature": {
                        "name": "modelVersionControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 42
                    }
                },
                "weightControl": {
                    "name": "weightControl",
                    "getSignature": {
                        "name": "weightControl",
                        "type": "",
                        "returnType": "FormControl",
                        "line": 46
                    }
                }
            },
            "templateData": "<div [formGroup]=\"group\" class=\"service\">\n  <div class=\"service__index\">{{ index + 1 }}.</div>\n  <div class=\"service__inputs\">\n    <div class=\"service__row\">\n      <div class=\"service__field service__field--model-name\">\n        <label class=\"service__field-label\">\n          Model name\n        </label>\n        <mdl-select\n          #modelSelect\n          formControlName=\"modelId\"\n          [autocomplete]=\"true\"\n        >\n          <mdl-option\n            *ngFor=\"\n              let model of models$\n                | async\n                | matchSorter: 'name':modelSelect.searchQuery\n            \"\n            [value]=\"model.id\"\n            >{{ model.name }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n\n      <div class=\"service__field service__field--model-version\">\n        <label class=\"service__field-label\">\n          Model version\n        </label>\n        <mdl-select\n          #modelVerSelect\n          formControlName=\"modelVersion\"\n          [autocomplete]=\"true\"\n        >\n          <mdl-option\n            *ngFor=\"\n              let modelVersion of modelVersions$\n                | async\n                | matchSorter: 'modelVersion':modelVerSelect.searchQuery\n            \"\n            [value]=\"modelVersion\"\n            >{{ modelVersion.modelVersion }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n\n      <div\n        class=\"service__field service__field--is-last service__field--weight\"\n      >\n        <label class=\"service__field-label\" [attr.for]=\"'weight_' + index\"\n          >Weight</label\n        >\n        <input\n          class=\"service__field-input service__field-input--weight\"\n          [attr.id]=\"'weight_' + index\"\n          type=\"text\"\n          formControlName=\"weight\"\n        />\n        <ul class=\"error__list\" *ngIf=\"weightControl.errors\">\n          <li\n            class=\"error\"\n            *ngFor=\"let error of weightControl.errors | iterateAsArray\"\n          >\n            * {{ weightControl.errors[error] }}\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div class=\"service__row\" *ngIf=\"modelVersionControl.value as modelVersion\">\n      <div class=\"service__field service__field--runtime\">\n        <span class=\"service__field-label\">Runtime</span>\n        <span class=\"docker-image\">\n          <span class=\"docker-image__name\">\n            {{ modelVersion.runtime?.name }}\n          </span>\n          <span class=\"docker-image__tag\"\n            >: {{ modelVersion.runtime?.tag }}\n          </span>\n        </span>\n      </div>\n      <div class=\"service__field service__field--hostSelector\">\n        <label class=\"service__field-label\">Host selector</label>\n        <span>\n          {{ modelVersion?.hostSelector?.name || '-' }}\n        </span>\n      </div>\n      <div class=\"service__field\">\n        <label class=\"service__field-label\">Deployment config</label>\n        <mdl-select\n          #configSelect\n          formControlName=\"deploymentConfigName\"\n          [autocomplete]=\"true\"\n        >\n          <mdl-option\n            *ngFor=\"\n              let config of deploymentConfigs$\n                | async\n                | matchSorter: 'name':configSelect.searchQuery\n            \"\n            [value]=\"config.name\"\n            >{{ config.name }}</mdl-option\n          >\n        </mdl-select>\n      </div>\n    </div>\n  </div>\n  <div\n    *ngIf=\"showRemoveIcon\"\n    class=\"service__remove-container\"\n    (click)=\"onDelete()\"\n  >\n    <hs-icon type=\"icon-remove\" class=\"service__remove-icon\"> </hs-icon>\n  </div>\n</div>\n"
        },
        {
            "name": "ModelVersionDetailsComponent",
            "id": "component-ModelVersionDetailsComponent-d8a75c10ee5cb84e4edf1ee76592881f",
            "file": "src/testing/components/models/mock-model-version-details.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-version-details",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ModelVersion"
                },
                {
                    "name": "servables",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Servable[]"
                },
                {
                    "name": "services",
                    "defaultValue": "[\n    { name: 'monitoring', status: 'ok' },\n    { name: 'profiler', status: 'ok' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                },
                {
                    "name": "signature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Signature"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'logContainer', {read: ViewContainerRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, ViewContainerRef, Input } from '@angular/core';\nimport { Servable } from '@app/core/data/types';\nimport { ModelVersion, Signature } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-version-details',\n  template: '',\n})\nexport class ModelVersionDetailsComponent {\n  @ViewChild('logContainer', { read: ViewContainerRef, static: true })\n  logContainer: ViewContainerRef;\n\n  @Input() modelVersion: ModelVersion;\n  @Input() servables: Servable[];\n  @Input() signature: Signature;\n  @Input() services: any = [\n    { name: 'monitoring', status: 'ok' },\n    { name: 'profiler', status: 'ok' },\n  ];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionDetailsComponent",
            "id": "component-ModelVersionDetailsComponent-2dbdb323217ea15ca2a0e71c96b2e7d2-1",
            "file": "src/app/modules/model-version/containers/model-version-details/model-version-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./model-version-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-version-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "applications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Application[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "depConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeploymentConfig",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "depConfigSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "fields$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Map<string, string[]>>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "isReleased",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "servables$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Servable[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "getDepConfigs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DeploymentConfig[]>",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isButtonEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddApplication",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "depConfig",
                            "type": "DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showBuildLog",
                    "args": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showServableLogs",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "someModelVersionIsReleased",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ApplicationsFacade } from '@app/core/facades/applications.facade';\nimport { ServablesFacade } from '@app/core/facades/servables.facade';\nimport { FieldsService } from '@app/modules/profiler/fields.service';\n\nimport { Observable, combineLatest, Subscription } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { neitherNullNorUndefined } from '@app/utils';\n\nimport {\n  ModelVersion,\n  Servable,\n  Application,\n  DeploymentConfig,\n} from '@app/core/data/types';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { HydroConfigService } from '@app/core/hydro-config.service';\nimport { ModelsFacade } from '@app/core/facades/models.facade';\nimport { DeploymentConfigsFacade } from '@app/core/facades/deployment-configs.facade';\nimport { LogsService } from '@app/modules/model-version/logs.service';\n\n@Component({\n  templateUrl: './model-version-details.component.html',\n  styleUrls: ['./model-version-details.component.scss'],\n})\nexport class ModelVersionDetailsComponent implements OnInit, OnDestroy {\n  modelVersion$: Observable<ModelVersion>;\n  servables$: Observable<Servable[]>;\n  applications$: Observable<Application[]>;\n  fields$: Observable<Map<string, string[]>>;\n\n  isReleased: boolean = true;\n  isFailed: boolean = false;\n  depConfig: DeploymentConfig;\n  depConfigSub: Subscription;\n\n  constructor(\n    private readonly facade: ModelVersionsFacade,\n    private readonly hsConfig: HydroConfigService,\n    private readonly applicationsFacade: ApplicationsFacade,\n    private readonly servablesFacade: ServablesFacade,\n    private readonly modelsFacade: ModelsFacade,\n    private readonly depConfigsFacade: DeploymentConfigsFacade,\n    private readonly fields: FieldsService,\n    private readonly logs: LogsService,\n  ) {}\n\n  ngOnInit() {\n    this.modelVersion$ = this.facade\n      .selectedModelVersion()\n      .pipe(neitherNullNorUndefined);\n\n    this.servables$ = combineLatest([\n      this.modelVersion$,\n      this.servablesFacade.allServables(),\n    ]).pipe(\n      map(([modelVersion, servables]) => {\n        return servables.filter(\n          servable => servable.modelVersionId === modelVersion.id,\n        );\n      }),\n    );\n\n    this.applications$ = this.modelVersion$.pipe(\n      switchMap(modelVersions =>\n        this.applicationsFacade.selectApplicationsByNames(\n          modelVersions.applications,\n        ),\n      ),\n    );\n\n    this.fields$ = this.fields.getFields();\n\n    this.depConfigSub = this.depConfigsFacade\n      .defaultDepConfig()\n      .subscribe(depConfig => (this.depConfig = depConfig));\n  }\n\n  ngOnDestroy() {\n    this.depConfigSub.unsubscribe();\n  }\n\n  isButtonEnabled() {\n    return combineLatest([\n      this.someModelVersionIsReleased(),\n      this.getDepConfigs(),\n    ]).pipe(\n      map(([someReleased, depConfigs]) => {\n        return someReleased && depConfigs.length > 0;\n      }),\n    );\n  }\n\n  someModelVersionIsReleased(): Observable<boolean> {\n    return this.modelsFacade.someModelVersionIsReleased();\n  }\n\n  getDepConfigs(): Observable<DeploymentConfig[]> {\n    return this.depConfigsFacade.getAll();\n  }\n\n  showBuildLog(modelVersionId: number) {\n    this.logs.showBuildLog(modelVersionId);\n  }\n\n  onAddApplication(modelVersion: ModelVersion, depConfig: DeploymentConfig) {\n    this.applicationsFacade.createApplicationFromModelVersion(\n      modelVersion,\n      depConfig,\n    );\n  }\n\n  showServableLogs(name: string) {\n    this.logs.showServableLogs(name);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.model-version {\n  padding: 24px;\n  &__header {\n    line-height: 32px;\n    margin-bottom: 8px;\n    &-link {\n      cursor: pointer;\n      font-size: 14px;\n      color: $neutral-color-1000;\n      font-family: $font-family-bold;\n      &-icon {\n        width: 12px;\n        height: 12px;\n      }\n    }\n    &-path {\n      font-style: italic;\n      color: $neutral-color-700;\n      &-link {\n        font-family: $font-family-bold;\n        color: $primary-color-900;\n        cursor: pointer;\n      }\n      &-separator {\n        color: $neutral-color-500;\n        padding: 0 4px;\n      }\n    }\n  }\n  &__row {\n    display: flex;\n    flex-wrap: wrap;\n    margin-left: -12px;\n    margin-right: -12px;\n    margin-bottom: 24px;\n  }\n\n  &__col-1,\n  &__col-2,\n  &__col-3,\n  &__col-4,\n  &__col-5,\n  &__col-6,\n  &__col-7,\n  &__col-8,\n  &__col-9,\n  &__col-10,\n  &__col-11,\n  &__col-12 {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  &__col-1 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n\n  &__col-2 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n\n  &__col-3 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n\n  &__col-4 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n\n  &__col-5 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n\n  &__col-6 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n\n  &__col-7 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n\n  &__col-8 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n\n  &__col-9 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n\n  &__col-10 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n\n  &__col-11 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n\n  &__col-12 {\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n\n  &__item {\n    &-header {\n      display: flex;\n      justify-content: space-between;\n      line-height: 28px;\n      font-family: $font-family-bold;\n      margin-bottom: 4px;\n      color: $neutral-color-900;\n    }\n  }\n\n  &__details {\n    display: flex;\n    align-self: flex-start;\n    background: white;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    overflow: hidden;\n    justify-content: space-between;\n\n    &-list {\n      margin: 12px;\n      margin-right: 24px;\n      padding: 0;\n      list-style: none;\n\n      &-item {\n        line-height: 24px;\n      }\n\n      &-title {\n        font-family: $font-family-light;\n      }\n\n      &-value {\n        padding-left: 12px;\n        font-family: $font-family-bold;\n      }\n    }\n\n    &-status {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      padding: 12px;\n      &--released {\n        background: $supportive-color-green-100;\n      }\n\n      &--failed {\n        background: $supportive-color-red-100;\n      }\n\n      &-label {\n        font-family: $font-family-bold;\n        line-height: 24px;\n      }\n\n      &-icon {\n        display: inline-block;\n        margin: 4px 0;\n\n        &--released {\n          color: $supportive-color-green-700;\n        }\n\n        &--failed {\n          color: $supportive-color-red-700;\n        }\n      }\n    }\n  }\n\n  &__applications {\n    background: white;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    overflow: hidden;\n    &--small {\n      width: 46px;\n    }\n    &-icon {\n      width: 24px;\n      height: 24px;\n      color: $neutral-color-700;\n    }\n    &-empty {\n      line-height: 36px;\n      text-align: center;\n      color: $neutral-color-400;\n    }\n    &-header {\n      padding: 12px;\n    }\n  }\n\n  &__metadata {\n    width: 100%;\n    background: white;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    padding: 12px;\n  }\n\n  &__signatures {\n    background: white;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    padding: 12px;\n  }\n\n  &__servables {\n    background: white;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    overflow: hidden;\n  }\n}\n\n.runtime {\n  &__tag {\n    background: $neutral-color-200;\n    color: $neutral-color-700;\n    margin-left: 4px;\n    padding: 2px 4px;\n    border-radius: 4px;\n  }\n}\n\n.lift-metadata {\n  order: -1;\n}\n\n.flex-col {\n  display: flex;\n  flex-direction: column;\n}\n",
                    "styleUrl": "./model-version-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "hsConfig",
                        "type": "HydroConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "applicationsFacade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "servablesFacade",
                        "type": "ServablesFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fields",
                        "type": "FieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "logs",
                        "type": "LogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "hsConfig",
                        "type": "HydroConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "applicationsFacade",
                        "type": "ApplicationsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "servablesFacade",
                        "type": "ServablesFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modelsFacade",
                        "type": "ModelsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "depConfigsFacade",
                        "type": "DeploymentConfigsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fields",
                        "type": "FieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "logs",
                        "type": "LogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelVersionDetailsComponent-1",
            "templateData": "<div class=\"model-version\">\n  <div *ngIf=\"modelVersion$ | async as modelVersion\" class=\"flex-col\">\n    <div class=\"model-version__row\">\n      <div class=\"model-version__col-6\">\n        <div class=\"model-version__item-header\">Details</div>\n        <div class=\"model-version__details\">\n          <ol class=\"model-version__details-list\">\n            <li class=\"model-version__details-list-item\">\n              <span class=\"model-version__details-list-title\">Version</span>\n              <span class=\"model-version__details-list-value\">\n                {{ modelVersion.modelVersion }}\n              </span>\n            </li>\n            <li class=\"model-version__details-list-item\">\n              <span class=\"model-version__details-list-title\">Created</span>\n              <span class=\"model-version__details-list-value\">\n                {{ modelVersion.created | hsFormatDate }}\n              </span>\n            </li>\n            <li class=\"information__list-item\" *ngIf=\"!modelVersion.isExternal\">\n              <span class=\"model-version__details-list-title\">Runtime</span>\n              <span class=\"model-version__details-list-value\">\n                <span>{{ modelVersion.runtime?.name }}</span\n                ><span class=\"runtime__tag\"\n                  >{{ modelVersion.runtime?.tag }}</span\n                >\n              </span>\n            </li>\n          </ol>\n          <div\n            class=\"model-version__details-status\"\n            [ngClass]=\"{\n              'model-version__details-status--released': isReleased,\n              'model-version__details-status--failed': isFailed\n            }\"\n          >\n            <span class=\"model-version__details-status-label\">status</span>\n            <hs-model-version-status\n              class=\"model-version__details-status-icon\"\n              [status]=\"modelVersion.status\"\n            ></hs-model-version-status>\n            <button\n              *ngIf=\"!modelVersion.isExternal\"\n              class=\"model-version__details-status-button\"\n              hs-button\n              (click)=\"showBuildLog(modelVersion.id)\"\n            >\n              show build logs\n            </button>\n          </div>\n        </div>\n      </div>\n      <div class=\"model-version__col-6\">\n        <hs-model-version-services\n          [modelVersion]=\"modelVersion\"\n        ></hs-model-version-services>\n      </div>\n    </div>\n\n    <div\n      class=\"model-version__row\"\n      hsHideInZenMode\n      *ngIf=\"!modelVersion.isExternal\"\n    >\n      <div class=\"model-version__col-6\">\n        <div class=\"model-version__item-header\">\n          <span>\n            Applications\n          </span>\n          <ng-container\n            *ngTemplateOutlet=\"\n              !(isButtonEnabled() | async) ? wrapper : button;\n              context: {\n                modelVersion: modelVersion\n              }\n            \"\n          >\n          </ng-container>\n        </div>\n        <div class=\"model-version__applications\">\n          <table class=\"hydro-table\">\n            <thead class=\"hydro-table-head\">\n              <tr>\n                <th class=\"hydro-table-head__cell\">name</th>\n                <th class=\"hydro-table-head__cell\">status</th>\n                <th class=\"hydro-table-head__cell\"></th>\n              </tr>\n            </thead>\n            <tbody class=\"hydro-table-body\">\n              <tr\n                *ngFor=\"let application of applications$ | async\"\n                class=\"hydro-table-body__row hydro-table-body__row--hoverable\"\n                [routerLink]=\"['/applications', application.name]\"\n              >\n                <td class=\"hydro-table-body__cell\">\n                  {{ application.name }}\n                </td>\n                <td class=\"hydro-table-body__cell\">\n                  <hs-application-status\n                    [status]=\"application.status\"\n                  ></hs-application-status>\n                </td>\n                <td\n                  class=\"hydro-table-body__cell model-version__applications--small\"\n                >\n                  <hs-icon\n                    class=\"model-version__applications-icon\"\n                    type=\"icon-arrow-right\"\n                  ></hs-icon>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <div\n            *ngIf=\"modelVersion.applications.length === 0\"\n            class=\"model-version__applications-empty\"\n          >\n            Application's list is empty\n          </div>\n        </div>\n      </div>\n      <div class=\"model-version__col-6\">\n        <div class=\"model-version__item-header\">Servables</div>\n        <section\n          *ngIf=\"!modelVersion.isExternal\"\n          class=\"model-version__servables\"\n        >\n          <hs-servables-table\n            [servables]=\"servables$ | async\"\n            (showedLog)=\"showServableLogs($event)\"\n          >\n          </hs-servables-table>\n        </section>\n      </div>\n    </div>\n    <div class=\"model-version__row\">\n      <div class=\"model-version__col-12\">\n        <div class=\"model-version__item-header\">Signatures</div>\n        <section class=\"model-version__signatures\">\n          <hs-signatures\n            [signature]=\"modelVersion.modelSignature\"\n            [fields]=\"fields$ | async\"\n          ></hs-signatures>\n        </section>\n      </div>\n    </div>\n    <div\n      [ngClass]=\"{\n        'lift-metadata': this.hsConfig.config.liftMetadata,\n        'model-version__row': true\n      }\"\n    >\n      <div class=\"model-version__col-12\">\n        <div class=\"model-version__item-header\">Metadata</div>\n        <section class=\"model-version__metadata\">\n          <hs-metadata [metadata]=\"modelVersion.metadata\"></hs-metadata>\n        </section>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #wrapper>\n    <div\n      tippy\n      [tippyOptions]=\"{\n        content: 'Deployment config required',\n        arrow: false,\n        theme: 'basic',\n        placement: 'bottom'\n      }\"\n    >\n      <ng-container *ngTemplateOutlet=\"button; context: { disable: true }\">\n      </ng-container>\n    </div>\n  </ng-template>\n\n  <ng-template #button let-modelVersion=\"modelVersion\" let-disable=\"disable\">\n    <button\n      class=\"model-version__item-button create-application-button\"\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      (click)=\"onAddApplication(modelVersion, depConfig)\"\n      [disabled]=\"disable\"\n    >\n      create application\n    </button>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "ModelVersionLogComponent",
            "id": "component-ModelVersionLogComponent-bac2e78b3eff0c64300add9f03809d51",
            "file": "src/testing/components/mock-model-version-log.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-version-log",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-version-log',\n  template: '',\n})\nexport class ModelVersionLogComponent {\n  @Input() modelVersion: ModelVersion;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionLogComponent",
            "id": "component-ModelVersionLogComponent-50e1f8f1e99c4b27903b1507eb1b28cc-1",
            "file": "src/app/modules/model-version/components/model-version-log/model-version-log.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "LogService"
                }
            ],
            "selector": "hs-model-version-log",
            "styleUrls": [
                "./model-version-log.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-version-log.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "logs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n  Input,\n} from '@angular/core';\nimport { LogService } from '@app/core/data/services/log.service';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'hs-model-version-log',\n  templateUrl: './model-version-log.component.html',\n  styleUrls: ['./model-version-log.component.scss'],\n  providers: [LogService],\n})\nexport class ModelVersionLogComponent implements OnInit {\n  @Output() closed: EventEmitter<any> = new EventEmitter();\n  @Input() modelVersion: number;\n\n  logs$: Observable<string>;\n\n  constructor(private logService: LogService, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.logs$ = this.logService\n      .getLog('model-version', this.modelVersion.toString())\n      .pipe(tap(() => this.cdr.detectChanges()));\n  }\n\n  onClose() {\n    this.closed.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 100%;\n}",
                    "styleUrl": "./model-version-log.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logService",
                        "type": "LogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "logService",
                        "type": "LogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelVersionLogComponent-1",
            "templateData": "<hs-logs [logs$]=\"logs$\" header=\"build logs\" (closed)=\"onClose()\"> </hs-logs>\n"
        },
        {
            "name": "ModelVersionPageComponent",
            "id": "component-ModelVersionPageComponent-a4bb9b36f72828aec40e2d3f21aa02c6",
            "file": "src/app/modules/model-version/page/model-version-page/model-version-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-version-page",
            "styleUrls": [
                "./model-version-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-version-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hs-model-version-page',\n  templateUrl: './model-version-page.component.html',\n  styleUrls: ['./model-version-page.component.scss'],\n})\nexport class ModelVersionPageComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.model-version-page {\n  height: calc(100% - 72px - 46px);\n  overflow: auto;\n  &__header {\n    margin-bottom: 12px;\n  }\n  &__body {\n    height: 100%;\n    position: relative;\n  }\n}\n",
                    "styleUrl": "./model-version-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"model-version-page\">\n  <div class=\"model-version-page__body\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n"
        },
        {
            "name": "ModelVersionsComponent",
            "id": "component-ModelVersionsComponent-7de0dfa7e872f2ddfd514b3f2e273a62",
            "file": "src/testing/components/models/mock-model-versions.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-versions",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "ModelVersion[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-versions',\n  template: '',\n})\nexport class ModelVersionsComponent {\n  @Input() modelVersions: ModelVersion[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionsComponent",
            "id": "component-ModelVersionsComponent-8649999f957073ee0e4110852d74f7a3-1",
            "file": "src/app/modules/model-versions/components/model-versions/model-versions.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-versions",
            "styleUrls": [
                "./model-versions.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-versions.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ModelVersion[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-versions',\n  templateUrl: './model-versions.component.html',\n  styleUrls: ['./model-versions.component.scss'],\n})\nexport class ModelVersionsComponent {\n  @Input() modelVersions: ModelVersion[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.model-versions {\n  height: 100%;\n  &__header {\n    line-height: 32px;\n    font-family: $font-family-bold;\n    color: $neutral-color-1000;\n  }\n  &__body {\n    width: 100%;\n    overflow: auto;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 4px;\n    max-height: calc(100% - 154px);\n  }\n\n  &__table {\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./model-versions.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelVersionsComponent-1",
            "templateData": "<div class=\"model-versions\">\n  <div class=\"model-versions__header\">Model versions</div>\n  <div class=\"model-versions__body\">\n    <table class=\"hydro-table model-versions__table\">\n      <thead class=\"hydro-table-head\">\n        <tr>\n          <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n            version\n          </th>\n          <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n            status\n          </th>\n          <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n            runtime\n          </th>\n          <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n            created\n          </th>\n          <th\n            class=\"hydro-table-head__cell hydro-table-head__cell--sticky\"\n            hsHideInZenMode\n          >\n            applications\n          </th>\n          <th\n            class=\"hydro-table-head__cell hydro-table-head__cell--sticky\"\n          ></th>\n        </tr>\n      </thead>\n      <tbody class=\"hydro-table-body\">\n        <hs-model-versions-row\n          class=\"hydro-table-body__row hydro-table-body__row--hoverable\"\n          *ngFor=\"let modelVersion of modelVersions\"\n          [modelVersion]=\"modelVersion\"\n          [routerLink]=\"[modelVersion.modelVersion]\"\n          queryParamsHandling=\"merge\"\n        ></hs-model-versions-row>\n      </tbody>\n    </table>\n  </div>\n</div>\n"
        },
        {
            "name": "ModelVersionServicesComponent",
            "id": "component-ModelVersionServicesComponent-94053454d594c8b299ac4cd9a73a0c6b",
            "file": "src/testing/components/models/mock-model-version-services.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-version-services",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-version-services',\n  template: '',\n})\nexport class ModelVersionServicesComponent {\n  @Input() modelVersion: ModelVersion;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionServicesComponent",
            "id": "component-ModelVersionServicesComponent-81a17843f991e22d83df5882f0e2f812-1",
            "file": "src/app/modules/model-version/containers/model-version-services/model-version-services.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-version-services",
            "styleUrls": [
                "./model-version-services.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-version-services.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "serviceStatuses$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersionServiceStatusesEntity>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serviceStatusesById$",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ModelVersionServiceStatusesEntity>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport {\n  ModelVersion,\n  ModelVersionServiceStatusesEntity,\n} from '@app/core/data/types';\nimport { ServiceStatusesFacade } from '@app/core/facades/service-statuses.facade';\n\n@Component({\n  selector: 'hs-model-version-services',\n  templateUrl: './model-version-services.component.html',\n  styleUrls: ['./model-version-services.component.scss'],\n})\nexport class ModelVersionServicesComponent implements OnInit {\n  @Input() modelVersion: ModelVersion;\n\n  serviceStatuses$: Observable<ModelVersionServiceStatusesEntity>;\n\n  constructor(private readonly serviceFacade: ServiceStatusesFacade) {}\n\n  serviceStatusesById$(\n    id: number,\n  ): Observable<ModelVersionServiceStatusesEntity> {\n    return this.serviceFacade.selectServiceStatusesById(id);\n  }\n\n  ngOnInit() {\n    this.serviceFacade.loadAll(this.modelVersion.id);\n    this.serviceStatuses$ = this.serviceStatusesById$(this.modelVersion.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.mv-services {\n  &__title {\n    line-height: 28px;\n    font-family: $font-family-bold;\n    margin-bottom: 4px;\n    color: $neutral-color-900;\n  }\n  &__list {\n    display: flex;\n  }\n  &__item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-right: 12px;\n    padding: 14px 8px;\n    border: 1px $neutral-color-300 solid;\n    border-radius: 5px;\n    width: 140px;\n    height: 106px;\n    background: white;\n    justify-content: space-between;\n    &--unsupported {\n      background: $neutral-color-200;\n    }\n  }\n\n  &__icon {\n    width: 48px;\n    height: 48px;\n    color: $neutral-color-800;\n    &--unsupported {\n      color: $neutral-color-300;\n    }\n  }\n  &__button {\n    width: 100%;\n  }\n\n  &__text {\n    text-transform: capitalize;\n    color: $neutral-color-800;\n  }\n}\n",
                    "styleUrl": "./model-version-services.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "serviceFacade",
                        "type": "ServiceStatusesFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "serviceFacade",
                        "type": "ServiceStatusesFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelVersionServicesComponent-1",
            "templateData": "<div class=\"mv-services\">\n  <div class=\"mv-services__title\">Services</div>\n  <div class=\"mv-services__list\">\n    <div class=\"mv-service\">\n      <div class=\"mv-services__item\">\n        <hs-icon type=\"monitoring\" class=\"mv-services__icon\"></hs-icon>\n        <button\n          class=\"mv-services__button\"\n          hs-button\n          kind=\"flat\"\n          color=\"primary\"\n          [routerLink]=\"['./monitoring']\"\n          queryParamsHandling=\"merge\"\n        >\n          monitoring\n        </button>\n      </div>\n    </div>\n\n    <div class=\"mv-service\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          (serviceStatuses$ | async)?.statuses?.visualization?.supported\n            ? visualizationTile\n            : notSupported;\n          context: {\n            name: 'Data projection',\n            iconName: 'data_projection',\n            message: (serviceStatuses$ | async)?.statuses?.visualization?.message\n          }\n        \"\n      >\n      </ng-container>\n    </div>\n\n    <div class=\"mv-service\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          (serviceStatuses$ | async)?.statuses?.stat?.supported\n            ? statTile\n            : notSupported;\n          context: {\n            name: 'Drift Report',\n            iconName: 'drift_report',\n            message: (serviceStatuses$ | async)?.statuses?.stat?.message\n          }\n        \"\n      >\n      </ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #visualizationTile>\n  <div class=\"mv-services__item\">\n    <hs-icon type=\"data_projection\" class=\"mv-services__icon\"></hs-icon>\n    <button\n      class=\"mv-services__button\"\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      [routerLink]=\"['./data_projection']\"\n      queryParamsHandling=\"merge\"\n    >\n      Data projection\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #statTile>\n  <div class=\"mv-services__item\">\n    <hs-icon type=\"drift_report\" class=\"mv-services__icon\"></hs-icon>\n    <button\n      class=\"mv-services__button\"\n      hs-button\n      kind=\"flat\"\n      color=\"primary\"\n      [routerLink]=\"['./drift_report']\"\n      queryParamsHandling=\"merge\"\n    >\n      drift report\n    </button>\n  </div>\n</ng-template>\n\n<ng-template\n  #notSupported\n  let-message=\"message\"\n  let-name=\"name\"\n  let-iconName=\"iconName\"\n>\n  <div\n    *ngIf=\"message\"\n    hsTippy\n    [tippyOptions]=\"{\n      content: message,\n      arrow: false,\n      theme: 'basic',\n      placement: 'bottom'\n    }\"\n  >\n    <div class=\"mv-services__item mv-services__item--unsupported\">\n      <hs-icon\n        [type]=\"iconName\"\n        class=\"mv-services__icon mv-services__icon--unsupported\"\n      ></hs-icon>\n      <p class=\"mv-services__text\">\n        {{ name }}\n      </p>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ModelVersionsRowComponent",
            "id": "component-ModelVersionsRowComponent-91773eb975e71b752187e0bed8ccebf0",
            "file": "src/testing/components/models/mock-model-versions-row.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-versions-row",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-versions-row',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModelVersionsRowComponent {\n  @Input() modelVersion: ModelVersion;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionsRowComponent",
            "id": "component-ModelVersionsRowComponent-64c569cb6ecdba433341ec715c7ab4d5-1",
            "file": "src/app/modules/model-versions/components/model-versions-row/model-versions-row.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-versions-row",
            "styleUrls": [
                "./model-versions-row.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-versions-row.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ModelVersion"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-versions-row',\n  templateUrl: './model-versions-row.component.html',\n  styleUrls: ['./model-versions-row.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModelVersionsRowComponent {\n  @Input() modelVersion: ModelVersion;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n:host {\n  display: table-row;\n}\n\n.model-version {\n  &__icon {\n    width: 24px;\n    height: 24px;\n  }\n  &__model-version {\n    font-family: $font-family-bold;\n  }\n\n  &__runtime {\n    &-tag {\n      background: $neutral-color-100;\n      color: $neutral-color-700;\n      padding: 2px 4px;\n      border-radius: 4px;\n    }\n  }\n\n  &__external {\n    font-family: $font-family-bold;\n    color: $neutral-color-400;\n    padding-right: 8px;\n  }\n\n  &__application {\n    cursor: pointer;\n\n    &:hover {\n      color: $primary-color-700;\n    }\n  }\n\n  &__icon {\n    width: 18px;\n    height: 18px;\n    color: $neutral-color-700;\n  }\n}\n",
                    "styleUrl": "./model-versions-row.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelVersionsRowComponent-1",
            "templateData": "<td class=\"hydro-table-body__cell\">\n  <span *ngIf=\"modelVersion.isExternal\" class=\"model-version__external\"\n    >ext.</span\n  >\n  <span class=\"model-version__model-version\"\n    >{{ modelVersion.modelVersion }}</span\n  >\n</td>\n<td class=\"hydro-table-body__cell\">\n  <hs-model-version-status\n    [status]=\"modelVersion.status\"\n  ></hs-model-version-status>\n</td>\n<td class=\"hydro-table-body__cell\">\n  <ng-container *ngIf=\"!modelVersion.isExternal; else blockIcon\">\n    <span>\n      {{ modelVersion.runtime?.name }}\n    </span>\n    <span class=\"model-version__runtime-tag\">\n      {{ modelVersion.runtime?.tag }}\n    </span>\n  </ng-container>\n</td>\n<td class=\"hydro-table-body__cell\">\n  {{ modelVersion.created | hsTimeAgo }}\n</td>\n<td class=\"hydro-table-body__cell\" hsHideInZenMode>\n  <ng-container *ngIf=\"!modelVersion.isExternal; else blockIcon\">\n    <div *ngFor=\"let application of modelVersion.applications\">\n      <span\n        class=\"model-version__application\"\n        [routerLink]=\"['/applications', application]\"\n        queryParamsHandling=\"merge\"\n        >{{ application }}</span\n      >\n    </div>\n  </ng-container>\n</td>\n<td class=\"hydro-table-body__cell\">\n  <hs-icon class=\"model-version__icon\" type=\"icon-arrow-right\"></hs-icon>\n</td>\n\n<ng-template #blockIcon>\n  <hs-icon class=\"model-version__icon\" type=\"block\"></hs-icon>\n</ng-template>\n"
        },
        {
            "name": "ModelVersionsTableComponent",
            "id": "component-ModelVersionsTableComponent-d9476fa23d9a7018083bb64175c6609e",
            "file": "src/testing/components/mock-model-versions-table.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-versions-table",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-model-versions-table',\n  template: '',\n})\nexport class ModelVersionsTableComponent {\n  @Input() modelVersions;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionsTagsComponent",
            "id": "component-ModelVersionsTagsComponent-a8943830ba61d81b99f4424e27fbaa8a",
            "file": "src/testing/components/models/mock-model-versions-tags.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-versions-tags",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "listChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter } from '@angular/core';\n@Component({\n  selector: 'hs-model-versions-tags',\n  template: '',\n})\nexport class ModelVersionsTagsComponent {\n  @Output() listChanged: EventEmitter<any> = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ModelVersionsTagsComponent",
            "id": "component-ModelVersionsTagsComponent-259af478fb7eded457b371a046cd2a1a-1",
            "file": "src/app/modules/monitoring/components/model-versions-tags/model-versions-tags.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "ModelVersionsTagsFacade"
                }
            ],
            "selector": "hs-model-versions-tags",
            "styleUrls": [
                "./model-versions-tags.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-versions-tags.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "listChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<ModelVersion[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "modelVersions$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion[]>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "modelVersion",
                            "type": "ModelVersion",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter } from '@angular/core';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { AddComparableComponent } from './add-comparable.component';\nimport { ModelVersionsTagsFacade } from './model-versions-tags.facade';\n\n@Component({\n  selector: 'hs-model-versions-tags',\n  templateUrl: './model-versions-tags.component.html',\n  styleUrls: ['./model-versions-tags.component.scss'],\n  providers: [ModelVersionsTagsFacade],\n})\nexport class ModelVersionsTagsComponent {\n  @Output() listChanged: EventEmitter<ModelVersion[]> = new EventEmitter();\n  modelVersions$: Observable<ModelVersion[]>;\n\n  constructor(\n    private facade: ModelVersionsTagsFacade,\n    private dialog: DialogsService\n  ) {\n    this.modelVersions$ = this.facade.modelVersions$.pipe(\n      tap(modelVersions => {\n        this.listChanged.next(modelVersions);\n      })\n    );\n  }\n  add(): void {\n    this.dialog.createDialog({\n      component: AddComparableComponent,\n      providers: [{ provide: ModelVersionsTagsFacade, useValue: this.facade }],\n    });\n  }\n  remove(modelVersion: ModelVersion): void {\n    this.facade.remove(modelVersion);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.comparing {\n  display: flex;\n  align-items: center;\n  margin-bottom: 8px;\n\n  &__label {\n    color: $neutral-color-800;\n    font-family: $font-family-light;\n    min-width: 100px;\n  }\n  &__button {\n    width: 24px;\n    height: 24px;\n    border-radius: 12px;\n    background: $primary-color-600;\n    transition: .3s ease all;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n\n    &:hover {\n      background: $primary-color-800;\n    }\n  }\n\n  &__list {\n    background: white;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 16px;\n    height: 32px;\n    padding: 4px;\n    display: flex;\n    align-items: center;\n    width: 100%;\n  }\n\n  &__button {\n    margin: 0 2px;\n  }\n\n  &__item {\n    background: $neutral-color-200;\n    padding: 4px 8px;\n    height: 24px;\n    border-radius: 12px;\n    color: $neutral-color-800;\n    display: flex;\n    align-items: center;\n    margin-right: 4px;\n    line-height: 17px;\n\n    &-icon {\n      height: 18px;\n      width: 18px;\n      cursor: pointer;\n      color: $neutral-color-300;\n\n      &:hover {\n        color: $neutral-color-600;\n      }\n    }\n\n    &-name {\n      margin-right: 4px;\n      color: $neutral-color-800;\n    }\n\n    &-version {\n      font-family: $font-family-bold;\n    }\n  }\n}\n",
                    "styleUrl": "./model-versions-tags.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "facade",
                        "type": "ModelVersionsTagsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "facade",
                        "type": "ModelVersionsTagsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ModelVersionsTagsComponent-1",
            "templateData": "<div class=\"comparing\">\n  <div class=\"comparing__label\">Compare with:</div>\n  <div class=\"comparing__list\">\n    <div class=\"comparing__item\" *ngFor=\"let mv of modelVersions$ | async\">\n      <span class=\"comparing__item-name\"\n        >{{ mv.model.name }}:\n        <span class=\"comparing__item-version\">{{ mv.modelVersion }}</span></span\n      >\n      <hs-icon\n        class=\"comparing__item-icon\"\n        type=\"icon-close\"\n        (click)=\"remove(mv)\"\n      ></hs-icon>\n    </div>\n    <div class=\"comparing__button\" (click)=\"add()\">+</div>\n  </div>\n</div>\n"
        },
        {
            "name": "ModelVersionStatusComponent",
            "id": "component-ModelVersionStatusComponent-d54adcbc6d6ce61460815a829a725056",
            "file": "src/app/shared/components/model-version-status/model-version-status.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-model-version-status",
            "styleUrls": [
                "./model-version-status.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./model-version-status.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "status",
                    "defaultValue": "ModelVersionStatus.Undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ModelVersionStatus"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ModelVersionStatus } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-model-version-status',\n  templateUrl: './model-version-status.component.html',\n  styleUrls: ['./model-version-status.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ModelVersionStatusComponent {\n  @Input() status: ModelVersionStatus = ModelVersionStatus.Undefined;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.model-version-status {\n  &__icon {\n    width: 18px;\n    height: 18px;\n  }\n\n  &--assembling {\n    color: $primary-color-700\n  }\n\n  &--released {\n    color: $supportive-color-green-700\n  }\n\n  &--failed {\n    color: $supportive-color-red-700\n  }\n\n  &--undefined {\n    color: $neutral-color-900;\n  }\n}",
                    "styleUrl": "./model-version-status.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"model-version-status\" [ngSwitch]=\"status\">\n  <div *ngSwitchCase=\"'released'\">\n    <hs-icon\n      class=\"model-version-status__icon model-version-status--released\"\n      type=\"circle-check\"\n    ></hs-icon>\n  </div>\n  <div *ngSwitchCase=\"'failed'\">\n    <hs-icon\n      class=\"model-version-status__icon model-version-status--failed\"\n      type=\"circle-x\"\n    ></hs-icon>\n  </div>\n  <div *ngSwitchCase=\"'assembling'\">\n    <hs-icon\n      class=\"model-version-status__icon model-version-status--assembling\"\n      type=\"clock\"\n    ></hs-icon>\n  </div>\n  <div *ngSwitchDefault class=\"model-version-status--undefined\">\n    {{ status }}\n  </div>\n</div>\n"
        },
        {
            "name": "MonitoringAvailabilityComponent",
            "id": "component-MonitoringAvailabilityComponent-be4adb5e157f506c7594fa708f949291",
            "file": "src/app/modules/monitoring/containers/monitoring-availability/monitoring-availability.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-monitoring-availability",
            "styleUrls": [
                "./monitoring-availability.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./monitoring-availability.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BuildInfo>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport {\n  BuildInfo,\n  BuildInformationService,\n} from '@app/core/build-information.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'hs-monitoring-availability',\n  templateUrl: './monitoring-availability.component.html',\n  styleUrls: ['./monitoring-availability.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MonitoringAvailabilityComponent implements OnInit {\n  status$: Observable<BuildInfo>;\n\n  constructor(private buildInfo: BuildInformationService) {}\n\n  ngOnInit() {\n    this.status$ = this.buildInfo.getStatus('sonar');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./monitoring-availability.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<hs-service-availability\n  *ngIf=\"status$ | async as status\"\n  [error]=\"status.message\"\n  [name]=\"'Monitoring'\"\n  [status]=\"status.status\"\n>\n  <ng-content></ng-content>\n</hs-service-availability>\n"
        },
        {
            "name": "MonitoringPageComponent",
            "id": "component-MonitoringPageComponent-274b2079a522e7f15da0efb86a12d35d",
            "file": "src/app/modules/monitoring/containers/monitoring-page/monitoring-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MonitoringFacade"
                },
                {
                    "name": "MonitoringPageService"
                }
            ],
            "selector": "hs-monitoring-page",
            "styleUrls": [
                "./monitoring-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./monitoring-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aggregationList$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<AggregationsList>",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "checks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CheckCollection>",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "checkToShowInDetails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Check>",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isChecksLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "selectedAggregation$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Aggregation>",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "closeCheckDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showCheckDetails",
                    "args": [
                        {
                            "name": "checkId",
                            "type": "CheckId",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkId",
                            "type": "CheckId",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  OnInit,\n  HostListener,\n} from '@angular/core';\n\nimport {\n  CheckCollection,\n  AggregationsList,\n  CheckId,\n  Check,\n  Aggregation,\n} from '../../models';\nimport { MonitoringFacade } from '../../store/monitoring.facade';\nimport { MonitoringPageService } from './monitoring-page.service';\n\nimport {\n  style,\n  transition,\n  animate,\n  trigger,\n  keyframes,\n} from '@angular/animations';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'hs-monitoring-page',\n  templateUrl: './monitoring-page.component.html',\n  styleUrls: ['./monitoring-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [MonitoringFacade, MonitoringPageService],\n  animations: [\n    trigger('openClosed', [\n      transition(':enter', [\n        animate(\n          '.3s ease-in',\n          keyframes([style({ opacity: 0 }), style({ opacity: 0.9 })])\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '.3s ease-in',\n          keyframes([style({ opacity: 0 }), style({ opacity: 0.9 })])\n        ),\n      ]),\n    ]),\n    trigger('openClosedContainer', [\n      transition(':enter', [\n        animate(\n          '.3s',\n          keyframes([\n            style({ transform: 'translate(100px)' }),\n            style({ transform: 'translate(0px)' }),\n          ])\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '1s',\n          keyframes([style({ opacity: 0 }), style({ opacity: 0.6 })])\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class MonitoringPageComponent implements OnInit {\n  aggregationList$: Observable<AggregationsList>;\n  modelVersion$: Observable<ModelVersion>;\n  selectedAggregation$: Observable<Aggregation>;\n  isChecksLoading$: Observable<boolean>;\n  checkToShowInDetails$: Observable<Check>;\n  checks$: Observable<CheckCollection>;\n\n  @HostListener('window:keydown', ['$event'])\n  handleKeyDown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      this.closeCheckDetails();\n    }\n  }\n\n  constructor(private monitoringPageService: MonitoringPageService) {}\n\n  ngOnInit(): void {\n    this.modelVersion$ = this.monitoringPageService.getModelVersion();\n    this.selectedAggregation$ = this.monitoringPageService.getSelectedAggregation();\n    this.aggregationList$ = this.monitoringPageService.getAggregationList();\n    this.checks$ = this.monitoringPageService.getChecks();\n    this.isChecksLoading$ = this.monitoringPageService.isChecksLoading();\n    this.checkToShowInDetails$ = this.monitoringPageService.getCheckToShowInDetails();\n\n    this.monitoringPageService.loadMetrics();\n    this.monitoringPageService.loadAggregations();\n    this.monitoringPageService.loadChecks();\n  }\n\n  showCheckDetails(checkId: CheckId): void {\n    this.monitoringPageService.showCheckDetails(checkId);\n  }\n\n  closeCheckDetails(): void {\n    this.monitoringPageService.closeCheckDetails();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.monitoring {\n  width: 100%;\n  position: relative;\n  height: 100%;\n  &__label {\n    font-size: 14px;\n    font-family: $font-family-bold;\n    color: $neutral-color-900;\n    line-height: 24px;\n    margin-bottom: 2px;\n  }\n  &__body {\n    overflow: auto;\n    height: 100%;\n    padding: 24px;\n  }\n  &__aggregation {\n    margin-bottom: 12px;\n    width: 100%;\n    &-details {\n      margin-bottom: 24px;\n    }\n  }\n\n  &__batch-details {\n    margin-bottom: 24px;\n  }\n\n  &__batch-latency {\n    margin-bottom: 24px;\n  }\n\n  &__alert {\n    color: #80520e;\n    cursor: pointer;\n    font-weight: bold;\n  }\n\n  &__log {\n    margin-bottom: 24px;\n  }\n\n  &__settings {\n    &-icon {\n      color: $neutral-color-300;\n      cursor: pointer;\n      height: 24px;\n      transition: 0.3s ease all;\n      width: 24px;\n\n      &:hover {\n        color: $neutral-color-800;\n      }\n    }\n  }\n\n  &__metrics-mini {\n    background: white;\n    border-radius: 4px;\n    box-shadow: $box-shadow;\n    display: flex;\n    margin-bottom: 12px;\n    padding: 8px;\n\n    &-name {\n      color: $neutral-color-900;\n      font-family: $font-family-light;\n    }\n\n    &-item {\n      width: 120px;\n    }\n\n    &-list {\n      display: flex;\n    }\n\n    &-check {\n    }\n\n    &-item + &-item {\n      margin-left: 8px;\n    }\n  }\n}\n\n.check-details {\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 100;\n  &__layout {\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    top: 0;\n    right: 0;\n    background: $neutral-color-100;\n    opacity: 0.9;\n  }\n  &__container {\n    position: absolute;\n    right: 0;\n    width: 640px;\n    top: 0;\n    bottom: 0;\n    background: white;\n    height: 100%;\n    overflow: auto;\n  }\n  &__header {\n    position: sticky;\n    top: 0;\n    z-index: 1;\n    background: white;\n    padding: 8px 24px;\n    display: flex;\n    align-items: center;\n  }\n  &__title {\n    font-family: $font-family-bold;\n    font-size: 14px;\n    color: $neutral-color-900;\n  }\n  &__body {\n    padding: 0 24px 24px;\n  }\n  &__icon {\n    width: 24px;\n    height: 24px;\n    color: $neutral-color-600;\n    transition: 0.3s ease color;\n    cursor: pointer;\n    &:hover {\n      color: $neutral-color-900;\n    }\n  }\n}\n\n.loader {\n  align-items: center;\n  background: rgba(255, 255, 255, 0.8);\n  color: $neutral-color-700;\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  left: 0;\n  letter-spacing: 1px;\n  position: absolute;\n  right: 0;\n  text-transform: uppercase;\n  top: 0;\n  z-index: 2;\n\n  &-icon {\n    height: 24px;\n    width: 24px;\n  }\n}\n",
                    "styleUrl": "./monitoring-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "monitoringPageService",
                        "type": "MonitoringPageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "monitoringPageService",
                        "type": "MonitoringPageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"monitoring\" *ngIf=\"modelVersion$ | async\">\n  <!--  <hs-monitoring-availability>-->\n  <div class=\"monitoring__body\">\n    <ng-container *ngIf=\"true; else errorSection\">\n      <div class=\"monitoring__label\">Aggregation</div>\n      <section class=\"monitoring__aggregation\">\n        <hs-aggregation></hs-aggregation>\n      </section>\n      <hs-loading [loading]=\"isChecksLoading$ | async\">\n        <div\n          class=\"monitoring__aggregation-details\"\n          *ngIf=\"checks$ | async as checkCollection\"\n        >\n          <div class=\"monitoring__label\">Batch details</div>\n          <div class=\"monitoring__batch-details\">\n            <hs-batch-details\n              (showCheckDetails)=\"showCheckDetails($event)\"\n            ></hs-batch-details>\n          </div>\n          <div class=\"monitoring__label\">Batch latency</div>\n          <div class=\"monitoring__batch-latency\">\n            <hs-batch-latency [requests]=\"checkCollection\"></hs-batch-latency>\n          </div>\n        </div>\n      </hs-loading>\n      <hs-custom-metrics-v2></hs-custom-metrics-v2>\n    </ng-container>\n  </div>\n  <!--  </hs-monitoring-availability>-->\n  <div *ngIf=\"checkToShowInDetails$ | async as check\" class=\"check-details\">\n    <div\n      @openClosed\n      class=\"check-details__layout\"\n      (click)=\"closeCheckDetails()\"\n    ></div>\n    <div @openClosedContainer class=\"check-details__container\">\n      <div class=\"check-details__header\">\n        <hs-icon\n          class=\"check-details__icon\"\n          type=\"close\"\n          (click)=\"closeCheckDetails()\"\n        ></hs-icon>\n        <div class=\"check-details__title\">Request details</div>\n      </div>\n      <div class=\"check-details__body\">\n        <hs-log-detail [check]=\"check\" [modelVersion]=\"modelVersion$ | async\">\n        </hs-log-detail>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #errorSection>\n  <hs-error-message class=\"monitoring-page__error\">\n    <!--    {{ error$ | async }}-->\n  </hs-error-message>\n</ng-template>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-d63612f9ea601d1859312da485a85049",
            "file": "src/app/layout/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./page-not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: './page-not-found.component.html',\n  styleUrls: ['./page-not-found.component.scss'],\n})\nexport class PageNotFoundComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables.scss\";\n\n:host {\n    width: 100%;\n    display: flex;\n}\n\n.page-not-found {\n    display: flex;\n    flex-direction: column;\n    margin: 0 auto;\n    justify-content: center;\n    text-align: center;\n\n    &__error {\n        font-size: 8rem;\n        line-height: 8rem;\n        color: $neutral-color-400;\n    }\n\n    &__text {\n        font-size: 2rem;\n    }\n}",
                    "styleUrl": "./page-not-found.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"page-not-found\">\n  <p class=\"page-not-found__error\">404</p>\n  <p class=\"page-not-found__text\">page not found</p>\n</div>\n"
        },
        {
            "name": "ProfileDetailsComponent",
            "id": "component-ProfileDetailsComponent-125ad958703358b7374877e97045334c",
            "file": "src/app/modules/profiler/containers/profile-details/profile-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-profile-details",
            "styleUrls": [
                "./profile-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "fields$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "profiles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Profiles>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "selectedField$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onFieldSelect",
                    "args": [
                        {
                            "name": "selectedField",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedField",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showHistogram",
                    "args": [
                        {
                            "name": "profiles",
                            "type": "Profiles",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "profiles",
                            "type": "Profiles",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ModelVersionsFacade } from '@app/core/facades/model-versions.facade';\nimport { FieldsService } from '@app/modules/profiler/fields.service';\nimport { Observable, Subject, combineLatest } from 'rxjs';\nimport { take, switchMap, map } from 'rxjs/operators';\n\nimport { ProfilerFacade } from '@app/core/facades/profiler.facade';\nimport { Profiles } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-profile-details',\n  templateUrl: './profile-details.component.html',\n  styleUrls: ['./profile-details.component.scss'],\n})\nexport class ProfileDetailsComponent {\n  readonly fields$: Observable<string>;\n  readonly error$ = new Subject<string>();\n  readonly selectedField$: Observable<string>;\n  readonly profiles$: Observable<Profiles>;\n\n  constructor(\n    private readonly modelVersionsFacade: ModelVersionsFacade,\n    private readonly profilerFacade: ProfilerFacade,\n    private readonly router: Router,\n    private readonly fieldsService: FieldsService,\n  ) {\n    this.selectedField$ = profilerFacade.selectedField();\n\n    this.profiles$ = combineLatest([\n      this.modelVersionsFacade.selectedModelVersion(),\n      this.selectedField$,\n    ]).pipe(\n      switchMap(([mv, field]) =>\n        this.profilerFacade.loadProfiles(mv.id, field),\n      ),\n    );\n\n    this.fields$ = combineLatest([\n      this.fieldsService.getFields(),\n      this.selectedField$,\n    ]).pipe(map(([dict, fieldName]) => dict[fieldName]));\n  }\n\n  onFieldSelect(selectedField) {\n    this.modelVersionsFacade\n      .selectedModelVersion()\n      .pipe(take(1))\n      .subscribe(modelVersion => {\n        this.router.navigate([\n          'models',\n          modelVersion.model.id,\n          modelVersion.id,\n          'details',\n          'profile',\n          selectedField,\n        ]);\n      });\n  }\n\n  showHistogram(profiles: Profiles): boolean {\n    return (\n      (profiles.trainingProfile &&\n        profiles.trainingProfile.kind === 'NumericalProfile') ||\n      (profiles.productionProfile &&\n        profiles.productionProfile.kind === 'NumericalProfile')\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n$box-shadow: 0px 1px 2px 0px #e2e2e2;\n\n.container {\n  padding: 30px 36px;\n  margin-bottom: 60px;\n  position: relative;\n  max-width: 768px;\n  margin: 0 auto;\n}\n\n.container.isloading::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background: #cccccc;\n  opacity: 0.5;\n  z-index: 999999;\n}\n\n.profiles {\n  &__name {\n    font-size: 16px;\n    font-family: $font-family-bold;\n    text-align: center;\n    line-height: 24px;\n    margin-bottom: 12px;\n  }\n  &__header {\n    margin-bottom: 24px;\n    background: white;\n    padding: 12px 17px;\n    border-radius: 4px;\n    box-shadow: $box-shadow;\n    &-row {\n      padding: 2px 0;\n      display: flex;\n      align-items: baseline;\n    }\n    &-label {\n      // width: 100px;\n      font-size: 14px;\n      font-family: $font-family-light;\n      color: $neutral-color-700;\n      padding-right: 4px;\n    }\n    &-value {\n      color: $neutral-color-900;\n      font-family: $font-family-bold;\n      font-size: 20px;\n      padding: 0 4px;\n    }\n    &-input {\n      width: 240px;\n    }\n  }\n\n  &__error {\n    margin: 8px 0;\n  }\n\n  &__body {\n  }\n}\n\n.profile {\n  &__container {\n    background: white;\n    padding: 0 24px;\n    width: calc(50% - 12px);\n    display: inline-block;\n    vertical-align: top;\n    border-radius: 4px;\n    box-shadow: $box-shadow;\n  }\n  &__header {\n    text-align: center;\n    font-weight: bold;\n    text-decoration: underline;\n    color: $neutral-color-800;\n    padding: 8px;\n  }\n  &__container + &__container {\n    margin-left: 24px;\n  }\n}\n\n.comparison_histogram {\n  margin-top: 30px;\n}\n",
                    "styleUrl": "./profile-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profilerFacade",
                        "type": "ProfilerFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fieldsService",
                        "type": "FieldsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "modelVersionsFacade",
                        "type": "ModelVersionsFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profilerFacade",
                        "type": "ProfilerFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fieldsService",
                        "type": "FieldsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"profiles\" *ngIf=\"profiles$ | async as profiles\">\n  <div class=\"profiles__error\" *ngIf=\"error$ | async as error\">\n    <hs-error-message>\n      {{ error }}\n    </hs-error-message>\n  </div>\n\n  {{ selectedField$ | async | json }} {{ fields$ | async | json }}\n\n  <!--  <div class=\"profiles__header\" *ngIf=\"(fields$ | async).length > 0; else name\">-->\n  <!--    <div class=\"profiles__header-row\">-->\n  <!--      <span class=\"profiles__header-label\">-->\n  <!--        Selected field:-->\n  <!--      </span>-->\n  <!--      <span class=\"profiles__header-input\">-->\n  <!--        <mdl-select label=\"Choose field\" (change)=\"onFieldSelect($event)\">-->\n  <!--          <mdl-option-->\n  <!--            *ngFor=\"let featureName of fields$ | async\"-->\n  <!--            [value]=\"featureName\"-->\n  <!--            >{{ featureName }}</mdl-option-->\n  <!--          >-->\n  <!--        </mdl-select>-->\n  <!--      </span>-->\n  <!--    </div>-->\n  <!--  </div>-->\n</div>\n\n<div *ngIf=\"profiles$ | async as profiles\">\n  <div *ngIf=\"profiles\" class=\"profiles__body\">\n    <div class=\"profile__container training\">\n      <div class=\"profile__header\">Training Data</div>\n      <hs-profile-stats [profile]=\"profiles.trainingProfile\"></hs-profile-stats>\n    </div>\n    <div class=\"profile__container production\">\n      <div class=\"profile__header\">Production Data</div>\n      <hs-profile-stats\n        [profile]=\"profiles.productionProfile\"\n      ></hs-profile-stats>\n    </div>\n\n    <div *ngIf=\"showHistogram(profiles)\" class=\"comparison_histogram\">\n      <hs-profiles-comparison-histogram\n        [trainingProfile]=\"profiles.trainingProfile\"\n        [productionProfile]=\"profiles.productionProfile\"\n      >\n      </hs-profiles-comparison-histogram>\n    </div>\n  </div>\n</div>\n\n<ng-template #name>\n  <div class=\"profiles__name\">{{ selectedField$ | async }}</div></ng-template\n>\n"
        },
        {
            "name": "ProfilerPageComponent",
            "id": "component-ProfilerPageComponent-77dcd2184f38f76fab12804ec995bd14",
            "file": "src/app/modules/profiler/pages/profiler-page/profiler-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "profiler-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profiler-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Observable } from 'rxjs';\n\n@Component({\n  templateUrl: './profiler-page.component.html',\n  styleUrls: ['profiler-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProfilerPageComponent {\n  readonly modelVersion: Observable<ModelVersion>;\n\n  constructor() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profiler-page {\n  padding: 24px;\n}\n",
                    "styleUrl": "profiler-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<!--<hs-profiler-availability>-->\n<!--  <ng-content></ng-content>-->\n<!--</hs-profiler-availability>-->\n\n<div class=\"profiler-page\">\n  <hs-profile-details></hs-profile-details>\n</div>\n"
        },
        {
            "name": "ProfilesComparisonHistogramComponent",
            "id": "component-ProfilesComparisonHistogramComponent-8c148cda2a40cb8a39063f49629bfbe6",
            "file": "src/app/modules/profiler/components/profiles-comparison-histogram/profiles-comparison-histogram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-profiles-comparison-histogram",
            "styleUrls": [
                "./profiles-comparison-histogram.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"comparison-histogram\">    <p class=\"comparison-histogram__header\">Comparison histogram</p>\n    <div #chartContainer></div>\n  </div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "productionProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "DoubleProfile | null"
                },
                {
                    "name": "trainingProfile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "DoubleProfile | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Highcharts.Chart",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "chartContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chartContainer', {static: true}"
                        }
                    ]
                },
                {
                    "name": "productionDataColor",
                    "defaultValue": "HIGHCHART_COLORS.profiles.production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "trainingDataColor",
                    "defaultValue": "HIGHCHART_COLORS.profiles.training",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "freqsToPercent",
                    "args": [
                        {
                            "name": "bins",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "profile",
                            "type": "DoubleProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "bins",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "profile",
                            "type": "DoubleProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBins",
                    "args": [],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "matchFreqs",
                    "args": [
                        {
                            "name": "profile",
                            "type": "DoubleProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "profile",
                            "type": "DoubleProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChange,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { DoubleProfile } from '@app/core/data/types';\nimport * as Highcharts from 'highcharts';\nimport { HIGHCHART_COLORS } from './highchart-colors';\n\n@Component({\n  selector: 'hs-profiles-comparison-histogram',\n  template: `<div class=\"comparison-histogram\">\n    <p class=\"comparison-histogram__header\">Comparison histogram</p>\n    <div #chartContainer></div>\n  </div> `,\n  styleUrls: ['./profiles-comparison-histogram.component.scss'],\n})\nexport class ProfilesComparisonHistogramComponent\n  implements AfterViewInit, OnChanges {\n  @Input() trainingProfile: DoubleProfile | null;\n  @Input() productionProfile: DoubleProfile | null;\n  @ViewChild('chartContainer', { static: true }) chartContainerRef: ElementRef;\n\n  private trainingDataColor = HIGHCHART_COLORS.profiles.training;\n  private productionDataColor = HIGHCHART_COLORS.profiles.production;\n  private chart: Highcharts.Chart;\n\n  ngOnChanges(changes: SimpleChanges) {\n    const trainingProfile: SimpleChange = changes.trainingProfile;\n    const productionProfile: SimpleChange = changes.productionProfile;\n\n    this.trainingProfile = trainingProfile && trainingProfile.currentValue;\n    this.productionProfile =\n      productionProfile && productionProfile.currentValue;\n\n    if (this.chart) {\n      const bins = this.getBins();\n      const trainingFreqs = this.freqsToPercent(bins, this.trainingProfile);\n      const productionFreqs = this.freqsToPercent(bins, this.productionProfile);\n\n      this.chart.xAxis[0].setCategories(bins.map(_ => _.toString()));\n      this.chart.series[0].update(\n        { type: 'column', data: trainingFreqs },\n        true\n      );\n      this.chart.series[1].update(\n        { type: 'column', data: productionFreqs },\n        true\n      );\n    }\n  }\n\n  ngAfterViewInit() {\n    const bins = this.getBins();\n    const trainingCount = this.freqsToPercent(bins, this.trainingProfile);\n    const productionCount = this.freqsToPercent(bins, this.productionProfile);\n\n    this.chart = Highcharts.chart(this.chartContainerRef.nativeElement, {\n      chart: {\n        type: 'column',\n      },\n      title: {\n        text: '',\n      },\n      subtitle: {\n        text: '',\n      },\n      xAxis: {\n        categories: bins,\n        crosshair: true,\n      },\n      yAxis: [\n        {\n          title: {\n            text: '',\n          },\n          labels: {\n            format: '{value}%',\n          },\n        },\n      ],\n      tooltip: {\n        headerFormat:\n          '<span style=\"font-size:10px\">{point.key:.1f}</span><table>',\n        pointFormat:\n          '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' +\n          '<td style=\"padding:0\"><b>{point.y:.2f}%</b></td></tr>',\n        footerFormat: '</table>',\n        shared: true,\n        useHTML: true,\n      },\n      legend: {\n        layout: 'horizontal',\n      },\n      plotOptions: {\n        column: {\n          pointPadding: 0,\n          borderWidth: 0,\n          groupPadding: 0,\n          shadow: false,\n        },\n      },\n      series: [\n        {\n          type: 'column',\n          name: 'Training Data',\n          data: trainingCount,\n          color: this.trainingDataColor,\n        },\n        {\n          type: 'column',\n          name: 'Production Data',\n          data: productionCount,\n          color: this.productionDataColor,\n        },\n      ],\n    });\n  }\n\n  private getBins(): any[] {\n    const trainingBins =\n      (this.trainingProfile && this.trainingProfile.histogram.bins) || [];\n    const productionBins =\n      (this.productionProfile && this.productionProfile.histogram.bins) || [];\n\n    return productionBins\n      .reduce((bins, bin) => {\n        if (!bins.includes(bin)) {\n          bins.push(bin);\n        }\n\n        return bins;\n      }, trainingBins.slice())\n      .sort((a, b) => a - b);\n  }\n\n  private matchFreqs(profile: DoubleProfile): (num: number) => number {\n    const oldBins: number[] = (profile && profile.histogram.bins) || [];\n    const oldFreqs: number[] = (profile && profile.histogram.frequencies) || [];\n    let count = 0;\n    if (profile) {\n      count = profile.commonStatistics.count - profile.commonStatistics.missing;\n    }\n    return (bin: number): number => {\n      if (count === 0) {\n        return 0;\n      }\n\n      const idx = oldBins.indexOf(bin);\n      if (idx >= 0) {\n        return (oldFreqs[idx] / count) * 100;\n      } else {\n        return 0;\n      }\n    };\n  }\n\n  private freqsToPercent(bins: number[], profile: DoubleProfile): number[] {\n    return bins.map(this.matchFreqs(profile));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n.comparison-histogram {\n  background: white;\n  padding: 8px 0;\n  box-shadow: $box-shadow;\n  margin-bottom: 24px;\n  border-radius: 4px;\n  &__header {\n    font-size: 14px;\n    color: $neutral-color-800;\n    text-align: left;\n    padding: 8px 0;\n    text-align: center;\n    line-height: 1;\n  }\n}\n\n",
                    "styleUrl": "./profiles-comparison-histogram.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit",
                "OnChanges"
            ]
        },
        {
            "name": "ProfilesComponent",
            "id": "component-ProfilesComponent-93d000eb993d995515cfe04c345a9f1f",
            "file": "src/testing/components/mock-profiles.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-profiles",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "modelVersionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-profiles',\n  template: '',\n})\nexport class ProfilesComponent {\n  @Input() modelVersionId;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ProfileStatsComponent",
            "id": "component-ProfileStatsComponent-71ade3d3c6f846d6c1db693893b9ce45",
            "file": "src/app/modules/profiler/components/profile-stats/profile-stats.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-profile-stats",
            "styleUrls": [
                "./profile-stats.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./profile-stats.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "Profile | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dictionary",
                    "defaultValue": "{\n    CC: 'Coordinating conjunction',\n    CD: 'Cardinal number',\n    DT: 'Determiner',\n    EX: 'Existential there',\n    FW: 'Foreign word',\n    IN: 'Preposition or subordinating conjunction',\n    JJ: 'Adjective',\n    JJR: 'Adjective, comparative',\n    JJS: 'Adjective, superlative',\n    LS: 'List item marker',\n    MD: 'Modal',\n    NN: 'Noun, singular or mass',\n    NNS: 'Noun, plural',\n    NNP: 'Proper noun, singular',\n    NNPS: 'Proper noun, plural',\n    PDT: 'Predeterminer',\n    POS: 'Possessive ending',\n    PRP: 'Personal pronoun',\n    PRP$: 'Possessive pronoun',\n    RB: 'Adverb',\n    RBR: 'Adverb, comparative',\n    RBS: 'Adverb, superlative',\n    RP: 'Particle',\n    SYM: 'Symbol',\n    TO: 'to',\n    UH: 'Interjection',\n    VB: 'Verb, base form',\n    VBD: 'Verb, past tense',\n    VBG: 'Verb, gerund or present participle',\n    VBN: 'Verb, past participle',\n    VBP: 'Verb, non­3rd person singular present',\n    VBZ: 'Verb, 3rd person singular present',\n    WDT: 'Wh­determiner',\n    WP: 'Wh­pronoun',\n    WP$: 'Possessive wh­pronoun',\n    WRB: 'Wh­adverb',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Profile } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-profile-stats',\n  templateUrl: './profile-stats.component.html',\n  styleUrls: ['./profile-stats.component.scss'],\n})\nexport class ProfileStatsComponent {\n  public dictionary: object = {\n    CC: 'Coordinating conjunction',\n    CD: 'Cardinal number',\n    DT: 'Determiner',\n    EX: 'Existential there',\n    FW: 'Foreign word',\n    IN: 'Preposition or subordinating conjunction',\n    JJ: 'Adjective',\n    JJR: 'Adjective, comparative',\n    JJS: 'Adjective, superlative',\n    LS: 'List item marker',\n    MD: 'Modal',\n    NN: 'Noun, singular or mass',\n    NNS: 'Noun, plural',\n    NNP: 'Proper noun, singular',\n    NNPS: 'Proper noun, plural',\n    PDT: 'Predeterminer',\n    POS: 'Possessive ending',\n    PRP: 'Personal pronoun',\n    PRP$: 'Possessive pronoun',\n    RB: 'Adverb',\n    RBR: 'Adverb, comparative',\n    RBS: 'Adverb, superlative',\n    RP: 'Particle',\n    SYM: 'Symbol',\n    TO: 'to',\n    UH: 'Interjection',\n    VB: 'Verb, base form',\n    VBD: 'Verb, past tense',\n    VBG: 'Verb, gerund or present participle',\n    VBN: 'Verb, past participle',\n    VBP: 'Verb, non­3rd person singular present',\n    VBZ: 'Verb, 3rd person singular present',\n    WDT: 'Wh­determiner',\n    WP: 'Wh­pronoun',\n    WP$: 'Possessive wh­pronoun',\n    WRB: 'Wh­adverb',\n  };\n\n  @Input() profile: Profile | null;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.no-data {\n  text-align: center;\n  font-size: 14px;\n  font-family: $font-family-light;\n  color: $neutral-color-600;\n  font-style: italic;\n  padding: 30px;\n}\n\n.content-info__sublist {\n  margin-bottom: 24px;\n\n  &-item {\n    display: flex;\n    align-items: baseline;\n    &-separator {\n      width: 100%;\n      border-bottom: 1px $neutral-color-300 dotted;\n    }\n    &-title {\n      width: inherit;\n      max-width: calc(100% - 100px);\n      white-space: nowrap;\n    }\n  }\n}\n\n\n.stats-header {\n  font-size: 12px;\n  color: $neutral-color-900;\n  text-align: left;\n  text-transform: uppercase;\n  padding: 24px 0px 6px;\n  line-height: 1;\n}\n\n.hr {\n  border-bottom: 1px solid $neutral-color-200;\n  height: 1px;\n  margin-top: 24px;\n}\n\n.stats {\n  &__list {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n    &-item {\n      display: flex;\n      align-items: baseline;\n      &-title {\n        font-family: $font-family-light;\n        color: $neutral-color-700;\n      }\n      &-separator {\n        border-bottom: 1px $neutral-color-300 dotted;\n        width: 100%;\n        margin: 0 4px;\n      }\n      &-value {\n        color: $neutral-color-900;\n      }\n    }\n  }\n}",
                    "styleUrl": "./profile-stats.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"!profile\" class=\"no-data\">\n  No data available\n</div>\n<div *ngIf=\"profile\" class=\"stats-container\">\n  <h5 class=\"stats-header\">Common statistics</h5>\n  <ol class=\"stats__list\">\n    <li class=\"stats__list-item\">\n      <div class=\"stats__list-item-title\">Count</div>\n      <div class=\"stats__list-item-separator\"></div>\n      <div class=\"stats__list-item-value\">\n        <div class=\"status\">{{ profile.commonStatistics.count }}</div>\n      </div>\n    </li>\n    <li class=\"stats__list-item\">\n      <div class=\"stats__list-item-title\">Distinct&nbsp;count</div>\n      <div class=\"stats__list-item-separator\"></div>\n      <div class=\"stats__list-item-value\">\n        <div class=\"status\">{{ profile.commonStatistics.distinctCount }}</div>\n      </div>\n    </li>\n    <li class=\"stats__list-item\">\n      <div class=\"stats__list-item-title\">Unique&nbsp;(%)</div>\n      <div class=\"stats__list-item-separator\"></div>\n      <div class=\"stats__list-item-value\">\n        <div class=\"status\">{{ profile.commonStatistics.uniquePerc }}%</div>\n      </div>\n    </li>\n    <li class=\"stats__list-item\">\n      <div class=\"stats__list-item-title\">Missing</div>\n      <div class=\"stats__list-item-separator\"></div>\n      <div class=\"stats__list-item-value\">\n        <div class=\"status\">{{ profile.commonStatistics.missing }}</div>\n      </div>\n    </li>\n    <li class=\"stats__list-item\">\n      <div class=\"stats__list-item-title\">Missing&nbsp;(%)</div>\n      <div class=\"stats__list-item-separator\"></div>\n      <div class=\"stats__list-item-value\">\n        <div class=\"status\">{{ profile.commonStatistics.missingPerc }}%</div>\n      </div>\n    </li>\n  </ol>\n  <div class=\"hr\"></div>\n\n  <div *ngIf=\"profile.kind === 'NumericalProfile'\">\n    <h5 class=\"stats-header\">Quantile statistics</h5>\n    <ol class=\"stats__list\">\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Min</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.min.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">5th&nbsp;percentile</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.percentile5.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Q1</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.q1.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Median</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.median.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Q3</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.q3.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">95th&nbsp;percentile</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.percentile95.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Range</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.range.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Interquartile&nbsp;range</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.interquartileRange.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Max</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.quantileStatistics.max.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n    </ol>\n    <div class=\"hr\"></div>\n    <h5 class=\"stats-header\">Descriptive statistics</h5>\n    <ol class=\"stats__list\">\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Standard&nbsp;deviation</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.descriptiveStatistics.standardDeviation.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">\n          Coefficient&nbsp;of&nbsp;variation\n        </div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.descriptiveStatistics.variationCoef.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Kurtosis</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.descriptiveStatistics.kurtosis.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Variance</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.descriptiveStatistics.variance.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Mean</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.descriptiveStatistics.mean.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Skewness</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.descriptiveStatistics.skewness.toFixed(3) }}\n          </div>\n        </div>\n      </li>\n    </ol>\n    <div class=\"hr\"></div>\n  </div>\n  <div *ngIf=\"profile.kind === 'TextProfile'\">\n    <h5 class=\"stats-header\">Text statistics</h5>\n    <ol class=\"stats__list\">\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Mean Character Length</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.textStatistics.meanCharacterLength }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Mean Dep Tree Depth</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.textStatistics.meanDepTreeDepth }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Mean Sentiment Score</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.textStatistics.meanSentimentScore }}\n          </div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Mean Token Length</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">{{ profile.textStatistics.meanTokenLength }}</div>\n        </div>\n      </li>\n      <li class=\"stats__list-item\">\n        <div class=\"stats__list-item-title\">Mean Unique Lemma Ratio</div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">\n            {{ profile.textStatistics.meanUniqueLemmaRatio }}\n          </div>\n        </div>\n      </li>\n    </ol>\n    <div class=\"hr\"></div>\n    <h5 class=\"stats-header\">PoS Statistics</h5>\n    <ol class=\"stats__list\">\n      <li\n        *ngFor=\"let item of profile.textStatistics.meanPOSProba | keyvalue\"\n        class=\"stats__list-item\"\n      >\n        <div class=\"stats__list-item-title\">\n          {{ dictionary[item.key] }}\n        </div>\n        <div class=\"stats__list-item-separator\"></div>\n        <div class=\"stats__list-item-value\">\n          <div class=\"status\">{{ item.value }}</div>\n        </div>\n      </li>\n    </ol>\n  </div>\n</div>\n"
        },
        {
            "name": "RawChecksComponent",
            "id": "component-RawChecksComponent-287224e8bc1ca691ff62b2b588a50061",
            "file": "src/testing/components/mock-row-checks.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-raw-checks",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                },
                {
                    "name": "inputKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[]"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "outputKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-raw-checks',\n  template: '',\n})\nexport class RawChecksComponent {\n  @Input() check: any;\n  @Input() modelVersion: any;\n  @Input() inputKeys: string[] = [];\n  @Input() outputKeys: string[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "RawChecksComponent",
            "id": "component-RawChecksComponent-c1f234615f325dcb7b5e893d4ee3ad9f-1",
            "file": "src/app/modules/request-details/components/raw-checks/raw-checks.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-raw-checks",
            "styleUrls": [
                "./raw-checks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./raw-checks.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "check",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Check"
                },
                {
                    "name": "inputKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string[]"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ModelVersion"
                },
                {
                    "name": "outputKeys",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getTensorShape",
                    "args": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueAsText",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isImage",
                    "args": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showAsList",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Check } from '../../../monitoring/models';\nimport { ModelVersion } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-raw-checks',\n  templateUrl: './raw-checks.component.html',\n  styleUrls: ['./raw-checks.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RawChecksComponent {\n  @Input() check: Check;\n  @Input() modelVersion: ModelVersion;\n  @Input() inputKeys: string[] = [];\n  @Input() outputKeys: string[] = [];\n\n  isImage(inputName: string): boolean {\n    return this.modelVersion.contractInputs.some(\n      p => p.name === inputName && p.profile === 'IMAGE'\n    );\n  }\n\n  getValueAsText(data): any {\n    try {\n      return data.join(', ');\n    } catch {\n      return data;\n    }\n  }\n\n  getTensorShape(inputName: string) {\n    const inputs = this.modelVersion.contractInputs;\n    const input = inputs.find(el => el.name === inputName);\n\n    return input.shape;\n  }\n\n  showAsList(name: string) {\n    return name === 'probabilities';\n  }\n\n  get rawChecks() {\n    return this.check.rawChecks;\n  }\n\n  get hasRawChecksExceptOverall(): boolean {\n    return (\n      Object.keys(this.rawChecks).filter(key => key !== 'overall').length > 0\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.raw-checks {\n  margin-bottom: 12px;\n  &__table-wrapper {\n    border: 2px $neutral-color-200 solid;\n    border-radius: 5px;\n    margin-bottom: 24px;\n  }\n\n  &__table {\n    border-collapse: collapse;\n    table-layout: fixed;\n\n    width: 100%;\n\n    &__row:nth-of-type(2n) {\n      background: $neutral-color-100;\n    }\n  }\n\n  &__row:nth-of-type(2n) {\n    background: $neutral-color-100;\n  }\n\n  &__cell {\n    color: $neutral-color-1000;\n    font-size: 12px;\n    line-height: 14px;\n    overflow: auto;\n    padding: 8px 6px;\n  }\n\n  &__check {\n    &--success {\n      color: $supportive-color-green-700;\n      font-family: $font-family-bold;\n    }\n\n    &--failed {\n      color: $supportive-color-red-700;\n      font-family: $font-family-bold;\n    }\n  }\n\n  &__head-row {\n    border-bottom: 1px solid $neutral-color-200;\n  }\n\n  &__head-cell {\n    color: $neutral-color-600;\n    font-family: $font-family-bold;\n    padding: 12px 6px;\n  }\n\n  &__label {\n    color: $neutral-color-800;\n    font-family: $font-family-bold;\n    font-size: 14px;\n    line-height: 24px;\n    margin-right: 12px;\n  }\n\n  &__explanation {\n    position: absolute;\n    right: 0;\n    top: 2px;\n    width: 140px;\n  }\n}\n",
                    "styleUrl": "./raw-checks.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "rawChecks": {
                    "name": "rawChecks",
                    "getSignature": {
                        "name": "rawChecks",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                },
                "hasRawChecksExceptOverall": {
                    "name": "hasRawChecksExceptOverall",
                    "getSignature": {
                        "name": "hasRawChecksExceptOverall",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RawChecksComponent-1",
            "templateData": "<div class=\"raw-checks\">\n  <span class=\"raw-checks__label\">inputs</span>\n  <div class=\"raw-checks__table-wrapper\">\n    <table class=\"raw-checks__table\">\n      <tr class=\"raw-checks__head-row\">\n        <td class=\"raw-checks__cell raw-checks__head-cell\">\n          name\n        </td>\n        <td\n          [attr.colspan]=\"hasRawChecksExceptOverall ? 1 : 4\"\n          class=\"raw-checks__cell raw-checks__head-cell\"\n        >\n          value\n        </td>\n        <ng-container *ngIf=\"hasRawChecksExceptOverall\">\n          <td class=\"raw-checks__cell raw-checks__head-cell\">description</td>\n          <td class=\"raw-checks__cell raw-checks__head-cell\">threshold</td>\n          <td class=\"raw-checks__cell raw-checks__head-cell\">check</td>\n        </ng-container>\n      </tr>\n      <ng-container\n        *ngTemplateOutlet=\"row; context: { $implicit: inputKeys }\"\n      ></ng-container>\n    </table>\n  </div>\n\n  <ng-container *ngIf=\"!check.error\">\n    <span class=\"raw-checks__label\">ouputs</span>\n    <div class=\"raw-checks__table-wrapper\">\n      <table class=\"raw-checks__table\">\n        <tr class=\"raw-checks__head-row\">\n          <td class=\"raw-checks__cell raw-checks__head-cell\">\n            name\n\n          </td>\n          <td\n            [attr.colspan]=\"hasRawChecksExceptOverall ? 1 : 4\"\n            class=\"raw-checks__cell raw-checks__head-cell\"\n          >\n            value\n          </td>\n          <ng-container *ngIf=\"hasRawChecksExceptOverall\">\n            <td class=\"raw-checks__cell raw-checks__head-cell\">description</td>\n            <td class=\"raw-checks__cell raw-checks__head-cell\">threshold</td>\n            <td class=\"raw-checks__cell raw-checks__head-cell\">check</td>\n          </ng-container>\n        </tr>\n        <ng-container\n          *ngTemplateOutlet=\"row; context: { $implicit: outputKeys, isOutput: true }\"\n        ></ng-container>\n      </table>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #row let-keys let-isOutput=isOutput>\n  <tr *ngFor=\"let key of keys\" class=\"raw-checks__row\">\n    <td class=\"raw-checks__cell\">\n      <hs-exp-button\n        *ngIf=\"isOutput\"\n        [modelVersionId]=\"modelVersion.id\"\n        [outputField]=\"key\"\n        [requestId]=\"check.id\">\n\n      </hs-exp-button>\n      {{ key }}\n    </td>\n    <td\n      [attr.colspan]=\"hasRawChecksExceptOverall ? 1 : 4\"\n      class=\"raw-checks__cell\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"isImage(key) ? image : plainText\"\n      ></ng-container>\n      <ng-template #image>\n        <hs-tensor-image-list\n          [pixels]=\"check.inputsOutputs[key]\"\n          [tensorProto]=\"getTensorShape(key)\"\n        ></hs-tensor-image-list>\n      </ng-template>\n      <ng-template #plainText>\n        <div hs-expander maxHeight=\"170\">\n          <div #expand>\n            {{ getValueAsText(check.inputsOutputs[key]) }}\n          </div>\n        </div>\n      </ng-template>\n    </td>\n    <ng-container *ngIf=\"hasRawChecksExceptOverall\">\n      <td class=\"raw-checks__cell\">\n        <ng-container *ngIf=\"rawChecks[key]\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              rawCheckResult;\n              context: { $implicit: rawChecks[key], key: 'description' }\n            \"\n          >\n          </ng-container>\n        </ng-container>\n      </td>\n      <td class=\"raw-checks__cell\">\n        <ng-container *ngIf=\"rawChecks[key]\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              rawCheckResult;\n              context: { $implicit: rawChecks[key], key: 'threshold' }\n            \"\n          ></ng-container>\n        </ng-container>\n      </td>\n      <td class=\"raw-checks__cell\">\n        <ng-container *ngIf=\"rawChecks[key]\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              rawCheckResultChecks;\n              context: { $implicit: rawChecks[key], key: 'check' }\n            \"\n          ></ng-container>\n        </ng-container>\n      </td>\n    </ng-container>\n  </tr>\n</ng-template>\n<ng-template #rawCheckResult let-items let-key=\"key\">\n  <div *ngFor=\"let item of items\">\n    {{ item[key] }}\n  </div>\n</ng-template>\n<ng-template #rawCheckResultChecks let-items let-key=\"key\">\n  <div\n    *ngFor=\"let item of items\"\n    [ngClass]=\"{\n      'raw-checks__check--failed': !item.check,\n      'raw-checks__check--success': item.check\n    }\"\n  >\n    {{ item[key] }}\n  </div>\n</ng-template>\n"
        },
        {
            "name": "RegimeSelectorComponent",
            "id": "component-RegimeSelectorComponent-1c4944833fc10befd19bce8455d28fba",
            "file": "src/testing/components/monitoring/mock-regime-selector.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-regime-selector",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedRegime",
                    "defaultValue": "'split'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "ComparisonRegime"
                }
            ],
            "outputsClass": [
                {
                    "name": "changedRegime",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ComparisonRegime } from '@app/modules/monitoring/containers/custom-metrics/custom-metrics.facade';\n\n@Component({\n  selector: 'hs-regime-selector',\n  template: '',\n})\nexport class RegimeSelectorComponent {\n  @Input() selectedRegime: ComparisonRegime = 'split';\n  @Output() changedRegime: EventEmitter<any> = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "RegimeSelectorComponent",
            "id": "component-RegimeSelectorComponent-59b346ba3bcb4fa5175b34045a25f284-1",
            "file": "src/app/modules/monitoring/components/regime-selector/regime-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-regime-selector",
            "styleUrls": [
                "./regime-selector.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./regime-selector.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedRegime",
                    "defaultValue": "'split'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ComparisonRegime"
                }
            ],
            "outputsClass": [
                {
                    "name": "changedRegime",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<ComparisonRegime>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "regimes",
                    "defaultValue": "['merge', 'split']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComparisonRegime[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "changeRegime",
                    "args": [
                        {
                            "name": "regime",
                            "type": "ComparisonRegime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "regime",
                            "type": "ComparisonRegime",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ComparisonRegime } from '../../containers/custom-metrics/custom-metrics.facade';\n\n@Component({\n  selector: 'hs-regime-selector',\n  templateUrl: './regime-selector.component.html',\n  styleUrls: ['./regime-selector.component.scss'],\n})\nexport class RegimeSelectorComponent {\n  regimes: ComparisonRegime[] = ['merge', 'split'];\n  @Input() selectedRegime: ComparisonRegime = 'split';\n  @Output() changedRegime: EventEmitter<ComparisonRegime> = new EventEmitter();\n  changeRegime(regime: ComparisonRegime): void {\n    this.changedRegime.next(regime);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n.regimes {\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  &__label {\n    color: $neutral-color-800;\n    font-family: $font-family-light;\n    min-width: 100px;\n  }\n  &__item {\n    height: 24px;\n    color: #003E6B;\n    border: 1px $neutral-color-200 solid;\n    padding: 2px 8px;\n    display: flex;\n    align-items: center;\n    border-radius: 12px;\n    color: $neutral-color-700;\n    cursor: pointer;\n    transition: .3s all ease;\n    text-transform: capitalize;\n    &--active, &:hover {\n      border-color: $primary-color-600;\n      background: $primary-color-600;\n      color: $primary-color-100;\n    }\n  \n    & + & {\n      margin-left: 8px;\n    }\n  }\n}\n",
                    "styleUrl": "./regime-selector.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RegimeSelectorComponent-1",
            "templateData": "<div class=\"regimes\">\n  <div class=\"regimes__label\">Regime:</div>\n  <span\n    class=\"regimes__item\"\n    [ngClass]=\"{ 'regimes__item--active': regime === selectedRegime }\"\n    *ngFor=\"let regime of regimes\"\n    (click)=\"changeRegime(regime)\"\n  >\n    {{ regime }}\n  </span>\n</div>\n"
        },
        {
            "name": "ReqResLogsComponent",
            "id": "component-ReqResLogsComponent-d3450c7702c53a534b1ff3e21943d3c2",
            "file": "src/testing/components/mock-req-res-logs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-req-res-logs",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "log",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "any"
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickedUpdateReqstore",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n@Component({\n  selector: 'hs-req-res-logs',\n  template: '',\n})\nexport class ReqResLogsComponent {\n  @Input() log: any;\n  @Input() modelVersion: any;\n  @Output() clickedUpdateReqstore: EventEmitter<any> = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ReqstoreMetricsComponent",
            "id": "component-ReqstoreMetricsComponent-f0beb31e55e653cc4c36b10e576515fc",
            "file": "src/app/modules/monitoring/components/reqstore-metrics/reqstore-metrics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-reqstore-metrics",
            "styleUrls": [
                "reqstore-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "reqstore-metrics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "metrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "valueAscOrder",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "failedCount",
                    "args": [
                        {
                            "name": "metric",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metric",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "featuresCount",
                    "args": [
                        {
                            "name": "metric",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metric",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFailedFeature",
                    "args": [
                        {
                            "name": "feature",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "feature",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "metricHasManyFeatures",
                    "args": [
                        {
                            "name": "metric",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "metric",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { KeyValue } from '@angular/common';\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-reqstore-metrics',\n  templateUrl: 'reqstore-metrics.component.html',\n  styleUrls: ['reqstore-metrics.component.scss'],\n})\nexport class ReqstoreMetricsComponent {\n  @Input() metrics: any[];\n\n  metricHasManyFeatures(metric) {\n    const features = Object.values(metric);\n    return features.length > 1;\n  }\n\n  featuresCount(metric) {\n    const features = Object.values(metric);\n    return features.length;\n  }\n\n  failedCount(metric) {\n    const features = Object.values(metric).filter(metrics => {\n      const firstMetric = Object.values(metrics)[0];\n      return firstMetric.health === false;\n    });\n    return features.length;\n  }\n\n  isFailedFeature(feature: { [columnIndex: string]: any }) {\n    const metrics: any[] = Object.values(feature);\n    return metrics.some(metricData => metricData.health === false);\n  }\n\n  valueAscOrder = (\n    a: KeyValue<number, string>,\n    b: KeyValue<number, string>\n  ): number => {\n    return a.key - b.key;\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.metrics {\n  &__title {\n    text-transform: uppercase;\n    font-size: 10px;\n    letter-spacing: 1px;\n    margin-left: 0px;\n    margin-top: 4px;\n    color: $neutral-color-700;\n  }\n\n  &__list {\n    margin-left: 8px;\n  }\n\n  &__table {\n    border-collapse: collapse;\n\n    &-cell {\n      padding: 0 8px;\n      color: $neutral-color-600;\n      vertical-align: top;\n      &--accent {\n        color: $neutral-color-800;\n      }\n\n      &--failed {\n        color: $supportive-color-red-700;\n      }\n    }\n  }\n\n  &__item {\n    &-features {\n      text-transform: uppercase;\n      font-size: 10px;\n      color: #bfbfbf;\n\n      &-count {\n        color: black;\n\n        &--is-failed {\n          color: #ff5151;\n        }\n      }\n    }\n\n    &-name {\n      color: grey;\n      margin-right: 8px;\n      width: 100%;\n    }\n\n    &-key {\n      color: grey;\n      margin-right: 4px;\n    }\n\n    &-value {\n      &--is-false {\n        color: #ff5151;\n      }\n    }\n  }\n}\n\n.feature {\n  &__list {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  &__item {\n    font-size: 10px;\n    display: flex;\n    margin-bottom: 12px;\n    background: whitesmoke;\n    margin-right: 4px;\n\n    &-index {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      background: $neutral-color-100;\n      min-width: 24px;\n\n      &--failed {\n        background: $supportive-color-red-100;\n        color: $supportive-color-red-700;\n      }\n    }\n\n    &-data {\n      line-height: 12px;\n      width: 100%;\n      padding: 0px 4px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n\n      &-keys {\n        color: $neutral-color-600;\n        font-family: $font-family-light;\n      }\n\n      &-values {}\n    }\n  }\n}",
                    "styleUrl": "reqstore-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"metrics log__details-item-metrics\">\n  <div class=\"metrics__title\">Metrics</div>\n  <table class=\"metrics__table\">\n    <tr *ngFor=\"let metric of metrics | keyvalue\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          metricHasManyFeatures(metric.value) ? expandableMetric : simpleMetric;\n          context: { $implicit: metric }\n        \"\n      >\n      </ng-container>\n    </tr>\n  </table>\n</div>\n\n<ng-template #simpleMetric let-metric>\n  <td class=\"metrics__table-cell metrics__table-cell--accent\">\n    <div *ngFor=\"let item of metric.value[0] | keyvalue\">\n      {{ item.key }}\n    </div>\n  </td>\n  <td class=\"metrics__table-cell\">\n    <div\n      [ngClass]=\"{\n        'metrics__table-cell--failed': item.value.health === false\n      }\"\n      *ngFor=\"let item of metric.value[0] | keyvalue\"\n    >\n      {{ item.value.value }}\n    </div>\n  </td>\n</ng-template>\n\n<ng-template #expandableMetric let-metric>\n  <td class=\"metrics__table-cell metrics__table-cell--accent\">\n    {{ metric.key }}\n  </td>\n  <td class=\"metrics__table-cell\">\n    <div hs-expander maxHeight=\"60\">\n      <div #expand>\n        <div class=\"feature__list\">\n          <div\n            class=\"feature__item\"\n            *ngFor=\"let columnIndex of metric.value | keyvalue: valueAscOrder\"\n          >\n            <div\n              [ngClass]=\"{\n                'feature__item-index--failed': isFailedFeature(\n                  columnIndex.value\n                )\n              }\"\n              class=\"feature__item-index\"\n            >\n              {{ columnIndex.key }}\n            </div>\n            <div class=\"feature__item-data feature__item-data-keys\">\n              <div *ngFor=\"let item of columnIndex.value | keyvalue\">\n                {{ item.key }}\n              </div>\n            </div>\n            <div class=\"feature__item-data feature__item-data-values\">\n              <div *ngFor=\"let item of columnIndex.value | keyvalue\">\n                {{ item.value.value | number: '1.2-2' }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </td>\n</ng-template>\n"
        },
        {
            "name": "RequestsComponent",
            "id": "component-RequestsComponent-7b10a4070a5601c840fd8df9e5ea4929",
            "file": "src/app/modules/monitoring/components/batch-details/components/requests/requests.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-requests",
            "styleUrls": [
                "./requests.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./requests.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "requests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Check[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "checkClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<Check>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "check",
                            "type": "Check",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "check",
                            "type": "Check",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Check } from '../../../../models';\nimport {\n  trigger,\n  transition,\n  query,\n  style,\n  stagger,\n  animate,\n} from '@angular/animations';\n\n@Component({\n  selector: 'hs-requests',\n  templateUrl: './requests.component.html',\n  styleUrls: ['./requests.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('filterAnimation', [\n      transition(':enter, * => 0, * => -1', []),\n      transition(':increment', [\n        query(\n          ':enter',\n          [\n            style({ opacity: 0, width: '0px' }),\n            stagger(50, [\n              animate('300ms ease-out', style({ opacity: 1, width: '*' })),\n            ]),\n          ],\n          { optional: true }\n        ),\n      ]),\n      transition(':decrement', [\n        query(':leave', [\n          stagger(50, [\n            animate('300ms ease-out', style({ opacity: 0, width: '0px' })),\n          ]),\n        ]),\n      ]),\n    ]),\n  ],\n})\nexport class RequestsComponent {\n  @Input() requests: Check[];\n  @Output() checkClicked: EventEmitter<Check> = new EventEmitter();\n\n  constructor() {}\n\n  onClick(check: Check): void {\n    this.checkClicked.next(check);\n  }\n\n  get total() {\n    return this.requests.length;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.checks {\n  width: 100%;\n  height: 360px;\n  overflow: auto;\n  &__not-available {\n    color: $neutral-color-300;\n  }\n  &__score {\n    font-size: 14px;\n    font-family: $font-family-bold;\n  }\n  &__error {\n    background: $supportive-color-red-700;\n    color: white;\n    padding: 2px 6px;\n    border-radius: 2px;\n  }\n  &__icon {\n    width: 24px;\n    height: 24px;\n    color: $neutral-color-700;\n  }\n}\n",
                    "styleUrl": "./requests.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 51
            },
            "accessors": {
                "total": {
                    "name": "total",
                    "getSignature": {
                        "name": "total",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                }
            },
            "templateData": "<div class=\"checks\">\n  <table class=\"hydro-table\">\n    <thead class=\"hydro-table-head\">\n      <tr>\n        <!--        <th class=\"hydro-table-head__cell hydro-table-head__cell&#45;&#45;sticky\">-->\n        <!--          Request-->\n        <!--        </th>-->\n\n        <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n          Successful checks, %\n        </th>\n        <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n          Successful metrics, %\n        </th>\n        <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n          Time\n        </th>\n        <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\">\n          Has error\n        </th>\n        <th class=\"hydro-table-head__cell hydro-table-head__cell--sticky\"></th>\n      </tr>\n    </thead>\n    <tbody class=\"hydro-table-body\" [@filterAnimation]=\"total\">\n      <tr\n        *ngFor=\"let check of requests\"\n        class=\"hydro-table-body__row hydro-table-body__row--hoverable\"\n        (click)=\"onClick(check)\"\n      >\n        <td class=\"hydro-table-body__cell checks__score\">\n          {{ check.getRawScore() | number | percent }}\n        </td>\n        <td class=\"hydro-table-body__cell checks__score\">\n          <span *ngIf=\"check.hasMetricChecks(); else na\"\n            >{{ check.getMetricsScore() | number | percent }}</span\n          >\n        </td>\n        <td class=\"hydro-table-body__cell\">\n          {{ check.timestamp | hsFormatDate }}\n        </td>\n        <td class=\"hydro-table-body__cell\">\n          <span *ngIf=\"check.error\" class=\"checks__error\">\n            error\n          </span>\n        </td>\n        <td class=\"hydro-table-body__cell\">\n          <hs-icon class=\"checks__icon\" type=\"icon-arrow-right\"></hs-icon>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #na>\n  <span class=\"checks__not-available\">-</span>\n</ng-template>\n"
        },
        {
            "name": "RequestsFilterComponent",
            "id": "component-RequestsFilterComponent-58915ce134fcfe1053cba8709b0fc09c",
            "file": "src/app/modules/monitoring/components/batch-details/components/requests-filter/requests-filter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-requests-filter",
            "styleUrls": [
                "./requests-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./requests-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "filterChanged",
                    "defaultValue": "new EventEmitter<\n    ChecksFilter\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<ChecksFilter>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "formsChangeDebounceMs",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        120,
                        142
                    ]
                },
                {
                    "name": "sliderOptions",
                    "defaultValue": "{\n    floor: 0,\n    ceil: 100,\n    step: 1,\n    showTicks: true,\n    animate: false,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Options",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Options } from '@angular-slider/ngx-slider';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport {\n  ChecksHealthFilterOptions,\n  ChecksFilter,\n} from '../../batch-details.service';\n\n@Component({\n  selector: 'hs-requests-filter',\n  templateUrl: './requests-filter.component.html',\n  styleUrls: ['./requests-filter.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class RequestsFilterComponent implements OnInit {\n  @Output() filterChanged: EventEmitter<ChecksFilter> = new EventEmitter<\n    ChecksFilter\n  >();\n  form: FormGroup;\n\n  private readonly formsChangeDebounceMs: number = 300;\n\n  sliderOptions: Options = {\n    floor: 0,\n    ceil: 100,\n    step: 1,\n    showTicks: true,\n    animate: false,\n  };\n\n  constructor(private readonly fb: FormBuilder) {\n    this.form = this.fb.group({\n      filterBy: this.fb.control(ChecksHealthFilterOptions.all),\n      scoreFilter: this.fb.group({\n        byMetric: this.fb.control(true),\n        byRaw: this.fb.control(true),\n        metricScoreRange: this.fb.control([0, 100]),\n        rawScoreRange: this.fb.control([0, 100]),\n      }),\n    });\n  }\n\n  ngOnInit() {\n    this.form.valueChanges\n      .pipe(debounceTime(this.formsChangeDebounceMs))\n      .subscribe(value => {\n        this.filterChanged.next(value);\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.checks-filter {\n  padding: 12px;\n  &__title {\n    font-family: $font-family-bold;\n    color: $neutral-color-800;\n    font-size: 12px;\n    margin-bottom: 8px;\n    height: 100%;\n    overflow: auto;\n  }\n\n  &__controls {\n  }\n\n  &__control {\n    display: flex;\n    margin-bottom: 4px;\n  }\n\n  &__slider {\n    padding: 0 4px;\n  }\n\n  &__group {\n    margin-bottom: 8px;\n  }\n\n  &__label {\n    font-size: 12px;\n    color: $neutral-color-900;\n  }\n\n  &__submenu {\n    margin-left: 18px;\n  }\n}\n",
                    "styleUrl": "./requests-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"checks-filter\">\n  <div class=\"checks-filter__title\">Filter</div>\n  <form [formGroup]=\"form\">\n    <div class=\"checks-filter__controls\">\n      <div class=\"checks-filter__control\">\n        <input\n          type=\"radio\"\n          formControlName=\"filterBy\"\n          value=\"ALL\"\n          id=\"all\"\n        /><label class=\"checks-filter__label\" for=\"all\">All</label>\n      </div>\n      <div>\n        <div class=\"checks-filter__control\">\n          <input\n            type=\"radio\"\n            formControlName=\"filterBy\"\n            value=\"SCORE\"\n            id=\"score\"\n          /><label class=\"checks-filter__label\" for=\"score\"\n            >By success percent</label\n          >\n        </div>\n\n        <div\n          class=\"checks-filter__submenu\"\n          *ngIf=\"form.value.filterBy === 'SCORE'\"\n          formGroupName=\"scoreFilter\"\n        >\n          <div class=\"checks-filter__group\">\n            <div class=\"checks-filter__control\">\n              <input type=\"checkbox\" formControlName=\"byRaw\" id=\"byRaw\" /><label\n                for=\"byRaw\"\n                class=\"checks-filter__label\"\n                >Successful checks % in:\n              </label>\n            </div>\n            <div class=\"hs-slider checks-filter__slider\">\n              <ngx-slider\n                formControlName=\"rawScoreRange\"\n                [options]=\"sliderOptions\"\n              ></ngx-slider>\n            </div>\n          </div>\n          <div class=\"checks-filter__group\">\n            <div class=\"checks-filter__control\">\n              <input\n                type=\"checkbox\"\n                formControlName=\"byMetric\"\n                id=\"byMetric\"\n              /><label class=\"checks-filter__label\" for=\"byMetric\"\n                >Successful metrics % in:</label\n              >\n            </div>\n            <div class=\"hs-slider checks-filter__slider\">\n              <ngx-slider\n                formControlName=\"metricScoreRange\"\n                [options]=\"sliderOptions\"\n              ></ngx-slider>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"checks-filter__control\">\n        <input\n          type=\"radio\"\n          formControlName=\"filterBy\"\n          value=\"ERROR\"\n          id=\"withError\"\n        />\n        <label class=\"checks-filter__label\" for=\"withError\">Only Errors</label>\n      </div>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "RequestsInformationComponent",
            "id": "component-RequestsInformationComponent-191432d2c2b744f621b8d8c6a05e59c2",
            "file": "src/testing/components/mock-requests-information.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-requests-information",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "{}"
                },
                {
                    "name": "latency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-requests-information',\n  template: '',\n})\nexport class RequestsInformationComponent {\n  @Input() aggregation: any;\n  @Input() latency;\n  @Input() errors = [];\n  @Input() loading = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "RequestsInformationComponent",
            "id": "component-RequestsInformationComponent-eb83a7e956ef72f506367f51d205c0df-1",
            "file": "src/app/modules/monitoring/components/requests-information/requests-information.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-requests-information",
            "styleUrls": [
                "./requests-information.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./requests-information.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "aggregation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Aggregation"
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "{}"
                },
                {
                    "name": "latency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { Aggregation } from '../../models';\n\n@Component({\n  selector: 'hs-requests-information',\n  templateUrl: './requests-information.component.html',\n  styleUrls: ['./requests-information.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RequestsInformationComponent {\n  @Input() aggregation: Aggregation;\n  @Input() latency;\n  @Input() errors = [];\n\n  get additionalInfo() {\n    return this.aggregation;\n  }\n\n  get firstId() {\n    return this.aggregation.from;\n  }\n  get lastId() {\n    return this.aggregation.to;\n  }\n  get requests() {\n    return this.aggregation.hs_requests;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n.requests-info {\n  width: 100%;\n  margin-bottom: 12px;\n  display: flex;\n  position: relative;\n  &__section {\n    height: 120px;\n    border: 1px $neutral-color-200 solid;\n    width: 100%;\n    padding: 8px;\n    border-radius: 4px;\n    background: white; \n  }\n  &__section + &__section {\n    margin-left: 12px;\n  }\n  &__header {\n    color: $neutral-color-800;\n    font-family: $font-family-bold;\n    font-size: 14px;\n  }\n  &__count {\n    margin: 16px 0;\n    text-align: center;\n    color: $neutral-color-900;\n    font-family: $font-family-bold;\n    font-size: 32px;\n  }\n  &__dates {\n    font-family: $font-family-light;\n    color: $neutral-color-900;\n    font-size: 12px;\n    line-height: 12px;\n    margin-bottom: 4px;\n    text-align: center;\n  }\n  &__message {\n    text-align: center;\n    color: $neutral-color-600;\n    font-family: $font-family-light;\n  }\n}\n",
                    "styleUrl": "./requests-information.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "additionalInfo": {
                    "name": "additionalInfo",
                    "getSignature": {
                        "name": "additionalInfo",
                        "type": "",
                        "returnType": "",
                        "line": 15
                    }
                },
                "firstId": {
                    "name": "firstId",
                    "getSignature": {
                        "name": "firstId",
                        "type": "",
                        "returnType": "",
                        "line": 19
                    }
                },
                "lastId": {
                    "name": "lastId",
                    "getSignature": {
                        "name": "lastId",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                },
                "requests": {
                    "name": "requests",
                    "getSignature": {
                        "name": "requests",
                        "type": "",
                        "returnType": "",
                        "line": 25
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "RequestsInformationComponent-1",
            "templateData": "<div class=\"requests-info\">\n  <ng-container *ngIf=\"aggregation; else noDataAvailable\">\n    <div class=\"requests-info__section\">\n      <div class=\"requests-info__header\">\n        Selected requests\n      </div>\n      <div class=\"requests-info__count\">{{ requests }}</div>\n      <div class=\"requests-info__dates\">\n        <span>{{ firstId | checkIdToTime | hsFormatDate }}</span> -\n        <span>{{ lastId | checkIdToTime | hsFormatDate }}</span>\n      </div>\n    </div>\n    <div class=\"requests-info__section\">\n      <hs-latency-check [data]=\"latency\"></hs-latency-check>\n    </div>\n    <div class=\"requests-info__section\">\n      <hs-error-check [data]=\"errors\"></hs-error-check>\n    </div>\n  </ng-container>\n</div>\n<ng-template #noDataAvailable>\n  <div class=\"requests-info__message\">\n    No data available\n  </div>\n</ng-template>\n"
        },
        {
            "name": "RiseExplanationComponent",
            "id": "component-RiseExplanationComponent-2da63f5eca79ee3caff1d059e635e441",
            "file": "src/app/modules/root-cause/containers/rise-explanation/rise-explanation.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-rise-explanation",
            "styleUrls": [
                "./rise-explanation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./rise-explanation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "explanation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": ""
                },
                {
                    "name": "modelVersion",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "ModelVersion"
                },
                {
                    "name": "reqstoreEntry",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "ReqstoreEntry"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "explanations",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "imageHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "imageWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "originalImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "showedExplanations$",
                    "defaultValue": "this.showMore$.pipe(\n    scan(showed => {\n      const STEP = 5;\n      const accLength = showed.length;\n      const res = [\n        ...showed,\n        ...this.explanations.slice(accLength, accLength + STEP),\n      ];\n      return res;\n    }, [])\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<RiseExplanationResult[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showMore$",
                    "defaultValue": "new BehaviorSubject('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "getPixels",
                    "args": [
                        {
                            "name": "arr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "tensorProto",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tensorProto",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValueAsText",
                    "args": [
                        {
                            "name": "tensorProto",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tensorProto",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isImage",
                    "args": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setWidthHeightForImages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showAsList",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { scan } from 'rxjs/operators';\nimport { ImageHelperService } from '@app/core/image-helper.service';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport * as colorScale from 'd3-scale-chromatic';\nimport { ModelVersion } from '@app/core/data/types';\nimport { getFiledNameByTensorDataType } from '@app/utils/field-name-by-tensor-data-type';\nimport { fromSnakeToCamel } from '@app/utils/from-snake-to-camel';\nimport {\n  RiseExplanation,\n  RiseExplanationResult,\n  ReqstoreEntry,\n} from '../../models';\n\n@Component({\n  selector: 'hs-rise-explanation',\n  templateUrl: './rise-explanation.component.html',\n  styleUrls: ['./rise-explanation.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RiseExplanationComponent implements OnInit {\n  imageWidth: number;\n  imageHeight: number;\n  originalImage: number[];\n\n  showMore$: BehaviorSubject<any> = new BehaviorSubject('');\n  showedExplanations$: Observable<\n    RiseExplanationResult[]\n  > = this.showMore$.pipe(\n    scan(showed => {\n      const STEP = 5;\n      const accLength = showed.length;\n      const res = [\n        ...showed,\n        ...this.explanations.slice(accLength, accLength + STEP),\n      ];\n      return res;\n    }, [])\n  );\n\n  explanations;\n  @Input() reqstoreEntry: ReqstoreEntry;\n  @Input() modelVersion: ModelVersion;\n  @Input() set explanation(explanation: RiseExplanation) {\n    this.explanations = explanation.result\n      .map(item => ({\n        ...item,\n        color: colorScale.interpolateBlues(\n          item.probability < 0.5 ? 0.5 : item.probability\n        ),\n      }))\n      .sort((a, b) => b.probability - a.probability);\n  }\n\n  constructor(\n    private imageHelper: ImageHelperService,\n    private dialog: DialogsService\n  ) {}\n\n  ngOnInit() {\n    this.setWidthHeightForImages();\n  }\n\n  showMore() {\n    this.showMore$.next('');\n  }\n\n  setWidthHeightForImages(): void {\n    try {\n      const imageField = this.modelVersion.contractInputs.find(\n        p => p.profile === 'IMAGE'\n      );\n      const tensorProto = this.reqstoreEntry.request.inputs[imageField.name];\n      const pixels = this.getValue(tensorProto);\n\n      const dim = tensorProto.tensorShape.dim;\n      const [, imageWidth, imageHeight] = dim;\n      this.imageWidth = imageWidth.size;\n      this.imageHeight = imageHeight.size;\n\n      this.originalImage = this.imageHelper.transformToRGBA({\n        pixels,\n        imageHeight: this.imageWidth,\n        imageWidth: this.imageHeight,\n      });\n    } catch {\n      console.warn(`input doesn't have any IMAGE`);\n    }\n  }\n\n  getPixels(arr: any): number[] {\n    return this.imageHelper.transformToRGBA({\n      pixels: arr,\n      imageHeight: this.imageHeight,\n      imageWidth: this.imageWidth,\n      colormap: 'interpolateRdYlBu',\n    });\n  }\n\n  isImage(inputName: string): boolean {\n    const isImage = this.modelVersion.contractInputs.some(\n      p => p.name === inputName && p.profile === 'IMAGE'\n    );\n    return isImage;\n  }\n\n  getValueAsText(tensorProto): any {\n    const field = fromSnakeToCamel(\n      getFiledNameByTensorDataType(tensorProto.dtype)\n    );\n    const data = tensorProto[field];\n    try {\n      return data.join(', ');\n    } catch {\n      return data;\n    }\n  }\n\n  showAsList(name: string) {\n    if (name === 'probabilities') {\n      return true;\n    }\n    return false;\n  }\n\n  onClose(): void {\n    this.dialog.closeDialog();\n  }\n\n  private getValue(tensorProto): any {\n    const field = fromSnakeToCamel(\n      getFiledNameByTensorDataType(tensorProto.dtype)\n    );\n    const data = tensorProto[field];\n    return data;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.wrapper {\n  align-items: flex-start;\n  display: flex;\n}\n\n.original-image {\n  &__title {\n    text-transform: uppercase;\n    color: $neutral-color-500;\n    margin-bottom: 32px;\n  }\n}\n\n.probabilities {\n  margin: 0 54px;\n  &__class {\n    font-weight: bold;\n  }\n  &__title {\n    text-transform: uppercase;\n    color: $neutral-color-500;\n  }\n  &__table {\n    margin-bottom: 12px;\n    border-collapse: collapse;\n    &-head {\n      &-cell {\n        padding: 4px 0px;\n        color: #486581;\n        text-transform: uppercase;\n        color: $neutral-color-500;\n        letter-spacing: 1px;\n        font-size: 10px;\n      }\n    }\n    &-cell {\n      font-family: $font-family-light;\n      padding: 8px 24px;\n      color: $neutral-color-700;\n      vertical-align: top;\n      border: 1px $neutral-color-100 solid;\n    }\n  }\n  &__button {\n    margin: auto;\n    display: block;\n  }\n}\n\n.images {\n  &__title {\n    text-transform: uppercase;\n    color: $neutral-color-500;\n  }\n  &__compare {\n    min-width: 100px;\n    min-height: 100px;\n    position: relative;\n  }\n  &__item {\n  }  \n  &__mask {\n    opacity: .6;\n    position: absolute;\n    left: 0;\n  }\n}\n\n.request {\n  &__inputs {\n    display: flex;\n  }\n  &__input {\n    margin: 4px;\n    &-name {\n      color: $neutral-color-700;\n      font-weight: bold;\n    }\n    &-value {\n      color: $neutral-color-1000;\n    }\n  }\n  &__label {\n    text-transform: uppercase;\n    color: $neutral-color-500;\n    margin-bottom: 6px;\n  }\n}\n\n.footer {\n  padding-top: 12px;\n  text-align: right;\n}",
                    "styleUrl": "./rise-explanation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "imageHelper",
                        "type": "ImageHelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "imageHelper",
                        "type": "ImageHelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "explanation": {
                    "name": "explanation",
                    "setSignature": {
                        "name": "explanation",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "explanation",
                                "type": "RiseExplanation",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "explanation",
                                "type": "RiseExplanation",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"wrapper\">\n  <div class=\"original-image\">\n    <div class=\"original-image__title\">inputs</div>\n    <div class=\"request__inputs\">\n      <div\n        class=\"request__input\"\n        *ngFor=\"let input of reqstoreEntry.request.inputs | keyvalue\"\n      >\n        <div>\n          <ng-container\n            *ngTemplateOutlet=\"isImage(input.key) ? image : plainText\"\n          ></ng-container>\n          <ng-template #image>\n            <hs-tensor-image-list\n              [tensorProto]=\"input.value\"\n            ></hs-tensor-image-list>\n          </ng-template>\n          <ng-template #plainText>\n            <div class=\"request__input-value\" hs-expander maxHeight=\"170\">\n              <div #expand>\n                {{ getValueAsText(input.value) }}\n              </div>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"probabilities\">\n    <ng-container *ngIf=\"showedExplanations$ | async as showedExplanations\">\n      <div class=\"probabilities__title\">probabilities</div>\n      <table class=\"probabilities__table\">\n        <tr class=\"probabilities__table-head-cell\">\n          <td class=\"probabilities__table-head-cell\">class</td>\n          <td class=\"probabilities__table-head-cell\">value</td>\n          <td></td>\n        </tr>\n        <tr\n          class=\"probabilities__table-row\"\n          *ngFor=\"let item of showedExplanations\"\n        >\n          <td\n            class=\"probabilities__table-cell probabilities__class\"\n            [ngStyle]=\"{ color: item.color }\"\n          >\n            {{ item.class }}\n          </td>\n          <td\n            class=\"probabilities__table-cell\"\n            [ngStyle]=\"{ color: item.color }\"\n          >\n            {{ item.probability | number: '1.5-5' }}\n          </td>\n          <td class=\"probabilities__table-cell\">\n            <div class=\"images__compare\">\n              <canvas\n                hsPixelToCanvas\n                hsScaleImage\n                [pixels]=\"originalImage\"\n                [width]=\"imageWidth\"\n                [height]=\"imageHeight\"\n              ></canvas>\n              <canvas\n                hsPixelToCanvas\n                hsScaleImage\n                class=\"images__mask\"\n                [pixels]=\"getPixels(item.mask)\"\n                [width]=\"imageWidth\"\n                [height]=\"imageHeight\"\n                [ngStyle]=\"{ transform: 'translateX(-' + imageWidth + ')' }\"\n              ></canvas>\n            </div>\n          </td>\n        </tr>\n      </table>\n\n      <button\n        *ngIf=\"showedExplanations.length < explanations.length\"\n        class=\"probabilities__button\"\n        kind=\"stroked\"\n        color=\"primary\"\n        hs-button\n        (click)=\"showMore()\"\n      >\n        SHOW 5 MORE\n      </button>\n    </ng-container>\n  </div>\n</div>\n<div class=\"footer\">\n  <button hs-button (click)=\"onClose()\">close</button>\n</div>\n"
        },
        {
            "name": "ScatterPlotComponent",
            "id": "component-ScatterPlotComponent-e824b29689ff12cd719b01c570fd63cf",
            "file": "src/testing/components/mock-scatter-plot.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-scatter-plot",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colorizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "Colorizer"
                },
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[]"
                },
                {
                    "name": "counterfactuals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number[][]"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any"
                },
                {
                    "name": "linkRegime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "LinkRegime"
                },
                {
                    "name": "top100",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number[][]"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectPoint",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LinkRegime, Colorizer } from '@app/modules/visualization/models';\n\n@Component({\n  selector: 'hs-scatter-plot',\n  template: '',\n})\nexport class ScatterPlotComponent {\n  @Input() readonly data: any;\n  @Input() readonly colors: string[] = [];\n  @Input() readonly top100: number[][] = [];\n  @Input() readonly counterfactuals: number[][];\n  @Input() readonly colorizer: Colorizer;\n  @Input() linkRegime: LinkRegime;\n  @Output() selectPoint: EventEmitter<any> = new EventEmitter();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ScatterPlotComponent",
            "id": "component-ScatterPlotComponent-5283328c2e623a7e31f2ac9c19da36c7-1",
            "file": "src/app/modules/visualization/components/scatter-plot/scatter-plot.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-scatter-plot",
            "styleUrls": [
                "./scatter-plot.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scatter-plot.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colorizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "Colorizer"
                },
                {
                    "name": "colors",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string[]"
                },
                {
                    "name": "counterfactuals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number[][]"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "ScatterPlotData"
                },
                {
                    "name": "linkRegime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": ""
                },
                {
                    "name": "showTrainingData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean"
                },
                {
                    "name": "top100",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "number[][]"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectPoint",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "axisGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'axisGroup', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "changeLinkRegime",
                    "defaultValue": "new BehaviorSubject(\n    undefined\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<LinkRegime>",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "circlesGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'circles', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "height",
                    "defaultValue": "600",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "hoveredPointIndex",
                    "defaultValue": "new BehaviorSubject(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "kdeGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'kde', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "layout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'layout', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Link[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "linksGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'links', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "points",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScatterPlotPoint[]",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "regime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkRegime",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "selectedIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "selectedPointIdx$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "selectedPointIndex",
                    "defaultValue": "new BehaviorSubject(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<number>",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "supportiveLinesGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'supportiveLines', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "svg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'svg', {read: ElementRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "width",
                    "defaultValue": "800",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "xScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "yScale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "methodsClass": [
                {
                    "name": "chooseOpacityOnHover",
                    "args": [
                        {
                            "name": "hoveredIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "hoveredIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "chooseOpacityOnLeave",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 294,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawAxis",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawCircles",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawSupportiveLines",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawTrainingData",
                    "args": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawXAxis",
                    "args": [
                        {
                            "name": "xScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "xScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drawYAxis",
                    "args": [
                        {
                            "name": "yScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "yScale",
                            "type": "ScaleLinear<number | number>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateXScale",
                    "args": [
                        {
                            "name": "points",
                            "type": "ScatterPlotPoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScaleLinear<number, number>",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "ScatterPlotPoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateYScale",
                    "args": [
                        {
                            "name": "points",
                            "type": "ScatterPlotPoint[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ScaleLinear<number, number>",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "ScatterPlotPoint[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeLines",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120,
                        123
                    ]
                },
                {
                    "name": "render",
                    "args": [
                        {
                            "type": "ScatterPlotData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "type": "ScatterPlotData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { LinkRegime, Colorizer } from '@app/modules/visualization/models';\nimport {\n  ScatterPlotData,\n  ScatterPlotPoint,\n} from '../../models/scatter-plot-data.model';\nimport {\n  select,\n  ScaleLinear,\n  scaleLinear,\n  axisBottom,\n  axisLeft,\n  contourDensity,\n  geoPath,\n} from 'd3';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { distinctUntilChanged, shareReplay, tap } from 'rxjs/operators';\n\ninterface Link {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n}\n\n@Component({\n  selector: 'hs-scatter-plot',\n  templateUrl: './scatter-plot.component.html',\n  styleUrls: ['./scatter-plot.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScatterPlotComponent implements OnChanges {\n  private static removeLines() {\n    select('.scatter-plot__links').selectAll('line').remove();\n  }\n\n  @Input() readonly data: ScatterPlotData;\n  @Input() readonly colors: string[] = [];\n  @Input() readonly top100: number[][] = [];\n  @Input() readonly counterfactuals: number[][] = [];\n  @Input() readonly colorizer: Colorizer;\n  @Input() readonly showTrainingData: boolean = false;\n\n  @Output() selectPoint: EventEmitter<number> = new EventEmitter();\n\n  @ViewChild('container', { read: ElementRef, static: true })\n  container: ElementRef;\n  @ViewChild('layout', { read: ElementRef, static: true }) layout: ElementRef;\n  @ViewChild('svg', { read: ElementRef, static: true }) svg: ElementRef;\n  @ViewChild('axisGroup', { read: ElementRef, static: true })\n  axisGroup: ElementRef;\n  @ViewChild('circles', { read: ElementRef, static: true })\n  circlesGroup: ElementRef;\n  @ViewChild('links', { read: ElementRef, static: true })\n  linksGroup: ElementRef;\n  @ViewChild('kde', { read: ElementRef, static: true }) kdeGroup: ElementRef;\n  @ViewChild('supportiveLines', { read: ElementRef, static: true })\n  supportiveLinesGroup: ElementRef;\n\n  points: ScatterPlotPoint[] = [];\n  links: Link[];\n  selectedPointIdx$: Observable<number>;\n  yScale;\n  xScale;\n  hoveredPointIndex: BehaviorSubject<number> = new BehaviorSubject(undefined);\n  selectedPointIndex: BehaviorSubject<number> = new BehaviorSubject(undefined);\n  changeLinkRegime: BehaviorSubject<LinkRegime> = new BehaviorSubject(\n    undefined\n  );\n\n  width: number = 800;\n  height: number = 600;\n  selectedIndex: number;\n  regime: LinkRegime;\n\n  constructor() {\n    this.selectedPointIdx$ = this.selectedPointIndex.asObservable().pipe(\n      distinctUntilChanged(),\n      shareReplay(1),\n      tap(index => {\n        this.selectPoint.emit(index);\n      })\n    );\n  }\n\n  @Input() set linkRegime(regime: LinkRegime) {\n    console.log('input');\n    this.regime = regime;\n    this.changeLinkRegime.next(regime);\n  }\n\n  get chartHeight() {\n    return 620;\n  }\n\n  get chartWidth() {\n    return this.container.nativeElement.offsetWidth || 400;\n  }\n\n  get margins() {\n    return {\n      top: 24,\n      right: 24,\n      bottom: 24,\n      left: 24,\n    };\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const dataChanges =\n      (changes.data && changes.data.currentValue) || this.data;\n    this.render(dataChanges);\n  }\n\n  private render({\n    points,\n    trainingPoints,\n    minX,\n    minY,\n    maxX,\n    maxY,\n  }: ScatterPlotData) {\n    this.width = this.container.nativeElement.offsetWidth;\n    const xScale = this.generateXScale(points, +minX, +maxX);\n    const yScale = this.generateYScale(points, +minY, +maxY);\n\n    this.drawAxis({ xScale, yScale });\n    this.drawTrainingData({ trainingPoints, xScale, yScale });\n    this.drawCircles({ points, xScale, yScale });\n    this.drawSupportiveLines({ xScale, yScale });\n  }\n\n  private drawTrainingData({\n    trainingPoints,\n    yScale,\n    xScale,\n  }: {\n    trainingPoints: ScatterPlotPoint[];\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }) {\n    const self = this;\n    const data = trainingPoints.map(({ x, y }) => [x, y]) as [number, number][];\n\n    var color = scaleLinear<string>()\n      .domain([0, 0.1])\n      .range(['white', '#ffad37']);\n\n    var densityData = contourDensity()\n      .x(function (d) {\n        return xScale(d[0]);\n      })\n      .y(function (d) {\n        return yScale(d[1]);\n      })\n      .size([self.chartWidth, self.chartHeight])\n      .bandwidth(12)(data);\n\n    select(this.kdeGroup.nativeElement).selectAll('path').remove();\n    select(this.kdeGroup.nativeElement)\n      .selectAll('path')\n      .data(densityData)\n      .enter()\n      .append('path')\n      .attr('d', geoPath())\n      .attr('fill', ({ value }) => color(value))\n      .style('opacity', self.showTrainingData ? '.9' : '0')\n      .style(\n        'transform',\n        `translate(${self.margins.left}px, ${self.margins.top}px)`\n      );\n  }\n\n  private drawCircles({\n    points,\n    yScale,\n    xScale,\n  }: {\n    points: ScatterPlotPoint[];\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }): void {\n    const self = this;\n    const circles = select(this.circlesGroup.nativeElement)\n      .selectAll('circle')\n      .data(points)\n      .join(\n        enter =>\n          enter\n            .append('circle')\n            .attr('cx', point => xScale(point.x) + this.margins.left)\n            .attr('cy', point => yScale(point.y) + this.margins.top)\n            .attr('r', 6)\n            .attr('fill', (point, idx) => this.colors[idx] || 'lightblue')\n            .attr('data-id', (d, i) => i),\n        update =>\n          update\n            .attr('cx', point => xScale(point.x) + this.margins.left)\n            .attr('cy', point => yScale(point.y) + this.margins.top)\n            .attr('fill', (point, idx) => this.colors[idx] || 'lightblue')\n      );\n\n    circles.attr('opacity', function (point, index) {\n      return self.chooseOpacityOnLeave(index);\n    });\n\n    circles.on('click', function (_, idx) {\n      requestAnimationFrame(() => {\n        const selectedIndex = +(this as SVGElement).dataset.id;\n        self.selectedIndex = selectedIndex;\n        self.selectPoint.next(selectedIndex);\n        circles.classed('selected', function (_, index) {\n          return index === selectedIndex;\n        });\n      });\n    });\n    circles.on('mouseenter', function (point) {\n      requestAnimationFrame(() => {\n        const hoveredIndex = +(this as SVGElement).dataset.id;\n        const x = point.x;\n        const y = point.y;\n        let linkIndexes = [];\n        switch (self.regime) {\n          case 'nearest': {\n            linkIndexes = self.top100[hoveredIndex];\n            break;\n          }\n          case 'counterfactuals': {\n            linkIndexes = self.counterfactuals[hoveredIndex];\n            break;\n          }\n        }\n\n        select(self.linksGroup.nativeElement).selectAll('line.link').remove();\n        select(self.linksGroup.nativeElement)\n          .selectAll('line')\n          .data(linkIndexes)\n          .join(enter =>\n            enter\n              .append('line')\n              .attr('class', 'link')\n              .attr('x1', xScale(x) + self.margins.left)\n              .attr('y1', yScale(y) + self.margins.top)\n              .attr('x2', index => xScale(points[index].x) + self.margins.left)\n              .attr('y2', index => yScale(points[index].y) + self.margins.top)\n              .style('stroke', '#D9E2EC')\n          );\n\n        circles.attr('opacity', (point, idx) => {\n          return self.chooseOpacityOnHover(hoveredIndex, idx);\n        });\n      });\n    });\n\n    circles.on('mouseleave', () => {\n      requestAnimationFrame(() => {\n        circles.attr('opacity', function (point, index) {\n          return self.chooseOpacityOnLeave(index);\n        });\n        select(self.linksGroup.nativeElement).selectAll('line.link').remove();\n      });\n    });\n  }\n\n  private chooseOpacityOnHover(hoveredIndex: number, index: number): string {\n    if (this.regime === 'all') {\n      return '1';\n    }\n    const linkIndexes =\n      this.regime === 'nearest'\n        ? this.top100[hoveredIndex]\n        : this.counterfactuals[hoveredIndex];\n    if (hoveredIndex === index || linkIndexes.includes(index)) {\n      return '1';\n    } else {\n      return '.3';\n    }\n  }\n\n  private chooseOpacityOnLeave(index: number): string {\n    if (this.regime === 'all' || this.selectedIndex === undefined) {\n      return '1';\n    }\n    const linkIndexes =\n      this.regime === 'nearest'\n        ? this.top100[this.selectedIndex]\n        : this.counterfactuals[this.selectedIndex];\n    if (this.selectedIndex === index || linkIndexes.includes(index)) {\n      return '1';\n    } else {\n      return '.3';\n    }\n  }\n\n  private generateXScale(\n    points: ScatterPlotPoint[],\n    minX: number,\n    maxX: number\n  ): ScaleLinear<number, number> {\n    return scaleLinear()\n      .domain([minX, maxX])\n      .range([0, this.width - (this.margins.left + this.margins.right)]);\n  }\n  private generateYScale(\n    points: ScatterPlotPoint[],\n    min,\n    max\n  ): ScaleLinear<number, number> {\n    return scaleLinear()\n      .domain([max, min])\n      .range([0, this.height - (this.margins.bottom + this.margins.top)]);\n  }\n\n  private drawAxis({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }) {\n    this.drawXAxis(xScale);\n    this.drawYAxis(yScale);\n    select(this.axisGroup.nativeElement).selectAll('path.domain').remove();\n    select(this.axisGroup.nativeElement).selectAll('.tick > line').remove();\n    select(this.axisGroup.nativeElement)\n      .selectAll('.tick > text')\n      .attr('font-size', '11px')\n      .attr('font-weight', 'bold')\n      .attr('fill', '#486581');\n  }\n  private drawYAxis(yScale: ScaleLinear<number, number>): void {\n    const yAxis = axisLeft(yScale);\n    select(this.axisGroup.nativeElement).select('g.yAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr('transform', `translate(${this.margins.left}, ${this.margins.top})`)\n      .attr('class', 'yAxis')\n      .call(yAxis);\n  }\n  private drawXAxis(xScale: ScaleLinear<number, number>): void {\n    const xAxis = axisBottom(xScale);\n    select(this.axisGroup.nativeElement).select('g.xAxis').remove();\n    select(this.axisGroup.nativeElement)\n      .append('g')\n      .attr(\n        'transform',\n        `translate(${this.margins.left}, ${this.height - this.margins.top})`\n      )\n      .attr('class', 'xAxis')\n      .call(xAxis);\n  }\n  private drawSupportiveLines({\n    xScale,\n    yScale,\n  }: {\n    xScale: ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n  }): void {\n    const groupSelection = select(this.supportiveLinesGroup.nativeElement);\n    const lineColor = 'rgb(237, 239, 243)';\n\n    groupSelection\n      .selectAll('line.yLine')\n      .data(yScale.ticks())\n      .join(enter =>\n        enter\n          .append('line')\n          .attr('class', 'yLine')\n          .attr('x1', this.margins.left)\n          .attr('y1', d => yScale(d) + this.margins.top)\n          .attr('x2', this.width - this.margins.left)\n          .attr('y2', d => yScale(d) + this.margins.top)\n          .style('stroke', lineColor)\n      );\n    groupSelection\n      .selectAll('line.xLine')\n      .data(xScale.ticks())\n      .join(enter =>\n        enter\n          .append('line')\n          .attr('class', 'xLine')\n          .attr('x1', d => xScale(d) + this.margins.left)\n          .attr('y1', this.margins.top)\n          .attr('x2', d => xScale(d) + this.margins.left)\n          .attr('y2', this.height - this.margins.top)\n          .style('stroke', lineColor)\n      );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.scatter-plot {\n  width: 100%;\n  circle.selected {\n    stroke: $supportive-color-red-700;\n    stroke-width: 2px;\n  }\n  &__legend {\n    margin-left: 24px;\n  }\n}\n",
                    "styleUrl": "./scatter-plot.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 88
            },
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "linkRegime": {
                    "name": "linkRegime",
                    "setSignature": {
                        "name": "linkRegime",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "regime",
                                "type": "LinkRegime",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 100,
                        "jsdoctags": [
                            {
                                "name": "regime",
                                "type": "LinkRegime",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "chartHeight": {
                    "name": "chartHeight",
                    "getSignature": {
                        "name": "chartHeight",
                        "type": "",
                        "returnType": "",
                        "line": 106
                    }
                },
                "chartWidth": {
                    "name": "chartWidth",
                    "getSignature": {
                        "name": "chartWidth",
                        "type": "",
                        "returnType": "",
                        "line": 110
                    }
                },
                "margins": {
                    "name": "margins",
                    "getSignature": {
                        "name": "margins",
                        "type": "",
                        "returnType": "",
                        "line": 114
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ScatterPlotComponent-1",
            "templateData": "<div class=\"scatter-plot\" #container>\n  <svg [attr.width]=\"width\" [attr.height]=\"height\" #svg>\n    <g #supportiveLines></g>\n    <g #kde></g>\n    <g #axisGroup></g>\n    <g #links></g>\n    <g #circles></g>\n  </svg>\n  <div *ngIf=\"colorizer\" class=\"scatter-plot__legend\">\n    <hs-scatter-plot-legend [colorizer]=\"colorizer\"></hs-scatter-plot-legend>\n  </div>\n</div>\n"
        },
        {
            "name": "ScatterPlotLegendComponent",
            "id": "component-ScatterPlotLegendComponent-54857b42f58d0a4c21ad25d08ac59934",
            "file": "src/testing/components/mock-scatter-plot-legend.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-scatter-plot-legend",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colorizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "Colorizer"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Colorizer } from '@app/modules/visualization/models';\n\n@Component({\n  selector: 'hs-scatter-plot-legend',\n  template: '',\n})\nexport class ScatterPlotLegendComponent {\n  @Input() colorizer: Colorizer;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ScatterPlotLegendComponent",
            "id": "component-ScatterPlotLegendComponent-84cc5a0026c4c8422e042de36f91c4ac-1",
            "file": "src/app/modules/visualization/components/scatter-plot-legend/scatter-plot-legend.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-scatter-plot-legend",
            "styleUrls": [
                "./scatter-plot-legend.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scatter-plot-legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "colorizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Colorizer"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<string>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport {\n  Colorizer,\n  SCATTER_PLOT_PALETTE,\n} from '@app/modules/visualization/models';\n\n@Component({\n  selector: 'hs-scatter-plot-legend',\n  templateUrl: './scatter-plot-legend.component.html',\n  styleUrls: ['./scatter-plot-legend.component.scss'],\n})\nexport class ScatterPlotLegendComponent {\n  readonly palette: ReadonlyArray<string>;\n\n  @Input() colorizer: Colorizer;\n  constructor() {\n    this.palette = SCATTER_PLOT_PALETTE;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"variables\";\n\n.scatter-plot-legend {\n  width: 100%;\n\n  .class_legend {\n    display: flex;\n    justify-content: center;\n\n    &__item {\n      display: flex;\n      align-items: center;\n    }\n\n    &__circle {\n      height: 8px;\n      width: 8px;\n      border-radius: 50%;\n    }\n\n    &__divider {\n      padding: 0 4px;\n    }\n\n    &__item+&__item {\n      margin-left: 24px;\n    }\n\n    &__label {\n      font-family: $font-family-light;\n    }\n  }\n}",
                    "styleUrl": "./scatter-plot-legend.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ScatterPlotLegendComponent-1",
            "templateData": "<div class=\"scatter-plot-legend\">\n  <ng-container *ngIf=\"colorizer\">\n    <div [ngSwitch]=\"colorizer.coloringType\">\n      <ng-template\n        *ngSwitchCase=\"'class'\"\n        [ngTemplateOutlet]=\"classLegend\"\n      ></ng-template>\n      <ng-template\n        *ngSwitchCase=\"'gradient'\"\n        [ngTemplateOutlet]=\"gradientLegend\"\n      ></ng-template>\n    </div>\n  </ng-container>\n</div>\n<ng-template #classLegend>\n  <div class=\"class_legend\">\n    <div\n      class=\"class_legend__item\"\n      *ngFor=\"let className of colorizer.classes; index as i\"\n    >\n      <div\n        class=\"class_legend__circle\"\n        [ngStyle]=\"{ backgroundColor: palette[i] }\"\n      ></div>\n      <span class=\"class_legend__divider\">-</span\n      ><span class=\"class_legend__label\">{{ className }}</span>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #gradientLegend>\n  <hs-gradient-legend></hs-gradient-legend>\n</ng-template>\n"
        },
        {
            "name": "ServableLogsComponent",
            "id": "component-ServableLogsComponent-4fef2ffeecc43b99749207ac482bad50",
            "file": "src/app/modules/servables/containers/servable-logs/servable-logs.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-servable-logs",
            "styleUrls": [
                "./servable-logs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./servable-logs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "logs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "servableName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { LogService } from '@app/core/data/services/log.service';\n@Component({\n  selector: 'hs-servable-logs',\n  templateUrl: './servable-logs.component.html',\n  styleUrls: ['./servable-logs.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ServableLogsComponent implements OnInit {\n  @Output() closed: EventEmitter<any> = new EventEmitter();\n\n  logs$: Observable<string>;\n  servableName: string;\n\n  constructor(private logService: LogService, private cdr: ChangeDetectorRef) {}\n\n  ngOnInit() {\n    this.logs$ = this.logService\n      .getLog('servable', this.servableName)\n      .pipe(tap(() => this.cdr.detectChanges()));\n  }\n\n  onClose(): void {\n    this.closed.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  width: 100%;\n}\n.log-wrapper {\n  max-height: calc(100% - 20px);\n  overflow: hidden;\n}",
                    "styleUrl": "./servable-logs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logService",
                        "type": "LogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "logService",
                        "type": "LogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<hs-logs\n  [logs$]=\"logs$\"\n  header=\"Servable's logs\"\n  (closed)=\"onClose()\"\n></hs-logs>\n"
        },
        {
            "name": "ServablesTableComponent",
            "id": "component-ServablesTableComponent-d4b103c26be5919de2d25bd2f2e8e163",
            "file": "src/testing/components/mock-servables-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-servables-table",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "servables",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "showedLog",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n@Component({\n  selector: 'hs-servables-table',\n  template: '',\n})\nexport class ServablesTableComponent {\n  @Input() servables: [];\n  @Output() showedLog: EventEmitter<string> = new EventEmitter<string>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "ServablesTableComponent",
            "id": "component-ServablesTableComponent-d2b0083d30e162ff005ea7c0f89bafba-1",
            "file": "src/app/modules/servables/containers/servables-table/servables-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-servables-table",
            "styleUrls": [
                "./servables-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./servables-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "servables",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Servable[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "showedLog",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "servable",
                            "type": "Servable",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "servable",
                            "type": "Servable",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShowLog",
                    "args": [
                        {
                            "name": "servableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "servableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\n\nimport { Servable } from '@app/core/data/types';\nimport { DialogsService } from '@app/modules/dialogs/dialogs.service';\nimport {\n  DialogDeleteServableComponent,\n  SERVABLE_NAME_TOKEN,\n} from '@app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component';\n\n@Component({\n  selector: 'hs-servables-table',\n  templateUrl: './servables-table.component.html',\n  styleUrls: ['./servables-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ServablesTableComponent {\n  @Input()\n  servables: Servable[];\n  @Output() showedLog: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private dialogService: DialogsService) {}\n\n  onDelete(servable: Servable): void {\n    event.stopPropagation();\n\n    this.dialogService.createDialog({\n      component: DialogDeleteServableComponent,\n      providers: [\n        {\n          provide: SERVABLE_NAME_TOKEN,\n          useValue: servable.fullName,\n        },\n      ],\n    });\n  }\n\n  onShowLog(servableName: string) {\n    this.showedLog.next(servableName);\n  }\n\n  get isEmpty(): boolean {\n    return this.servables && this.servables.length === 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.servables-table {\n  width: 100%;\n  &__row {\n    &-buttons {\n      button + button {\n        margin-left: 8px;\n      }\n\n      button {\n        padding: 5px 12px;\n      }\n    }\n  }\n}\n.servables--is-empty {\n  text-align: center;\n  line-height: 36px;\n  color: $neutral-color-400;\n}\n\n.servable {\n  &__status {\n    color: $neutral-color-500;\n    &-icon {\n      width: 18px;\n      height: 18px;\n    }\n    &--serving {\n      color: $supportive-color-green-700;\n    }\n  }\n}\n",
                    "styleUrl": "./servables-table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "isEmpty": {
                    "name": "isEmpty",
                    "getSignature": {
                        "name": "isEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 47
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ServablesTableComponent-1",
            "templateData": "<table class=\"hydro-table servables-table\">\n  <thead class=\"hydro-table-head\">\n    <tr>\n      <th class=\"hydro-table-head__cell\">name</th>\n      <th class=\"hydro-table-head__cell\">Deployment Config</th>\n      <th class=\"hydro-table-head__cell\">status</th>\n      <th class=\"hydro-table-head__cell\">message</th>\n      <th class=\"hydro-table-head__cell\">actions</th>\n    </tr>\n  </thead>\n  <tbody class=\"hydro-table-body\">\n    <tr\n      class=\"hydro-table-body__row servables-table__row\"\n      *ngFor=\"let servable of servables\"\n    >\n      <td class=\"hydro-table-body__cell\">{{ servable.fullName }}</td>\n      <td class=\"hydro-table-body__cell\">\n        {{ servable.deploymentConfiguration?.name }}\n      </td>\n      <td class=\"hydro-table-body__cell\">\n        <ng-container\n          *ngTemplateOutlet=\"status; context: { $implicit: servable.status }\"\n        ></ng-container>\n      </td>\n      <td class=\"hydro-table-body__cell\">\n        {{ servable.statusMessage }}\n      </td>\n      <td class=\"hydro-table-body__cell\">\n        <div class=\"servables-table__row-buttons\">\n          <button\n            hs-button\n            color=\"primary\"\n            (click)=\"onShowLog(servable.fullName)\"\n          >\n            show logs\n          </button>\n          <button hs-button color=\"warning\" (click)=\"onDelete(servable)\">\n            delete\n          </button>\n        </div>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n<div *ngIf=\"isEmpty\" class=\"servables--is-empty\">\n  Servable's list is empty\n</div>\n\n<ng-template #status let-status>\n  <div\n    class=\"servable__status\"\n    [ngSwitch]=\"status\"\n    [ngClass]=\"{ 'servable__status--serving': status === 'Serving' }\"\n  >\n    <hs-icon\n      *ngSwitchCase=\"'Serving'\"\n      class=\"servable__status-icon\"\n      type=\"circle-check\"\n    ></hs-icon>\n    <hs-icon\n      *ngSwitchCase=\"'Starting'\"\n      class=\"servable__status-icon\"\n      type=\"clock\"\n    ></hs-icon>\n    <hs-icon\n      *ngSwitchDefault\n      class=\"servable__status-icon\"\n      type=\"circle-x\"\n    ></hs-icon>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "ServableStatusIconComponent",
            "id": "component-ServableStatusIconComponent-313ecc544042f43c3060a1a35587b7d8",
            "file": "src/app/modules/servables/components/servable-status-icon/servable-status-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-servable-status-icon",
            "styleUrls": [
                "./servable-status-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./servable-status-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "servable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Servable"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LogsService",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "showServableLogs",
                    "args": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Servable, Status } from '@app/core/data/types';\nimport { LogsService } from '@app/modules/model-version/logs.service';\n\n@Component({\n  selector: 'hs-servable-status-icon',\n  templateUrl: './servable-status-icon.component.html',\n  styleUrls: ['./servable-status-icon.component.scss'],\n})\nexport class ServableStatusIconComponent {\n  @Input() servable: Servable;\n\n  constructor(public logs: LogsService) {}\n\n  get status(): string {\n    return this.servable.status;\n  }\n\n  get name(): string {\n    return this.servable.fullName;\n  }\n\n  get message(): string {\n    return this.servable.message;\n  }\n\n  get iconClass(): any {\n    return {\n      'servable-status--serving': this.status === Status.Serving,\n      'servable-status--not-serving': this.status === Status.NotServing,\n      'servable-status--starting': this.status === Status.Starting,\n      'servable-status--unknown': this.status === Status.Undefined,\n      'servable-status--serving--message': this.status === Status.Warning,\n    };\n  }\n\n  public showServableLogs(name) {\n    this.logs.showServableLogs(name);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.servable-status {\n  width: 200px;\n\n  &--serving {\n    color: $supportive-color-green-600;\n  }\n  &--not-serving {\n    color: $supportive-color-red-600;\n  }\n  &--starting {\n  }\n  &--unknown {\n    color: $primary-color-500;\n  }\n  &--serving--message {\n    color: $accent-color-800;\n  }\n  &__icon {\n    width: 16px;\n    height: 16px;\n  }\n}\n\n.servable-tooltip {\n  &__title {\n    font-family: $font-family-bold\n  }\n\n  &__link {\n    display: inline-block;\n    margin-top: 7px;\n    color: $primary-color-700;\n  }\n}\n",
                    "styleUrl": "./servable-status-icon.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logs",
                        "type": "LogsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "logs",
                        "type": "LogsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "status": {
                    "name": "status",
                    "getSignature": {
                        "name": "status",
                        "type": "string",
                        "returnType": "string",
                        "line": 15
                    }
                },
                "name": {
                    "name": "name",
                    "getSignature": {
                        "name": "name",
                        "type": "string",
                        "returnType": "string",
                        "line": 19
                    }
                },
                "message": {
                    "name": "message",
                    "getSignature": {
                        "name": "message",
                        "type": "string",
                        "returnType": "string",
                        "line": 23
                    }
                },
                "iconClass": {
                    "name": "iconClass",
                    "getSignature": {
                        "name": "iconClass",
                        "type": "any",
                        "returnType": "any",
                        "line": 27
                    }
                }
            },
            "templateData": "<div>\n  <div\n    hsTippy\n    [tippyOptions]=\"{\n      content: messageContent,\n      arrow: false,\n      theme: 'basic',\n      placement: 'bottom',\n      allowHTML: true,\n      interactive: true,\n      zIndex: 1\n    }\"\n    class=\"servable-status\"\n    [ngSwitch]=\"status\"\n    [ngClass]=\"iconClass\"\n  >\n    <hs-icon\n      *ngSwitchCase=\"'Undefined'\"\n      class=\"servable-status__icon\"\n      type=\"help\"\n    ></hs-icon>\n    <hs-icon\n      *ngSwitchCase=\"'Serving'\"\n      class=\"servable-status__icon\"\n      type=\"circle-check\"\n    ></hs-icon>\n    <hs-icon\n      *ngSwitchCase=\"'Starting'\"\n      class=\"servable-status__icon\"\n      type=\"clock\"\n    ></hs-icon>\n    <hs-icon\n      *ngSwitchCase=\"'Warning'\"\n      class=\"servable-status__icon\"\n      type=\"warning\"\n    ></hs-icon>\n    <hs-icon\n      *ngSwitchDefault\n      class=\"servable-status__icon\"\n      type=\"circle-x\"\n    ></hs-icon>\n  </div>\n</div>\n\n<div #messageContent>\n  <div class=\"servable-tooltip\" (click)=\"$event.stopPropagation()\">\n    <div class=\"servable-tooltip__title\">Servable</div>\n    <div class=\"servable-tooltip__name\">{{ name }}</div>\n    <div *ngIf=\"message\" class=\"servable-tooltip__text\">{{ message }}</div>\n    <a\n      class=\"hydro-link servable-tooltip__link\"\n      (click)=\"showServableLogs(name)\"\n    >\n      show logs\n    </a>\n  </div>\n</div>\n"
        },
        {
            "name": "ServiceAvailabilityComponent",
            "id": "component-ServiceAvailabilityComponent-ea50cde0f66f1f3a7730d3b7aec2aa44",
            "file": "src/app/shared/components/service-availability/service-availability.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-service-availability",
            "styleUrls": [
                "./service-availability.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./service-availability.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "ServiceStatus"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "alertTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'alertTemplate', {read: TemplateRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contentTemplate', {read: TemplateRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "errorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'errorTemplate', {read: TemplateRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "loadingTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'loadingTemplate', {read: TemplateRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { ViewChild, TemplateRef } from '@angular/core';\nimport { ServiceStatus } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-service-availability',\n  templateUrl: './service-availability.component.html',\n  styleUrls: ['./service-availability.component.css'],\n})\nexport class ServiceAvailabilityComponent implements OnChanges {\n  @Input() status: ServiceStatus;\n  @Input() name: string;\n  @Input() error: string;\n\n  activeTemplate: TemplateRef<any>;\n\n  @ViewChild('loadingTemplate', { read: TemplateRef, static: true })\n  loadingTemplate;\n  @ViewChild('errorTemplate', { read: TemplateRef, static: true })\n  errorTemplate;\n  @ViewChild('alertTemplate', { read: TemplateRef, static: true })\n  alertTemplate;\n  @ViewChild('contentTemplate', { read: TemplateRef, static: true })\n  contentTemplate;\n\n  ngOnChanges(changes: SimpleChanges) {\n    const status =\n      (changes.status && changes.status.currentValue) || this.status;\n    switch (status) {\n      case ServiceStatus.AVAILABLE:\n        this.activeTemplate = this.contentTemplate;\n        break;\n      case ServiceStatus.CLOSED_FOR_OSS:\n        this.activeTemplate = this.alertTemplate;\n        break;\n      case ServiceStatus.FAILED:\n        this.activeTemplate = this.errorTemplate;\n        break;\n      default:\n        this.activeTemplate = this.loadingTemplate;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./service-availability.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<ng-container [ngTemplateOutlet]=\"activeTemplate\"></ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"loading\" #loading>\n    Loading ...\n  </div>\n</ng-template>\n\n<ng-template #errorTemplate>\n  <hs-error-message>\n    <div>{{ error }}</div>\n  </hs-error-message>\n</ng-template>\n\n<ng-template #alertTemplate>\n  <hs-alert-message>\n    {{ name }} isn't available in OSS yet. But you can make request for a\n    <a href=\"https://hydrosphere.io/\">demo</a>\n  </hs-alert-message>\n</ng-template>\n\n<ng-template #contentTemplate>\n  <ng-content></ng-content>\n</ng-template>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-b8ff5318022c1b2284c8fa6cdb678ca3",
            "file": "src/app/shared/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Application | Model | DeploymentConfig"
                },
                {
                    "name": "sidebarData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "Application[] | Model[] | DeploymentConfig[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "bookmarked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<Model | Application | DeploymentConfig>"
                },
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<Model | Application | DeploymentConfig>"
                },
                {
                    "name": "filtered",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'.button', {static: true}"
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "defaultValue": "new Subject<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<any>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "hide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'.hide', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "Model | Application | DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Model | Application | DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleBookmark",
                    "args": [
                        {
                            "name": "item",
                            "type": "Model | Application | DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "Model | Application | DeploymentConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "withHeader",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  ContentChild,\n  ElementRef,\n} from '@angular/core';\nimport { HydroConfigService } from '@app/core/hydro-config.service';\nimport { FormControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { Application, Model, DeploymentConfig } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss'],\n})\nexport class SidebarComponent implements AfterViewInit, OnDestroy {\n  @Input() sidebarData: Application[] | Model[] | DeploymentConfig[] = [];\n  @Input() selectedItem: Application | Model | DeploymentConfig;\n  @Output() clicked: EventEmitter<Model | Application | DeploymentConfig> =\n    new EventEmitter();\n  @Output() filtered: EventEmitter<string> = new EventEmitter();\n  @Output() bookmarked: EventEmitter<Model | Application | DeploymentConfig> =\n    new EventEmitter();\n\n  @ContentChild('.button', { static: true }) button: ElementRef;\n  @ContentChild('.hide', { static: true }) hide: ElementRef;\n\n  filter: FormControl = new FormControl('');\n  private destroy: Subject<any> = new Subject<any>();\n\n  constructor(private readonly config: HydroConfigService) {}\n\n  ngAfterViewInit(): void {\n    this.filter.valueChanges.pipe(takeUntil(this.destroy)).subscribe(val => {\n      this.filtered.next(val);\n    });\n  }\n\n  toggleBookmark(item: Model | Application | DeploymentConfig): void {\n    event.stopPropagation();\n    this.bookmarked.emit(item);\n  }\n\n  handleClick(item: Model | Application | DeploymentConfig): void {\n    this.clicked.emit(item);\n  }\n\n  get isEmpty(): boolean {\n    return this.sidebarData === null || this.sidebarData.length === 0;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy.next();\n    this.destroy.complete();\n  }\n\n  withHeader(): boolean {\n    return this.config.config.showHeader;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n:host {\n  height: 100%;\n  overflow-y: scroll;\n}\n\n.sidebar {\n  position: relative;\n  background: white;\n  height: 100%;\n  overflow: auto;\n  box-shadow: -6px 0px 8px 3px $neutral-color-600;\n  &--with-header {\n    height: calc(100% - #{$headerHeight});\n  }\n  &__button {\n    width: 100%;\n    margin-bottom: 12px;\n  }\n  &__header {\n    position: sticky;\n    top: 0;\n    z-index: 1;\n    background: white;\n    padding: 12px;\n  }\n  &__list {\n    overflow: auto;\n  }\n\n  &__item {\n    font-family: $font-family-light;\n    display: flex;\n    align-items: center;\n    position: relative;\n    cursor: pointer;\n    padding: 12px 12px 12px 32px;\n    transition: 0.3s ease all;\n    color: $neutral-color-500;\n    border-top: 1px $neutral-color-100 solid;\n    &:hover,\n    &--selected {\n      color: $primary-color-700;\n      font-family: $font-family-bold;\n    }\n  }\n\n  &__name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: 100%;\n  }\n\n  &__status {\n    margin-left: 8px;\n  }\n\n  &__bookmark {\n    position: absolute;\n    top: -1px;\n    left: 0;\n    margin-right: 4px;\n    width: 24px;\n    height: 24px;\n    color: $neutral-color-200;\n    transition: 0.3s ease all;\n    opacity: 0.5;\n\n    &:hover,\n    &--selected {\n      opacity: 1;\n      color: $accent-color-600;\n    }\n\n    &--selected {\n      &:hover {\n        color: $neutral-color-200;\n      }\n    }\n  }\n\n  &__message {\n    color: $neutral-color-500;\n    text-align: center;\n    font-family: $font-family-regular;\n  }\n}\n",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "HydroConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "HydroConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "accessors": {
                "isEmpty": {
                    "name": "isEmpty",
                    "getSignature": {
                        "name": "isEmpty",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 54
                    }
                }
            },
            "templateData": "<aside class=\"sidebar\" [ngClass]=\"{ 'sidebar--with-header': withHeader() }\">\n  <div class=\"sidebar__header\">\n    <div class=\"sidebar__button\">\n      <ng-content select=\".button\"></ng-content>\n    </div>\n    <div class=\"sidebar__input\">\n      <hs-input-text\n        [formControl]=\"filter\"\n        icon=\"icon-search\"\n      ></hs-input-text>\n    </div>\n    <div class=\"sidebar__hide\">\n      <ng-content select=\".hide\"></ng-content>\n    </div>\n  </div>\n  <ng-container *ngIf=\"!isEmpty; else message\">\n    <div class=\"sidebar__list\">\n      <div\n        class=\"sidebar__item\"\n        *ngFor=\"let item of sidebarData\"\n        (click)=\"handleClick(item)\"\n        [ngClass]=\"{\n          'sidebar__item--selected': selectedItem\n            ? selectedItem.name === item.name\n            : null\n        }\"\n      >\n        <hs-icon\n          type=\"bookmark\"\n          class=\"sidebar__bookmark\"\n          (click)=\"toggleBookmark(item)\"\n          [ngClass]=\"{ 'sidebar__bookmark--selected': item.favorite }\"\n        ></hs-icon>\n        <span class=\"sidebar__name\">{{ item.name }}</span>\n        <span *ngIf=\"item.status\" class=\"sidebar__status\">\n          <hs-application-status [status]=\"item.status\"></hs-application-status>\n        </span>\n      </div>\n    </div>\n  </ng-container>\n</aside>\n\n<ng-template #message>\n  <div class=\"sidebar__message\">list is empty</div>\n</ng-template>\n"
        },
        {
            "name": "SignaturesComponent",
            "id": "component-SignaturesComponent-46cc1c1a6d66e76edb211c78d2ff3918",
            "file": "src/testing/components/mock-signatures.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-signatures",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "signature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "Signature"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Signature } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-signatures',\n  template: '',\n})\nexport class SignaturesComponent {\n  @Input() signature: Signature;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SignaturesComponent",
            "id": "component-SignaturesComponent-e520fea8135de027ee9c1cf8a5f650c6-1",
            "file": "src/app/modules/model-version/components/signatures/signatures.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-signatures",
            "styleUrls": [
                "./signatures.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./signatures.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fields",
                    "defaultValue": "new Map([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "Map<string | string[]>"
                },
                {
                    "name": "signature",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Signature"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { Signature } from '@app/core/data/types';\n\n@Component({\n  selector: 'hs-signatures',\n  templateUrl: './signatures.component.html',\n  styleUrls: ['./signatures.component.scss'],\n})\nexport class SignaturesComponent {\n  @Input() signature: Signature;\n  @Input() fields: Map<string, string[]> = new Map([]);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables.scss';\n\n.signatures {\n  &__title {\n    text-transform: uppercase;\n    font-weight: 600;\n    font-size: 16px;\n    line-height: 32px;\n    padding: 0;\n    margin: 0;\n  }\n}\n\n.signature {\n  margin-bottom: 12px;\n  &__name {\n    border-bottom: 1px #e6e9ed solid;\n    display: inline-block;\n    font-size: 16px;\n    line-height: 44px;\n    margin-bottom: 4px;\n    padding: 0px;\n    margin: 0;\n    width: 100%;\n  }\n}\n\n.fields-table {\n  width: 100%;\n  font-size: 14px;\n  border-collapse: collapse;\n  &__row {\n    line-height: 28px;\n    color: $neutral-color-1000;\n    font-family: $font-family-light;\n    &--labels {\n      font-size: 12px;\n      font-family: $font-family-bold;\n      color: $neutral-color-1000;\n    }\n  }\n  &__cell {\n    padding: 0 4px; \n  }\n  &__icon {\n    height: 18px;\n    cursor: pointer;\n    width: 18px;\n    margin: 0 12px;\n    color: $supportive-color-cyan-700;\n    transition: .3s all ease;\n    &:hover {\n      color: $supportive-color-cyan-900;\n    }\n  }\n  &__link {\n    cursor: pointer;\n    border-bottom: 1px $primary-color-800 solid;\n    color: $primary-color-800;\n  }\n}\n\n.shape {\n  &--anyType {\n    border-bottom: 2px black dotted;\n    cursor: default;\n  }\n}",
                    "styleUrl": "./signatures.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SignaturesComponent-1",
            "templateData": "<div class=\"signatures\" *ngIf=\"signature\">\n  <div class=\"signature\">\n    <h6 class=\"signature__name\">\n      {{ signature.signatureName }}\n    </h6>\n\n    <table class=\"fields-table\">\n      <tr class=\"fields-table__row fields-table__row--labels\">\n        <td class=\"fields-table__cell\">input_field_name</td>\n        <td class=\"fields-table__cell\">input_data_type</td>\n        <td class=\"fields-table__cell\">input_shape</td>\n        <td class=\"fields-table__cell\">input_profile</td>\n      </tr>\n      <ng-container *ngFor=\"let field of signature.inputs\">\n        <ng-container\n          *ngTemplateOutlet=\"fieldRow; context: field\"\n        ></ng-container>\n      </ng-container>\n      <tr class=\"fields-table__row fields-table__row--labels\">\n        <td class=\"fields-table__cell\">output_field_name</td>\n        <td class=\"fields-table__cell\">output_data_type</td>\n        <td class=\"fields-table__cell\">output_shape</td>\n        <td class=\"fields-table__cell\">output_profile</td>\n      </tr>\n      <ng-container *ngFor=\"let field of signature.outputs\">\n        <ng-container\n          *ngTemplateOutlet=\"fieldRow; context: field\"\n        ></ng-container>\n      </ng-container>\n    </table>\n  </div>\n\n  <ng-template\n    #fieldRow\n    let-name=\"name\"\n    let-dtype=\"dtype\"\n    let-shape=\"shape\"\n    let-subfields=\"subfields\"\n    let-profile=\"profile\"\n  >\n    <tr class=\"fields-table__row\">\n      <td class=\"fields-table__cell\">\n        {{ name }}\n      </td>\n      <td class=\"fields-table__cell\">{{ dtype }}</td>\n      <td class=\"fields-table__cell\">{{ shape | fieldShape }}</td>\n      <td class=\"fields-table__cell\">\n        {{ profile }}\n        <span\n          *ngIf=\"profile === 'NUMERICAL' && fields && fields.has(name)\"\n          class=\"fields-table__icon\"\n          [routerLink]=\"['profile', fields.get(name)[0]]\"\n          queryParamsHandling=\"merge\"\n        >\n          <hs-icon type=\"profiler\" class=\"fields-table__icon\"></hs-icon>\n        </span>\n      </td>\n    </tr>\n    <ng-container *ngIf=\"subfields && subfields.length > 0\">\n      <ng-container *ngFor=\"let subfield of subfields\">\n        <ng-container\n          *ngTemplateOutlet=\"fieldRow; context: subfield\"\n        ></ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-template>\n</div>\n"
        },
        {
            "name": "StatAvailabilityComponent",
            "id": "component-StatAvailabilityComponent-38647c2aeda1761833fe2b09ca71db7c",
            "file": "src/app/modules/stat/containers/stat-availability/stat-availability.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-stat-availability",
            "styleUrls": [],
            "styles": [],
            "template": "<hs-service-availability    *ngIf=\"status$ | async as status\"\n    [error]=\"status.message\"\n    [name]=\"'Stat'\"\n    [status]=\"status.status\"\n  >\n    <ng-content></ng-content>\n  </hs-service-availability>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BuildInfo>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  BuildInfo,\n  BuildInformationService,\n} from '@app/core/build-information.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'hs-stat-availability',\n  template: `<hs-service-availability\n    *ngIf=\"status$ | async as status\"\n    [error]=\"status.message\"\n    [name]=\"'Stat'\"\n    [status]=\"status.status\"\n  >\n    <ng-content></ng-content>\n  </hs-service-availability> `,\n})\nexport class StatAvailabilityComponent implements OnInit {\n  status$: Observable<BuildInfo>;\n\n  constructor(private buildInfo: BuildInformationService) {}\n\n  ngOnInit() {\n    this.status$ = this.buildInfo.getStatus('stat');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "StatPageComponent",
            "id": "component-StatPageComponent-899591d0f70efd4383669791c1d4ed22",
            "file": "src/app/modules/stat/containers/stat-page/stat-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "StatState"
                },
                {
                    "name": "StatFacade"
                }
            ],
            "styleUrls": [
                "./stat-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stat-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stat$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Stat>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ModelVersion } from '@app/core/data/types';\nimport { Stat } from '../../models';\nimport { StatFacade } from '../../stat.facade';\nimport { StatState } from '../../store/stat.state';\n\n@Component({\n  templateUrl: './stat-page.component.html',\n  styleUrls: ['./stat-page.component.scss'],\n  providers: [StatState, StatFacade],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StatPageComponent implements OnInit {\n  stat$: Observable<Stat>;\n  error$: Observable<string>;\n  modelVersion$: Observable<ModelVersion>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private statFacade: StatFacade) {}\n\n  ngOnInit() {\n    this.modelVersion$ = this.statFacade.getModelVersion();\n    this.error$ = this.statFacade.getError();\n    this.stat$ = this.statFacade.getStat();\n    this.isLoading$ = this.statFacade.isLoading();\n\n    this.statFacade.loadStat();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n.stat {\n  padding: 24px;\n  &__body {\n    width: 100%;\n  }\n}\n.stat__loader {\n  display: flex;\n  justify-content: center;\n  &-icon {\n    width: 40px;\n    height: 40px;\n  }\n}\n.report {\n  margin-bottom: 24px;\n\n  &__overall {\n    align-items: center;\n    color: $neutral-color-900;\n    display: flex;\n    font-family: $font-family-light;\n    font-size: 16px;\n    line-height: 22px;\n\n    &-drift {\n      font-family: $font-family-bold;\n      padding-right: 8px;\n    }\n\n    &-decision {\n      margin-left: 4px;\n    }\n  }\n\n  &__title {\n    color: $neutral-color-1000;\n    font-family: $font-family-bold;\n    font-size: 16px;\n    line-height: 32px;\n  }\n\n  &__body {\n    background: white;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 4px;\n    padding: 24px;\n  }\n\n  &__warnings {\n  }\n\n  &__warning {\n    align-items: center;\n    background: $neutral-color-100;\n    border-radius: 24px;\n    display: flex;\n    padding: 6px;\n\n    &-drift {\n      font-family: $font-family-bold;\n    }\n\n    &-status {\n      margin-right: 12px;\n    }\n\n    &-msg {\n      color: $neutral-color-700;\n    }\n    &-icon {\n      width: 28px;\n      height: 28px;\n      margin-right: 8px;\n    }\n  }\n\n  &__warning + &__warning {\n    margin-top: 12px;\n  }\n}\n\n.feature-analysis {\n  margin-bottom: 24px;\n\n  &__title {\n    color: $neutral-color-1000;\n    font-family: $font-family-bold;\n    font-size: 16px;\n    line-height: 32px;\n  }\n\n  &__body {\n    background: white;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 4px;\n    padding: 24px;\n  }\n}\n",
                    "styleUrl": "./stat-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "statFacade",
                        "type": "StatFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "statFacade",
                        "type": "StatFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"stat\">\n  <div class=\"stat__loader\" *ngIf=\"isLoading$ | async; else bodySection\">\n    <hs-loader class=\"stat__loader-icon\"></hs-loader>\n  </div>\n</div>\n\n<ng-template #bodySection>\n  <div class=\"stat__body\">\n    <hs-error-message *ngIf=\"error$ | async as error; else report\"\n      >{{ error }}</hs-error-message\n    >\n  </div>\n</ng-template>\n\n<ng-template #report>\n  <div class=\"report\">\n    <div class=\"report__title\">Report</div>\n    <div class=\"report__body\">\n      <div class=\"report__overall\">\n        <div>\n          Overall drift's status\n        </div>\n        <div class=\"report__overall-decision\">\n          <hs-drift-status\n            [drift]=\"(stat$ | async)?.overall_probability_drift\"\n            [justIcon]=\"false\"\n          ></hs-drift-status>\n          <!--          <span-->\n          <!--            class=\"report__overall-decision-text\"-->\n          <!--            *ngIf=\"(stat$ | async)?.warnings.final_decision as decision\"-->\n          <!--            >{{ decision }}</span-->\n          <!--          >-->\n        </div>\n      </div>\n      <div class=\"report__warnings\">\n        <div\n          *ngFor=\"let warning of (stat$ | async)?.warnings.report\"\n          class=\"report__warning\"\n        >\n          <span [drift]=\"warning.drift_probability_per_feature\" hsColorByDrift>\n            <hs-icon\n              class=\"report__warning-icon\"\n              type=\"icon-error-outline\"\n            ></hs-icon>\n          </span>\n          <div class=\"report__warning-msg\">\n            {{ warning.message }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div class=\"feature-analysis\">\n    <div class=\"feature-analysis__title\">Feature Analysis</div>\n    <div class=\"feature-analysis__body\">\n      <hs-feature-report\n        [perFeatureReport]=\"(stat$ | async)?.per_feature_report\"\n      ></hs-feature-report>\n    </div>\n  </div>\n</ng-template>\n"
        },
        {
            "name": "TensorImageListComponent",
            "id": "component-TensorImageListComponent-49460d5fe09ae42d864664f499568efe",
            "file": "src/app/shared/components/tensor-image-list/tensor-image-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-tensor-image-list",
            "styleUrls": [
                "./tensor-image-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tensor-image-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pixels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                },
                {
                    "name": "tensorProto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elementsForRGBA",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "imageHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "imagePixelsArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[][]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "imagesCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "imageWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "partitionArrayBySize",
                    "args": [
                        {
                            "name": "arr",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "size",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redraw",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { ImageHelperService } from '@app/core/image-helper.service';\n\n@Component({\n  selector: 'hs-tensor-image-list',\n  templateUrl: './tensor-image-list.component.html',\n  styleUrls: ['./tensor-image-list.component.scss'],\n})\nexport class TensorImageListComponent implements OnChanges {\n  @Input() pixels;\n  @Input() tensorProto;\n  imagesCount: number;\n  imageWidth: number;\n  imageHeight: number;\n  imagePixelsArray: number[][];\n\n  readonly elementsForRGBA = 4;\n  constructor(private imageHelper: ImageHelperService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.pixels || changes.tensorProto) {\n      this.redraw();\n    }\n  }\n  private redraw() {\n    let dim;\n    try {\n      dim = this.tensorProto.dim;\n      const [imagesCount, imageWidth, imageHeight] = dim;\n      this.imagesCount = imagesCount.size;\n      this.imageWidth = imageWidth.size;\n      this.imageHeight = imageHeight.size;\n\n      const pixels = this.pixels;\n      let arrayOfRGBAPixels;\n\n      try {\n        arrayOfRGBAPixels = this.imageHelper.transformToRGBA({\n          pixels,\n          imageWidth: this.imageWidth,\n          imageHeight: this.imageHeight,\n          batchSize: this.imagesCount,\n        });\n        try {\n          const RGBAPixels =\n            this.imageWidth * this.imageHeight * this.elementsForRGBA;\n          this.imagePixelsArray = this.partitionArrayBySize(\n            arrayOfRGBAPixels,\n            RGBAPixels\n          );\n        } catch (error) {\n          throw Error('Cant split data');\n        }\n      } catch (err) {\n        console.dir(err);\n      }\n    } catch (error) {\n      throw Error('Did not found dim property in tensorShape');\n    }\n  }\n\n  private partitionArrayBySize(arr, size): number[][] {\n    let offset = 0;\n    const arrLength = arr.length;\n    const res = [];\n\n    while (offset < arrLength) {\n      res.push(arr.slice(offset, offset + size));\n      offset += size;\n    }\n\n    return res;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".images {\n    min-width: 100px;\n    min-height: 100px;\n    text-align: left;\n    &__item {\n        margin-right: 8px;\n        margin-bottom: 8px;\n    }\n}",
                    "styleUrl": "./tensor-image-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "imageHelper",
                        "type": "ImageHelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "imageHelper",
                        "type": "ImageHelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"images\">\n  <ng-container *ngFor=\"let imagePixels of imagePixelsArray\">\n    <canvas\n      class=\"images__item\"\n      hsPixelToCanvas\n      hsScaleImage\n      [pixels]=\"imagePixels\"\n      [width]=\"imageWidth\"\n      [height]=\"imageHeight\"\n    ></canvas>\n  </ng-container>\n</div>\n"
        },
        {
            "name": "TimeIntervalSelectComponent",
            "id": "component-TimeIntervalSelectComponent-668c33a534cc35cb8a6b6fa6554a9d51",
            "file": "src/app/modules/monitoring/components/time-interval-select/time-interval-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-time-interval-select",
            "styleUrls": [
                "time-interval-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "time-interval-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "changed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chartTimeWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "chartTimeWidthParams",
                    "defaultValue": "[\n    { ms: 900000, text: '15 minutes' },\n    { ms: 1800000, text: '30 minutes' },\n    { ms: 3600000, text: '1 hour' },\n    { ms: 7200000, text: '2 hours' },\n    { ms: 14400000, text: '4 hours' },\n    { ms: 86400000, text: '1 day' },\n    { ms: 604800000, text: '1 week' },\n    { ms: 0, text: 'All time' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "onChangeTimeWidth",
                    "args": [
                        {
                            "name": "timeWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timeWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'hs-time-interval-select',\n  templateUrl: 'time-interval-select.component.html',\n  styleUrls: ['time-interval-select.component.scss'],\n})\nexport class TimeIntervalSelectComponent {\n  chartTimeWidthParams: Array<{ ms: number; text: string }> = [\n    { ms: 900000, text: '15 minutes' },\n    { ms: 1800000, text: '30 minutes' },\n    { ms: 3600000, text: '1 hour' },\n    { ms: 7200000, text: '2 hours' },\n    { ms: 14400000, text: '4 hours' },\n    { ms: 86400000, text: '1 day' },\n    { ms: 604800000, text: '1 week' },\n    { ms: 0, text: 'All time' },\n  ];\n\n  chartTimeWidth = 0;\n  @Output() changed: EventEmitter<number> = new EventEmitter();\n\n  onChangeTimeWidth(timeWidth: number): void {\n    this.changed.emit(timeWidth);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.time-interval {\n  &__label {\n    margin: 0;\n    font-size: 12px;\n    font-style: italic;\n    font-family: $font-family-light;\n    color: $neutral-color-500;\n  }\n}",
                    "styleUrl": "time-interval-select.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"time-interval\">\n  <label class=\"time-interval__label\">Time interval: </label>\n  <mdl-select\n    class=\"time-interval__select\"\n    label=\"Chart time window\"\n    [(ngModel)]=\"chartTimeWidth\"\n    (change)=\"onChangeTimeWidth($event)\"\n  >\n    <mdl-option *ngFor=\"let param of chartTimeWidthParams\" [value]=\"param.ms\"\n      >{{ param.text }}</mdl-option\n    >\n  </mdl-select>\n</div>\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-93446a20f303639c98f1f43a9334d046",
            "file": "src/app/shared/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hs-tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "container",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container', {read: ViewContainerRef, static: true}"
                        }
                    ]
                },
                {
                    "name": "hidden",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tpl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tpl', {read: TemplateRef, static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  ViewContainerRef,\n  ViewChild,\n  TemplateRef,\n  OnInit,\n  HostListener,\n} from '@angular/core';\n\n@Component({\n  selector: 'hs-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent implements OnInit {\n  hidden: boolean = true;\n  @Input() 'hs-tooltip': string = '';\n  @ViewChild('tpl', { read: TemplateRef, static: true }) tpl: TemplateRef<any>;\n  @ViewChild('container', { read: ViewContainerRef, static: true })\n  container: ViewContainerRef;\n\n  get text(): string {\n    return this['hs-tooltip'];\n  }\n\n  ngOnInit(): void {\n    this.container.createEmbeddedView(this.tpl);\n  }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.hidden = false;\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    this.hidden = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.tooltip-wrapper {\n  position: relative;\n}\n\n.tooltip {\n  position: absolute;\n  left: 0;\n  top: calc(100% + 6px);\n  background: $neutral-color-200;\n  color: $neutral-color-900;\n  padding: 6px;\n  line-height: 14px;\n  border-radius: 4px;\n  transition: 0.4s ease all;\n  transform: translateY(0px);\n  opacity: 1;\n  z-index: 2;\n  visibility: visible;\n  max-width: 480px;\n  max-height: 480px;\n  min-width: 120px;\n  overflow: auto;\n  &::before {\n    content: '';\n    display: block;\n    height: 8px;\n    width: 8px;\n    position: absolute;\n    background: $neutral-color-200;\n    transform: rotate(45deg);\n    top: -4px;\n  }\n  &--is-hidden {\n    transition: 0.3s ease all;\n    transform: translateY(15px);\n    opacity: 0;\n    visibility: hidden;\n  }\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "text": {
                    "name": "text",
                    "getSignature": {
                        "name": "text",
                        "type": "string",
                        "returnType": "string",
                        "line": 23
                    }
                }
            },
            "templateData": "<ng-content></ng-content>\n<div class=\"tooltip-wrapper\">\n  <ng-template #tpl>\n    <span class=\"tooltip\" [ngClass]=\"{ 'tooltip--is-hidden': hidden }\"\n      >{{ text }}</span\n    ></ng-template\n  >\n  <ng-container #container></ng-container>\n</div>\n"
        },
        {
            "name": "VisualizationAvailabilityComponent",
            "id": "component-VisualizationAvailabilityComponent-4702943d0dce6f0dbf55d99b02bbf645",
            "file": "src/app/modules/visualization/containers/visualization-availability/visualization-availability.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-visualization-availability",
            "styleUrls": [],
            "styles": [],
            "template": "<hs-service-availability    *ngIf=\"status$ | async as status\"\n    [error]=\"status.message\"\n    [name]=\"'Visualization'\"\n    [status]=\"status.status\"\n  >\n    <ng-content></ng-content>\n  </hs-service-availability>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "status$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<BuildInfo>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  BuildInfo,\n  BuildInformationService,\n} from '@app/core/build-information.service';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'hs-visualization-availability',\n  template: `<hs-service-availability\n    *ngIf=\"status$ | async as status\"\n    [error]=\"status.message\"\n    [name]=\"'Visualization'\"\n    [status]=\"status.status\"\n  >\n    <ng-content></ng-content>\n  </hs-service-availability> `,\n})\nexport class VisualizationAvailabilityComponent implements OnInit {\n  status$: Observable<BuildInfo>;\n\n  constructor(private buildInfo: BuildInformationService) {}\n\n  ngOnInit() {\n    this.status$ = this.buildInfo.getStatus('visualization');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "buildInfo",
                        "type": "BuildInformationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "VisualizationMetricsComponent",
            "id": "component-VisualizationMetricsComponent-411c23cd6a74ec9f9e55d1e750837d89",
            "file": "src/testing/components/visualization/mock-visualization-metrics.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-visualization-metrics",
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "visualizationMetrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-visualization-metrics',\n  template: '',\n})\nexport class VisualizationMetricsComponent {\n  @Input() visualizationMetrics: any;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "VisualizationMetricsComponent",
            "id": "component-VisualizationMetricsComponent-d0cccc2eaae9a5753cf6e2655681fcd5-1",
            "file": "src/app/modules/visualization/components/visualization-metrics/visualization-metrics.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-visualization-metrics",
            "styleUrls": [
                "./visualization-metrics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./visualization-metrics.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "visualizationMetrics",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "literal type"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'hs-visualization-metrics',\n  templateUrl: './visualization-metrics.component.html',\n  styleUrls: ['./visualization-metrics.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VisualizationMetricsComponent {\n  @Input() visualizationMetrics: { [name: string]: string };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.visualization-metrics {\n  display: flex;\n  flex-direction: column;\n  &__title {\n    color: $neutral-color-800;\n    font-family: $font-family-bold;\n    line-height: 24px;\n    font-size: 12px;\n  }\n  &__item {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n    &-label {\n      color: $neutral-color-700;\n      font-size: 12px;\n    }\n\n    &-value {\n      color: $neutral-color-800;\n      font-family: $font-family-bold;\n      font-size: 12px;\n      line-height: 24px;\n    }\n\n    & + & {\n      margin-top: 4px;\n    }\n  }\n}\n",
                    "styleUrl": "./visualization-metrics.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "VisualizationMetricsComponent-1",
            "templateData": "<div class=\"visualization-metrics\">\n  <div class=\"visualization-metrics__title\">Evaluation</div>\n  <div\n    class=\"visualization-metrics__item\"\n    *ngFor=\"let item of visualizationMetrics | keyvalue\"\n  >\n    <div class=\"visualization-metrics__item-label\">{{ item.key }}</div>\n    <div class=\"visualization-metrics__item-value\">\n      {{ item.value | number: '1.0-5' }}\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "VisualizationPageComponent",
            "id": "component-VisualizationPageComponent-d4b42007734a2e5be61b12cf46a10cb6",
            "file": "src/app/modules/visualization/containers/visualization-page/visualization-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "VisualizationState"
                },
                {
                    "name": "VisualizationFacade"
                }
            ],
            "selector": "hs-visualization",
            "styleUrls": [
                "./visualization-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./visualization-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorizer$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Colorizer>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "colorizers$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Colorizer[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "colors$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "counterfactuals$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[][]>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "linkRegime",
                    "defaultValue": "'nearest'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LinkRegime",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "message$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "modelVersion$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ModelVersion>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "params$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<VisualizationParams>",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "result$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "scatterPlotData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ScatterPlotData>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectedCheck$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Check>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "showTrainData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "status$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "taskId$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "top100$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<[][]>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "visualizationMetrics$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "handleSelectPoint",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeColorizer",
                    "args": [
                        {
                            "name": "colorizer",
                            "type": "Colorizer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorizer",
                            "type": "Colorizer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeShowTrainData",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRefit",
                    "args": [
                        {
                            "name": "visParams",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "visParams",
                            "type": "VisualizationParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retryRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ScatterPlotData } from '../../models/scatter-plot-data.model';\nimport { Observable } from 'rxjs';\nimport { ModelVersion } from '@app/core/data/types';\n\nimport { Check } from '../../../monitoring/models';\n\nimport { Colorizer, VisualizationParams, LinkRegime } from '../../models';\nimport { VisualizationFacade } from '../../visualization.facade';\nimport { VisualizationState } from '../../store';\n\n@Component({\n  selector: 'hs-visualization',\n  templateUrl: './visualization-page.component.html',\n  styleUrls: ['./visualization-page.component.scss'],\n  providers: [VisualizationState, VisualizationFacade],\n})\nexport class VisualizationPageComponent implements OnInit {\n  selectedCheck$: Observable<Check>;\n  modelVersion$: Observable<ModelVersion>;\n  taskId$: Observable<string>;\n  status$: Observable<string>;\n  result$: Observable<any>;\n  error$: Observable<string | null>;\n  colors$: Observable<string[]>;\n  top100$: Observable<number[][]>;\n  counterfactuals$: Observable<number[][]>;\n  scatterPlotData$: Observable<ScatterPlotData>;\n  colorizers$: Observable<Colorizer[]>;\n  colorizer$: Observable<Colorizer>;\n  visualizationMetrics$: Observable<{ [name: string]: string }>;\n  selectedId$: Observable<string>;\n  message$: Observable<string>;\n  linkRegime: LinkRegime = 'nearest';\n  showTrainData: boolean;\n  params$: Observable<VisualizationParams>;\n\n  constructor(private service: VisualizationFacade) {}\n\n  ngOnInit(): void {\n    this.taskId$ = this.service.getTaskId();\n    this.status$ = this.service.getStatus();\n    this.result$ = this.service.getResult();\n    this.scatterPlotData$ = this.service.getScatterPlotData();\n    this.error$ = this.service.getError();\n    this.colors$ = this.service.getColors();\n    this.top100$ = this.service.getTop100();\n    this.modelVersion$ = this.service.getModelVersion();\n    this.selectedCheck$ = this.service.getSelectedCheck();\n    this.colorizers$ = this.service.getColorizers();\n    this.colorizer$ = this.service.getSelectedColorizer();\n    this.counterfactuals$ = this.service.getCounterfactuals();\n    this.visualizationMetrics$ = this.service.getVisualizationMetrics();\n    this.selectedId$ = this.service.getSelectedId();\n    this.message$ = this.service.getMessage();\n    this.params$ = this.service.getParams();\n\n    this.service.loadEmbedding();\n  }\n\n  handleSelectPoint(index: number) {\n    this.service.changeSelectedPointIndex(index);\n  }\n\n  onChangeColorizer(colorizer: Colorizer): void {\n    this.service.changeColorizer(colorizer);\n  }\n\n  retryRequest(): void {\n    this.service.loadEmbedding();\n  }\n\n  onChangeShowTrainData(value: boolean) {\n    this.showTrainData = value;\n  }\n\n  onRefit(visParams: VisualizationParams) {\n    this.service.refit(visParams);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.visualization {\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n\n  &__loader {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin: auto;\n    width: 100%;\n\n    &-icon {\n      width: 40px;\n      height: 40px;\n    }\n\n    &-status {\n      font-style: italic;\n      color: $neutral-color-500;\n      font-family: $font-family-light;\n    }\n  }\n\n  &__error {\n    margin: auto;\n    max-width: 640px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    &-icon {\n      height: 64px;\n      width: 64px;\n      color: $supportive-color-red-500;\n    }\n\n    &-message {\n      margin: 24px 0;\n    }\n\n    &-button {\n    }\n  }\n\n  &__header {\n    margin-bottom: 24px;\n  }\n\n  &__body {\n    display: flex;\n    flex-wrap: wrap;\n    overflow: auto;\n    max-height: calc(100% + 24px);\n  }\n\n  &__chart {\n    display: flex;\n    background: white;\n    border-radius: 4px;\n    border: 1px $neutral-color-200 solid;\n    box-shadow: -4px 4px 8px -8px $neutral-color-500;\n    padding: 0 24px 24px 24px;\n    width: 100%;\n    margin-bottom: 24px;\n  }\n\n  &__scores {\n    margin-top: 24px;\n  }\n\n  &__params {\n    margin-top: 24px;\n  }\n\n  &__scatterplot {\n    margin-right: 24px;\n    width: 100%;\n\n    &-legend {\n      margin-left: 24px;\n    }\n  }\n\n  &__settings {\n    margin-right: 24px;\n    margin-top: 24px;\n    min-width: 200px;\n    width: 200px;\n    &-regimes {\n      display: flex;\n      flex-direction: column;\n      margin-bottom: 12px;\n    }\n    &-item {\n      display: block;\n      margin-bottom: 18px;\n    }\n\n    &-label {\n      font-size: 12px;\n      color: $neutral-color-800;\n      text-transform: capitalize;\n    }\n  }\n\n  &__circle {\n    opacity: 0.5;\n\n    &:hover {\n      opacity: 1;\n    }\n  }\n\n  &__detail {\n    width: 100%;\n    border: 1px $neutral-color-200 solid;\n    border-radius: 4px;\n    background: white;\n    padding: 12px;\n    box-shadow: -4px 4px 8px -8px $neutral-color-500;\n    &-alert {\n      text-align: center;\n      color: $neutral-color-900;\n    }\n  }\n\n  .colorizer {\n    font-size: 12px;\n\n    &__type {\n      font-family: $font-family-bold;\n      color: $neutral-color-900;\n    }\n  }\n}\n\n@keyframes blink {\n  0% {\n    color: $neutral-color-100;\n  }\n\n  100% {\n    color: $neutral-color-300;\n  }\n}\n",
                    "styleUrl": "./visualization-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "VisualizationFacade",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "VisualizationFacade",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"visualization\">\n  <hs-alert-message *ngIf=\"message$ | async as message\"\n    >{{ message }}</hs-alert-message\n  >\n  <div\n    *ngIf=\"(status$ | async) === 'PENDING' || (status$ | async) === 'STARTED'\"\n    class=\"visualization__loader\"\n  >\n    <hs-loader class=\"visualization__loader-icon\"></hs-loader>\n  </div>\n  <div *ngIf=\"(status$ | async) === 'FAILED'\" class=\"visualization__error\">\n    <div class=\"visualization__error-message\">\n      <hs-error-message>\n        {{ error$ | async | json }}\n      </hs-error-message>\n    </div>\n    <button (click)=\"retryRequest()\" color=\"cyan\" hs-button kind=\"flat\">\n      Create new task\n    </button>\n  </div>\n  <div\n    *ngIf=\"(status$ | async) === 'SUCCESS' && !(message$ | async)\"\n    class=\"visualization__body\"\n  >\n    <div class=\"visualization__chart\">\n      <div class=\"visualization__settings\">\n        <div class=\"visualization__settings-item\">\n          <span class=\"visualization__settings-label\">Colorize: </span>\n          <mdl-select\n            (change)=\"onChangeColorizer($event)\"\n            label=\"Choose colorizer\"\n          >\n            <mdl-option\n              *ngFor=\"let colorizer of colorizers$ | async\"\n              [value]=\"colorizer\"\n            >\n              <span class=\"colorizer\">\n                <span class=\"colorizer__type\">{{ colorizer.type }}: </span>{{\n                colorizer.name }}\n              </span></mdl-option\n            >\n          </mdl-select>\n        </div>\n        <div class=\"visualization__settings-regimes\">\n          <span class=\"visualization__settings-label\">Accent points: </span>\n          <mdl-radio\n            *ngFor=\"let regime of ['all', 'nearest', 'counterfactuals']\"\n            [(ngModel)]=\"linkRegime\"\n            [value]=\"regime\"\n            name=\"regime\"\n          >\n            {{ regime }}\n          </mdl-radio>\n        </div>\n        <div>\n          <mdl-checkbox (change)=\"onChangeShowTrainData($event)\"\n            >show training data</mdl-checkbox\n          >\n        </div>\n\n        <div class=\"visualization__params\">\n          <hs-visualization-params\n            *ngIf=\"params$ | async as params\"\n            [params]=\"params\"\n            (refit)=\"onRefit($event)\"\n          >\n          </hs-visualization-params>\n        </div>\n\n        <div class=\"visualization__scores\">\n          <hs-visualization-metrics\n            [visualizationMetrics]=\"visualizationMetrics$ | async\"\n          ></hs-visualization-metrics>\n        </div>\n      </div>\n      <div class=\"visualization__scatterplot\">\n        <hs-scatter-plot\n          (selectPoint)=\"handleSelectPoint($event)\"\n          [colorizer]=\"colorizer$ | async\"\n          [colors]=\"colors$ | async\"\n          [counterfactuals]=\"counterfactuals$ | async\"\n          [data]=\"scatterPlotData$ | async\"\n          [linkRegime]=\"linkRegime\"\n          [top100]=\"top100$ | async\"\n          [showTrainingData]=\"showTrainData\"\n        ></hs-scatter-plot>\n      </div>\n    </div>\n\n    <div *ngIf=\"selectedId$ | async as id\" class=\"visualization__detail\">\n      <ng-container *ngIf=\"selectedCheck$ | async as check; else err\">\n        <hs-log-detail\n          [check]=\"check\"\n          [modelVersion]=\"modelVersion$ | async\"\n        ></hs-log-detail>\n      </ng-container>\n      <ng-template #err>\n        <div class=\"visualization__detail-alert\">\n          Couldn't find request with id: {{ id }}\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "VisualizationParamsComponent",
            "id": "component-VisualizationParamsComponent-7edd8a5c2760e6161b5b2431ab1f619f",
            "file": "src/app/modules/visualization/components/visualization-params/visualization-params.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hs-visualization-params",
            "styleUrls": [
                "./visualization-params.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./visualization-params.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "VisualizationParams"
                }
            ],
            "outputsClass": [
                {
                    "name": "refit",
                    "defaultValue": "new EventEmitter<\n    VisualizationParams\n  >()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<VisualizationParams>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    parameters: this.fb.group({\n      metric: this.fb.control(this.metrics[0], [Validators.required]),\n      min_dist: this.fb.control(0, [\n        Validators.required,\n        Validators.pattern(\n          this.customValidators.VALIDATION_PATTERNS.floatNumber\n        ),\n      ]),\n      n_components: this.fb.control(0, [\n        Validators.required,\n        Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n      ]),\n      n_neighbours: this.fb.control(0, [\n        Validators.required,\n        Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n      ]),\n    }),\n    production_data_sample_size: this.fb.control(0, [\n      Validators.required,\n      Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n    ]),\n    training_data_sample_size: this.fb.control(0, [\n      Validators.required,\n      Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n    ]),\n    visualization_metrics: this.fb.control([], [Validators.required]),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "metrics",
                    "defaultValue": "[\n    'euclidean',\n    'manhattan',\n    'chebyshev',\n    'minkowski',\n    'canberra',\n    'braycurtis',\n    'haversine',\n    'mahalanobis',\n    'wminkowski',\n    'seuclidean',\n    'cosine',\n    'correlation',\n    'hamming',\n    'jaccard',\n    'dice',\n    'russellrao',\n    'kulsinski',\n    'rogerstanimoto',\n    'sokalsneath',\n    'sokalmichener',\n    'yule',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<VisualizationPropertyMetric>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "visualizationMetrics",
                    "defaultValue": "[\n    'global_score',\n    'sammon_error',\n    'auc_score',\n    'stability_score',\n    'msid',\n    'clustering',\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<VisualizationMetric>",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Input,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { CustomValidatorsService } from '@app/core/custom-validators.service';\nimport { FormBuilder, FormArray, Validators } from '@angular/forms';\nimport {\n  VisualizationParams,\n  VisualizationPropertyMetric,\n  VisualizationMetric,\n} from '../../models';\n\n@Component({\n  selector: 'hs-visualization-params',\n  templateUrl: './visualization-params.component.html',\n  styleUrls: ['./visualization-params.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class VisualizationParamsComponent implements OnInit {\n  @Input() params: VisualizationParams;\n  @Output() refit: EventEmitter<VisualizationParams> = new EventEmitter<\n    VisualizationParams\n  >();\n\n  metrics: ReadonlyArray<VisualizationPropertyMetric> = [\n    'euclidean',\n    'manhattan',\n    'chebyshev',\n    'minkowski',\n    'canberra',\n    'braycurtis',\n    'haversine',\n    'mahalanobis',\n    'wminkowski',\n    'seuclidean',\n    'cosine',\n    'correlation',\n    'hamming',\n    'jaccard',\n    'dice',\n    'russellrao',\n    'kulsinski',\n    'rogerstanimoto',\n    'sokalsneath',\n    'sokalmichener',\n    'yule',\n  ];\n\n  visualizationMetrics: ReadonlyArray<VisualizationMetric> = [\n    'global_score',\n    'sammon_error',\n    'auc_score',\n    'stability_score',\n    'msid',\n    'clustering',\n  ];\n\n  public form = this.fb.group({\n    parameters: this.fb.group({\n      metric: this.fb.control(this.metrics[0], [Validators.required]),\n      min_dist: this.fb.control(0, [\n        Validators.required,\n        Validators.pattern(\n          this.customValidators.VALIDATION_PATTERNS.floatNumber\n        ),\n      ]),\n      n_components: this.fb.control(0, [\n        Validators.required,\n        Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n      ]),\n      n_neighbours: this.fb.control(0, [\n        Validators.required,\n        Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n      ]),\n    }),\n    production_data_sample_size: this.fb.control(0, [\n      Validators.required,\n      Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n    ]),\n    training_data_sample_size: this.fb.control(0, [\n      Validators.required,\n      Validators.pattern(this.customValidators.VALIDATION_PATTERNS.number),\n    ]),\n    visualization_metrics: this.fb.control([], [Validators.required]),\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private customValidators: CustomValidatorsService\n  ) {}\n\n  ngOnInit() {\n    this.updateParameters();\n\n    this.form.controls['production_data_sample_size'].setValue(\n      this.params.production_data_sample_size\n    );\n    this.form.controls['training_data_sample_size'].setValue(\n      this.params.training_data_sample_size\n    );\n    (this.form.controls['visualization_metrics'] as FormArray).setValue(\n      this.params.visualization_metrics\n    );\n  }\n\n  private updateParameters() {\n    this.form.controls['parameters'].setValue(this.params.parameters);\n  }\n\n  sendRequest() {\n    if (this.form.valid) {\n      this.refit.next(this.form.value);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'variables';\n\n.visualisation-params {\n  &__title {\n    color: $neutral-color-800;\n    font-family: $font-family-bold;\n    line-height: 24px;\n    font-size: 12px;\n  }\n  &__row {\n    margin-bottom: 12px;\n  }\n  &__button {\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./visualization-params.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customValidators",
                        "type": "CustomValidatorsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"visualization-params\">\n  <div class=\"visualisation-params__title\">Settings</div>\n  <form [formGroup]=\"form\">\n    <div formGroupName=\"parameters\">\n      <div class=\"visualisation-params__row\">\n        <label for=\"metric\">Metric</label>\n        <mdl-select\n          formControlName=\"metric\"\n          id=\"metric\"\n          class=\"visualisation-params__input\"\n        >\n          <mdl-option *ngFor=\"let p of metrics\" [value]=\"p\">{{ p }}</mdl-option>\n        </mdl-select>\n      </div>\n      <div class=\"visualisation-params__row\">\n        <label for=\"min_dist\">Min dist</label>\n        <input\n          type=\"number\"\n          formControlName=\"min_dist\"\n          class=\"form-control visualisation-params__input\"\n          id=\"min_dist\"\n        />\n      </div>\n      <div class=\"visualisation-params__row\">\n        <label for=\"n_components\">N components</label>\n        <input\n          type=\"number\"\n          formControlName=\"n_components\"\n          class=\"form-control visualisation-params__input\"\n          id=\"n_components\"\n        />\n      </div>\n\n      <div class=\"visualisation-params__row\">\n        <label for=\"n_neighbours\">N neighbours</label>\n        <input\n          type=\"number\"\n          formControlName=\"n_neighbours\"\n          class=\"form-control visualisation-params__input\"\n          id=\"n_neighbours\"\n        />\n      </div>\n    </div>\n\n    <div class=\"visualisation-params__row\">\n      <label for=\"production_data_sample_size\">\n        Production data sample size</label\n      >\n      <input\n        type=\"number\"\n        formControlName=\"production_data_sample_size\"\n        class=\"form-control visualisation-params__input\"\n        id=\"production_data_sample_size\"\n      />\n    </div>\n\n    <div class=\"visualisation-params__row\">\n      <label for=\"training_data_sample_size\"> Training data sample size</label>\n      <input\n        type=\"number\"\n        formControlName=\"training_data_sample_size\"\n        class=\"form-control visualisation-params__input\"\n        id=\"training_data_sample_size\"\n      />\n    </div>\n\n    <div class=\"visualisation-params__row\">\n      <mdl-select\n        formControlName=\"visualization_metrics\"\n        [multiple]=\"true\"\n        class=\"visualisation-params__input\"\n      >\n        <mdl-option\n          *ngFor=\"let c of visualizationMetrics\"\n          [value]=\"c\"\n          mdl-ripple\n          >{{ c }}</mdl-option\n        >\n      </mdl-select>\n    </div>\n  </form>\n  <button\n    (click)=\"sendRequest()\"\n    [disabled]=\"form.invalid\"\n    hs-button\n    color=\"primary\"\n    kind=\"flat\"\n    class=\"visualisation-params__button\"\n  >\n    Change Params and refit\n  </button>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "ApplicationsModule",
            "id": "module-ApplicationsModule-2e0769ae8b1e4b6c9b582d6fb9d1bb8b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/applications/applications.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  ApplicationSignatureComponent,\n  ApplicationFormComponent,\n  ModelVariantFormComponent,\n  KafkaFormComponent,\n} from '@app/modules/applications/components';\nimport { UpdateModelVersionDirective } from '@app/modules/applications/directives';\nimport { ServablesModule } from '@app/modules/servables/servables.module';\nimport { ApplicationsPageComponent } from './pages/applications-page/applications-page.component';\nimport { ApplicationsRoutingModule } from './applications-routing.module';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { ApplicationDetailsComponent } from './containers/application-details/application-details.component';\n\n@NgModule({\n  imports: [SharedModule, ApplicationsRoutingModule, ServablesModule],\n  declarations: [\n    ApplicationsPageComponent,\n    ApplicationDetailsComponent,\n    ApplicationSignatureComponent,\n    UpdateModelVersionDirective,\n    ApplicationFormComponent,\n    ModelVariantFormComponent,\n    KafkaFormComponent,\n  ],\n  entryComponents: [],\n  providers: [],\n  exports: [ApplicationFormComponent],\n})\nexport class ApplicationsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApplicationDetailsComponent"
                        },
                        {
                            "name": "ApplicationFormComponent"
                        },
                        {
                            "name": "ApplicationSignatureComponent"
                        },
                        {
                            "name": "ApplicationsPageComponent"
                        },
                        {
                            "name": "KafkaFormComponent"
                        },
                        {
                            "name": "ModelVariantFormComponent"
                        },
                        {
                            "name": "UpdateModelVersionDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApplicationsRoutingModule"
                        },
                        {
                            "name": "ServablesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ApplicationFormComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ApplicationsRoutingModule",
            "id": "module-ApplicationsRoutingModule-97882d59db90a014de2bc4f2c2377052",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/applications/applications-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ApplicationDetailsComponent } from '@app/modules/applications/containers/application-details/application-details.component';\nimport { ApplicationsPageComponent } from './pages/applications-page/applications-page.component';\nimport { CanActivateApplicationGuard } from './guards/can-activate-application.guard';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ApplicationsPageComponent,\n        children: [\n          {\n            path: ':name',\n            component: ApplicationDetailsComponent,\n            canActivate: [CanActivateApplicationGuard],\n          },\n        ],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class ApplicationsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-16fa68016a4baaa3560d260438760799",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, APP_INITIALIZER } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HydroConfigService } from '@app/core/hydro-config.service';\nimport { LayoutModule } from '@app/layout/layout.module';\nimport {\n  HS_BASE_URL,\n  hsBaseUrlFactory,\n  HS_ABSOLUTE_URL,\n  hsAbsoluteUrlFactory,\n} from './core/base-url.token';\nimport { baseHrefFactory } from './utils';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app.router';\nimport { CoreModule } from './core/core.module';\nimport { DialogsModule } from './modules/dialogs/dialogs.module';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { ModelVersionLogComponent } from '@app/modules/model-version/components';\nimport { UiBuildInfoService } from './core/ui-build-info.service';\n\n@NgModule({\n  entryComponents: [ModelVersionLogComponent],\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    CoreModule,\n    LayoutModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    DialogsModule,\n    SharedModule,\n  ],\n  providers: [\n    HydroConfigService,\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (hsCfg: HydroConfigService) => () => hsCfg.loadConfig(),\n      deps: [HydroConfigService],\n      multi: true,\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (buildInfo: UiBuildInfoService) => () =>\n        buildInfo.loadConfig(),\n      deps: [UiBuildInfoService],\n      multi: true,\n    },\n    {\n      provide: APP_BASE_HREF,\n      useFactory: () => baseHrefFactory(),\n    },\n    {\n      provide: HS_BASE_URL,\n      useFactory: href => hsBaseUrlFactory(href),\n      deps: [APP_BASE_HREF],\n    },\n    {\n      provide: HS_ABSOLUTE_URL,\n      useFactory: href => hsAbsoluteUrlFactory(href),\n      deps: [APP_BASE_HREF],\n    },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "HydroConfigService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "DialogsModule"
                        },
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-402c07265ec71d601c2efeb9fe3aa1be",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.router.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { PageNotFoundComponent } from './layout/page-not-found/page-not-found.component';\n\nconst routes: Routes = [\n  {\n    path: 'models',\n    loadChildren: () =>\n      \"import('./modules/models/models.module').then(m => m.ModelsModule)\",\n  },\n  {\n    path: 'applications',\n    loadChildren: () =>\n      \"import('./modules/applications/applications.module').then(\\\n        m => m.ApplicationsModule\\\n      )\",\n  },\n  {\n    path: 'deployment_configs',\n    loadChildren: () =>\n      \"import('./modules/deployment-configs/deployment-configs.module').then(\\\n        m => m.DeploymentConfigsModule\\\n      )\",\n  },\n  {\n    path: '',\n    redirectTo: 'models',\n    pathMatch: 'full',\n  },\n  { path: '**', component: PageNotFoundComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CodeSnippetModule",
            "id": "module-CodeSnippetModule-fa9129487892361ae664bbcbf1fa3252",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/code-snippet/code-snippet.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CsLineComponent } from '@app/modules/code-snippet/components/cs-line/cs-line.component';\nimport { CsContainerComponent } from '@app/modules/code-snippet/containers/cs-container/cs-container.component';\nimport { SharedModule } from '@app/shared/shared.module';\n\n@NgModule({\n  declarations: [CsContainerComponent, CsLineComponent],\n  imports: [CommonModule, SharedModule],\n  exports: [CsContainerComponent],\n})\nexport class CodeSnippetModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CsContainerComponent"
                        },
                        {
                            "name": "CsLineComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CsContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-6d484060caa40e49f6b5dd1cd8053a5c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  RouterStateSerializer,\n  StoreRouterConnectingModule,\n} from '@ngrx/router-store';\nimport { HttpClientModule } from '@angular/common/http';\nimport { StoreModule } from '@ngrx/store';\nimport { extModules } from '../build-specifics';\n\nimport { CustomRouterStateSerializer } from './store/states/router.state';\nimport { initialState } from './store/states/root.state';\n\nimport { reducers } from './store/reducers/root.reducer';\n\nimport {\n  ModelsEffects,\n  ApplicationsEffects,\n  ModelVersionsEffects,\n  ServablesEffects,\n  DeploymentConfigsEffects,\n  ServiceStatusesEffects,\n} from './store/effects';\nimport { NotificationEffects } from './store/effects/notifications.effects';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    StoreModule.forRoot(reducers, { initialState }),\n    extModules,\n    EffectsModule.forRoot([\n      ApplicationsEffects,\n      ModelsEffects,\n      ModelVersionsEffects,\n      ServablesEffects,\n      DeploymentConfigsEffects,\n      ServiceStatusesEffects,\n      NotificationEffects,\n    ]),\n    StoreRouterConnectingModule.forRoot({\n      stateKey: 'router',\n    }),\n  ],\n  providers: [\n    { provide: RouterStateSerializer, useClass: CustomRouterStateSerializer },\n  ],\n})\nexport class CoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DeploymentConfigsModule",
            "id": "module-DeploymentConfigsModule-86e7f3d3548a6a7b305249189db9ca2c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/deployment-configs/deployment-configs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { DeploymentConfigDetailsComponent } from './containers';\nimport { DeploymentConfigsPageComponent } from './pages';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { DeploymentConfigsRoutingModule } from './deployment-configs-routing.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DcTreeComponent, DcTreeFieldComponent } from './components';\nimport { DcFormComponent } from './components/dc-tree/dc-form/dc-form.component';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\n\n@NgModule({\n  entryComponents: [],\n  declarations: [\n    DeploymentConfigsPageComponent,\n    DeploymentConfigDetailsComponent,\n    DcTreeComponent,\n    DcTreeFieldComponent,\n    DcFormComponent,\n  ],\n  exports: [],\n  imports: [\n    SharedModule,\n    DeploymentConfigsRoutingModule,\n    ReactiveFormsModule,\n    CodemirrorModule,\n  ],\n})\nexport class DeploymentConfigsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DcFormComponent"
                        },
                        {
                            "name": "DcTreeComponent"
                        },
                        {
                            "name": "DcTreeFieldComponent"
                        },
                        {
                            "name": "DeploymentConfigDetailsComponent"
                        },
                        {
                            "name": "DeploymentConfigsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DeploymentConfigsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DeploymentConfigsRoutingModule",
            "id": "module-DeploymentConfigsRoutingModule-ba9262f9ad18f17080ee3bcb3bd5f6cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/deployment-configs/deployment-configs-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { DeploymentConfigDetailsComponent } from './containers';\nimport { DeploymentConfigsPageComponent } from './pages';\nimport { DcFormComponent } from './components/dc-tree/dc-form/dc-form.component';\nimport { CanActivateDeploymentConfigGuard } from '@app/modules/deployment-configs/guards/can-activate-depconfig.guard';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: DeploymentConfigsPageComponent,\n        children: [\n          {\n            path: 'create',\n            component: DcFormComponent,\n          },\n          {\n            path: ':name',\n            component: DeploymentConfigDetailsComponent,\n            canActivate: [CanActivateDeploymentConfigGuard],\n          },\n        ],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class DeploymentConfigsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DialogsModule",
            "id": "module-DialogsModule-3909847383c008db0b803da4d9eefca6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/dialogs/dialogs.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ApplicationsModule } from '@app/modules/applications/applications.module';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { DialogComponent } from './containers';\nimport * as C from './components';\n\nconst DIALOGS = [\n  C.DialogDeleteModelComponent,\n  C.DialogDeleteApplicationComponent,\n  C.DialogAddApplicationComponent,\n  C.DialogTestComponent,\n  C.DialogUpdateApplicationComponent,\n  C.DialogUpdateModelVersionComponent,\n  C.DialogDeleteServableComponent,\n  C.DialogDeleteDeploymentConfigComponent,\n  C.DialogDeleteMetricComponent,\n  C.DialogMetricComponent,\n  C.DialogMetricsComponent,\n  C.DialogRequestsErrorsComponent,\n  C.BuildInformationDialogComponent,\n  C.ExplanationDialogComponent,\n];\n\nimport { MetricSpecConfigComponent } from './components/dialog-metric/metric-spec-config/metric-spec-config.component';\nimport { RootCauseModule } from '@app/modules/root-cause/root-cause.module';\n\n@NgModule({\n  entryComponents: [...DIALOGS],\n  declarations: [...DIALOGS, DialogComponent, MetricSpecConfigComponent],\n  imports: [\n    SharedModule,\n    ApplicationsModule,\n    CodemirrorModule,\n    RootCauseModule,\n  ],\n  exports: [DialogComponent],\n})\nexport class DialogsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        },
                        {
                            "name": "MetricSpecConfigComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ApplicationsModule"
                        },
                        {
                            "name": "RootCauseModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HsD3Module",
            "id": "module-HsD3Module-6c3927f2b797d689619a892b80c7049e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/hs-d3/hs-d3.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  D3LineComponent,\n  D3AreaComponent,\n  D3PlotBandComponent,\n} from './components';\nimport { D3ThresholdComponent } from './components/threshold.component';\nimport { D3AxisDirective } from './directives';\n\nconst COMPONENTS = [\n  D3LineComponent,\n  D3AreaComponent,\n  D3ThresholdComponent,\n  D3PlotBandComponent,\n];\nconst DIRECTIVES = [D3AxisDirective];\n\n@NgModule({\n  declarations: [...COMPONENTS, ...DIRECTIVES],\n  exports: [...COMPONENTS, ...DIRECTIVES],\n})\nexport class HsD3Module {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApplicationsItemDetailComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "ChartsComponent"
                        },
                        {
                            "name": "CustomCheckComponent"
                        },
                        {
                            "name": "CustomChecksComponent"
                        },
                        {
                            "name": "HealthTimelineComponent"
                        },
                        {
                            "name": "LogMetricsTableComponent"
                        },
                        {
                            "name": "MetricComponent"
                        },
                        {
                            "name": "MetricsComponent"
                        },
                        {
                            "name": "ModelVersionsTableComponent"
                        },
                        {
                            "name": "ProfilesComponent"
                        },
                        {
                            "name": "ReqResLogsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ApplicationsItemDetailComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "ChartsComponent"
                        },
                        {
                            "name": "CustomCheckComponent"
                        },
                        {
                            "name": "CustomChecksComponent"
                        },
                        {
                            "name": "HealthTimelineComponent"
                        },
                        {
                            "name": "LogMetricsTableComponent"
                        },
                        {
                            "name": "MetricComponent"
                        },
                        {
                            "name": "MetricsComponent"
                        },
                        {
                            "name": "ModelVersionsTableComponent"
                        },
                        {
                            "name": "ProfilesComponent"
                        },
                        {
                            "name": "ReqResLogsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-0c68f26a0bda005ccd011be05adddb12",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { HeaderInfoComponent } from '@app/layout/header-info/header-info.component';\nimport { HeaderNavComponent } from '@app/layout/header-nav/header-nav.component';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\nimport { HeaderComponent } from './header/header.component';\n\n@NgModule({\n  exports: [HeaderComponent, PageNotFoundComponent],\n  declarations: [\n    HeaderComponent,\n    PageNotFoundComponent,\n    HeaderNavComponent,\n    HeaderInfoComponent,\n  ],\n  imports: [SharedModule, RouterModule],\n})\nexport class LayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "HeaderInfoComponent"
                        },
                        {
                            "name": "HeaderNavComponent"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PageNotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModelsModule",
            "id": "module-ModelsModule-770762e19cf2468c38585f123ef35ab9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/models/models.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ModelVersionsModule } from '@app/modules/model-versions/models-versions.module';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ModelDetailsComponent } from './containers/model-details/model-details.component';\nimport { ModelsHeaderZenModeComponent } from './layout/models-header/models-header-zen-mode/models-header-zen-mode.component';\nimport { ModelsHeaderComponent } from './layout/models-header/models-header.component';\nimport { ModelsRoutingModule } from './models-routing.module';\nimport { ModelsPageComponent } from './page/models-page.component';\nimport { CodeSnippetModule } from '@app/modules/code-snippet/code-snippet.module';\n\n@NgModule({\n  entryComponents: [],\n  declarations: [\n    ModelsPageComponent,\n    ModelDetailsComponent,\n    ModelsHeaderComponent,\n    ModelsHeaderZenModeComponent,\n  ],\n  imports: [\n    SharedModule,\n    ModelVersionsModule,\n    ModelsRoutingModule,\n    CodeSnippetModule,\n  ],\n})\nexport class ModelsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ModelDetailsComponent"
                        },
                        {
                            "name": "ModelsHeaderZenModeComponent"
                        },
                        {
                            "name": "ModelsPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CodeSnippetModule"
                        },
                        {
                            "name": "ModelVersionsModule"
                        },
                        {
                            "name": "ModelsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModelsRoutingModule",
            "id": "module-ModelsRoutingModule-aebc43e41082284a31b51b32e0710f41",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/models/models-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { ModelDetailsComponent } from '@app/modules/models/containers/model-details/model-details.component';\nimport { ModelsPageComponent } from './page/models-page.component';\nimport { CanActivateModelGuard } from './guards/can-activate-model.guard';\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ModelsPageComponent,\n        children: [\n          {\n            path: ':modelName',\n            component: ModelDetailsComponent,\n            data: { anim: 'modelDetail' },\n            canActivate: [CanActivateModelGuard],\n          },\n          {\n            path: ':modelName/:modelVersionNumber',\n            loadChildren: () =>\n              import('../model-version/model-version.module').then(\n                m => m.ModelVersionModule,\n              ),\n          },\n          // {\n          //   path: ':modelId/:modelVersionId',\n          //   component: ModelVersionPageComponent,\n          //   canActivate: [CanActivateModelVersionGuard],\n          //   children: [\n          //     {\n          //       path: '',\n          //       component: ModelVersionDetailsContainerComponent,\n          //     },\n          //     {\n          //       path: 'monitoring',\n          //       component: MonitoringPageComponent,\n          //     },\n          //     {\n          //       path: 'data_projection',\n          //       component: VisualizationPageComponent,\n          //     },\n          //     {\n          //       path: 'profile/:featureName',\n          //       component: ModelVersionProfilerPageComponent,\n          //     },\n          //     {\n          //       path: 'drift_report',\n          //       component: StatPageComponent,\n          //     },\n          //   ],\n          // },\n        ],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class ModelsRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModelVersionModule",
            "id": "module-ModelVersionModule-3c4990cc7a819640627f64af6f0ad362",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/model-version/model-version.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport {\n  MetadataComponent,\n  SignaturesComponent,\n  ModelVersionLogComponent,\n} from './components';\nimport { ServablesModule } from '@app/modules/servables/servables.module';\n\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ModelVersionRoutingModule } from './model-version-routing.module';\nimport { ModelVersionPageComponent } from './page/model-version-page/model-version-page.component';\nimport {\n  ModelVersionServicesComponent,\n  ModelVersionDetailsComponent,\n} from './containers';\n\n@NgModule({\n  declarations: [\n    ModelVersionPageComponent,\n    ModelVersionDetailsComponent,\n    MetadataComponent,\n    ModelVersionServicesComponent,\n    SignaturesComponent,\n    ModelVersionLogComponent,\n  ],\n  imports: [SharedModule, ModelVersionRoutingModule, ServablesModule],\n})\nexport class ModelVersionModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MetadataComponent"
                        },
                        {
                            "name": "ModelVersionDetailsComponent"
                        },
                        {
                            "name": "ModelVersionLogComponent"
                        },
                        {
                            "name": "ModelVersionPageComponent"
                        },
                        {
                            "name": "ModelVersionServicesComponent"
                        },
                        {
                            "name": "SignaturesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ModelVersionRoutingModule"
                        },
                        {
                            "name": "ServablesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModelVersionRoutingModule",
            "id": "module-ModelVersionRoutingModule-6fdaa3c9dab28265014b3e0659ae6b0b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/model-version/model-version-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CanActivateModelVersionGuard } from './guards/can-activate-model-version.guard';\nimport { ModelVersionDetailsComponent } from './containers/model-version-details/model-version-details.component';\nimport { ModelVersionPageComponent } from './page/model-version-page/model-version-page.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ModelVersionPageComponent,\n        canActivate: [CanActivateModelVersionGuard],\n        children: [\n          {\n            path: '',\n            component: ModelVersionDetailsComponent,\n          },\n          {\n            path: 'profile/:featureName',\n            loadChildren: () =>\n              import('../profiler/profiler.module').then(m => m.ProfilerModule),\n          },\n          {\n            path: 'monitoring',\n            loadChildren: () =>\n              import('../monitoring/monitoring.module').then(\n                m => m.MonitoringModule\n              ),\n          },\n          {\n            path: 'data_projection',\n            loadChildren: () =>\n              import('../visualization/visualization.module').then(\n                m => m.VisualizationModule\n              ),\n          },\n          {\n            path: 'drift_report',\n            loadChildren: () =>\n              import('../stat/stat.module').then(m => m.StatModule),\n          },\n          // {\n          //   path: ':modelVersionId',\n          //   component: ModelDetailsComponent,\n          //   data: { anim: 'modelDetail' },\n          //   // canActivate: [CanActivateModelGuard],\n          // },\n          // {\n          //   path: ':modelId/:modelVersionId',\n          //   component: ModelVersionPageComponent,\n          //   canActivate: [CanActivateModelVersionGuard],\n          //   children: [\n          //     {\n          //       path: '',\n          //       component: ModelVersionDetailsContainerComponent,\n          //     },\n          //     {\n          //       path: 'monitoring',\n          //       component: MonitoringPageComponent,\n          //     },\n          //     {\n          //       path: 'data_projection',\n          //       component: VisualizationPageComponent,\n          //     },\n          //     {\n          //       path: 'profile/:featureName',\n          //       component: ModelVersionProfilerPageComponent,\n          //     },\n          //     {\n          //       path: 'drift_report',\n          //       component: StatPageComponent,\n          //     },\n          //   ],\n          // },\n        ],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class ModelVersionRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ModelVersionsModule",
            "id": "module-ModelVersionsModule-4eaea77b55330f78cd2a9b8167c6eba5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/model-versions/models-versions.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { ServablesModule } from '@app/modules/servables/servables.module';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ModelVersionsRowComponent } from './components/model-versions-row/model-versions-row.component';\nimport { ModelVersionsComponent } from './components/model-versions/model-versions.component';\n\n@NgModule({\n  exports: [ModelVersionsComponent],\n  declarations: [ModelVersionsComponent, ModelVersionsRowComponent],\n  imports: [SharedModule, ServablesModule],\n})\nexport class ModelVersionsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ServablesModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MonitoringModule",
            "id": "module-MonitoringModule-66fccbc76c4cd5f241df88b0747b672e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/monitoring/monitoring.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RequestDetailsModule } from '@app/modules/request-details/request-details.module';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\n// import { OwlDateTimeModule, OwlNativeDateTimeModule } from 'ng-pick-datetime';\nimport { NgxDaterangepickerMd } from 'ngx-daterangepicker-material';\nimport { SharedModule } from '@app/shared/shared.module';\nimport { HsD3Module } from '@app/modules/hs-d3/hs-d3.module';\nimport { MonitoringRoutingModule } from './monitoring-routing.module';\n\nimport {\n  CheckChartComponent,\n  ErrorCheckComponent,\n  LatencyCheckComponent,\n  RegimeSelectorComponent,\n  ReqstoreMetricsComponent,\n  RequestsInformationComponent,\n  TimeIntervalSelectComponent,\n  AggregationHeaderComponent,\n  AggregationDataSectionComponent,\n  BatchDetailsComponent,\n  RequestsComponent,\n  AggregationDetailsSidebarComponent,\n  RequestsFilterComponent,\n  AggregationSidebarComponent,\n  AggregationLegendComponent,\n  BatchLatencyComponent,\n  ModelVersionsTagsComponent,\n  AddComparableComponent,\n} from './components';\n\nimport { CheckIdToTimePipe } from './pipes';\nimport {\n  MetricsEffects,\n  MonitoringServiceStatusEffects,\n  reducer,\n} from './store';\nimport { AggregationEffects } from './store/effects/aggregation.effects';\nimport { ChecksEffects } from './store/effects/checks.effects';\n\nimport { RootCauseModule } from '@app/modules/root-cause/root-cause.module';\n\nimport {\n  AggregationComponent,\n  BatchMetricsComponent,\n  MonitoringAvailabilityComponent,\n  MonitoringPageComponent,\n  CustomMetricsComponent,\n  CustomMetricsComponentV2,\n} from './containers';\nimport { HighchartsChartModule } from 'highcharts-angular';\nimport { CheckChartComponentV2 } from '@app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component';\n\n@NgModule({\n  declarations: [\n    AggregationComponent,\n    ErrorCheckComponent,\n    LatencyCheckComponent,\n    MonitoringAvailabilityComponent,\n    MonitoringPageComponent,\n    ReqstoreMetricsComponent,\n    TimeIntervalSelectComponent,\n    CheckIdToTimePipe,\n    RequestsInformationComponent,\n    CheckChartComponent,\n    CheckChartComponentV2,\n    BatchMetricsComponent,\n    RegimeSelectorComponent,\n    CustomMetricsComponent,\n    CustomMetricsComponentV2,\n    AggregationHeaderComponent,\n    AggregationDataSectionComponent,\n    BatchDetailsComponent,\n    RequestsComponent,\n    AggregationDetailsSidebarComponent,\n    RequestsFilterComponent,\n    AggregationSidebarComponent,\n    AggregationLegendComponent,\n    BatchLatencyComponent,\n    ModelVersionsTagsComponent,\n    AddComparableComponent,\n  ],\n  imports: [\n    // OwlDateTimeModule,\n    // OwlNativeDateTimeModule,\n    NgxDaterangepickerMd.forRoot(),\n    SharedModule,\n    StoreModule.forFeature('monitoring', reducer),\n    EffectsModule.forFeature([\n      MonitoringServiceStatusEffects,\n      MetricsEffects,\n      AggregationEffects,\n      ChecksEffects,\n    ]),\n    RootCauseModule,\n    MonitoringRoutingModule,\n    RequestDetailsModule,\n    HsD3Module,\n    HighchartsChartModule,\n  ],\n  exports: [MonitoringPageComponent],\n})\nexport class MonitoringModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddComparableComponent"
                        },
                        {
                            "name": "AggregationComponent"
                        },
                        {
                            "name": "AggregationDataSectionComponent"
                        },
                        {
                            "name": "AggregationDetailsSidebarComponent"
                        },
                        {
                            "name": "AggregationHeaderComponent"
                        },
                        {
                            "name": "AggregationLegendComponent"
                        },
                        {
                            "name": "AggregationSidebarComponent"
                        },
                        {
                            "name": "BatchDetailsComponent"
                        },
                        {
                            "name": "BatchLatencyComponent"
                        },
                        {
                            "name": "BatchMetricsComponent"
                        },
                        {
                            "name": "CheckChartComponent"
                        },
                        {
                            "name": "CheckChartComponentV2"
                        },
                        {
                            "name": "CheckIdToTimePipe"
                        },
                        {
                            "name": "CustomMetricsComponent"
                        },
                        {
                            "name": "CustomMetricsComponentV2"
                        },
                        {
                            "name": "ErrorCheckComponent"
                        },
                        {
                            "name": "LatencyCheckComponent"
                        },
                        {
                            "name": "ModelVersionsTagsComponent"
                        },
                        {
                            "name": "MonitoringAvailabilityComponent"
                        },
                        {
                            "name": "MonitoringPageComponent"
                        },
                        {
                            "name": "RegimeSelectorComponent"
                        },
                        {
                            "name": "ReqstoreMetricsComponent"
                        },
                        {
                            "name": "RequestsComponent"
                        },
                        {
                            "name": "RequestsFilterComponent"
                        },
                        {
                            "name": "RequestsInformationComponent"
                        },
                        {
                            "name": "TimeIntervalSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HsD3Module"
                        },
                        {
                            "name": "MonitoringRoutingModule"
                        },
                        {
                            "name": "NgxDaterangepickerMd"
                        },
                        {
                            "name": "RequestDetailsModule"
                        },
                        {
                            "name": "RootCauseModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MonitoringPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MonitoringRoutingModule",
            "id": "module-MonitoringRoutingModule-3b371bb4f83648e91cb67f4340f22ae3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/monitoring/monitoring-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { MonitoringPageComponent } from '@app/modules/monitoring/containers';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: MonitoringPageComponent,\n        children: [],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class MonitoringRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfilerModule",
            "id": "module-ProfilerModule-9fea682deacd78f1ba0e2342bea4478a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/profiler/profiler.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ProfilerPageComponent } from './pages';\nimport { ProfilerRoutingModule } from './profiler-routing.module';\nimport { ProfileDetailsComponent } from './containers';\nimport {\n  ProfileStatsComponent,\n  ProfilesComparisonHistogramComponent,\n} from './components';\n\n@NgModule({\n  imports: [SharedModule, ProfilerRoutingModule],\n  declarations: [\n    ProfilerPageComponent,\n    ProfileDetailsComponent,\n    ProfileStatsComponent,\n    ProfilesComparisonHistogramComponent,\n  ],\n  providers: [],\n  exports: [],\n})\nexport class ProfilerModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProfileDetailsComponent"
                        },
                        {
                            "name": "ProfileStatsComponent"
                        },
                        {
                            "name": "ProfilerPageComponent"
                        },
                        {
                            "name": "ProfilesComparisonHistogramComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProfilerRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProfilerRoutingModule",
            "id": "module-ProfilerRoutingModule-6c95821c125a20f6bc2e27d1c9854fa6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/profiler/profiler-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ProfilerPageComponent } from './pages';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: ProfilerPageComponent,\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class ProfilerRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RequestDetailsModule",
            "id": "module-RequestDetailsModule-0c97225489848cba885a696621224db3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/request-details/request-details.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RootCauseModule } from '@app/modules/root-cause/root-cause.module';\nimport { SharedModule } from '@app/shared/shared.module';\nimport {\n  LogComponent,\n  LogDetailComponent,\n  MetricsChecksComponent,\n  RawChecksComponent,\n} from './components';\nimport { CheckIdToTimePipe } from './pipes';\n\nconst components = [\n  LogComponent,\n  LogDetailComponent,\n  MetricsChecksComponent,\n  RawChecksComponent,\n];\n\n@NgModule({\n  declarations: [...components, CheckIdToTimePipe],\n  exports: [...components],\n  imports: [CommonModule, SharedModule, RootCauseModule],\n})\nexport class RequestDetailsModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CheckIdToTimePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RootCauseModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RootCauseModule",
            "id": "module-RootCauseModule-cd84392ecd23dedf3ad91bfdc6859fbe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/root-cause/root-cause.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { SharedModule } from '@app/shared/shared.module';\nimport {\n  AnchorExplanationComponent,\n  RiseExplanationComponent,\n} from './containers';\nimport { ExplanationButtonComponent } from './containers/explanation-button/explanation-button.component';\n\n@NgModule({\n  declarations: [\n    RiseExplanationComponent,\n    AnchorExplanationComponent,\n    ExplanationButtonComponent,\n  ],\n  imports: [SharedModule],\n  exports: [ExplanationButtonComponent, AnchorExplanationComponent],\n})\nexport class RootCauseModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AnchorExplanationComponent"
                        },
                        {
                            "name": "ExplanationButtonComponent"
                        },
                        {
                            "name": "RiseExplanationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AnchorExplanationComponent"
                        },
                        {
                            "name": "ExplanationButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ServablesModule",
            "id": "module-ServablesModule-0489254f6f1b951d6b7f75e83aca1334",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/servables/servables.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { SharedModule } from '@app/shared/shared.module';\n\nimport { ServableLogsComponent, ServablesTableComponent } from './containers';\nimport { ServableStatusIconComponent } from './components/servable-status-icon/servable-status-icon.component';\n\n@NgModule({\n  declarations: [\n    ServablesTableComponent,\n    ServableLogsComponent,\n    ServableStatusIconComponent,\n  ],\n  entryComponents: [ServableLogsComponent],\n  imports: [SharedModule],\n  exports: [ServablesTableComponent, ServableStatusIconComponent],\n})\nexport class ServablesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ServableLogsComponent"
                        },
                        {
                            "name": "ServableStatusIconComponent"
                        },
                        {
                            "name": "ServablesTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ServableStatusIconComponent"
                        },
                        {
                            "name": "ServablesTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-dca69ff0362b26fe53019fad7075be1c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { MdlModule } from '@angular-mdl/core';\nimport { MdlSelectModule } from '@angular-mdl/select';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgxSliderModule } from '@angular-slider/ngx-slider';\nimport { NotifierModule, NotifierOptions } from 'angular-notifier';\nimport * as P from './pipes';\nimport * as C from './components';\nimport * as D from './directives';\n\nconst customNotifierOptions: NotifierOptions = {\n  position: {\n    horizontal: {\n      position: 'right',\n      distance: 12,\n    },\n    vertical: {\n      position: 'bottom',\n      distance: 12,\n      gap: 10,\n    },\n  },\n  theme: 'material',\n  behaviour: {\n    autoHide: 5000,\n    onClick: 'hide',\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4,\n  },\n  animations: {\n    enabled: true,\n    show: {\n      preset: 'slide',\n      speed: 300,\n      easing: 'ease',\n    },\n    hide: {\n      preset: 'fade',\n      speed: 300,\n      easing: 'ease',\n      offset: 50,\n    },\n    shift: {\n      speed: 300,\n      easing: 'ease',\n    },\n    overlap: 150,\n  },\n};\n\nconst reExportedModules = [\n  NgxSliderModule,\n  MdlSelectModule,\n  MdlModule,\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  RouterModule,\n  NotifierModule,\n];\n\nconst pipes = [\n  P.FormatDatePipe,\n  P.IterateAsArrayPipe,\n  P.MatchSorterPipe,\n  P.PluckPipe,\n  P.SortByPipe,\n  P.TimeAgoPipe,\n  P.FieldShapePipe,\n  P.MappedServablePipe,\n];\n\nconst directives = [\n  D.BuildInformationDirective,\n  D.CopyToBufferDirective,\n  D.AutofocusedDirective,\n  D.HideInZenModeDirective,\n  D.ShowInZenModeDirective,\n  D.ScaleImageDirective,\n  D.PixelToCanvasDirective,\n  D.TippyDirective,\n];\n\nconst components = [\n  C.SidebarComponent,\n  C.InputTextComponent,\n  C.IconComponent,\n  C.ApplicationStatusComponent,\n  C.ErrorMessageComponent,\n  C.ModelVersionStatusComponent,\n  C.CommandTemplateComponent,\n  C.LogsComponent,\n  C.ButtonComponent,\n  C.TooltipComponent,\n  C.LoaderComponent,\n  C.LoadingComponent,\n  C.TensorImageListComponent,\n  C.ServiceAvailabilityComponent,\n  C.AlertMessageComponent,\n  C.LogComponent,\n];\n\n@NgModule({\n  declarations: [...pipes, ...components, ...directives],\n  imports: [\n    ...reExportedModules,\n    NotifierModule.withConfig(customNotifierOptions),\n  ],\n  exports: [...reExportedModules, ...components, ...pipes, ...directives],\n})\nexport class SharedModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatModule",
            "id": "module-StatModule-5838c2479513950471d836ce1613f0d9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/stat/stat.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StatRoutingModule } from '@app/modules/stat/stat-routing.module';\nimport { SharedModule } from '@app/shared/shared.module';\nimport {\n  HistogramComponent,\n  DriftStatusComponent,\n  FeatureReportComponent,\n  BivariateReportLegendComponent,\n} from './components';\nimport {\n  StatPageComponent,\n  StatAvailabilityComponent,\n  BivariateReportComponent,\n} from './containers';\nimport { ColorByDriftDirective } from './directives';\nimport { HeatmapComponent } from './components/heatmap/heatmap.component';\n\n@NgModule({\n  declarations: [\n    StatPageComponent,\n    HistogramComponent,\n    FeatureReportComponent,\n    ColorByDriftDirective,\n    StatAvailabilityComponent,\n    DriftStatusComponent,\n    HeatmapComponent,\n    BivariateReportComponent,\n    BivariateReportLegendComponent,\n  ],\n  imports: [SharedModule, CommonModule, StatRoutingModule],\n  exports: [StatPageComponent],\n})\nexport class StatModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BivariateReportComponent"
                        },
                        {
                            "name": "BivariateReportLegendComponent"
                        },
                        {
                            "name": "ColorByDriftDirective"
                        },
                        {
                            "name": "DriftStatusComponent"
                        },
                        {
                            "name": "FeatureReportComponent"
                        },
                        {
                            "name": "HeatmapComponent"
                        },
                        {
                            "name": "HistogramComponent"
                        },
                        {
                            "name": "StatAvailabilityComponent"
                        },
                        {
                            "name": "StatPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "StatRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StatPageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatRoutingModule",
            "id": "module-StatRoutingModule-2a9cb42275fe6d5a681e9cc6cf61e984",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/stat/stat-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { StatPageComponent } from '@app/modules/stat/containers';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: StatPageComponent,\n        children: [],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class StatRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TestingModule",
            "id": "module-TestingModule-e831f25c38a8740dc69ea95a7436a974",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/testing/testing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  AggregationComponent,\n  ApplicationFormComponent,\n  ApplicationsItemDetailComponent,\n  BatchMetricsComponent,\n  ChartComponent,\n  ChartsComponent,\n  CheckChartComponent,\n  CustomCheckComponent,\n  CustomChecksComponent,\n  ErrorCheckComponent,\n  GradientLegendComponent,\n  HealthTimelineComponent,\n  LatencyCheckComponent,\n  LogComponent,\n  LogDetailComponent,\n  LogMetricsTableComponent,\n  MetricComponent,\n  MetricsComponent,\n  ModelVersionDetailsComponent,\n  ModelVersionLogComponent,\n  ModelVersionsComponent,\n  ModelVersionsRowComponent,\n  ModelVersionsTableComponent,\n  ModelVersionsTagsComponent,\n  ModelsHeaderComponent,\n  RawChecksComponent,\n  RegimeSelectorComponent,\n  ReqResLogsComponent,\n  RequestsInformationComponent,\n  ScatterPlotComponent,\n  ScatterPlotLegendComponent,\n  SignaturesComponent,\n  VisualizationMetricsComponent,\n  CustomMetricsComponent,\n  ModelVersionServicesComponent,\n} from '@testing/components';\nimport { ProfilesComponent } from '@testing/components/mock-profiles';\nimport { ServablesTableComponent } from '@testing/components/mock-servables-table.component';\nimport { UpdateModelVersionDirective } from '@testing/directives/test-update-model-version.directive';\n\nconst COMPONENTS = [\n  ProfilesComponent,\n  ModelVersionsTableComponent,\n  MetricComponent,\n  MetricsComponent,\n  HealthTimelineComponent,\n  ChartsComponent,\n  ChartComponent,\n  ModelVersionLogComponent,\n  ReqResLogsComponent,\n  ServablesTableComponent,\n  ApplicationFormComponent,\n  AggregationComponent,\n  RequestsInformationComponent,\n  LogComponent,\n  LogDetailComponent,\n  CustomCheckComponent,\n  CustomChecksComponent,\n  LatencyCheckComponent,\n  ErrorCheckComponent,\n  SignaturesComponent,\n  RawChecksComponent,\n  BatchMetricsComponent,\n  LogMetricsTableComponent,\n  ApplicationsItemDetailComponent,\n  ModelVersionsComponent,\n  ModelVersionDetailsComponent,\n  ModelVersionsRowComponent,\n  ModelVersionsTagsComponent,\n  RegimeSelectorComponent,\n  CheckChartComponent,\n  ScatterPlotComponent,\n  ScatterPlotLegendComponent,\n  GradientLegendComponent,\n  VisualizationMetricsComponent,\n  CustomMetricsComponent,\n  ModelVersionServicesComponent,\n  ModelsHeaderComponent,\n];\n\nconst DIRECTIVES = [UpdateModelVersionDirective];\n\n@NgModule({\n  declarations: [...COMPONENTS, ...DIRECTIVES],\n  exports: [...COMPONENTS],\n})\nexport class TestingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ApplicationsItemDetailComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "ChartsComponent"
                        },
                        {
                            "name": "CustomCheckComponent"
                        },
                        {
                            "name": "CustomChecksComponent"
                        },
                        {
                            "name": "HealthTimelineComponent"
                        },
                        {
                            "name": "LogMetricsTableComponent"
                        },
                        {
                            "name": "MetricComponent"
                        },
                        {
                            "name": "MetricsComponent"
                        },
                        {
                            "name": "ModelVersionsTableComponent"
                        },
                        {
                            "name": "ProfilesComponent"
                        },
                        {
                            "name": "ReqResLogsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ApplicationsItemDetailComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "ChartsComponent"
                        },
                        {
                            "name": "CustomCheckComponent"
                        },
                        {
                            "name": "CustomChecksComponent"
                        },
                        {
                            "name": "HealthTimelineComponent"
                        },
                        {
                            "name": "LogMetricsTableComponent"
                        },
                        {
                            "name": "MetricComponent"
                        },
                        {
                            "name": "MetricsComponent"
                        },
                        {
                            "name": "ModelVersionsTableComponent"
                        },
                        {
                            "name": "ProfilesComponent"
                        },
                        {
                            "name": "ReqResLogsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "VisualizationModule",
            "id": "module-VisualizationModule-7fb33f4bc78a26134b627400786078b1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/visualization/visualization.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RequestDetailsModule } from '@app/modules/request-details/request-details.module';\nimport { VisualizationRoutingModule } from '@app/modules/visualization/visualization-routing.module';\nimport { MonitoringModule } from '../monitoring/monitoring.module';\nimport { SharedModule } from '@app/shared/shared.module';\nimport {\n  VisualizationPageComponent,\n  VisualizationAvailabilityComponent,\n} from './containers';\nimport {\n  VisualizationMetricsComponent,\n  VisualizationParamsComponent,\n  ScatterPlotComponent,\n  ScatterPlotLegendComponent,\n  GradientLegendComponent,\n} from './components';\n@NgModule({\n  imports: [\n    SharedModule,\n    VisualizationRoutingModule,\n    MonitoringModule,\n    RequestDetailsModule,\n  ],\n  declarations: [\n    VisualizationPageComponent,\n    VisualizationMetricsComponent,\n    VisualizationAvailabilityComponent,\n    VisualizationParamsComponent,\n    ScatterPlotComponent,\n    ScatterPlotLegendComponent,\n    GradientLegendComponent,\n  ],\n})\nexport class VisualizationModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "GradientLegendComponent"
                        },
                        {
                            "name": "ScatterPlotComponent"
                        },
                        {
                            "name": "ScatterPlotLegendComponent"
                        },
                        {
                            "name": "VisualizationAvailabilityComponent"
                        },
                        {
                            "name": "VisualizationMetricsComponent"
                        },
                        {
                            "name": "VisualizationPageComponent"
                        },
                        {
                            "name": "VisualizationParamsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MonitoringModule"
                        },
                        {
                            "name": "RequestDetailsModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "VisualizationRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "VisualizationRoutingModule",
            "id": "module-VisualizationRoutingModule-6ed96c458497685f94ff65e260919a02",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/visualization/visualization-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { VisualizationPageComponent } from '@app/modules/visualization/containers';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        path: '',\n        component: VisualizationPageComponent,\n        children: [],\n      },\n    ]),\n  ],\n  exports: [RouterModule],\n})\nexport class VisualizationRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/model-version.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ModelVersion>",
                "defaultValue": "createEntityAdapter<ModelVersion>({\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/applications.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Application>({\n  selectId: application => application.name,\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/deployment-configs.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<DeploymentConfig>({\n  selectId: depConfig => depConfig.name,\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/model-versions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ModelVersion>",
                "defaultValue": "createEntityAdapter<\n  ModelVersion\n>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/models.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Model>",
                "defaultValue": "createEntityAdapter<Model>({\n  selectId: model => model.name,\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/servables.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createEntityAdapter<Servable>({\n  selectId: servable => servable.fullName,\n})"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/service-statuses.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<ModelVersionServiceStatusesEntity>",
                "defaultValue": "createEntityAdapter<\n  ModelVersionServiceStatusesEntity\n>()"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<MetricSpecification>",
                "defaultValue": "createEntityAdapter<\n  MetricSpecification\n>()"
            },
            {
                "name": "Add",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] add application',\n  props<{ application: Application }>(),\n)"
            },
            {
                "name": "AddDeploymentConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] add deployment configuration',\n  props<{ depConfig: DeploymentConfig }>(),\n)"
            },
            {
                "name": "AddDeploymentConfigFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] add deployment configuration with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "AddDeploymentConfigSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] add deployment configuration with success',\n  props<{ payload: DeploymentConfig }>(),\n)"
            },
            {
                "name": "AddFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] add application with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "AddMetric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] add metric',\n  props<{ aggregation: MetricSpecificationRequest }>()\n)"
            },
            {
                "name": "AddMetricFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] add metric fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "AddMetricSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] add metric success',\n  props<{ payload: MetricSpecification }>()\n)"
            },
            {
                "name": "AddModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] add model',\n  props<{ model: Model }>()\n)"
            },
            {
                "name": "AddModelVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] add model version',\n  props<{ modelVersion: ModelVersion }>(),\n)"
            },
            {
                "name": "AddModelVersionSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] added with success',\n  props<{ modelVersion: ModelVersion }>(),\n)"
            },
            {
                "name": "AddSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] add application with success',\n  props<{ payload: Application }>(),\n)"
            },
            {
                "name": "aggregationList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/mocks/aggregation-list.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AggregationsList(\n  [mockAggregationWithId('1'), mockAggregationWithId('2')],\n  2,\n  0,\n  0\n)"
            },
            {
                "name": "aggregationReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(LoadAggregationsSuccess, (state, props) => {\n    return {\n      ...state,\n      aggregationList: props.aggregationList,\n      error: undefined,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n    };\n  }),\n  on(LoadAggregationsFailed, (state, props) => {\n    return { ...state, aggregationList: undefined, error: props.error };\n  }),\n  on(SelectAggregation, (state, props) => {\n    return { ...state, selectedAggregation: props.aggregation };\n  }),\n  on(LoadOlderAggregation, state => ({ ...state, offset: state.offset + 1 })),\n  on(LoadNewerAggregation, state => ({ ...state, offset: state.offset - 1 })),\n  on(SetFilterDateRange, (state, { from, to }) => {\n    return { ...state, filterDateRange: { from, to } };\n  }),\n  on(ClearFilterDateRange, state => ({ ...state, filterDateRange: undefined })),\n  on(ClearMonitoringPage, () => initialState)\n)"
            },
            {
                "name": "allStatusesEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectEntities)"
            },
            {
                "name": "anchorResultMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/mocks/anchor-result.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AnchorExplanationResult",
                "defaultValue": "{\n  coverage: 0,\n  explained_field_name: 'classes',\n  explained_field_value: 1,\n  explanation: ['country != 3.0', 'age > 15.0'],\n  precision: 0.99,\n}"
            },
            {
                "name": "api",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`api/v${apiVersion}`"
            },
            {
                "name": "apiVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "application",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/application.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Application",
                "defaultValue": "applicationBuilder.build({})"
            },
            {
                "name": "applicationBuilder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/application.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new ApplicationBuilder()"
            },
            {
                "name": "applicationReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/applications.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(Get, state => ({ ...state, loading: true })),\n  on(GetSuccess, (state, { payload }) =>\n    adapter.setAll(payload, { ...state, loaded: true, loading: false }),\n  ),\n  on(GetFail, state => ({ ...state, loading: false })),\n  on(AddSuccess, (state, { payload }) => adapter.addOne(payload, state)),\n  on(UpdateSuccess, (state, { payload }) => adapter.upsertOne(payload, state)),\n  on(\n    SetInputSuccess,\n    GenerateInputSuccess,\n    (state, { payload: { name, input } }) =>\n      adapter.updateOne(\n        {\n          id: name,\n          changes: {\n            input,\n          },\n        },\n        state,\n      ),\n  ),\n  on(Test, (state, { payload: { name } }) =>\n    adapter.updateOne(\n      {\n        id: name,\n        changes: {\n          testStatus: TestStatus.Pending,\n          error: '',\n        },\n      },\n      state,\n    ),\n  ),\n  on(TestSuccess, (state, { payload: { name, output } }) =>\n    adapter.updateOne(\n      {\n        id: name,\n        changes: {\n          output,\n          error: '',\n          testStatus: TestStatus.Success,\n        },\n      },\n      state,\n    ),\n  ),\n  on(TestFail, (state, { payload: { name, error } }) =>\n    adapter.updateOne(\n      {\n        id: name,\n        changes: {\n          testStatus: TestStatus.Failed,\n          output: '',\n          error,\n        },\n      },\n      state,\n    ),\n  ),\n  on(DeleteSuccess, (state, { applicationName }) => {\n    debugger;\n    return adapter.removeOne(applicationName, state);\n  }),\n  on(\n    ToggleFavorite,\n    (\n      state,\n      {\n        payload: {\n          application: { name, favorite },\n        },\n      },\n    ) => {\n      return adapter.updateOne(\n        { id: name, changes: { favorite: !favorite } },\n        state,\n      );\n    },\n  ),\n)"
            },
            {
                "name": "applicationsUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "url + '/applications'"
            },
            {
                "name": "AssemblingModelVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/modelVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockModelVersion1Model1.build({\n  runtime: MockRuntime2,\n  model: MockModel2,\n  status: ModelVersionStatus.Assembling,\n})"
            },
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BaseAccent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BaseCyan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BaseDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasePrimary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BaseWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "capitalizeString",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/capitalize-string.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(str: string) => {\n  const length = str.length;\n  if (length) {\n    return str.slice(0, 1).toUpperCase() + str.slice(1, length);\n  }\n\n  return str;\n}"
            },
            {
                "name": "checksReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(LoadChecks, state => {\n    return { ...state, loading: true };\n  }),\n  on(LoadChecksSuccess, (state, props) => {\n    return { ...state, checks: props.checks, loading: false };\n  }),\n  on(ClearMonitoringPage, () => initialState)\n)"
            },
            {
                "name": "CleanProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Profiles] Clean profiles state')"
            },
            {
                "name": "ClearFilterDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] clear date time range'\n)"
            },
            {
                "name": "ClearMonitoringPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Monitoring] clear page')"
            },
            {
                "name": "ClearTestingDialog",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Testing window] clear')"
            },
            {
                "name": "CloseCheckDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] close check details'\n)"
            },
            {
                "name": "cmpOperators",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/models/threshold-cmp-operators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<literal type>",
                "defaultValue": "[\n  { kind: 'Eq' },\n  { kind: 'NotEq' },\n  { kind: 'Greater' },\n  { kind: 'Less' },\n  { kind: 'GreaterEq' },\n  { kind: 'LessEq' },\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  C.SidebarComponent,\n  C.InputTextComponent,\n  C.IconComponent,\n  C.ApplicationStatusComponent,\n  C.ErrorMessageComponent,\n  C.ModelVersionStatusComponent,\n  C.CommandTemplateComponent,\n  C.LogsComponent,\n  C.ButtonComponent,\n  C.TooltipComponent,\n  C.LoaderComponent,\n  C.LoadingComponent,\n  C.TensorImageListComponent,\n  C.ServiceAvailabilityComponent,\n  C.AlertMessageComponent,\n  C.LogComponent,\n]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/request-details/request-details.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  LogComponent,\n  LogDetailComponent,\n  MetricsChecksComponent,\n  RawChecksComponent,\n]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/testing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  ProfilesComponent,\n  ModelVersionsTableComponent,\n  MetricComponent,\n  MetricsComponent,\n  HealthTimelineComponent,\n  ChartsComponent,\n  ChartComponent,\n  ModelVersionLogComponent,\n  ReqResLogsComponent,\n  ServablesTableComponent,\n  ApplicationFormComponent,\n  AggregationComponent,\n  RequestsInformationComponent,\n  LogComponent,\n  LogDetailComponent,\n  CustomCheckComponent,\n  CustomChecksComponent,\n  LatencyCheckComponent,\n  ErrorCheckComponent,\n  SignaturesComponent,\n  RawChecksComponent,\n  BatchMetricsComponent,\n  LogMetricsTableComponent,\n  ApplicationsItemDetailComponent,\n  ModelVersionsComponent,\n  ModelVersionDetailsComponent,\n  ModelVersionsRowComponent,\n  ModelVersionsTagsComponent,\n  RegimeSelectorComponent,\n  CheckChartComponent,\n  ScatterPlotComponent,\n  ScatterPlotLegendComponent,\n  GradientLegendComponent,\n  VisualizationMetricsComponent,\n  CustomMetricsComponent,\n  ModelVersionServicesComponent,\n  ModelsHeaderComponent,\n]"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/hs-d3/hs-d3.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  D3LineComponent,\n  D3AreaComponent,\n  D3ThresholdComponent,\n  D3PlotBandComponent,\n]"
            },
            {
                "name": "CompositeSignature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/signature.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  subfields: [SimpleInput, SimpleInput2],\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/helpers/initializeBrowser.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('../playwright.config')"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /.spec\\.ts$/)"
            },
            {
                "name": "createLogStream",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] create log stream',\n  props<{ name: string }>()\n)"
            },
            {
                "name": "customNotifierOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NotifierOptions",
                "defaultValue": "{\n  position: {\n    horizontal: {\n      position: 'right',\n      distance: 12,\n    },\n    vertical: {\n      position: 'bottom',\n      distance: 12,\n      gap: 10,\n    },\n  },\n  theme: 'material',\n  behaviour: {\n    autoHide: 5000,\n    onClick: 'hide',\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4,\n  },\n  animations: {\n    enabled: true,\n    show: {\n      preset: 'slide',\n      speed: 300,\n      easing: 'ease',\n    },\n    hide: {\n      preset: 'fade',\n      speed: 300,\n      easing: 'ease',\n      offset: 50,\n    },\n    shift: {\n      speed: 300,\n      easing: 'ease',\n    },\n    overlap: 150,\n  },\n}"
            },
            {
                "name": "defaultConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/hydro-config.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HydroConfig",
                "defaultValue": "{\n  showHeader: true,\n  liftMetadata: false,\n}"
            },
            {
                "name": "defaultConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/ui-build-info.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "UiBuildInfo",
                "defaultValue": "{}"
            },
            {
                "name": "defaultDepConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/deployment-configs/mocks/depconfig.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'hydrosphere_manager_default'"
            },
            {
                "name": "Delete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] delete application',\n  props<{ application: Application }>(),\n)"
            },
            {
                "name": "DeleteDeploymentConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] delete',\n  props<{ name: string }>(),\n)"
            },
            {
                "name": "DeleteDeploymentConfigFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] failed deletion',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "DeleteDeploymentConfigSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] successful deletion',\n  props<{ name: string }>(),\n)"
            },
            {
                "name": "DeleteFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] delete application with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "DeleteMetric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] delete metric',\n  props<{ id: string }>()\n)"
            },
            {
                "name": "DeleteMetricFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] delete metric fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "DeleteMetricSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] delete metric success',\n  props<{ payload: { id: string } }>()\n)"
            },
            {
                "name": "DeleteModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] delete',\n  props<{ modelId: number }>()\n)"
            },
            {
                "name": "DeleteModelFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] delete with fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "DeleteModelSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] delete with success',\n  props<{ modelId: number }>()\n)"
            },
            {
                "name": "DeleteModelVersionSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] deleted with success',\n  props<{ modelVersionId: number }>(),\n)"
            },
            {
                "name": "deleteServable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] delete',\n  props<{ name: string }>()\n)"
            },
            {
                "name": "deleteServableFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] delete failed',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "deleteServableSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] delete success',\n  props<{ name: string }>()\n)"
            },
            {
                "name": "DeleteSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] delete application with success',\n  props<{ applicationName: string }>(),\n)"
            },
            {
                "name": "DEPLOYMENT_CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-delete-deployment-config/dialog-delete-deployment-config.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken(\n  'deployment config name'\n)"
            },
            {
                "name": "deploymentConfigReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/deployment-configs.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(GetDeploymentConfigs, state => ({ ...state, loading: true })),\n  on(GetDeploymentConfigsSuccess, (state, { payload }) => {\n    return adapter.setAll(payload, { ...state, loaded: true, loading: false });\n  }),\n  on(GetDeploymentConfigsFail, state => ({ ...state, loading: false })),\n  on(DeleteDeploymentConfigSuccess, (state, { name }) => {\n    return adapter.removeOne(name, state);\n  }),\n  on(AddDeploymentConfigSuccess, (state, { payload }) => {\n    return adapter.addOne(payload, state);\n  }),\n  on(\n    ToggleFavorite,\n    (\n      state,\n      {\n        payload: {\n          depConfig: { name, favorite },\n        },\n      },\n    ) => {\n      return adapter.updateOne(\n        { id: name, changes: { favorite: !favorite } },\n        state,\n      );\n    },\n  ),\n)"
            },
            {
                "name": "deploymentConfigsUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "url + '/deployment_configs'"
            },
            {
                "name": "DIALOGS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/dialogs.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  C.DialogDeleteModelComponent,\n  C.DialogDeleteApplicationComponent,\n  C.DialogAddApplicationComponent,\n  C.DialogTestComponent,\n  C.DialogUpdateApplicationComponent,\n  C.DialogUpdateModelVersionComponent,\n  C.DialogDeleteServableComponent,\n  C.DialogDeleteDeploymentConfigComponent,\n  C.DialogDeleteMetricComponent,\n  C.DialogMetricComponent,\n  C.DialogMetricsComponent,\n  C.DialogRequestsErrorsComponent,\n  C.BuildInformationDialogComponent,\n  C.ExplanationDialogComponent,\n]"
            },
            {
                "name": "directives",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  D.BuildInformationDirective,\n  D.CopyToBufferDirective,\n  D.AutofocusedDirective,\n  D.HideInZenModeDirective,\n  D.ShowInZenModeDirective,\n  D.ScaleImageDirective,\n  D.PixelToCanvasDirective,\n  D.TippyDirective,\n]"
            },
            {
                "name": "DIRECTIVES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/testing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[UpdateModelVersionDirective]"
            },
            {
                "name": "DIRECTIVES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/hs-d3/hs-d3.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[D3AxisDirective]"
            },
            {
                "name": "domain",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Array<number>",
                "defaultValue": "[\n  0,\n  0.03125,\n  0.0625,\n  0.09375,\n  0.125,\n  0.15625,\n  0.1875,\n  0.21875,\n  0.25,\n  0.28125,\n  0.3125,\n  0.34375,\n  0.375,\n  0.40625,\n  0.4375,\n  0.46875,\n  0.5,\n  0.53125,\n  0.5625,\n  0.59375,\n  0.625,\n  0.65625,\n  0.6875,\n  0.71875,\n  0.75,\n  0.78125,\n  0.8125,\n  0.84375,\n  0.875,\n  0.90625,\n  0.9375,\n  0.96875,\n  1,\n]"
            },
            {
                "name": "emptyAggregationList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/mocks/aggregation-list.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AggregationsList([], 0, 0, 0)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  tm: false,\n  host: 'http://localhost',\n  port: '',\n  apiUrl: 'api/v2',\n  uiUrl: '/ui/v2',\n  monitoringUrl: 'monitoring',\n  timemachineUrl: 'timemachine',\n  servableUrl: 'servable',\n  rootCauseUrl: 'rootcause',\n  statUrl: 'stat',\n  visualizationUrl: 'visualization',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  tm: false,\n  host: 'http://localhost',\n  port: '',\n  apiUrl: 'api/v2',\n  uiUrl: '/ui/v2',\n  monitoringUrl: 'monitoring',\n  timemachineUrl: 'timemachine',\n  servableUrl: 'servable',\n  rootCauseUrl: 'rootcause',\n  statUrl: 'stat',\n  visualizationUrl: 'visualization',\n}"
            },
            {
                "name": "explanationMock",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/mocks/explanation.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Explanation",
                "defaultValue": "{\n  description: 'Ok',\n  state: ExplanationStatus.success,\n  result: anchorResultMock,\n}"
            },
            {
                "name": "extModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/build-specifics/index.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[]"
            },
            {
                "name": "extModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/build-specifics/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    StoreDevtoolsModule.instrument({\n        maxAge: 25\n    })\n]"
            },
            {
                "name": "FailedModelVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/modelVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockModelVersion1Model1.build({\n  runtime: MockRuntime2,\n  model: MockModel2,\n  status: ModelVersionStatus.Failed,\n})"
            },
            {
                "name": "Flat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FlatAccent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FlatCyan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FlatDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FlatPrimary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FlatWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "fromSnakeToCamel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/from-snake-to-camel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(str: string): string => {\n  const [head, ...tail] = str.split('_');\n  const res = tail.map(w => capitalizeString(w)).join();\n  return head + res;\n}"
            },
            {
                "name": "generateData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => {\n  return x.map(_ => y.map(() => Math.random()));\n}"
            },
            {
                "name": "GenerateInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Application] generate input')"
            },
            {
                "name": "GenerateInputFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] generate input with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "GenerateInputSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] generate input with success',\n  props<{ payload: { name: string; input: any } }>(),\n)"
            },
            {
                "name": "Get",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Application] Get all applications')"
            },
            {
                "name": "Get",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/service-statuses.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ServiceStatus] Get services statuses',\n  props<{ payload: ModelVersionId }>()\n)"
            },
            {
                "name": "getAggregationState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.aggregation\n)"
            },
            {
                "name": "getAll",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Servables] get all')"
            },
            {
                "name": "getAllFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servables] get all failed',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "getAllSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servables] get all success',\n  props<{ servables: Servable[] }>()\n)"
            },
            {
                "name": "GetById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] Get application by id',\n  props<{ application: Application }>(),\n)"
            },
            {
                "name": "GetByIdFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] Get application by id with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "GetByIdSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] Get application by id with success',\n  props<{ payload: Application }>(),\n)"
            },
            {
                "name": "getChecksState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.checks\n)"
            },
            {
                "name": "GetDeploymentConfigs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] get all deployment configs',\n)"
            },
            {
                "name": "GetDeploymentConfigsFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] get all failed',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "GetDeploymentConfigsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] get all succeed',\n  props<{ payload: DeploymentConfig[] }>(),\n)"
            },
            {
                "name": "GetFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] Get all applications with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "GetFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/service-statuses.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ServiceStatus] Get services statuses with fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "GetFields",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Profiles] Get fields',\n  props<{ modelVersionId: string }>()\n)"
            },
            {
                "name": "GetFieldsFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Profiles] Get fields with fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "GetFieldsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Profiles] Get fields with success',\n  props<{ payload: string[] }>()\n)"
            },
            {
                "name": "getFiledNameByTensorDataType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/field-name-by-tensor-data-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(type: number) => {\n  switch (type) {\n    case dataType.DT_FLOAT:\n      return 'float_val';\n    case dataType.DT_HALF:\n      return 'half_val';\n    case dataType.DT_DOUBLE:\n      return 'double_val';\n    case dataType.DT_INT32:\n    case dataType.DT_INT16:\n    case dataType.DT_INT8:\n    case dataType.DT_UINT8:\n      return 'int_val';\n    case dataType.DT_UINT32:\n      return 'uint32_val';\n    case dataType.DT_UINT64:\n      return 'uint64_val';\n    case dataType.DT_STRING:\n      return 'string_val';\n    case dataType.DT_COMPLEX64:\n      return 'complex_val';\n    case dataType.DT_INT64:\n      return 'int64_val';\n    case dataType.DT_BOOL:\n      return 'bool_val';\n    case dataType.DT_COMPLEX128:\n      return 'dcomplex_val';\n    case dataType.DT_VARIANT:\n      return 'variant_val';\n  }\n}"
            },
            {
                "name": "getLogs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Servable] get servable logs')"
            },
            {
                "name": "getMetricsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.metrics\n)"
            },
            {
                "name": "GetModels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Model] get all model')"
            },
            {
                "name": "GetModelsFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] get all models with fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "GetModelsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] get all model with success',\n  props<{ payload: Model[] }>()\n)"
            },
            {
                "name": "GetModelVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Model Version]')"
            },
            {
                "name": "GetModelVersionsFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "GetModelVersionsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] with success',\n  props<{ payload: ModelVersion[] }>(),\n)"
            },
            {
                "name": "getMonitoringServiceError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getMonitoringServiceStatusState,\n  state => state.error\n)"
            },
            {
                "name": "getMonitoringServiceStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getMonitoringServiceStatusState,\n  state => state.status\n)"
            },
            {
                "name": "getMonitoringServiceStatusState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.serviceStatus\n)"
            },
            {
                "name": "getMonitoringState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('monitoring')"
            },
            {
                "name": "GetProfiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Profiles] Get profiles',\n  props<{ modelVersionId: number; fieldName: string }>()\n)"
            },
            {
                "name": "GetProfilesFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Profiles] Get profiles with fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "GetProfilesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/profiles.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Profiles] Get profiles with success',\n  props<{ payload: Profiles }>()\n)"
            },
            {
                "name": "getSelectedApplicationId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): number => application && application.id,\n)"
            },
            {
                "name": "getSelectedApplicationInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => application && application.input,\n)"
            },
            {
                "name": "getSelectedApplicationName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => application && application.name,\n)"
            },
            {
                "name": "getSelectedApplicationOutput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => application && application.output,\n)"
            },
            {
                "name": "getSelectedApplicationSignatureName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => {\n    return application && application.signature.signatureName;\n  },\n)"
            },
            {
                "name": "getSelectedApplicationTestStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): TestStatus =>\n    application && application.testStatus,\n)"
            },
            {
                "name": "getServable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] get servable',\n  props<{ name: string }>()\n)"
            },
            {
                "name": "getServableFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] get servable failed',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "getServableSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servable] get servable success',\n  props<{ servable: Servable }>()\n)"
            },
            {
                "name": "GetServiceStatusAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring service] get status'\n)"
            },
            {
                "name": "GetSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] Get all applications with success',\n  props<{ payload: Application[] }>(),\n)"
            },
            {
                "name": "GetSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/service-statuses.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[ServiceStatus] Get services statuses with success',\n  props<{ payload: ModelVersionServiceStatusesEntity }>()\n)"
            },
            {
                "name": "getUiState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getMonitoringState, state => state.ui)"
            },
            {
                "name": "heatmapConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HeatmapConfig",
                "defaultValue": "{\n  xLabels: x,\n  yLabels: y,\n  data: heatmapData,\n}"
            },
            {
                "name": "heatmapData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HeatmapData[]",
                "defaultValue": "toHeatmapData(x, y, generateData())"
            },
            {
                "name": "HIGHCHART_COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/profiler/components/profiles-comparison-histogram/highchart-colors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  profiles: {\n    training: '#7cb5ec',\n    production: '#ffaf6e',\n  },\n}"
            },
            {
                "name": "hrefFromHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/base-href-factory.util.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "document\n  .getElementsByTagName('base')[0]\n  .getAttribute('href')"
            },
            {
                "name": "HS_ABSOLUTE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/base-url.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('absolute url')"
            },
            {
                "name": "HS_BASE_URL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/base-url.token.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('')"
            },
            {
                "name": "initialFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ChecksFilter",
                "defaultValue": "{\n  filterBy: ChecksHealthFilterOptions.all,\n  scoreFilter: {\n    byMetric: true,\n    metricScoreRange: [0, 100],\n    byRaw: true,\n    rawScoreRange: [0, 100],\n  },\n}"
            },
            {
                "name": "initializeChartOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/components/checks/check-chart_v2/initializeChartOptions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "config => {\n  return {\n    tooltip: {},\n    title: {\n      text: config.currentValue.name,\n      style: {\n        fontFamily: 'Roboto Regular, sans-serif',\n        fontWeight: 'bold',\n        fontSize: '16px',\n        color: '#243b53',\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    series: [\n      {\n        name: '',\n        data: [],\n        type: 'spline',\n      },\n    ],\n    lang: {\n      noData: 'no data available',\n    },\n    noData: {\n      style: {\n        fontFamily: 'Roboto Regular, sans-serif',\n        fontWeight: 'bold',\n        fontSize: '14px',\n        color: '#bcccdc',\n      },\n    },\n    xAxis: {\n      plotBands: [],\n    },\n    yAxis: {\n      title: {\n        text: undefined,\n      },\n      plotLines: [],\n    },\n    plotOptions: {\n      spline: {\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        marker: {\n          enabled: false,\n        },\n      },\n      series: {\n        cursor: 'pointer',\n        point: {\n          events: {},\n        },\n      },\n    },\n  };\n}"
            },
            {
                "name": "initialMenuState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MenuState",
                "defaultValue": "{\n  showed: false,\n  context: null,\n  top: 0,\n  left: 0,\n  statuses: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/model-version.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "adapter.getInitialState({\n  loading: false,\n  loaded: false,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/applications.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  ids: [],\n  entities: {},\n  loaded: false,\n  loading: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/deployment-configs.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/model-versions.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/models.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/root.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HydroServingState",
                "defaultValue": "{\n  router: {\n    state: {\n      url: '/',\n      params: {},\n      queryParams: {},\n    },\n    navigationId: 0,\n  },\n  applications: fromApplications.initialState,\n  models: fromModels.initialState,\n  modelVersions: fromModelVersions.initialState,\n  servables: fromServables.initialState,\n  deploymentConfigs: fromDeploymentConfigs.initialState,\n  serviceStatuses: fromServiceStatuses.initialState,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/servables.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  error: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/states/service-statuses.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  ids: [],\n  entities: {},\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/metric-charts.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  modelVersionsToCompare: [],\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  explanation: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/store/stat.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  loading: false,\n  error: null,\n  stat: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/visualization/store/visualization.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  taskId: null,\n  result: null,\n  error: null,\n  status: ETaskState.unknown,\n  colorBy: 'class_label',\n  colorizers: [],\n  selectedColorizer: undefined,\n  data: [],\n  selectedPointIndex: undefined,\n  top100: [],\n  counterfactuals: [],\n  visualizationMetrics: undefined,\n  requestsIds: [],\n  message: null,\n  params: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  minDate: undefined,\n  maxDate: undefined,\n  filterDateRange: undefined,\n  aggregationList: undefined,\n  selectedAggregation: undefined,\n  error: undefined,\n  offset: 0,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  checks: undefined,\n  loading: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "adapter.getInitialState({\n  error: null,\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  status: MonitoringServiceStatus.UNKNOWN,\n  error: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\n  checksIdToShow: undefined,\n}"
            },
            {
                "name": "isCustomMetric",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(metric: MetricSpecification): boolean => {\n  const systemMetrics = new Set([\n    'fake-id-error-rate',\n    'fake-id-latency',\n    'fake-id-counter',\n  ]);\n\n  return !systemMetrics.has(metric.id);\n}"
            },
            {
                "name": "isEmptyObj",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/utils/is-empty-object.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "obj => {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}"
            },
            {
                "name": "LATEST_MODEL_VERSION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ModelVersion>(\n  'latest model version',\n)"
            },
            {
                "name": "LoadAggregations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load aggregations',\n  props<{\n    modelVersion: ModelVersion;\n    limit: number;\n    offset: number;\n    from?: string;\n    to?: string;\n  }>()\n)"
            },
            {
                "name": "LoadAggregationsFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load aggregations failed',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "LoadAggregationsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load aggregations success',\n  props<{\n    aggregationList: AggregationsList;\n    minDate: number;\n    maxDate: number;\n  }>()\n)"
            },
            {
                "name": "LoadChecks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/checks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load checks',\n  props<{\n    modelVersionId: number;\n    from: string;\n    to: string;\n  }>()\n)"
            },
            {
                "name": "LoadChecksSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/checks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load checks success',\n  props<{ checks: CheckCollection }>()\n)"
            },
            {
                "name": "LoadMetrics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Metrics] get metrics')"
            },
            {
                "name": "LoadMetricsFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] get metrics fail',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "LoadMetricsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Metrics] get metrics success',\n  props<{ payload: MetricSpecification[] }>()\n)"
            },
            {
                "name": "LoadNewerAggregation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load newer aggregation'\n)"
            },
            {
                "name": "LoadOlderAggregation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] load older aggregation'\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "METHOD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('method')"
            },
            {
                "name": "METRIC_ID_VALUE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-delete-metric/dialog-delete-metric.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('metric id value')"
            },
            {
                "name": "metricSpec",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-metric/dialog-metric.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<MetricSpecification>(\n  'metric spec id'\n)"
            },
            {
                "name": "metricsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(AddMetricSuccess, (state, action) =>\n    adapter.addOne(action.payload, state)\n  ),\n  on(LoadMetricsSuccess, (state, action) =>\n    adapter.upsertMany(action.payload, state)\n  ),\n  on(LoadMetricsFail, (state, action) => ({\n    ...state,\n    error: action.error,\n    loading: false,\n  })),\n  on(DeleteMetricSuccess, (state, action) =>\n    adapter.removeOne(action.payload.id, state)\n  ),\n  on(ClearMonitoringPage, () => initialState)\n)"
            },
            {
                "name": "MockActivatedRouterProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: ActivatedRoute,\n  useValue: {},\n}"
            },
            {
                "name": "MockApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/application.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Application>(({ sequence }) => ({\n  id: sequence,\n  signature: MockSignature1.build(),\n  name: 'app1',\n  executionGraph: {\n    stages: [\n      {\n        modelVariants: [MockService.build()],\n        signature: 'signature',\n      },\n      {\n        modelVariants: [MockService2],\n        signature: 'signature',\n      },\n    ],\n  },\n  namespace: 'namespace',\n  input: '',\n  output: '',\n  testStatus: TestStatus.Undefined,\n  error: '',\n  kafkaStreaming: [],\n  status: ApplicationStatus.Ready,\n  favorite: false,\n  deploymentConfiguration: MockDeploymentConfig1.build(),\n}))"
            },
            {
                "name": "mockChartConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/mocks/chart-config.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ChartConfig",
                "defaultValue": "{\n  size: {\n    height: 150,\n    width: 300,\n    margins: {\n      left: 40,\n      right: 20,\n      top: 10,\n      bottom: 24,\n    },\n  },\n  series: [],\n  name: '',\n}"
            },
            {
                "name": "mockCheck",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/mocks/check.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Check",
                "defaultValue": "new Check({\n  _hs_timestamp: 0,\n  _id: 'id',\n  _hs_error: '',\n  _hs_latency: 1,\n  _hs_model_version_id: 2,\n  _hs_overall_score: 0,\n  _hs_prediction_score: 0,\n  _hs_raw_checks: { overall: [] },\n  _hs_metric_checks: {},\n  _hs_score: 0,\n  _hs_model_incremental_version: 1,\n  _hs_model_name: 'model',\n})"
            },
            {
                "name": "mockCheckCollection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/mocks/check-collection.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CheckCollection",
                "defaultValue": "new CheckCollection([\n  mockCheck,\n])"
            },
            {
                "name": "MockCompositeSignature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/signature.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define(() => ({\n  signatureName: 'composite_signature_1',\n  inputs: [CompositeSignature],\n  outputs: [{ name: 'output_1' }],\n}))"
            },
            {
                "name": "MockDeploymentConfig1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/deployment-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<DeploymentConfig>(() => ({\n  name: 'test1',\n  container: null,\n  pod: null,\n  deployment: null,\n  hpa: {\n    minReplicas: 2,\n    maxReplicas: 10,\n    cpuUtilization: 80,\n  },\n  favorite: false,\n}))"
            },
            {
                "name": "MockDeploymentConfig2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/deployment-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockDeploymentConfig1.build({\n  name: 'hydrosphere_manager_default',\n})"
            },
            {
                "name": "mockEmptyCheckCollection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/mocks/check-collection.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CheckCollection",
                "defaultValue": "new CheckCollection(\n  []\n)"
            },
            {
                "name": "MockHostSelector",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/hostSelector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define(({ sequence }) => ({\n  id: sequence,\n  name: 'CPU',\n  placeholder: 'mockHostSelectorPlaceHolder',\n}))"
            },
            {
                "name": "MockImage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/image.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Image>(() => ({\n  name: 'mockImage',\n  tag: 'mockImageTag',\n  sha256: 'mockSha256',\n}))"
            },
            {
                "name": "MockLatestModelVersionId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: LATEST_MODEL_VERSION,\n  useValue: MockModelVersion2Model1,\n}"
            },
            {
                "name": "MockMetricSpecification",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/metric-specification.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<MetricSpecification>(\n  () => ({\n    id: 'id',\n    name: 'counter',\n    config: {\n      threshold: 0,\n      thresholdCmpOperator: { kind: '' },\n      modelVersionId: 1,\n    },\n    modelVersionId: 1,\n  })\n)"
            },
            {
                "name": "MockModel1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Model>(({ sequence }) => ({\n  id: sequence,\n  name: 'mockModel_1_Name',\n  modelVersions: [],\n  favorite: false,\n}))"
            },
            {
                "name": "MockModel2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockModel1.build({\n  name: 'Sooooooooooooooo_long_mockModel_2_Name',\n})"
            },
            {
                "name": "MockModelSignature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/modelVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<ModelSignature>(() => ({\n  signatureName: 'test',\n  outputs: [],\n  inputs: [],\n}))"
            },
            {
                "name": "MockModelVersion1Model1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/modelVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<\n  ModelVersion,\n  ModelSignature\n>(({ sequence }) => ({\n  get contractInputs(): Input[] {\n    return [];\n  },\n  get contractOutputs(): Output[] {\n    return [];\n  },\n  isReleasedAndInternal(): boolean {\n    return true;\n  },\n  addApplication(applicationName: string): ModelVersion {\n    return MockModelVersion1Model1.build();\n  },\n  id: sequence,\n  image: MockImage.build(),\n  created: new Date().toString(),\n  finished: new Date().toString(),\n  modelVersion: 1,\n  modelSignature: MockModelSignature.build(),\n  runtime: MockRuntime.build(),\n  model: MockModel1.build(),\n  status: ModelVersionStatus.Released,\n  applications: [],\n  metadata: {},\n  isExternal: false,\n  nameWithId: () => 'name',\n}))"
            },
            {
                "name": "MockModelVersion2Model1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/modelVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockModelVersion1Model1.build({\n  modelVersion: 2,\n  runtime: MockRuntime3,\n  applications: ['app1', 'app2'],\n})"
            },
            {
                "name": "MockModelVersion3Model2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/modelVersion.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockModelVersion1Model1.build({\n  runtime: MockRuntime2,\n  model: MockModel2,\n  applications: ['app1', 'app2'],\n})"
            },
            {
                "name": "MockRouter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  events: of(''),\n}"
            },
            {
                "name": "MockRouterProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: Router,\n  useValue: MockRouter,\n}"
            },
            {
                "name": "MockRuntime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/runtime.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Runtime>(() => ({\n  name: 'mockRuntime',\n  tag: 'mockRuntimeTag',\n  sha256: 'mockRuntimeSha256',\n}))"
            },
            {
                "name": "MockRuntime2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/runtime.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockRuntime.build({ name: 'mockRuntime2' })"
            },
            {
                "name": "MockRuntime3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/runtime.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockRuntime.build({ name: 'mockRuntime3' })"
            },
            {
                "name": "MockSelectedApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: SELECTED_APPLICATION,\n  useValue: {},\n}"
            },
            {
                "name": "MockSelectedModelVariantProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: SELECTED_MODEL_VARIANT,\n  useValue: {},\n}"
            },
            {
                "name": "MockServable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/servable.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Servable>(() => ({\n  modelVersionId: 1,\n  fullName: 'test',\n  name: 'test',\n  status: 'Serving',\n  statusMessage: '',\n  message: '',\n  logStream: of(),\n  deploymentConfiguration: MockDeploymentConfig1.build(),\n}))"
            },
            {
                "name": "MockService",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/application.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<ModelVariant>(() => ({\n  weight: 100,\n  modelVersionId: 1,\n  deploymentConfigurationName: 'default',\n}))"
            },
            {
                "name": "MockService2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/application.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "MockService.build({\n  modelVersionId: 2,\n})"
            },
            {
                "name": "MockSignature1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/signature.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Signature>(() => ({\n  signatureName: 'signature_1',\n  inputs: [SimpleInput.build()],\n  outputs: [SimpleOutput.build()],\n}))"
            },
            {
                "name": "mockStat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/mocks/stat.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Stat",
                "defaultValue": "{\n  overall_probability_drift: 0.038461538461538464,\n  per_feature_report: {\n    age: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'age',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [\n                0.03,\n                0.03,\n                0.01,\n                0.03,\n                0.05,\n                0.02,\n                0.03,\n                0.01,\n                0.05,\n                0.04,\n                0.05,\n                0.02,\n                0.04,\n                0.04,\n                0.03,\n                0.02,\n                0.04,\n                0.0,\n                0.02,\n                0.01,\n                0.0,\n                0.05,\n                0.03,\n                0.04,\n                0.01,\n                0.02,\n                0.01,\n                0.0,\n                0.02,\n                0.02,\n                0.0,\n                0.0,\n                0.0,\n                0.03,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.01,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '17.00 <= 18.24',\n              '18.24 <= 19.47',\n              '19.47 <= 20.71',\n              '20.71 <= 21.95',\n              '21.95 <= 23.19',\n              '23.19 <= 24.42',\n              '24.42 <= 25.66',\n              '25.66 <= 26.90',\n              '26.90 <= 28.14',\n              '28.14 <= 29.37',\n              '29.37 <= 30.61',\n              '30.61 <= 31.85',\n              '31.85 <= 33.08',\n              '33.08 <= 34.32',\n              '34.32 <= 35.56',\n              '35.56 <= 36.80',\n              '36.80 <= 38.03',\n              '38.03 <= 39.27',\n              '39.27 <= 40.51',\n              '40.51 <= 41.75',\n              '41.75 <= 42.98',\n              '42.98 <= 44.22',\n              '44.22 <= 45.46',\n              '45.46 <= 46.69',\n              '46.69 <= 47.93',\n              '47.93 <= 49.17',\n              '49.17 <= 50.41',\n              '50.41 <= 51.64',\n              '51.64 <= 52.88',\n              '52.88 <= 54.12',\n              '54.12 <= 55.36',\n              '55.36 <= 56.59',\n              '56.59 <= 57.83',\n              '57.83 <= 59.07',\n              '59.07 <= 60.31',\n              '60.31 <= 61.54',\n              '61.54 <= 62.78',\n              '62.78 <= 64.02',\n              '64.02 <= 65.25',\n              '65.25 <= 66.49',\n              '66.49 <= 67.73',\n              '67.73 <= 68.97',\n              '68.97 <= 70.20',\n              '70.20 <= 71.44',\n              '71.44 <= 72.68',\n              '72.68 <= 73.92',\n              '73.92 <= 75.15',\n              '75.15 <= 76.39',\n              '76.39 <= 77.63',\n              '77.63 <= 78.86',\n              '78.86 <= 80.10',\n              '80.10 <= 81.34',\n              '81.34 <= 82.58',\n              '82.58 <= 83.81',\n              '83.81 <= 85.05',\n              '85.05 <= 86.29',\n              '86.29 <= 87.53',\n              '87.53 <= 88.76',\n              '88.76 <= 90.00',\n            ],\n            x_axis_name: 'age',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [\n                0.029,\n                0.0218,\n                0.0231,\n                0.022,\n                0.0497,\n                0.0236,\n                0.0242,\n                0.0222,\n                0.0461,\n                0.0209,\n                0.0212,\n                0.0217,\n                0.0406,\n                0.0197,\n                0.0202,\n                0.0195,\n                0.0341,\n                0.0165,\n                0.0162,\n                0.0162,\n                0.0157,\n                0.0289,\n                0.0137,\n                0.0137,\n                0.0129,\n                0.0214,\n                0.0105,\n                0.0108,\n                0.0088,\n                0.0159,\n                0.0084,\n                0.0076,\n                0.007,\n                0.0143,\n                0.0065,\n                0.0063,\n                0.0059,\n                0.01,\n                0.0041,\n                0.0035,\n                0.0035,\n                0.0029,\n                0.0048,\n                0.0017,\n                0.0018,\n                0.0017,\n                0.0024,\n                0.0013,\n                0.0007,\n                0.0006,\n                0.001,\n                0.0005,\n                0.0004,\n                0.0001,\n                0.0004,\n                0.0,\n                0.0,\n                0.0001,\n                0.0011,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '17.00 <= 18.24',\n              '18.24 <= 19.47',\n              '19.47 <= 20.71',\n              '20.71 <= 21.95',\n              '21.95 <= 23.19',\n              '23.19 <= 24.42',\n              '24.42 <= 25.66',\n              '25.66 <= 26.90',\n              '26.90 <= 28.14',\n              '28.14 <= 29.37',\n              '29.37 <= 30.61',\n              '30.61 <= 31.85',\n              '31.85 <= 33.08',\n              '33.08 <= 34.32',\n              '34.32 <= 35.56',\n              '35.56 <= 36.80',\n              '36.80 <= 38.03',\n              '38.03 <= 39.27',\n              '39.27 <= 40.51',\n              '40.51 <= 41.75',\n              '41.75 <= 42.98',\n              '42.98 <= 44.22',\n              '44.22 <= 45.46',\n              '45.46 <= 46.69',\n              '46.69 <= 47.93',\n              '47.93 <= 49.17',\n              '49.17 <= 50.41',\n              '50.41 <= 51.64',\n              '51.64 <= 52.88',\n              '52.88 <= 54.12',\n              '54.12 <= 55.36',\n              '55.36 <= 56.59',\n              '56.59 <= 57.83',\n              '57.83 <= 59.07',\n              '59.07 <= 60.31',\n              '60.31 <= 61.54',\n              '61.54 <= 62.78',\n              '62.78 <= 64.02',\n              '64.02 <= 65.25',\n              '65.25 <= 66.49',\n              '66.49 <= 67.73',\n              '67.73 <= 68.97',\n              '68.97 <= 70.20',\n              '70.20 <= 71.44',\n              '71.44 <= 72.68',\n              '72.68 <= 73.92',\n              '73.92 <= 75.15',\n              '75.15 <= 76.39',\n              '76.39 <= 77.63',\n              '77.63 <= 78.86',\n              '78.86 <= 80.10',\n              '80.10 <= 81.34',\n              '81.34 <= 82.58',\n              '82.58 <= 83.81',\n              '83.81 <= 85.05',\n              '85.05 <= 86.29',\n              '86.29 <= 87.53',\n              '87.53 <= 88.76',\n              '88.76 <= 90.00',\n            ],\n            x_axis_name: 'age',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          17.0,\n          18.23728813559322,\n          19.47457627118644,\n          20.71186440677966,\n          21.949152542372882,\n          23.186440677966104,\n          24.423728813559322,\n          25.661016949152543,\n          26.898305084745765,\n          28.135593220338983,\n          29.372881355932204,\n          30.610169491525426,\n          31.847457627118644,\n          33.08474576271186,\n          34.32203389830509,\n          35.559322033898304,\n          36.79661016949153,\n          38.03389830508475,\n          39.271186440677965,\n          40.50847457627118,\n          41.74576271186441,\n          42.983050847457626,\n          44.22033898305085,\n          45.45762711864407,\n          46.69491525423729,\n          47.932203389830505,\n          49.16949152542373,\n          50.40677966101695,\n          51.64406779661017,\n          52.88135593220339,\n          54.11864406779661,\n          55.355932203389834,\n          56.59322033898305,\n          57.83050847457627,\n          59.067796610169495,\n          60.30508474576271,\n          61.54237288135593,\n          62.779661016949156,\n          64.01694915254237,\n          65.25423728813558,\n          66.49152542372882,\n          67.72881355932203,\n          68.96610169491525,\n          70.20338983050848,\n          71.4406779661017,\n          72.67796610169492,\n          73.91525423728814,\n          75.15254237288136,\n          76.38983050847457,\n          77.62711864406779,\n          78.86440677966101,\n          80.10169491525424,\n          81.33898305084746,\n          82.57627118644068,\n          83.8135593220339,\n          85.05084745762711,\n          86.28813559322035,\n          87.52542372881356,\n          88.76271186440678,\n          90.0,\n        ],\n        deployment: [\n          0.03,\n          0.03,\n          0.01,\n          0.03,\n          0.05,\n          0.02,\n          0.03,\n          0.01,\n          0.05,\n          0.04,\n          0.05,\n          0.02,\n          0.07,\n          0.05,\n          0.03,\n          0.02,\n          0.05,\n          0.0,\n          0.03,\n          0.02,\n          0.0,\n          0.06,\n          0.03,\n          0.05,\n          0.02,\n          0.03,\n          0.03,\n          0.0,\n          0.02,\n          0.02,\n          0.0,\n          0.01,\n          0.0,\n          0.03,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.01,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n        ],\n        training: [\n          0.02902245017044931,\n          0.021866650287153344,\n          0.023125825373913576,\n          0.022112342987009,\n          0.0504284266453733,\n          0.02450784681060164,\n          0.02582844507232579,\n          0.0241085961733362,\n          0.052271121894290715,\n          0.024968520622830993,\n          0.02644267682196493,\n          0.027271889683977764,\n          0.052301833481772676,\n          0.02721046650901385,\n          0.02690335063419428,\n          0.027579005558797335,\n          0.05174902490709745,\n          0.025060655385276864,\n          0.024385000460673812,\n          0.02481496268542121,\n          0.023955038235926415,\n          0.04588311169804367,\n          0.022542305211756396,\n          0.022634439974202267,\n          0.021743803937225515,\n          0.03439697797979178,\n          0.01848837566413808,\n          0.01827339455176438,\n          0.01468013881637542,\n          0.02699548539664015,\n          0.01286815515493996,\n          0.011240441018396241,\n          0.010994748318540585,\n          0.022143054574490957,\n          0.009582015294370565,\n          0.009213476244587083,\n          0.007923589570344891,\n          0.01345167531709714,\n          0.005466662571788336,\n          0.004606738122293542,\n          0.004637449709775498,\n          0.003685390497834833,\n          0.0060501827339455175,\n          0.0022112342987009,\n          0.002057676361291115,\n          0.001965541598845244,\n          0.0029483123982678664,\n          0.0014127330241700193,\n          0.0008906360369767513,\n          0.0007063665120850096,\n          0.0013513098492061054,\n          0.0006142317496391389,\n          0.0003685390497834833,\n          0.00018426952489174165,\n          0.00039925063726544026,\n          3.071158748195694e-5,\n          3.071158748195694e-5,\n          9.213476244587083e-5,\n          0.0013205982617241485,\n        ],\n      },\n      statistics: {\n        Mean: {\n          deployment: 37.55,\n          has_changed: false,\n          message: 'No significant change in the mean',\n          training: 38.58164675532078,\n        },\n        Median: {\n          deployment: 35.0,\n          has_changed: false,\n          message: 'No significant change in the median',\n          training: 37.0,\n        },\n        Variance: {\n          deployment: 180.1275,\n          has_changed: false,\n          message: 'No significant change in the variance',\n          training: 186.05568600783081,\n        },\n      },\n    },\n    capital_gain: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'capital_gain',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.0, 0.0, 0.86],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_gain',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0006, 0.0, 0.7586],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_gain',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: ['Low', 'High', 'None'],\n        deployment: [0.01, 0.01, 0.98],\n        training: [\n          0.047879364884370876,\n          0.03541046036669635,\n          0.9167101747489328,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.01, 0.01, 0.98],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.048, 0.035, 0.917],\n        },\n        'Unique Values': {\n          deployment: ['Low', 'High', 'None'],\n          has_changed: false,\n          message: 'No change',\n          training: ['Low', 'High', 'None'],\n        },\n      },\n    },\n    capital_loss: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'capital_loss',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.04, 0.0, 0.82],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_loss',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0073, 0.0, 0.7519],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_loss',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.5,\n      histogram: {\n        bins: ['Low', 'High', 'None'],\n        deployment: [0.05, 0.07, 0.88],\n        training: [\n          0.024016461410890328,\n          0.022634439974202267,\n          0.9533490986149074,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.05, 0.07, 0.88],\n          has_changed: true,\n          message:\n            'Production categorical data has different frequencies at p<.01',\n          training: [0.024, 0.023, 0.953],\n        },\n        'Unique Values': {\n          deployment: ['Low', 'High', 'None'],\n          has_changed: false,\n          message: 'No change',\n          training: ['Low', 'High', 'None'],\n        },\n      },\n    },\n    country: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'country',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Euro_2',\n              'United-States',\n              'South-America',\n              'Yugoslavia',\n              '?',\n              'China',\n              'British-Commonwealth',\n              'Latin-America',\n              'Euro_1',\n              'SE-Asia',\n              'Other',\n            ],\n            x_axis_name: 'country',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [\n                0.0235,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0049,\n                0.0,\n                0.0411,\n                0.0,\n              ],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Euro_2',\n              'United-States',\n              'South-America',\n              'Yugoslavia',\n              '?',\n              'China',\n              'British-Commonwealth',\n              'Latin-America',\n              'Euro_1',\n              'SE-Asia',\n              'Other',\n            ],\n            x_axis_name: 'country',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          'Euro_2',\n          'United-States',\n          'South-America',\n          'Yugoslavia',\n          '?',\n          'China',\n          'British-Commonwealth',\n          'Latin-America',\n          'Euro_1',\n          'SE-Asia',\n          'Other',\n        ],\n        deployment: [\n          0.0,\n          0.85,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.01,\n          0.11,\n          0.0,\n          0.01,\n          0.0,\n        ],\n        training: [\n          0.00672583765854857,\n          0.895857006848684,\n          0.006879395595958355,\n          0.000491385399711311,\n          0.0179048555019809,\n          0.004483891772365713,\n          0.010656920856239059,\n          0.03365989988022481,\n          0.007370780995669666,\n          0.009827707994226222,\n          0.0061423174963913885,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [\n            0.0,\n            0.85,\n            0.0,\n            0.0,\n            0.02,\n            0.0,\n            0.01,\n            0.11,\n            0.0,\n            0.01,\n            0.0,\n          ],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [\n            0.007,\n            0.896,\n            0.007,\n            0.0,\n            0.018,\n            0.004,\n            0.011,\n            0.034,\n            0.007,\n            0.01,\n            0.006,\n          ],\n        },\n        'Unique Values': {\n          deployment: [\n            'United-States',\n            '?',\n            'British-Commonwealth',\n            'Latin-America',\n            'SE-Asia',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            'Euro_2',\n            'United-States',\n            'South-America',\n            'Yugoslavia',\n            '?',\n            'China',\n            'British-Commonwealth',\n            'Latin-America',\n            'Euro_1',\n            'SE-Asia',\n            'Other',\n          ],\n        },\n      },\n    },\n    education: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'education',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.37, 0.0, 0.0, 0.0, 0.0, 0.47, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'High School grad',\n              'Prof-School',\n              'Bachelors',\n              'Dropout',\n              'Associates',\n              'Masters',\n              'Doctorate',\n            ],\n            x_axis_name: 'education',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.2786, 0.0, 0.0, 0.0, 0.0, 0.4631, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'High School grad',\n              'Prof-School',\n              'Bachelors',\n              'Dropout',\n              'Associates',\n              'Masters',\n              'Doctorate',\n            ],\n            x_axis_name: 'education',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          'High School grad',\n          'Prof-School',\n          'Bachelors',\n          'Dropout',\n          'Associates',\n          'Masters',\n          'Doctorate',\n        ],\n        deployment: [0.49, 0.01, 0.17, 0.22, 0.05, 0.03, 0.03],\n        training: [\n          0.5464205644789779,\n          0.0176898743896072,\n          0.16446055096587942,\n          0.13061638156076288,\n          0.07521267774331256,\n          0.05291606523141181,\n          0.012683885630048217,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.49, 0.01, 0.17, 0.22, 0.05, 0.03, 0.03],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.546, 0.018, 0.164, 0.131, 0.075, 0.053, 0.013],\n        },\n        'Unique Values': {\n          deployment: [\n            'High School grad',\n            'Prof-School',\n            'Bachelors',\n            'Dropout',\n            'Associates',\n            'Masters',\n            'Doctorate',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            'High School grad',\n            'Prof-School',\n            'Bachelors',\n            'Dropout',\n            'Associates',\n            'Masters',\n            'Doctorate',\n          ],\n        },\n      },\n    },\n    hours_per_week: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'hours_per_week',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.03,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.04,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.05,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.48,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.05,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.03,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.05,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '1.00 <= 1.31',\n              '1.31 <= 1.63',\n              '1.63 <= 1.94',\n              '1.94 <= 2.25',\n              '2.25 <= 2.57',\n              '2.57 <= 2.88',\n              '2.88 <= 3.19',\n              '3.19 <= 3.50',\n              '3.50 <= 3.82',\n              '3.82 <= 4.13',\n              '4.13 <= 4.44',\n              '4.44 <= 4.76',\n              '4.76 <= 5.07',\n              '5.07 <= 5.38',\n              '5.38 <= 5.70',\n              '5.70 <= 6.01',\n              '6.01 <= 6.32',\n              '6.32 <= 6.64',\n              '6.64 <= 6.95',\n              '6.95 <= 7.26',\n              '7.26 <= 7.58',\n              '7.58 <= 7.89',\n              '7.89 <= 8.20',\n              '8.20 <= 8.51',\n              '8.51 <= 8.83',\n              '8.83 <= 9.14',\n              '9.14 <= 9.45',\n              '9.45 <= 9.77',\n              '9.77 <= 10.08',\n              '10.08 <= 10.39',\n              '10.39 <= 10.71',\n              '10.71 <= 11.02',\n              '11.02 <= 11.33',\n              '11.33 <= 11.65',\n              '11.65 <= 11.96',\n              '11.96 <= 12.27',\n              '12.27 <= 12.58',\n              '12.58 <= 12.90',\n              '12.90 <= 13.21',\n              '13.21 <= 13.52',\n              '13.52 <= 13.84',\n              '13.84 <= 14.15',\n              '14.15 <= 14.46',\n              '14.46 <= 14.78',\n              '14.78 <= 15.09',\n              '15.09 <= 15.40',\n              '15.40 <= 15.72',\n              '15.72 <= 16.03',\n              '16.03 <= 16.34',\n              '16.34 <= 16.65',\n              '16.65 <= 16.97',\n              '16.97 <= 17.28',\n              '17.28 <= 17.59',\n              '17.59 <= 17.91',\n              '17.91 <= 18.22',\n              '18.22 <= 18.53',\n              '18.53 <= 18.85',\n              '18.85 <= 19.16',\n              '19.16 <= 19.47',\n              '19.47 <= 19.79',\n              '19.79 <= 20.10',\n              '20.10 <= 20.41',\n              '20.41 <= 20.73',\n              '20.73 <= 21.04',\n              '21.04 <= 21.35',\n              '21.35 <= 21.66',\n              '21.66 <= 21.98',\n              '21.98 <= 22.29',\n              '22.29 <= 22.60',\n              '22.60 <= 22.92',\n              '22.92 <= 23.23',\n              '23.23 <= 23.54',\n              '23.54 <= 23.86',\n              '23.86 <= 24.17',\n              '24.17 <= 24.48',\n              '24.48 <= 24.80',\n              '24.80 <= 25.11',\n              '25.11 <= 25.42',\n              '25.42 <= 25.73',\n              '25.73 <= 26.05',\n              '26.05 <= 26.36',\n              '26.36 <= 26.67',\n              '26.67 <= 26.99',\n              '26.99 <= 27.30',\n              '27.30 <= 27.61',\n              '27.61 <= 27.93',\n              '27.93 <= 28.24',\n              '28.24 <= 28.55',\n              '28.55 <= 28.87',\n              '28.87 <= 29.18',\n              '29.18 <= 29.49',\n              '29.49 <= 29.81',\n              '29.81 <= 30.12',\n              '30.12 <= 30.43',\n              '30.43 <= 30.74',\n              '30.74 <= 31.06',\n              '31.06 <= 31.37',\n              '31.37 <= 31.68',\n              '31.68 <= 32.00',\n              '32.00 <= 32.31',\n              '32.31 <= 32.62',\n              '32.62 <= 32.94',\n              '32.94 <= 33.25',\n              '33.25 <= 33.56',\n              '33.56 <= 33.88',\n              '33.88 <= 34.19',\n              '34.19 <= 34.50',\n              '34.50 <= 34.81',\n              '34.81 <= 35.13',\n              '35.13 <= 35.44',\n              '35.44 <= 35.75',\n              '35.75 <= 36.07',\n              '36.07 <= 36.38',\n              '36.38 <= 36.69',\n              '36.69 <= 37.01',\n              '37.01 <= 37.32',\n              '37.32 <= 37.63',\n              '37.63 <= 37.95',\n              '37.95 <= 38.26',\n              '38.26 <= 38.57',\n              '38.57 <= 38.88',\n              '38.88 <= 39.20',\n              '39.20 <= 39.51',\n              '39.51 <= 39.82',\n              '39.82 <= 40.14',\n              '40.14 <= 40.45',\n              '40.45 <= 40.76',\n              '40.76 <= 41.08',\n              '41.08 <= 41.39',\n              '41.39 <= 41.70',\n              '41.70 <= 42.02',\n              '42.02 <= 42.33',\n              '42.33 <= 42.64',\n              '42.64 <= 42.96',\n              '42.96 <= 43.27',\n              '43.27 <= 43.58',\n              '43.58 <= 43.89',\n              '43.89 <= 44.21',\n              '44.21 <= 44.52',\n              '44.52 <= 44.83',\n              '44.83 <= 45.15',\n              '45.15 <= 45.46',\n              '45.46 <= 45.77',\n              '45.77 <= 46.09',\n              '46.09 <= 46.40',\n              '46.40 <= 46.71',\n              '46.71 <= 47.03',\n              '47.03 <= 47.34',\n              '47.34 <= 47.65',\n              '47.65 <= 47.96',\n              '47.96 <= 48.28',\n              '48.28 <= 48.59',\n              '48.59 <= 48.90',\n              '48.90 <= 49.22',\n              '49.22 <= 49.53',\n              '49.53 <= 49.84',\n              '49.84 <= 50.16',\n              '50.16 <= 50.47',\n              '50.47 <= 50.78',\n              '50.78 <= 51.10',\n              '51.10 <= 51.41',\n              '51.41 <= 51.72',\n              '51.72 <= 52.04',\n              '52.04 <= 52.35',\n              '52.35 <= 52.66',\n              '52.66 <= 52.97',\n              '52.97 <= 53.29',\n              '53.29 <= 53.60',\n              '53.60 <= 53.91',\n              '53.91 <= 54.23',\n              '54.23 <= 54.54',\n              '54.54 <= 54.85',\n              '54.85 <= 55.17',\n              '55.17 <= 55.48',\n              '55.48 <= 55.79',\n              '55.79 <= 56.11',\n              '56.11 <= 56.42',\n              '56.42 <= 56.73',\n              '56.73 <= 57.04',\n              '57.04 <= 57.36',\n              '57.36 <= 57.67',\n              '57.67 <= 57.98',\n              '57.98 <= 58.30',\n              '58.30 <= 58.61',\n              '58.61 <= 58.92',\n              '58.92 <= 59.24',\n              '59.24 <= 59.55',\n              '59.55 <= 59.86',\n              '59.86 <= 60.18',\n              '60.18 <= 60.49',\n              '60.49 <= 60.80',\n              '60.80 <= 61.12',\n              '61.12 <= 61.43',\n              '61.43 <= 61.74',\n              '61.74 <= 62.05',\n              '62.05 <= 62.37',\n              '62.37 <= 62.68',\n              '62.68 <= 62.99',\n              '62.99 <= 63.31',\n              '63.31 <= 63.62',\n              '63.62 <= 63.93',\n              '63.93 <= 64.25',\n              '64.25 <= 64.56',\n              '64.56 <= 64.87',\n              '64.87 <= 65.19',\n              '65.19 <= 65.50',\n              '65.50 <= 65.81',\n              '65.81 <= 66.12',\n              '66.12 <= 66.44',\n              '66.44 <= 66.75',\n              '66.75 <= 67.06',\n              '67.06 <= 67.38',\n              '67.38 <= 67.69',\n              '67.69 <= 68.00',\n              '68.00 <= 68.32',\n              '68.32 <= 68.63',\n              '68.63 <= 68.94',\n              '68.94 <= 69.26',\n              '69.26 <= 69.57',\n              '69.57 <= 69.88',\n              '69.88 <= 70.19',\n              '70.19 <= 70.51',\n              '70.51 <= 70.82',\n              '70.82 <= 71.13',\n              '71.13 <= 71.45',\n              '71.45 <= 71.76',\n              '71.76 <= 72.07',\n              '72.07 <= 72.39',\n              '72.39 <= 72.70',\n              '72.70 <= 73.01',\n              '73.01 <= 73.33',\n              '73.33 <= 73.64',\n              '73.64 <= 73.95',\n              '73.95 <= 74.27',\n              '74.27 <= 74.58',\n              '74.58 <= 74.89',\n              '74.89 <= 75.20',\n              '75.20 <= 75.52',\n              '75.52 <= 75.83',\n              '75.83 <= 76.14',\n              '76.14 <= 76.46',\n              '76.46 <= 76.77',\n              '76.77 <= 77.08',\n              '77.08 <= 77.40',\n              '77.40 <= 77.71',\n              '77.71 <= 78.02',\n              '78.02 <= 78.34',\n              '78.34 <= 78.65',\n              '78.65 <= 78.96',\n              '78.96 <= 79.27',\n              '79.27 <= 79.59',\n              '79.59 <= 79.90',\n              '79.90 <= 80.21',\n              '80.21 <= 80.53',\n              '80.53 <= 80.84',\n              '80.84 <= 81.15',\n              '81.15 <= 81.47',\n              '81.47 <= 81.78',\n              '81.78 <= 82.09',\n              '82.09 <= 82.41',\n              '82.41 <= 82.72',\n              '82.72 <= 83.03',\n              '83.03 <= 83.35',\n              '83.35 <= 83.66',\n              '83.66 <= 83.97',\n              '83.97 <= 84.28',\n              '84.28 <= 84.60',\n              '84.60 <= 84.91',\n              '84.91 <= 85.22',\n              '85.22 <= 85.54',\n              '85.54 <= 85.85',\n              '85.85 <= 86.16',\n              '86.16 <= 86.48',\n              '86.48 <= 86.79',\n              '86.79 <= 87.10',\n              '87.10 <= 87.42',\n              '87.42 <= 87.73',\n              '87.73 <= 88.04',\n              '88.04 <= 88.35',\n              '88.35 <= 88.67',\n              '88.67 <= 88.98',\n              '88.98 <= 89.29',\n              '89.29 <= 89.61',\n              '89.61 <= 89.92',\n              '89.92 <= 90.23',\n              '90.23 <= 90.55',\n              '90.55 <= 90.86',\n              '90.86 <= 91.17',\n              '91.17 <= 91.49',\n              '91.49 <= 91.80',\n              '91.80 <= 92.11',\n              '92.11 <= 92.42',\n              '92.42 <= 92.74',\n              '92.74 <= 93.05',\n              '93.05 <= 93.36',\n              '93.36 <= 93.68',\n              '93.68 <= 93.99',\n              '93.99 <= 94.30',\n              '94.30 <= 94.62',\n              '94.62 <= 94.93',\n              '94.93 <= 95.24',\n              '95.24 <= 95.56',\n              '95.56 <= 95.87',\n              '95.87 <= 96.18',\n              '96.18 <= 96.50',\n              '96.50 <= 96.81',\n              '96.81 <= 97.12',\n              '97.12 <= 97.43',\n              '97.43 <= 97.75',\n              '97.75 <= 98.06',\n              '98.06 <= 98.37',\n              '98.37 <= 98.69',\n              '98.69 <= 99.00',\n            ],\n            x_axis_name: 'hours_per_week',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [\n                0.0006,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0012,\n                0.0,\n                0.0,\n                0.0016,\n                0.0,\n                0.0,\n                0.0016,\n                0.0,\n                0.0,\n                0.0017,\n                0.0,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0041,\n                0.0,\n                0.0,\n                0.0005,\n                0.0,\n                0.0,\n                0.0079,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0,\n                0.0049,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.001,\n                0.0,\n                0.0,\n                0.0119,\n                0.0,\n                0.0,\n                0.0059,\n                0.0,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0021,\n                0.0,\n                0.0,\n                0.0004,\n                0.0,\n                0.0,\n                0.0352,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0,\n                0.0012,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.007,\n                0.0,\n                0.0,\n                0.0196,\n                0.0,\n                0.0,\n                0.0008,\n                0.0,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0025,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0327,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0,\n                0.0073,\n                0.0,\n                0.0,\n                0.0011,\n                0.0,\n                0.0,\n                0.0008,\n                0.0,\n                0.0,\n                0.0338,\n                0.0,\n                0.0,\n                0.0054,\n                0.0,\n                0.0,\n                0.004,\n                0.0,\n                0.0,\n                0.0,\n                0.012,\n                0.0,\n                0.0,\n                0.001,\n                0.0,\n                0.0,\n                0.3676,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0046,\n                0.0,\n                0.0,\n                0.0,\n                0.0034,\n                0.0,\n                0.0,\n                0.0042,\n                0.0,\n                0.0,\n                0.035,\n                0.0,\n                0.0,\n                0.0017,\n                0.0,\n                0.0,\n                0.001,\n                0.0,\n                0.0,\n                0.0,\n                0.0112,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0474,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0028,\n                0.0,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.0008,\n                0.0,\n                0.0,\n                0.0114,\n                0.0,\n                0.0,\n                0.0018,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0254,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0004,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0043,\n                0.0,\n                0.0,\n                0.0005,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0057,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0014,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0014,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0023,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0018,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '1.00 <= 1.31',\n              '1.31 <= 1.63',\n              '1.63 <= 1.94',\n              '1.94 <= 2.25',\n              '2.25 <= 2.57',\n              '2.57 <= 2.88',\n              '2.88 <= 3.19',\n              '3.19 <= 3.50',\n              '3.50 <= 3.82',\n              '3.82 <= 4.13',\n              '4.13 <= 4.44',\n              '4.44 <= 4.76',\n              '4.76 <= 5.07',\n              '5.07 <= 5.38',\n              '5.38 <= 5.70',\n              '5.70 <= 6.01',\n              '6.01 <= 6.32',\n              '6.32 <= 6.64',\n              '6.64 <= 6.95',\n              '6.95 <= 7.26',\n              '7.26 <= 7.58',\n              '7.58 <= 7.89',\n              '7.89 <= 8.20',\n              '8.20 <= 8.51',\n              '8.51 <= 8.83',\n              '8.83 <= 9.14',\n              '9.14 <= 9.45',\n              '9.45 <= 9.77',\n              '9.77 <= 10.08',\n              '10.08 <= 10.39',\n              '10.39 <= 10.71',\n              '10.71 <= 11.02',\n              '11.02 <= 11.33',\n              '11.33 <= 11.65',\n              '11.65 <= 11.96',\n              '11.96 <= 12.27',\n              '12.27 <= 12.58',\n              '12.58 <= 12.90',\n              '12.90 <= 13.21',\n              '13.21 <= 13.52',\n              '13.52 <= 13.84',\n              '13.84 <= 14.15',\n              '14.15 <= 14.46',\n              '14.46 <= 14.78',\n              '14.78 <= 15.09',\n              '15.09 <= 15.40',\n              '15.40 <= 15.72',\n              '15.72 <= 16.03',\n              '16.03 <= 16.34',\n              '16.34 <= 16.65',\n              '16.65 <= 16.97',\n              '16.97 <= 17.28',\n              '17.28 <= 17.59',\n              '17.59 <= 17.91',\n              '17.91 <= 18.22',\n              '18.22 <= 18.53',\n              '18.53 <= 18.85',\n              '18.85 <= 19.16',\n              '19.16 <= 19.47',\n              '19.47 <= 19.79',\n              '19.79 <= 20.10',\n              '20.10 <= 20.41',\n              '20.41 <= 20.73',\n              '20.73 <= 21.04',\n              '21.04 <= 21.35',\n              '21.35 <= 21.66',\n              '21.66 <= 21.98',\n              '21.98 <= 22.29',\n              '22.29 <= 22.60',\n              '22.60 <= 22.92',\n              '22.92 <= 23.23',\n              '23.23 <= 23.54',\n              '23.54 <= 23.86',\n              '23.86 <= 24.17',\n              '24.17 <= 24.48',\n              '24.48 <= 24.80',\n              '24.80 <= 25.11',\n              '25.11 <= 25.42',\n              '25.42 <= 25.73',\n              '25.73 <= 26.05',\n              '26.05 <= 26.36',\n              '26.36 <= 26.67',\n              '26.67 <= 26.99',\n              '26.99 <= 27.30',\n              '27.30 <= 27.61',\n              '27.61 <= 27.93',\n              '27.93 <= 28.24',\n              '28.24 <= 28.55',\n              '28.55 <= 28.87',\n              '28.87 <= 29.18',\n              '29.18 <= 29.49',\n              '29.49 <= 29.81',\n              '29.81 <= 30.12',\n              '30.12 <= 30.43',\n              '30.43 <= 30.74',\n              '30.74 <= 31.06',\n              '31.06 <= 31.37',\n              '31.37 <= 31.68',\n              '31.68 <= 32.00',\n              '32.00 <= 32.31',\n              '32.31 <= 32.62',\n              '32.62 <= 32.94',\n              '32.94 <= 33.25',\n              '33.25 <= 33.56',\n              '33.56 <= 33.88',\n              '33.88 <= 34.19',\n              '34.19 <= 34.50',\n              '34.50 <= 34.81',\n              '34.81 <= 35.13',\n              '35.13 <= 35.44',\n              '35.44 <= 35.75',\n              '35.75 <= 36.07',\n              '36.07 <= 36.38',\n              '36.38 <= 36.69',\n              '36.69 <= 37.01',\n              '37.01 <= 37.32',\n              '37.32 <= 37.63',\n              '37.63 <= 37.95',\n              '37.95 <= 38.26',\n              '38.26 <= 38.57',\n              '38.57 <= 38.88',\n              '38.88 <= 39.20',\n              '39.20 <= 39.51',\n              '39.51 <= 39.82',\n              '39.82 <= 40.14',\n              '40.14 <= 40.45',\n              '40.45 <= 40.76',\n              '40.76 <= 41.08',\n              '41.08 <= 41.39',\n              '41.39 <= 41.70',\n              '41.70 <= 42.02',\n              '42.02 <= 42.33',\n              '42.33 <= 42.64',\n              '42.64 <= 42.96',\n              '42.96 <= 43.27',\n              '43.27 <= 43.58',\n              '43.58 <= 43.89',\n              '43.89 <= 44.21',\n              '44.21 <= 44.52',\n              '44.52 <= 44.83',\n              '44.83 <= 45.15',\n              '45.15 <= 45.46',\n              '45.46 <= 45.77',\n              '45.77 <= 46.09',\n              '46.09 <= 46.40',\n              '46.40 <= 46.71',\n              '46.71 <= 47.03',\n              '47.03 <= 47.34',\n              '47.34 <= 47.65',\n              '47.65 <= 47.96',\n              '47.96 <= 48.28',\n              '48.28 <= 48.59',\n              '48.59 <= 48.90',\n              '48.90 <= 49.22',\n              '49.22 <= 49.53',\n              '49.53 <= 49.84',\n              '49.84 <= 50.16',\n              '50.16 <= 50.47',\n              '50.47 <= 50.78',\n              '50.78 <= 51.10',\n              '51.10 <= 51.41',\n              '51.41 <= 51.72',\n              '51.72 <= 52.04',\n              '52.04 <= 52.35',\n              '52.35 <= 52.66',\n              '52.66 <= 52.97',\n              '52.97 <= 53.29',\n              '53.29 <= 53.60',\n              '53.60 <= 53.91',\n              '53.91 <= 54.23',\n              '54.23 <= 54.54',\n              '54.54 <= 54.85',\n              '54.85 <= 55.17',\n              '55.17 <= 55.48',\n              '55.48 <= 55.79',\n              '55.79 <= 56.11',\n              '56.11 <= 56.42',\n              '56.42 <= 56.73',\n              '56.73 <= 57.04',\n              '57.04 <= 57.36',\n              '57.36 <= 57.67',\n              '57.67 <= 57.98',\n              '57.98 <= 58.30',\n              '58.30 <= 58.61',\n              '58.61 <= 58.92',\n              '58.92 <= 59.24',\n              '59.24 <= 59.55',\n              '59.55 <= 59.86',\n              '59.86 <= 60.18',\n              '60.18 <= 60.49',\n              '60.49 <= 60.80',\n              '60.80 <= 61.12',\n              '61.12 <= 61.43',\n              '61.43 <= 61.74',\n              '61.74 <= 62.05',\n              '62.05 <= 62.37',\n              '62.37 <= 62.68',\n              '62.68 <= 62.99',\n              '62.99 <= 63.31',\n              '63.31 <= 63.62',\n              '63.62 <= 63.93',\n              '63.93 <= 64.25',\n              '64.25 <= 64.56',\n              '64.56 <= 64.87',\n              '64.87 <= 65.19',\n              '65.19 <= 65.50',\n              '65.50 <= 65.81',\n              '65.81 <= 66.12',\n              '66.12 <= 66.44',\n              '66.44 <= 66.75',\n              '66.75 <= 67.06',\n              '67.06 <= 67.38',\n              '67.38 <= 67.69',\n              '67.69 <= 68.00',\n              '68.00 <= 68.32',\n              '68.32 <= 68.63',\n              '68.63 <= 68.94',\n              '68.94 <= 69.26',\n              '69.26 <= 69.57',\n              '69.57 <= 69.88',\n              '69.88 <= 70.19',\n              '70.19 <= 70.51',\n              '70.51 <= 70.82',\n              '70.82 <= 71.13',\n              '71.13 <= 71.45',\n              '71.45 <= 71.76',\n              '71.76 <= 72.07',\n              '72.07 <= 72.39',\n              '72.39 <= 72.70',\n              '72.70 <= 73.01',\n              '73.01 <= 73.33',\n              '73.33 <= 73.64',\n              '73.64 <= 73.95',\n              '73.95 <= 74.27',\n              '74.27 <= 74.58',\n              '74.58 <= 74.89',\n              '74.89 <= 75.20',\n              '75.20 <= 75.52',\n              '75.52 <= 75.83',\n              '75.83 <= 76.14',\n              '76.14 <= 76.46',\n              '76.46 <= 76.77',\n              '76.77 <= 77.08',\n              '77.08 <= 77.40',\n              '77.40 <= 77.71',\n              '77.71 <= 78.02',\n              '78.02 <= 78.34',\n              '78.34 <= 78.65',\n              '78.65 <= 78.96',\n              '78.96 <= 79.27',\n              '79.27 <= 79.59',\n              '79.59 <= 79.90',\n              '79.90 <= 80.21',\n              '80.21 <= 80.53',\n              '80.53 <= 80.84',\n              '80.84 <= 81.15',\n              '81.15 <= 81.47',\n              '81.47 <= 81.78',\n              '81.78 <= 82.09',\n              '82.09 <= 82.41',\n              '82.41 <= 82.72',\n              '82.72 <= 83.03',\n              '83.03 <= 83.35',\n              '83.35 <= 83.66',\n              '83.66 <= 83.97',\n              '83.97 <= 84.28',\n              '84.28 <= 84.60',\n              '84.60 <= 84.91',\n              '84.91 <= 85.22',\n              '85.22 <= 85.54',\n              '85.54 <= 85.85',\n              '85.85 <= 86.16',\n              '86.16 <= 86.48',\n              '86.48 <= 86.79',\n              '86.79 <= 87.10',\n              '87.10 <= 87.42',\n              '87.42 <= 87.73',\n              '87.73 <= 88.04',\n              '88.04 <= 88.35',\n              '88.35 <= 88.67',\n              '88.67 <= 88.98',\n              '88.98 <= 89.29',\n              '89.29 <= 89.61',\n              '89.61 <= 89.92',\n              '89.92 <= 90.23',\n              '90.23 <= 90.55',\n              '90.55 <= 90.86',\n              '90.86 <= 91.17',\n              '91.17 <= 91.49',\n              '91.49 <= 91.80',\n              '91.80 <= 92.11',\n              '92.11 <= 92.42',\n              '92.42 <= 92.74',\n              '92.74 <= 93.05',\n              '93.05 <= 93.36',\n              '93.36 <= 93.68',\n              '93.68 <= 93.99',\n              '93.99 <= 94.30',\n              '94.30 <= 94.62',\n              '94.62 <= 94.93',\n              '94.93 <= 95.24',\n              '95.24 <= 95.56',\n              '95.56 <= 95.87',\n              '95.87 <= 96.18',\n              '96.18 <= 96.50',\n              '96.50 <= 96.81',\n              '96.81 <= 97.12',\n              '97.12 <= 97.43',\n              '97.43 <= 97.75',\n              '97.75 <= 98.06',\n              '98.06 <= 98.37',\n              '98.37 <= 98.69',\n              '98.69 <= 99.00',\n            ],\n            x_axis_name: 'hours_per_week',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          1.0,\n          1.3130990415335464,\n          1.6261980830670928,\n          1.939297124600639,\n          2.2523961661341856,\n          2.5654952076677318,\n          2.878594249201278,\n          3.1916932907348246,\n          3.5047923322683707,\n          3.817891373801917,\n          4.1309904153354635,\n          4.44408945686901,\n          4.757188498402556,\n          5.0702875399361025,\n          5.383386581469649,\n          5.696485623003195,\n          6.0095846645367414,\n          6.322683706070288,\n          6.635782747603834,\n          6.94888178913738,\n          7.261980830670927,\n          7.575079872204473,\n          7.888178913738019,\n          8.201277955271566,\n          8.514376996805112,\n          8.82747603833866,\n          9.140575079872205,\n          9.45367412140575,\n          9.766773162939298,\n          10.079872204472844,\n          10.39297124600639,\n          10.706070287539937,\n          11.019169329073483,\n          11.332268370607029,\n          11.645367412140576,\n          11.958466453674122,\n          12.271565495207668,\n          12.584664536741215,\n          12.89776357827476,\n          13.210862619808307,\n          13.523961661341854,\n          13.8370607028754,\n          14.150159744408946,\n          14.463258785942493,\n          14.776357827476039,\n          15.089456869009584,\n          15.402555910543132,\n          15.715654952076678,\n          16.028753993610223,\n          16.34185303514377,\n          16.65495207667732,\n          16.968051118210866,\n          17.28115015974441,\n          17.594249201277957,\n          17.9073482428115,\n          18.22044728434505,\n          18.533546325878596,\n          18.84664536741214,\n          19.159744408945688,\n          19.472843450479235,\n          19.78594249201278,\n          20.099041533546327,\n          20.412140575079874,\n          20.72523961661342,\n          21.038338658146966,\n          21.351437699680513,\n          21.664536741214057,\n          21.977635782747605,\n          22.290734824281152,\n          22.603833865814696,\n          22.916932907348244,\n          23.23003194888179,\n          23.543130990415335,\n          23.856230031948883,\n          24.16932907348243,\n          24.482428115015974,\n          24.79552715654952,\n          25.10862619808307,\n          25.421725239616613,\n          25.73482428115016,\n          26.047923322683708,\n          26.361022364217252,\n          26.6741214057508,\n          26.987220447284347,\n          27.30031948881789,\n          27.61341853035144,\n          27.926517571884986,\n          28.23961661341853,\n          28.552715654952078,\n          28.865814696485625,\n          29.17891373801917,\n          29.492012779552716,\n          29.805111821086264,\n          30.118210862619808,\n          30.431309904153355,\n          30.744408945686903,\n          31.057507987220447,\n          31.370607028753994,\n          31.683706070287542,\n          31.99680511182109,\n          32.30990415335464,\n          32.623003194888184,\n          32.93610223642173,\n          33.24920127795527,\n          33.56230031948882,\n          33.87539936102237,\n          34.188498402555915,\n          34.501597444089455,\n          34.814696485623,\n          35.12779552715655,\n          35.4408945686901,\n          35.753993610223645,\n          36.06709265175719,\n          36.38019169329073,\n          36.69329073482428,\n          37.00638977635783,\n          37.319488817891376,\n          37.63258785942492,\n          37.94568690095847,\n          38.25878594249201,\n          38.57188498402556,\n          38.884984025559106,\n          39.198083067092654,\n          39.5111821086262,\n          39.82428115015975,\n          40.13738019169329,\n          40.45047923322684,\n          40.763578274760384,\n          41.07667731629393,\n          41.38977635782748,\n          41.70287539936103,\n          42.015974440894574,\n          42.329073482428115,\n          42.64217252396166,\n          42.95527156549521,\n          43.26837060702876,\n          43.581469648562305,\n          43.89456869009585,\n          44.20766773162939,\n          44.52076677316294,\n          44.83386581469649,\n          45.146964856230035,\n          45.46006389776358,\n          45.77316293929713,\n          46.08626198083067,\n          46.39936102236422,\n          46.712460063897765,\n          47.02555910543131,\n          47.33865814696486,\n          47.65175718849841,\n          47.96485623003195,\n          48.277955271565496,\n          48.59105431309904,\n          48.90415335463259,\n          49.21725239616614,\n          49.530351437699686,\n          49.843450479233226,\n          50.156549520766774,\n          50.46964856230032,\n          50.78274760383387,\n          51.095846645367416,\n          51.408945686900964,\n          51.722044728434504,\n          52.03514376996805,\n          52.3482428115016,\n          52.66134185303515,\n          52.974440894568694,\n          53.28753993610224,\n          53.60063897763578,\n          53.91373801916933,\n          54.22683706070288,\n          54.539936102236425,\n          54.85303514376997,\n          55.16613418530352,\n          55.47923322683706,\n          55.79233226837061,\n          56.105431309904155,\n          56.4185303514377,\n          56.73162939297125,\n          57.0447284345048,\n          57.35782747603834,\n          57.670926517571885,\n          57.98402555910543,\n          58.29712460063898,\n          58.61022364217253,\n          58.923322683706076,\n          59.236421725239616,\n          59.54952076677316,\n          59.86261980830671,\n          60.17571884984026,\n          60.488817891373806,\n          60.80191693290735,\n          61.115015974440894,\n          61.42811501597444,\n          61.74121405750799,\n          62.054313099041536,\n          62.367412140575084,\n          62.68051118210863,\n          62.99361022364218,\n          63.30670926517572,\n          63.61980830670927,\n          63.932907348242814,\n          64.24600638977637,\n          64.55910543130992,\n          64.87220447284346,\n          65.185303514377,\n          65.49840255591054,\n          65.81150159744409,\n          66.12460063897764,\n          66.43769968051119,\n          66.75079872204473,\n          67.06389776357828,\n          67.37699680511183,\n          67.69009584664538,\n          68.00319488817891,\n          68.31629392971246,\n          68.629392971246,\n          68.94249201277955,\n          69.2555910543131,\n          69.56869009584665,\n          69.8817891373802,\n          70.19488817891374,\n          70.50798722044729,\n          70.82108626198084,\n          71.13418530351439,\n          71.44728434504793,\n          71.76038338658147,\n          72.07348242811501,\n          72.38658146964856,\n          72.69968051118211,\n          73.01277955271566,\n          73.3258785942492,\n          73.63897763578275,\n          73.9520766773163,\n          74.26517571884985,\n          74.5782747603834,\n          74.89137380191694,\n          75.20447284345049,\n          75.51757188498402,\n          75.83067092651757,\n          76.14376996805112,\n          76.45686900958466,\n          76.76996805111821,\n          77.08306709265176,\n          77.39616613418531,\n          77.70926517571885,\n          78.0223642172524,\n          78.33546325878595,\n          78.6485623003195,\n          78.96166134185304,\n          79.27476038338658,\n          79.58785942492013,\n          79.90095846645367,\n          80.21405750798722,\n          80.52715654952077,\n          80.84025559105432,\n          81.15335463258786,\n          81.46645367412141,\n          81.77955271565496,\n          82.0926517571885,\n          82.40575079872205,\n          82.7188498402556,\n          83.03194888178915,\n          83.34504792332268,\n          83.65814696485623,\n          83.97124600638978,\n          84.28434504792332,\n          84.59744408945687,\n          84.91054313099042,\n          85.22364217252397,\n          85.53674121405751,\n          85.84984025559106,\n          86.16293929712461,\n          86.47603833865816,\n          86.7891373801917,\n          87.10223642172524,\n          87.41533546325878,\n          87.72843450479233,\n          88.04153354632588,\n          88.35463258785943,\n          88.66773162939297,\n          88.98083067092652,\n          89.29392971246007,\n          89.60702875399362,\n          89.92012779552716,\n          90.23322683706071,\n          90.54632587859426,\n          90.8594249201278,\n          91.17252396166134,\n          91.48562300319489,\n          91.79872204472844,\n          92.11182108626198,\n          92.42492012779553,\n          92.73801916932908,\n          93.05111821086263,\n          93.36421725239617,\n          93.67731629392972,\n          93.99041533546327,\n          94.30351437699682,\n          94.61661341853035,\n          94.9297124600639,\n          95.24281150159744,\n          95.55591054313099,\n          95.86900958466454,\n          96.18210862619809,\n          96.49520766773163,\n          96.80830670926518,\n          97.12140575079873,\n          97.43450479233228,\n          97.74760383386582,\n          98.06070287539937,\n          98.3738019169329,\n          98.68690095846645,\n          99.0,\n        ],\n        deployment: [\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.03,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.04,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.05,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.54,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.05,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.04,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.09,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n        ],\n        training: [\n          0.0006142317496391389,\n          0.0,\n          0.0,\n          0.000982770799422622,\n          0.0,\n          0.0,\n          0.0011977519117963207,\n          0.0,\n          0.0,\n          0.001658425724025675,\n          0.0,\n          0.0,\n          0.0018426952489174165,\n          0.0,\n          0.0,\n          0.001965541598845244,\n          0.0,\n          0.0,\n          0.0,\n          0.0007985012745308805,\n          0.0,\n          0.0,\n          0.004453180184883757,\n          0.0,\n          0.0,\n          0.000552808574675225,\n          0.0,\n          0.0,\n          0.00853782131998403,\n          0.0,\n          0.0,\n          0.00033782746230152634,\n          0.0,\n          0.0,\n          0.0,\n          0.005313104634378551,\n          0.0,\n          0.0,\n          0.0007063665120850096,\n          0.0,\n          0.0,\n          0.001044193974386536,\n          0.0,\n          0.0,\n          0.012407481342710604,\n          0.0,\n          0.0,\n          0.006295875433801173,\n          0.0,\n          0.0,\n          0.0,\n          0.0008906360369767513,\n          0.0,\n          0.0,\n          0.002303369061146771,\n          0.0,\n          0.0,\n          0.00042996222474739717,\n          0.0,\n          0.0,\n          0.0375909830779153,\n          0.0,\n          0.0,\n          0.0007370780995669666,\n          0.0,\n          0.0,\n          0.0,\n          0.0013513098492061054,\n          0.0,\n          0.0,\n          0.0006449433371210958,\n          0.0,\n          0.0,\n          0.007739320045453149,\n          0.0,\n          0.0,\n          0.02069960996283898,\n          0.0,\n          0.0,\n          0.0009213476244587083,\n          0.0,\n          0.0,\n          0.0,\n          0.0009213476244587083,\n          0.0,\n          0.0,\n          0.002641196523448297,\n          0.0,\n          0.0,\n          0.00021498111237369858,\n          0.0,\n          0.0,\n          0.035287614016768526,\n          0.0,\n          0.0,\n          0.00015355793740978472,\n          0.0,\n          0.0,\n          0.0,\n          0.008169282270200546,\n          0.0,\n          0.0,\n          0.0011977519117963207,\n          0.0,\n          0.0,\n          0.0008599244494947943,\n          0.0,\n          0.0,\n          0.03983292896409815,\n          0.0,\n          0.0,\n          0.006756549246030527,\n          0.0,\n          0.0,\n          0.004576026534811584,\n          0.0,\n          0.0,\n          0.0,\n          0.014618715641411505,\n          0.0,\n          0.0,\n          0.0011670403243143638,\n          0.0,\n          0.0,\n          0.4673382267129388,\n          0.0,\n          0.0,\n          0.00110561714935045,\n          0.0,\n          0.0,\n          0.00672583765854857,\n          0.0,\n          0.0,\n          0.0,\n          0.004637449709775498,\n          0.0,\n          0.0,\n          0.006510856546174872,\n          0.0,\n          0.0,\n          0.056017935567089464,\n          0.0,\n          0.0,\n          0.002518350173520469,\n          0.0,\n          0.0,\n          0.0015048677866158903,\n          0.0,\n          0.0,\n          0.0,\n          0.01587789072817174,\n          0.0,\n          0.0,\n          0.0008906360369767513,\n          0.0,\n          0.0,\n          0.08657596511163662,\n          0.0,\n          0.0,\n          0.00039925063726544026,\n          0.0,\n          0.0,\n          0.004238199072510058,\n          0.0,\n          0.0,\n          0.0,\n          0.0007677896870489236,\n          0.0,\n          0.0,\n          0.0012591750867602346,\n          0.0,\n          0.0,\n          0.021313841712478118,\n          0.0,\n          0.0,\n          0.0029790239857498233,\n          0.0,\n          0.0,\n          0.000522096987193268,\n          0.0,\n          0.0,\n          0.0,\n          0.0008599244494947943,\n          0.0,\n          0.0,\n          0.00015355793740978472,\n          0.0,\n          0.0,\n          0.04529959153588649,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.000552808574675225,\n          0.0,\n          0.0,\n          0.0,\n          0.00030711587481956944,\n          0.0,\n          0.0,\n          0.00042996222474739717,\n          0.0,\n          0.0,\n          0.007493627345597494,\n          0.0,\n          0.0,\n          0.000522096987193268,\n          0.0,\n          0.0,\n          0.00012284634992782776,\n          0.0,\n          0.0,\n          0.0003685390497834833,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.00893707195724947,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.002180522711218943,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          0.0020269647738091583,\n          0.0,\n          0.0,\n          9.213476244587083e-5,\n          0.0,\n          0.0,\n          0.00018426952489174165,\n          0.0,\n          0.0,\n          0.0002456926998556555,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.004084641135100273,\n          0.0,\n          0.0,\n          9.213476244587083e-5,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0013820214366880624,\n          0.0,\n          0.0,\n          0.00039925063726544026,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.0008906360369767513,\n          0.0,\n          0.0,\n          9.213476244587083e-5,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.00015355793740978472,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.00033782746230152634,\n          0.0,\n          0.0,\n          0.00261048493596634,\n        ],\n      },\n      statistics: {\n        Mean: {\n          deployment: 40.13,\n          has_changed: false,\n          message: 'No significant change in the mean',\n          training: 40.437455852092995,\n        },\n        Median: {\n          deployment: 40.0,\n          has_changed: false,\n          message: 'No significant change in the median',\n          training: 40.0,\n        },\n        Variance: {\n          deployment: 142.43310000000002,\n          has_changed: false,\n          message: 'No significant change in the variance',\n          training: 152.45431279269027,\n        },\n      },\n    },\n    income: {\n      bivariate_reports: [],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: ['1', '0'],\n        deployment: [0.14, 0.86],\n        training: [0.2408095574460244, 0.7591904425539756],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.14, 0.86],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.241, 0.759],\n        },\n        'Unique Values': {\n          deployment: ['1', '0'],\n          has_changed: false,\n          message: 'No change',\n          training: ['1', '0'],\n        },\n      },\n    },\n    marital_status: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'marital_status',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.32, 0.34, 0.18, 0.02],\n              [0.0, 0.0, 0.0, 0.0],\n            ],\n            x: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n            x_axis_name: 'marital_status',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.2548, 0.313, 0.1635, 0.0279],\n              [0.0, 0.0, 0.0, 0.0],\n            ],\n            x: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n            x_axis_name: 'marital_status',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n        deployment: [0.45, 0.34, 0.19, 0.02],\n        training: [\n          0.4606431006418722,\n          0.328091889069746,\n          0.18076840391879856,\n          0.030496606369583245,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.45, 0.34, 0.19, 0.02],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.461, 0.328, 0.181, 0.03],\n        },\n        'Unique Values': {\n          deployment: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n          has_changed: false,\n          message: 'No change',\n          training: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n        },\n      },\n    },\n    occupation: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'occupation',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.04, 0.0, 0.0, 0.0, 0.0, 0.08, 0.0, 0.39, 0.08],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Professional',\n              'Sales',\n              'Service',\n              'White-Collar',\n              '?',\n              'Military',\n              'Admin',\n              'Blue-Collar',\n              'Other',\n            ],\n            x_axis_name: 'occupation',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0626, 0.0, 0.0, 0.0, 0.0, 0.0883, 0.0, 0.2568, 0.0335],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Professional',\n              'Sales',\n              'Service',\n              'White-Collar',\n              '?',\n              'Military',\n              'Admin',\n              'Blue-Collar',\n              'Other',\n            ],\n            x_axis_name: 'occupation',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          'Professional',\n          'Sales',\n          'Service',\n          'White-Collar',\n          '?',\n          'Military',\n          'Admin',\n          'Blue-Collar',\n          'Other',\n        ],\n        deployment: [0.07, 0.08, 0.1, 0.13, 0.03, 0.01, 0.09, 0.39, 0.1],\n        training: [\n          0.12714597217530174,\n          0.11209729430914284,\n          0.10577070728785971,\n          0.12487331470163693,\n          0.056601455729246644,\n          0.0002764042873376125,\n          0.11578268480697768,\n          0.30901999324345075,\n          0.048432173459046095,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.07, 0.08, 0.1, 0.13, 0.03, 0.01, 0.09, 0.39, 0.1],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [\n            0.127,\n            0.112,\n            0.106,\n            0.125,\n            0.057,\n            0.0,\n            0.116,\n            0.309,\n            0.048,\n          ],\n        },\n        'Unique Values': {\n          deployment: [\n            'Professional',\n            'Sales',\n            'Service',\n            'White-Collar',\n            '?',\n            'Military',\n            'Admin',\n            'Blue-Collar',\n            'Other',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            'Professional',\n            'Sales',\n            'Service',\n            'White-Collar',\n            '?',\n            'Military',\n            'Admin',\n            'Blue-Collar',\n            'Other',\n          ],\n        },\n      },\n    },\n    race: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'race',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.03, 0.0, 0.71, 0.0, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Black',\n              ' Amer-Indian-Eskimo',\n              ' White',\n              ' Asian-Pac-Islander',\n              ' Other',\n            ],\n            x_axis_name: 'race',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0084, 0.0, 0.663, 0.0, 0.0034],\n              [0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Black',\n              ' Amer-Indian-Eskimo',\n              ' White',\n              ' Asian-Pac-Islander',\n              ' Other',\n            ],\n            x_axis_name: 'race',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          ' Black',\n          ' Amer-Indian-Eskimo',\n          ' White',\n          ' Asian-Pac-Islander',\n          ' Other',\n        ],\n        deployment: [0.12, 0.03, 0.8, 0.03, 0.02],\n        training: [\n          0.0959429992936335,\n          0.009551303706888609,\n          0.8542735173981143,\n          0.03190933939375326,\n          0.008322840207610331,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.12, 0.03, 0.8, 0.03, 0.02],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.096, 0.01, 0.854, 0.032, 0.008],\n        },\n        'Unique Values': {\n          deployment: [\n            ' Black',\n            ' Amer-Indian-Eskimo',\n            ' White',\n            ' Asian-Pac-Islander',\n            ' Other',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            ' Black',\n            ' Amer-Indian-Eskimo',\n            ' White',\n            ' Asian-Pac-Islander',\n            ' Other',\n          ],\n        },\n      },\n    },\n    relationship: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'relationship',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.52, 0.0, 0.16, 0.0, 0.0, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Unmarried',\n              ' Not-in-family',\n              ' Wife',\n              ' Own-child',\n              ' Husband',\n              ' Other-relative',\n            ],\n            x_axis_name: 'relationship',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.4522, 0.0, 0.1781, 0.0, 0.0, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Unmarried',\n              ' Not-in-family',\n              ' Wife',\n              ' Own-child',\n              ' Husband',\n              ' Other-relative',\n            ],\n            x_axis_name: 'relationship',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          ' Unmarried',\n          ' Not-in-family',\n          ' Wife',\n          ' Own-child',\n          ' Husband',\n          ' Other-relative',\n        ],\n        deployment: [0.14, 0.26, 0.05, 0.15, 0.38, 0.02],\n        training: [\n          0.10583213046282362,\n          0.2550597340376524,\n          0.04815576917170849,\n          0.1556463253585578,\n          0.40517797364945796,\n          0.03012806731979976,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.14, 0.26, 0.05, 0.15, 0.38, 0.02],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.106, 0.255, 0.048, 0.156, 0.405, 0.03],\n        },\n        'Unique Values': {\n          deployment: [\n            ' Unmarried',\n            ' Not-in-family',\n            ' Wife',\n            ' Own-child',\n            ' Husband',\n            ' Other-relative',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            ' Unmarried',\n            ' Not-in-family',\n            ' Wife',\n            ' Own-child',\n            ' Husband',\n            ' Other-relative',\n          ],\n        },\n      },\n    },\n    sex: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'sex',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.24, 0.62],\n              [0.0, 0.0],\n            ],\n            x: [' Female', ' Male'],\n            x_axis_name: 'sex',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.2946, 0.4646],\n              [0.0, 0.0],\n            ],\n            x: [' Female', ' Male'],\n            x_axis_name: 'sex',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [' Female', ' Male'],\n        deployment: [0.26, 0.74],\n        training: [0.33079450876815825, 0.6692054912318418],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.26, 0.74],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.331, 0.669],\n        },\n        'Unique Values': {\n          deployment: [' Female', ' Male'],\n          has_changed: false,\n          message: 'No change',\n          training: [' Female', ' Male'],\n        },\n      },\n    },\n    workclass: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'workclass',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.06, 0.0, 0.0, 0.0, 0.04, 0.68, 0.0, 0.02, 0.06],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Local-gov',\n              ' State-gov',\n              ' Never-worked',\n              ' ?',\n              ' Federal-gov',\n              ' Self-emp-not-inc',\n              ' Private',\n              ' Self-emp-inc',\n              ' Without-pay',\n            ],\n            x_axis_name: 'workclass',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0546, 0.0, 0.0, 0.0, 0.014, 0.5902, 0.0, 0.0152, 0.0853],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Local-gov',\n              ' State-gov',\n              ' Never-worked',\n              ' ?',\n              ' Federal-gov',\n              ' Self-emp-not-inc',\n              ' Private',\n              ' Self-emp-inc',\n              ' Without-pay',\n            ],\n            x_axis_name: 'workclass',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          ' Local-gov',\n          ' State-gov',\n          ' Never-worked',\n          ' ?',\n          ' Federal-gov',\n          ' Self-emp-not-inc',\n          ' Private',\n          ' Self-emp-inc',\n          ' Without-pay',\n        ],\n        deployment: [0.07, 0.05, 0.0, 0.03, 0.08, 0.04, 0.7, 0.03, 0.0],\n        training: [\n          0.06427935259973588,\n          0.039863640551580114,\n          0.00021498111237369858,\n          0.05638647461687295,\n          0.029483123982678664,\n          0.0780381437916526,\n          0.6970301894904948,\n          0.034274131629863945,\n          0.00042996222474739717,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.07, 0.05, 0.0, 0.03, 0.08, 0.04, 0.7, 0.03, 0.0],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.064, 0.04, 0.0, 0.056, 0.029, 0.078, 0.697, 0.034, 0.0],\n        },\n        'Unique Values': {\n          deployment: [\n            ' Local-gov',\n            ' State-gov',\n            ' ?',\n            ' Federal-gov',\n            ' Self-emp-not-inc',\n            ' Private',\n            ' Self-emp-inc',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            ' Local-gov',\n            ' State-gov',\n            ' Never-worked',\n            ' ?',\n            ' Federal-gov',\n            ' Self-emp-not-inc',\n            ' Private',\n            ' Self-emp-inc',\n            ' Without-pay',\n          ],\n        },\n      },\n    },\n  },\n  warnings: {\n    final_decision: null,\n    report: [],\n  },\n}"
            },
            {
                "name": "MockStore",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  select: () => of([]),\n  dispatch: () => {},\n}"
            },
            {
                "name": "MockStoreProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/mocks.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Provider",
                "defaultValue": "{\n  provide: Store,\n  useValue: MockStore,\n}"
            },
            {
                "name": "mockSuccessTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/visualization/mocks/visualization.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TaskInformation",
                "defaultValue": "{\n  result: mockVisualizationResult,\n  state: ETaskState.success,\n  task_id: 'b2ea3dd1-6d68-4d3f-a709-fd639ef2d7d6',\n}"
            },
            {
                "name": "mockVisualizationResult",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/visualization/mocks/visualization.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "VisualizationResponse",
                "defaultValue": "{\n  data_shape: [10, 2],\n  training_data_shape: [10, 2],\n  training_data: [\n    [12.311838150024414, 3.109858512878418],\n    [19.76542854309082, 6.289316654205322],\n    [1.93822193145752, 7.5244059562683105],\n    [4.938331604003906, 4.7838358879089355],\n    [15.747235298156738, 5.297874450683594],\n    [1.054553031921387, 1.244650840759277],\n    [2.461652755737305, 2.751408576965332],\n    [5.481518745422363, 11.981990337371826],\n    [15.062357902526855, 9.0266337394714355],\n    [3.847922325134277, 2.067715644836426],\n  ],\n  data: [\n    [10.311838150024414, 7.109858512878418],\n    [9.76542854309082, 7.289316654205322],\n    [10.93822193145752, 6.5244059562683105],\n    [7.938331604003906, 4.7838358879089355],\n    [10.747235298156738, 6.297874450683594],\n    [8.054553031921387, 8.244650840759277],\n    [8.461652755737305, 4.751408576965332],\n    [9.481518745422363, 7.981990337371826],\n    [11.062357902526855, 7.0266337394714355],\n    [8.847922325134277, 4.067715644836426],\n  ],\n  output_info: {\n    class: {\n      dtype: 0,\n      classes: [0, 1],\n      coloring_type: 'class',\n      data: [1, 1, 1, 1, 0, 1, 0, 1, 0, 0],\n    },\n    confidence: {\n      dtype: 0,\n      coloring_type: 'gradient',\n      data: [\n        0.47196451509596193,\n        0.5190495596548069,\n        0.9319467806068639,\n        0.1880573169325348,\n        0.5233253319370346,\n        0.33912898312770146,\n        0.4619729687497488,\n        0.4203237837003968,\n        0.09350085504054217,\n        0.18695465496343522,\n      ],\n    },\n  },\n  metrics: {},\n  requests_ids: [\n    '7570',\n    '12601',\n    '3659',\n    '2658',\n    '15822',\n    '2904',\n    '7753',\n    '13168',\n    '69',\n    '98',\n  ],\n  top_N: [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [7],\n    [2, 3, 4, 5],\n    [1],\n  ],\n  counterfactuals: [\n    [2],\n    [7, 3],\n    [8, 9, 4],\n    [0, 5],\n    [1],\n    [6, 7],\n    [5, 7, 8],\n    [3, 7],\n    [2, 3, 4, 5],\n    [1],\n  ],\n  visualization_metrics: {\n    global_score: '0.992739467109571',\n    msid: '335.7998896475878',\n    sammon_error: '0.2808216485091878',\n    stability: '0.03722758245284965',\n  },\n}"
            },
            {
                "name": "MockZenModeServiceProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/services/zenMode.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  provide: ZenModeService,\n  useValue: {\n    isZenMode$: of(false),\n  },\n}"
            },
            {
                "name": "MODEL_VERSION_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<ModelVersionId>(\n  'selected model id',\n)"
            },
            {
                "name": "modelPageUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "url + '/models/census'"
            },
            {
                "name": "modelsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/models.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(GetModels, state => ({ ...state, loading: true })),\n  on(GetModelsSuccess, (state, { payload }) =>\n    adapter.addMany(payload, { ...state, loading: false, loaded: true })\n  ),\n  on(AddModel, (state, payload) => adapter.addOne(payload.model, state)),\n  on(GetModelsFail, state => ({ ...state, loading: false })),\n  on(DeleteModelSuccess, (state, { modelId }) =>\n    adapter.removeOne(modelId, state)\n  ),\n  on(ToggleFavorite, (state, { model: { name: id, favorite } }) =>\n    adapter.updateOne({ id, changes: { favorite: !favorite } }, state)\n  )\n)"
            },
            {
                "name": "modelsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('models')"
            },
            {
                "name": "modelVersionPageUrl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "url + '/models/census/1'"
            },
            {
                "name": "modelVersionReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/model-version.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(GetModelVersions, state => ({ ...state, loading: true })),\n  on(GetModelVersionsSuccess, (state, { payload }) =>\n    adapter.addMany(payload, { ...state, loaded: true, loading: false }),\n  ),\n  on(GetModelVersionsFail, state => ({\n    ...state,\n    loaded: false,\n    loading: true,\n  })),\n  on(AddModelVersionSuccess, (state, { modelVersion }) =>\n    adapter.upsertOne(modelVersion, state),\n  ),\n  on(DeleteModelVersionSuccess, (state, { modelVersionId }) =>\n    adapter.removeOne(modelVersionId, state),\n  ),\n  on(UpsertModelVersion, (state, { modelVersion }) =>\n    adapter.upsertOne(modelVersion, state),\n  ),\n  on(UpdateModelVersions, (state, { payload: modelVersions }) =>\n    adapter.addMany(modelVersions, { ...state }),\n  ),\n  on(DeleteApplicationSuccess, (state, { applicationName }) => {\n    const modelVersions: ModelVersion[] = Object.values(state.entities);\n    const hasApplication =\n      (applicationName: string) =>\n      (modelVersion: ModelVersion): boolean =>\n        modelVersion.applications.includes(applicationName);\n\n    const toUpdate =\n      (applicationName: string) =>\n      (modelVersion: ModelVersion): Update<ModelVersion> => {\n        return {\n          id: modelVersion.id,\n          changes: {\n            applications: modelVersion.applications.filter(\n              _ => _ !== applicationName,\n            ),\n          },\n        };\n      };\n\n    try {\n      const mvs = modelVersions.filter(hasApplication(applicationName));\n      const updates = mvs.map(toUpdate(applicationName));\n\n      return adapter.updateMany(updates, state);\n    } catch (e) {\n      return state;\n    }\n  }),\n)"
            },
            {
                "name": "monitoringStatusReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(GetServiceStatusAction, state => ({\n    ...state,\n    error: null,\n    status: MonitoringServiceStatus.UNKNOWN,\n  })),\n  on(SetStatusToFailedAction, (state, action) => ({\n    ...state,\n    status: MonitoringServiceStatus.FAILED,\n    error: action.error,\n  })),\n  on(SetStatusToAvailableAction, state => ({\n    ...state,\n    status: MonitoringServiceStatus.AVAILABLE,\n  })),\n  on(SetStatusToClosedForOSSAction, state => ({\n    ...state,\n    status: MonitoringServiceStatus.CLOSED_FOR_OSS,\n  }))\n)"
            },
            {
                "name": "noData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('highcharts/modules/no-data-to-display')"
            },
            {
                "name": "noop",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/form/input-text/input-text.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(_?: any) => {}"
            },
            {
                "name": "Notify",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Notification] notify',\n  props<{ kind: notificationType; message: string }>(),\n)"
            },
            {
                "name": "NotifyDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(message: string) =>\n  Notify({ kind: 'default', message })"
            },
            {
                "name": "NotifyError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(message: string) =>\n  Notify({ kind: 'error', message })"
            },
            {
                "name": "NotifyInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(message: string) =>\n  Notify({ kind: 'info', message })"
            },
            {
                "name": "NotifySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(message: string) =>\n  Notify({ kind: 'success', message })"
            },
            {
                "name": "NotifyWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/notifications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(message: string) =>\n  Notify({ kind: 'warning', message })"
            },
            {
                "name": "OUTPUT_FIELD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('output field')"
            },
            {
                "name": "pipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  P.FormatDatePipe,\n  P.IterateAsArrayPipe,\n  P.MatchSorterPipe,\n  P.PluckPipe,\n  P.SortByPipe,\n  P.TimeAgoPipe,\n  P.FieldShapePipe,\n  P.MappedServablePipe,\n]"
            },
            {
                "name": "range",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReadonlyArray<string>",
                "defaultValue": "[\n  `rgb(59\t,76,\t192)`,\n  `rgb(68\t,90,\t204)`,\n  `rgb(77\t,104,\t215)`,\n  `rgb(87\t,117,\t225)`,\n  `rgb(98\t,130,\t234)`,\n  `rgb(108,\t142,\t241)`,\n  `rgb(119,\t154,\t247)`,\n  `rgb(130,\t165,\t251)`,\n  `rgb(141,\t176,\t254)`,\n  `rgb(152,\t185,\t255)`,\n  `rgb(163,\t194,\t255)`,\n  `rgb(174,\t201,\t253)`,\n  `rgb(184,\t208,\t249)`,\n  `rgb(194,\t213,\t244)`,\n  `rgb(204,\t217,\t238)`,\n  `rgb(213,\t219,\t230)`,\n  `rgb(221,\t221,\t221)`,\n  `rgb(229,\t216,\t209)`,\n  `rgb(236,\t211,\t197)`,\n  `rgb(241,\t204,\t185)`,\n  `rgb(245,\t196,\t173)`,\n  `rgb(247,\t187,\t160)`,\n  `rgb(247,\t177,\t148)`,\n  `rgb(247,\t166,\t135)`,\n  `rgb(244,\t154,\t123)`,\n  `rgb(241,\t141,\t111)`,\n  `rgb(236,\t127,\t99)`,\n  `rgb(229,\t112,\t88)`,\n  `rgb(222,\t96,\t77)`,\n  `rgb(213,\t80,\t66)`,\n  `rgb(203,\t62,\t56)`,\n  `rgb(192,\t40,\t47)`,\n  `rgb(180,\t4,\t38)`,\n]"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\n  aggregation: fromAggregation.reducer,\n  metrics: fromMetrics.reducer,\n  serviceStatus: fromServiceStatus.reducer,\n  checks: fromChecks.reducer,\n  ui: fromUi.reducer,\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/root.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<HydroServingState>",
                "defaultValue": "{\n  router: fromRouter.routerReducer,\n  applications: fromApplications.reducer,\n  modelVersions: fromModelVersions.reducer,\n  models: fromModels.reducer,\n  servables: fromServables.reducer,\n  deploymentConfigs: fromDeploymentConfigs.reducer,\n  serviceStatuses: fromServiceStatuses.reducer,\n}"
            },
            {
                "name": "reExportedModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  NgxSliderModule,\n  MdlSelectModule,\n  MdlModule,\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  RouterModule,\n  NotifierModule,\n]"
            },
            {
                "name": "REQUEST_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<string>('request id')"
            },
            {
                "name": "REQUESTS_ERRORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-requests-errors/dialog-requests-errors.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Array<null | string>>(\n  'requests errors array'\n)"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "scale",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "d3.scaleLinear<string>().range(range).domain(domain)"
            },
            {
                "name": "SCATTER_PLOT_PALETTE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/visualization/models/ScatterPlotPalette.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ReadonlyArray<string>",
                "defaultValue": "[\n  '#418ecc',\n  '#ff716c',\n  '#ffad37',\n  '#ddff64',\n  '#85ff85',\n  '#8cffd9',\n  '#sef3ff',\n  '#f59dfa',\n  '#8a82ff',\n  '#4362ff',\n  '#6db7fa',\n  '#b384f5',\n  '#b366ac',\n]"
            },
            {
                "name": "SelectAggregation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] select aggregation',\n  props<{ aggregation: Aggregation }>()\n)"
            },
            {
                "name": "selectAggregationList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => {\n    return state.aggregationList;\n  }\n)"
            },
            {
                "name": "selectAllApplications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectAll)"
            },
            {
                "name": "selectAllConfigs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectAll)"
            },
            {
                "name": "selectAllMetrics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMetricsState,\n  fromMetrics.selectAllMetrics\n)"
            },
            {
                "name": "selectAllMetricsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMetricsState,\n  fromMetrics.selectAllMetricsEntities\n)"
            },
            {
                "name": "selectAllMetricsIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getMetricsState,\n  fromMetrics.selectAllMetricsIds\n)"
            },
            {
                "name": "selectAllModels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(modelsState, selectAll)"
            },
            {
                "name": "selectAllModelVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectModelVersionsState,\n  selectAll,\n)"
            },
            {
                "name": "selectAllModelVersionsByModelId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: number) =>\n  createSelector(selectAllModelVersions, modelVersions => {\n    return modelVersions.filter(modelVersion => modelVersion.model.id === id);\n  })"
            },
            {
                "name": "selectAllServables",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectServablesState,\n  selectAll,\n)"
            },
            {
                "name": "selectApplicationIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectIds)"
            },
            {
                "name": "selectApplicationLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  state,\n  state => state.loaded,\n)"
            },
            {
                "name": "selectApplicationsByNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(names: string[]) =>\n  createSelector(selectApplicationsEntities, dict =>\n    names.map(name => dict[name]),\n  )"
            },
            {
                "name": "selectApplicationsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectEntities)"
            },
            {
                "name": "selectCheckIdToShow",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/ui.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getUiState,\n  state => state.checksIdToShow\n)"
            },
            {
                "name": "selectChecks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/checks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getChecksState,\n  state => {\n    return state.checks;\n  }\n)"
            },
            {
                "name": "selectChecksLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/checks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getChecksState,\n  state => {\n    return state.loading;\n  }\n)"
            },
            {
                "name": "selectCheckToShowInDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/ui.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectChecks,\n  selectCheckIdToShow,\n  (checks, checkId) => {\n    return checks && checks.getChecks().find(check => check.id === checkId);\n  }\n)"
            },
            {
                "name": "selectCurrentServable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectServablesEntities,\n  selectRouterState,\n  (state, router) => {\n    try {\n      return state[router.state.params.name];\n    } catch {\n      return null;\n    }\n  },\n)"
            },
            {
                "name": "selectCustomMetrics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectSelectedMetrics,\n  metrics => {\n    return metrics.filter(isCustomMetric);\n  }\n)"
            },
            {
                "name": "selectDefaultDeploymentConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllConfigs,\n  configs => configs.find(dc => dc.name === defaultDepConfig),\n)"
            },
            {
                "name": "selectDepConfigEntitites",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectEntities)"
            },
            {
                "name": "selectDepConfigIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(state, selectIds)"
            },
            {
                "name": "selectDepConfigLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  state,\n  state => state.loaded,\n)"
            },
            {
                "name": "SELECTED_APPLICATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-test/dialog-test.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Application>(\n  'selectedApplication',\n)"
            },
            {
                "name": "SELECTED_DEL_APPLICATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-delete-application/dialog-delete-application.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Application>(\n  'selectedApplication'\n)"
            },
            {
                "name": "SELECTED_MODEL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-delete-model/dialog-delete-model.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Model>('selected model')"
            },
            {
                "name": "SELECTED_MODEL_VARIANT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<any>(\n  'selected model variant',\n)"
            },
            {
                "name": "SELECTED_UPD_APPLICATION",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-update-application/dialog-update-application.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken<Application>(\n  'selectedApplication',\n)"
            },
            {
                "name": "selectFavoriteApplications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllApplications,\n  apps => apps.filter(_ => _.favorite),\n)"
            },
            {
                "name": "selectFilterDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.filterDateRange\n)"
            },
            {
                "name": "selectFirstModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(selectNonMetricModels, models =>\n  models.length > 0 ? models[0] : null,\n)"
            },
            {
                "name": "selectFirstModelVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllModelVersions,\n  modelVersions =>\n    modelVersions\n      ? modelVersions => modelVersions.filter(mv => mv.isExternal !== true)\n      : modelVersions[0],\n)"
            },
            {
                "name": "selectInternalModelVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllModelVersions,\n  modelVersions => modelVersions.filter(mv => mv.isExternal !== true),\n)"
            },
            {
                "name": "selectInternalReleasedNonMetricModelVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllModelVersions,\n  mvs => {\n    return mvs.filter(\n      mv =>\n        !mv.isExternal &&\n        mv.status === ModelVersionStatus.Released &&\n        !mv.metadata.is_metric,\n    );\n  },\n)"
            },
            {
                "name": "selectMaxDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.maxDate\n)"
            },
            {
                "name": "selectMetricSpecsNames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllMetrics,\n  metrics => metrics.map(({ name }) => name || 'n/a')\n)"
            },
            {
                "name": "selectMinDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.minDate\n)"
            },
            {
                "name": "selectModelsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(modelsState, selectEntities)"
            },
            {
                "name": "selectModelsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  modelsState,\n  state => state.loaded,\n)"
            },
            {
                "name": "selectModelsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  modelsState,\n  state => state.loading,\n)"
            },
            {
                "name": "selectModelsWithReleasedVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectNonMetricModels,\n  selectAllModelVersions,\n  (models, modelVersions) => {\n    const modelVersionsReleased = modelVersions.filter(\n      mv => mv.status === ModelVersionStatus.Released && !mv.metadata.is_metric,\n    );\n    const idModels = modelVersionsReleased.map(mv => mv.model.id);\n    return models.filter(({ id }) => idModels.includes(id));\n  },\n)"
            },
            {
                "name": "selectModelVersionById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "id =>\n  createSelector(\n    selectModelVersionEntities,\n    entities => entities && entities[id],\n  )"
            },
            {
                "name": "selectModelVersionEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectModelVersionsState,\n  selectEntities,\n)"
            },
            {
                "name": "selectModelVersionsLoaded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectModelVersionsState,\n  state => state.loaded,\n)"
            },
            {
                "name": "selectModelVersionsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectModelVersionsState,\n  state => state.loading,\n)"
            },
            {
                "name": "selectModelVersionsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('modelVersions')"
            },
            {
                "name": "selectNonFavoriteApplications",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllApplications,\n  apps => apps.filter(_ => !_.favorite),\n)"
            },
            {
                "name": "selectNonMetricModels",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllModels,\n  selectAllModelVersions,\n  (models, modelVersions) => {\n    const modelName = R.compose(R.prop('name'), R.prop('model'));\n    const dictByModelName: Map<number, ModelVersion[]> =\n      R.groupBy(modelName)(modelVersions);\n\n    if (modelVersions.length === 0) {\n      return models;\n    }\n\n    return models.filter(\n      ({ name }) =>\n        !dictByModelName[name].some(\n          mv => (mv as ModelVersion).metadata.is_metric,\n        ),\n    );\n  },\n)"
            },
            {
                "name": "selectOffset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.offset\n)"
            },
            {
                "name": "selectRouterParams",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/router.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectRouterState,\n  router => router.state\n)"
            },
            {
                "name": "selectRouterState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/router.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<\n  fromRouter.RouterReducerState<RouterStateUrl>\n>('router')"
            },
            {
                "name": "selectSelectedAggregation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => {\n    return state.selectedAggregation;\n  }\n)"
            },
            {
                "name": "selectSelectedApplication",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectApplicationsEntities,\n  selectRouterState,\n  (entities, router): Application => {\n    return router.state && entities[router.state.params.name];\n  },\n)"
            },
            {
                "name": "selectSelectedDeploymentConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllConfigs,\n  selectRouterParams,\n  (configs, router) => {\n    return (\n      router.params &&\n      configs.find(config => config.name === router.params.name)\n    );\n  },\n)"
            },
            {
                "name": "selectSelectedMetrics",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllMetrics,\n  fromModelVersions.selectSelectedModelVersion,\n  (metrics, modelVersion) => {\n    return (\n      modelVersion &&\n      metrics.filter(metric => metric.modelVersionId === modelVersion.id)\n    );\n  }\n)"
            },
            {
                "name": "selectSelectedModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectModelsEntities,\n  selectRouterParams,\n  (entities, router) => {\n    return router.params && entities[router.params.modelName];\n  },\n)"
            },
            {
                "name": "selectSelectedModelVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllModelVersions,\n  fromRouter.selectRouterParams,\n  (versions, router) => {\n    const modelName = router.params.modelName;\n    const version = Number(router.params.modelVersionNumber);\n    let mv = null;\n\n    if (modelName && version) {\n      mv = versions.find(\n        mv => mv.model.name === modelName && mv.modelVersion === version,\n      );\n      return mv;\n    }\n  },\n)"
            },
            {
                "name": "selectServablesByModelVersionId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: number) =>\n  createSelector(selectAllServables, state =>\n    state.filter(servable => servable.modelVersionId === id),\n  )"
            },
            {
                "name": "selectServablesByName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(name: string) =>\n  createSelector(selectAllServables, state =>\n    state.filter(servable => servable.fullName === name),\n  )"
            },
            {
                "name": "selectServablesEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectServablesState,\n  selectEntities,\n)"
            },
            {
                "name": "selectServablesState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('servables')"
            },
            {
                "name": "selectServiceStatusesById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: number) =>\n  createSelector(allStatusesEntities, entities => entities[id])"
            },
            {
                "name": "selectSiblingModelVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "({\n  modelVersionId,\n  modelId,\n}: {\n  modelVersionId: number;\n  modelId: number;\n}) =>\n  createSelector(selectAllModelVersionsByModelId(modelId), modelVersions => {\n    return modelVersions.filter(\n      modelVersion => modelVersion.id !== modelVersionId,\n    );\n  })"
            },
            {
                "name": "SERVABLE_NAME_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('servable full name')"
            },
            {
                "name": "servableReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/servables.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(getAll, state => ({ ...state, loading: true })),\n  on(getAllSuccess, (state, props) =>\n    adapter.addMany(props.servables, { ...state, loading: false })\n  ),\n  on(deleteServableSuccess, (state, { name }) =>\n    adapter.removeOne(name, state)\n  ),\n  on(updateServable, (state, { servable }) =>\n    adapter.upsertOne(servable, state)\n  )\n)"
            },
            {
                "name": "serviceStatusesReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/service-statuses.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(GetSuccess, (state, { payload }) => adapter.addOne(payload, state))\n)"
            },
            {
                "name": "SetFilterDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] change date time range',\n  props<{ from: number; to: number }>()\n)"
            },
            {
                "name": "SetInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] set input',\n  props<{ payload: any }>(),\n)"
            },
            {
                "name": "SetInputSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] set input with success',\n  props<{ payload: { name: string; input: any } }>(),\n)"
            },
            {
                "name": "SetStatusToAvailableAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring service] is available'\n)"
            },
            {
                "name": "SetStatusToClosedForOSSAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring service] is close for OSS'\n)"
            },
            {
                "name": "SetStatusToFailedAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring service] is failed',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "ShowCheckDetails",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/actions/ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Monitoring] show check details',\n  props<{\n    checkId: string;\n  }>()\n)"
            },
            {
                "name": "SimpleInput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/signature.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Field>(() => ({\n  profile: 'TEXT',\n  name: 'simple_input_1',\n  dtype: 'DTYPE',\n  shape: {\n    dims: [{ size: 1, name: 'DIM' }],\n  },\n}))"
            },
            {
                "name": "SimpleInput2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/signature.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "SimpleInput.build({\n  name: 'simple_input_2',\n  shape: {\n    dims: [\n      { size: 1, name: 'DIM' },\n      { size: 2, name: 'DIM' },\n    ],\n  },\n})"
            },
            {
                "name": "SimpleOutput",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/testing/factories/signature.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Factory.define<Field>(() => ({\n  profile: 'TEXT',\n  name: 'simple_output_1',\n  dtype: 'DTYPE',\n  shape: {\n    dims: [{ size: 1, name: 'DIM' }],\n  },\n}))"
            },
            {
                "name": "SseAddDeploymentConfigEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SSE Deployment config] add deployment configuration',\n  props<{ depConfig: DeploymentConfig }>(),\n)"
            },
            {
                "name": "SseDeleteDeploymentConfigEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SSE Deployment config] delete',\n  props<{ name: string }>(),\n)"
            },
            {
                "name": "SseDeleteEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SSE Application] delete application sse event',\n  props<{ applicationName: string }>(),\n)"
            },
            {
                "name": "SseUpdateEvent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[SSE Application] update application sse event',\n  props<{ application: Application }>(),\n)"
            },
            {
                "name": "state",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('applications')"
            },
            {
                "name": "state",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('deploymentConfigs')"
            },
            {
                "name": "state",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>('serviceStatuses')"
            },
            {
                "name": "Stroked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "StrokedAccent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "StrokedCyan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "StrokedDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "StrokedPrimary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "StrokedWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Test",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] test',\n  props<{ payload: Application }>(),\n)"
            },
            {
                "name": "TestFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] test with fail',\n  props<{ payload: { name: string; error: string } }>(),\n)"
            },
            {
                "name": "TestSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] test with success',\n  props<{ payload: { name: string; output: any } }>(),\n)"
            },
            {
                "name": "ToggleFavorite",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Deployment config] toggleFavorite',\n  props<{ payload: { depConfig: DeploymentConfig } }>(),\n)"
            },
            {
                "name": "ToggleFavorite",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] toggleFavorite',\n  props<{ payload: { application: Application } }>(),\n)"
            },
            {
                "name": "ToggleFavorite",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/models.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model] toggle favorite',\n  props<{ model: Model }>()\n)"
            },
            {
                "name": "uiReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(ShowCheckDetails, (state, payload) => {\n    return { ...state, checksIdToShow: payload.checkId };\n  }),\n  on(CloseCheckDetails, state => ({ ...state, checksIdToShow: undefined }))\n)"
            },
            {
                "name": "Update",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] update application',\n  props<{ application: ApplicationUpdateRequest }>(),\n)"
            },
            {
                "name": "UpdateFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] update application with fail',\n  props<{ error: string }>(),\n)"
            },
            {
                "name": "UpdateModelVersions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] update many',\n  props<{ payload: ModelVersion[] }>(),\n)"
            },
            {
                "name": "updateServable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/servables.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Servables] update servable',\n  props<{ servable: Servable }>()\n)"
            },
            {
                "name": "UpdateSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/applications.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Application] update application with success',\n  props<{ payload: Application }>(),\n)"
            },
            {
                "name": "UpsertModelVersion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/model-versions.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Model Version] upsert',\n  props<{ modelVersion: ModelVersion }>(),\n)"
            },
            {
                "name": "url",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "e2e/production-e2e/app-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "process.env.URL || 'http://localhost'"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/applications.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/model-version.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/applications.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/models.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/servables.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "x",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['A', 'B', 'C', 'D']"
            },
            {
                "name": "y",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "['X', 'Y', 'Z', 'W']"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "applicationToUpdateRequest",
                "file": "src/app/core/data/utils/applciation.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ApplicationUpdateRequest",
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "asyncData",
                "file": "src/testing/helpers/async-data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "baseHrefFactory",
                "file": "src/app/utils/base-href-factory.util.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "href",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "href",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "buildPlotBands",
                "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "health",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Array<literal type>",
                "jsdoctags": [
                    {
                        "name": "health",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "chooseFormatter",
                "file": "src/app/modules/stat/components/histogram/histogram.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "bins",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deployment",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "bins",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deployment",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createServiceSupportOnFailure",
                "file": "src/app/core/data/types/model-version-service-status.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ServiceSupported",
                "jsdoctags": [
                    {
                        "name": "error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "defaultConfig",
                "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "name",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "threshold",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "returnType": "ChartConfig",
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "threshold",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateConfigs",
                "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "metrics",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "metricCheckAgg",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "palette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ChartConfig[]",
                "jsdoctags": [
                    {
                        "name": "metrics",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "metricCheckAgg",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "palette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getColdWarmColor",
                "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getErrorText",
                "file": "src/testing/helpers/get-error-text.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "de",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "de",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getModelVersionsIds",
                "file": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ModelVersionId[]",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNativeElement",
                "file": "src/testing/helpers/get-native-element.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "de",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "HTMLElement",
                "jsdoctags": [
                    {
                        "name": "de",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hsAbsoluteUrlFactory",
                "file": "src/app/core/base-url.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "baseHref",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "baseHref",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hsBaseUrlFactory",
                "file": "src/app/core/base-url.token.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "baseHref",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "baseHref",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "initializeBrowser",
                "file": "e2e/production-e2e/helpers/initializeBrowser.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Promise<literal type>"
            },
            {
                "name": "log",
                "file": "src/app/utils/operators/log.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "source",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mockAggregationWithId",
                "file": "src/app/modules/monitoring/mocks/aggregation.mock.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "id",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Aggregation",
                "jsdoctags": [
                    {
                        "name": "id",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "neitherNullNorUndefined",
                "file": "src/app/utils/operators/neither-null-nor-undefined.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "source",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<T>",
                "jsdoctags": [
                    {
                        "name": "source",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "pluck",
                "file": "src/app/utils/operators/pluck.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "key",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "key",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/core/store/reducers/applications.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/core/store/reducers/deployment-configs.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/core/store/reducers/models.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/core/store/reducers/model-version.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/core/store/reducers/servables.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/core/store/reducers/service-statuses.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toHeatmapData",
                "file": "src/app/modules/stat/utils/to-heatmap-data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "x",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "y",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "HeatmapData[]",
                "jsdoctags": [
                    {
                        "name": "x",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "y",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AnchorExplanation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/modules/root-cause/models/explanation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "AxisPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                "file": "src/app/modules/hs-d3/directives/d3axis.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "BareCheck",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/modules/monitoring/models/BareCheck.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "BatchMetricCheckStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"fail\" | \"unknown\"",
                "file": "src/app/modules/monitoring/containers/batch-metrics/batch-metrics.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "buttonColors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"base\" | \"primary\" | \"accent\" | \"warning\" | \"cyan\"",
                "file": "src/app/shared/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "buttonKinds",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"base\" | \"flat\" | \"stroked\"",
                "file": "src/app/shared/components/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "CheckAggregationResponseItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "CheckId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "src/app/modules/monitoring/models/Check.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 147
            },
            {
                "name": "CmpOperators",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Eq\" | \"NotEq\" | \"Greater\" | \"Less\" | \"GreaterEq\" | \"LessEq\"",
                "file": "src/app/modules/monitoring/models/threshold-cmp-operators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ColorBy",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"class_label\" | \"metric\"",
                "file": "src/app/modules/visualization/visualization.facade.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ColoringType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"class\" | \"gradient\"",
                "file": "src/app/modules/visualization/models/ColoringType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ColorizerType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"class_label\" | \"metric\"",
                "file": "src/app/modules/visualization/models/Colorizer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ColorMapType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"coldwarm\" | \"interpolateRdYlBu\" | \"redToBlue\" | \"interpolateRainbow\"",
                "file": "src/app/core/color-map.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ComparisonRegime",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"split\" | \"merge\"",
                "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "DriftStatusIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"icon-error-outline\" | \"check\" | \"warning\"",
                "file": "src/app/modules/stat/components/drift-status/drift-status.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "EntityWithName",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/redirect.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "grayScaleType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ImageType.greyScaleAlpha | ImageType.greyScale255",
                "file": "src/app/core/image-helper.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "HeatmapData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/modules/stat/models/heatmap.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "HydroHttpParams",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string | literal type | HttpParams",
                "file": "src/app/core/data/services/http.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "LinkRegime",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"all\" | \"nearest\" | \"counterfactuals\"",
                "file": "src/app/modules/visualization/models/visualization.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "LogItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/components/logs/logs.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            },
            {
                "name": "logType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"servable\" | \"model-version\"",
                "file": "src/app/core/data/services/log.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ModelVersionId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number",
                "file": "src/app/core/data/types/model-version.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 144
            },
            {
                "name": "ModelVersionMetadata",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/data/types/model-version.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "notificationType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"info\" | \"success\" | \"warning\" | \"error\"",
                "file": "src/app/core/data/types/notifications.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "RiseExplanation",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/modules/root-cause/models/explanation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "RiseExplanationResult",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<literal type>",
                "file": "src/app/modules/root-cause/models/explanation.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 174
            },
            {
                "name": "VisualizationMetric",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"global_score\" | \"sammon_error\" | \"auc_score\" | \"stability_score\" | \"msid\" | \"clustering\"",
                "file": "src/app/modules/visualization/models/visualization-params.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "VisualizationPropertyMetric",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"euclidean\" | \"manhattan\" | \"chebyshev\" | \"minkowski\" | \"canberra\" | \"braycurtis\" | \"haversine\" | \"mahalanobis\" | \"wminkowski\" | \"seuclidean\" | \"cosine\" | \"correlation\" | \"hamming\" | \"jaccard\" | \"dice\" | \"russellrao\" | \"kulsinski\" | \"rogerstanimoto\" | \"sokalmichener\" | \"sokalsneath\" | \"yule\"",
                "file": "src/app/modules/visualization/models/visualization-params.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "VisualizationTaskId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "src/app/modules/visualization/store/visualization.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 147
            }
        ],
        "enumerations": [
            {
                "name": "ApplicationStatus",
                "childs": [
                    {
                        "name": "Assembling",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assembling"
                    },
                    {
                        "name": "Ready",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ready"
                    },
                    {
                        "name": "Failed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "failed"
                    },
                    {
                        "name": "Undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "undefined"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/types/application.ts"
            },
            {
                "name": "ChecksHealthFilterOptions",
                "childs": [
                    {
                        "name": "all",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ALL"
                    },
                    {
                        "name": "byScore",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SCORE"
                    },
                    {
                        "name": "withError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ERROR"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts"
            },
            {
                "name": "dataType",
                "childs": [
                    {
                        "name": "DT_INVALID",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "DT_FLOAT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "DT_DOUBLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "DT_INT32",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "DT_UINT8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    },
                    {
                        "name": "DT_INT16",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "5"
                    },
                    {
                        "name": "DT_INT8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "6"
                    },
                    {
                        "name": "DT_STRING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "7"
                    },
                    {
                        "name": "DT_COMPLEX64",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "8"
                    },
                    {
                        "name": "DT_INT64",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "9"
                    },
                    {
                        "name": "DT_BOOL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "10"
                    },
                    {
                        "name": "DT_QINT8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "11"
                    },
                    {
                        "name": "DT_QUINT8",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "12"
                    },
                    {
                        "name": "DT_QINT32",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "13"
                    },
                    {
                        "name": "DT_BFLOAT16",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "14"
                    },
                    {
                        "name": "DT_QINT16",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "15"
                    },
                    {
                        "name": "DT_QUINT16",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "16"
                    },
                    {
                        "name": "DT_UINT16",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "17"
                    },
                    {
                        "name": "DT_COMPLEX128",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "18"
                    },
                    {
                        "name": "DT_HALF",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "19"
                    },
                    {
                        "name": "DT_RESOURCE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "20"
                    },
                    {
                        "name": "DT_VARIANT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "21"
                    },
                    {
                        "name": "DT_UINT32",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "22"
                    },
                    {
                        "name": "DT_UINT64",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "23"
                    },
                    {
                        "name": "DT_MAP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "27"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/types/tensor-proto.ts"
            },
            {
                "name": "ETaskState",
                "childs": [
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUCCESS"
                    },
                    {
                        "name": "pending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "PENDING"
                    },
                    {
                        "name": "failed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FAILED"
                    },
                    {
                        "name": "unknown",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "UNKNOWN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/visualization/models/visualization.ts"
            },
            {
                "name": "ExplanationStatus",
                "childs": [
                    {
                        "name": "success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUCCESS"
                    },
                    {
                        "name": "failed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "FAILED"
                    },
                    {
                        "name": "notSupported",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NOT_SUPPORTED"
                    },
                    {
                        "name": "notCalled",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NOT_CALLED"
                    },
                    {
                        "name": "started",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "STARTED"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/root-cause/models/explanation.model.ts"
            },
            {
                "name": "HydroServicesEndpoints",
                "childs": [
                    {
                        "name": "buildInfo",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/buildinfo"
                    },
                    {
                        "name": "gateway",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "gateway/buildinfo"
                    },
                    {
                        "name": "sonar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "monitoring/buildinfo"
                    },
                    {
                        "name": "rootcause",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rootcause/buildinfo"
                    },
                    {
                        "name": "stat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stat/buildinfo"
                    },
                    {
                        "name": "visualization",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "visualization/buildinfo"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/build-information.service.ts"
            },
            {
                "name": "ImageType",
                "childs": [
                    {
                        "name": "greyScaleAlpha",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "grey scale alpha channel"
                    },
                    {
                        "name": "greyScale255",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "grey scale 0-255"
                    },
                    {
                        "name": "rgb",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "rbg"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/image-helper.service.ts"
            },
            {
                "name": "ModelVersionStatus",
                "childs": [
                    {
                        "name": "Assembling",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "assembling"
                    },
                    {
                        "name": "Released",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "released"
                    },
                    {
                        "name": "Failed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "failed"
                    },
                    {
                        "name": "Undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "undefined"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/types/model-version.ts"
            },
            {
                "name": "MonitoringServiceStatus",
                "childs": [
                    {
                        "name": "UNKNOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Unknown"
                    },
                    {
                        "name": "AVAILABLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Available"
                    },
                    {
                        "name": "CLOSED_FOR_OSS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Closed for OSS"
                    },
                    {
                        "name": "FAILED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Failed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/monitoring/models/monitoring-service-status.ts"
            },
            {
                "name": "ServicesEndpoints",
                "childs": [
                    {
                        "name": "stat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stat/support"
                    },
                    {
                        "name": "visualization",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "visualization/supported"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/modules/model-version/services-support.service.ts"
            },
            {
                "name": "ServicesEndpoints",
                "childs": [
                    {
                        "name": "stat",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stat/support"
                    },
                    {
                        "name": "visualization",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "visualization/supported"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/services/service-status.service.ts"
            },
            {
                "name": "ServiceStatus",
                "childs": [
                    {
                        "name": "UNKNOWN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Unknown"
                    },
                    {
                        "name": "AVAILABLE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Available"
                    },
                    {
                        "name": "CLOSED_FOR_OSS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Closed for OSS"
                    },
                    {
                        "name": "FAILED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Failed"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/types/service-status.ts"
            },
            {
                "name": "SSEEvents",
                "childs": [
                    {
                        "name": "ModelRemove",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ModelRemove"
                    },
                    {
                        "name": "ModelUpdate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ModelUpdate"
                    },
                    {
                        "name": "ApplicationUpdate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ApplicationUpdate"
                    },
                    {
                        "name": "ApplicationRemove",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ApplicationRemove"
                    },
                    {
                        "name": "ServableUpdate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ServableUpdate"
                    },
                    {
                        "name": "ServableRemove",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ServableRemove"
                    },
                    {
                        "name": "DeploymentConfigurationUpdate",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DeploymentConfigurationUpdate"
                    },
                    {
                        "name": "DeploymentConfigurationRemove",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "DeploymentConfigurationRemove"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/sse.service.ts"
            },
            {
                "name": "Status",
                "childs": [
                    {
                        "name": "Serving",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Serving"
                    },
                    {
                        "name": "NotServing",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "NotServing"
                    },
                    {
                        "name": "Starting",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Starting"
                    },
                    {
                        "name": "Undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Undefined"
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "Warning"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/types/servable.ts"
            },
            {
                "name": "TestStatus",
                "childs": [
                    {
                        "name": "Failed",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "failed"
                    },
                    {
                        "name": "Pending",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pending"
                    },
                    {
                        "name": "Success",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "success"
                    },
                    {
                        "name": "Undefined",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/data/types/application.ts"
            }
        ],
        "groupedVariables": {
            "src/app/core/store/reducers/model-version.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/model-version.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ModelVersion>",
                    "defaultValue": "createEntityAdapter<ModelVersion>({\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/model-version.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({\n  loading: false,\n  loaded: false,\n})"
                },
                {
                    "name": "modelVersionReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/model-version.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(GetModelVersions, state => ({ ...state, loading: true })),\n  on(GetModelVersionsSuccess, (state, { payload }) =>\n    adapter.addMany(payload, { ...state, loaded: true, loading: false }),\n  ),\n  on(GetModelVersionsFail, state => ({\n    ...state,\n    loaded: false,\n    loading: true,\n  })),\n  on(AddModelVersionSuccess, (state, { modelVersion }) =>\n    adapter.upsertOne(modelVersion, state),\n  ),\n  on(DeleteModelVersionSuccess, (state, { modelVersionId }) =>\n    adapter.removeOne(modelVersionId, state),\n  ),\n  on(UpsertModelVersion, (state, { modelVersion }) =>\n    adapter.upsertOne(modelVersion, state),\n  ),\n  on(UpdateModelVersions, (state, { payload: modelVersions }) =>\n    adapter.addMany(modelVersions, { ...state }),\n  ),\n  on(DeleteApplicationSuccess, (state, { applicationName }) => {\n    const modelVersions: ModelVersion[] = Object.values(state.entities);\n    const hasApplication =\n      (applicationName: string) =>\n      (modelVersion: ModelVersion): boolean =>\n        modelVersion.applications.includes(applicationName);\n\n    const toUpdate =\n      (applicationName: string) =>\n      (modelVersion: ModelVersion): Update<ModelVersion> => {\n        return {\n          id: modelVersion.id,\n          changes: {\n            applications: modelVersion.applications.filter(\n              _ => _ !== applicationName,\n            ),\n          },\n        };\n      };\n\n    try {\n      const mvs = modelVersions.filter(hasApplication(applicationName));\n      const updates = mvs.map(toUpdate(applicationName));\n\n      return adapter.updateMany(updates, state);\n    } catch (e) {\n      return state;\n    }\n  }),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/model-version.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/core/store/states/applications.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/applications.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Application>({\n  selectId: application => application.name,\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/applications.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  ids: [],\n  entities: {},\n  loaded: false,\n  loading: false,\n}"
                }
            ],
            "src/app/core/store/states/deployment-configs.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/deployment-configs.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<DeploymentConfig>({\n  selectId: depConfig => depConfig.name,\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/deployment-configs.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n}"
                }
            ],
            "src/app/core/store/states/model-versions.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/model-versions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ModelVersion>",
                    "defaultValue": "createEntityAdapter<\n  ModelVersion\n>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/model-versions.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n}"
                }
            ],
            "src/app/core/store/states/models.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/models.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Model>",
                    "defaultValue": "createEntityAdapter<Model>({\n  selectId: model => model.name,\n  sortComparer: (a, b) => {\n    return b.id - a.id;\n  },\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/models.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  loaded: false,\n}"
                }
            ],
            "src/app/core/store/states/servables.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/servables.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createEntityAdapter<Servable>({\n  selectId: servable => servable.fullName,\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/servables.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  ids: [],\n  entities: {},\n  loading: false,\n  error: null,\n}"
                }
            ],
            "src/app/core/store/states/service-statuses.state.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/service-statuses.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<ModelVersionServiceStatusesEntity>",
                    "defaultValue": "createEntityAdapter<\n  ModelVersionServiceStatusesEntity\n>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/service-statuses.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  ids: [],\n  entities: {},\n}"
                }
            ],
            "src/app/modules/monitoring/store/reducers/metrics.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<MetricSpecification>",
                    "defaultValue": "createEntityAdapter<\n  MetricSpecification\n>()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({\n  error: null,\n})"
                },
                {
                    "name": "metricsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(AddMetricSuccess, (state, action) =>\n    adapter.addOne(action.payload, state)\n  ),\n  on(LoadMetricsSuccess, (state, action) =>\n    adapter.upsertMany(action.payload, state)\n  ),\n  on(LoadMetricsFail, (state, action) => ({\n    ...state,\n    error: action.error,\n    loading: false,\n  })),\n  on(DeleteMetricSuccess, (state, action) =>\n    adapter.removeOne(action.payload.id, state)\n  ),\n  on(ClearMonitoringPage, () => initialState)\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/core/store/actions/applications.actions.ts": [
                {
                    "name": "Add",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] add application',\n  props<{ application: Application }>(),\n)"
                },
                {
                    "name": "AddFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] add application with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "AddSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] add application with success',\n  props<{ payload: Application }>(),\n)"
                },
                {
                    "name": "ClearTestingDialog",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Testing window] clear')"
                },
                {
                    "name": "Delete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] delete application',\n  props<{ application: Application }>(),\n)"
                },
                {
                    "name": "DeleteFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] delete application with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "DeleteSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] delete application with success',\n  props<{ applicationName: string }>(),\n)"
                },
                {
                    "name": "GenerateInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Application] generate input')"
                },
                {
                    "name": "GenerateInputFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] generate input with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "GenerateInputSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] generate input with success',\n  props<{ payload: { name: string; input: any } }>(),\n)"
                },
                {
                    "name": "Get",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Application] Get all applications')"
                },
                {
                    "name": "GetById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] Get application by id',\n  props<{ application: Application }>(),\n)"
                },
                {
                    "name": "GetByIdFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] Get application by id with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "GetByIdSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] Get application by id with success',\n  props<{ payload: Application }>(),\n)"
                },
                {
                    "name": "GetFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] Get all applications with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "GetSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] Get all applications with success',\n  props<{ payload: Application[] }>(),\n)"
                },
                {
                    "name": "SetInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] set input',\n  props<{ payload: any }>(),\n)"
                },
                {
                    "name": "SetInputSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] set input with success',\n  props<{ payload: { name: string; input: any } }>(),\n)"
                },
                {
                    "name": "SseDeleteEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SSE Application] delete application sse event',\n  props<{ applicationName: string }>(),\n)"
                },
                {
                    "name": "SseUpdateEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SSE Application] update application sse event',\n  props<{ application: Application }>(),\n)"
                },
                {
                    "name": "Test",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] test',\n  props<{ payload: Application }>(),\n)"
                },
                {
                    "name": "TestFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] test with fail',\n  props<{ payload: { name: string; error: string } }>(),\n)"
                },
                {
                    "name": "TestSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] test with success',\n  props<{ payload: { name: string; output: any } }>(),\n)"
                },
                {
                    "name": "ToggleFavorite",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] toggleFavorite',\n  props<{ payload: { application: Application } }>(),\n)"
                },
                {
                    "name": "Update",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] update application',\n  props<{ application: ApplicationUpdateRequest }>(),\n)"
                },
                {
                    "name": "UpdateFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] update application with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "UpdateSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/applications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Application] update application with success',\n  props<{ payload: Application }>(),\n)"
                }
            ],
            "src/app/core/store/actions/deployment-configs.actions.ts": [
                {
                    "name": "AddDeploymentConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] add deployment configuration',\n  props<{ depConfig: DeploymentConfig }>(),\n)"
                },
                {
                    "name": "AddDeploymentConfigFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] add deployment configuration with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "AddDeploymentConfigSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] add deployment configuration with success',\n  props<{ payload: DeploymentConfig }>(),\n)"
                },
                {
                    "name": "DeleteDeploymentConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] delete',\n  props<{ name: string }>(),\n)"
                },
                {
                    "name": "DeleteDeploymentConfigFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] failed deletion',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "DeleteDeploymentConfigSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] successful deletion',\n  props<{ name: string }>(),\n)"
                },
                {
                    "name": "GetDeploymentConfigs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] get all deployment configs',\n)"
                },
                {
                    "name": "GetDeploymentConfigsFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] get all failed',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "GetDeploymentConfigsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] get all succeed',\n  props<{ payload: DeploymentConfig[] }>(),\n)"
                },
                {
                    "name": "SseAddDeploymentConfigEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SSE Deployment config] add deployment configuration',\n  props<{ depConfig: DeploymentConfig }>(),\n)"
                },
                {
                    "name": "SseDeleteDeploymentConfigEvent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[SSE Deployment config] delete',\n  props<{ name: string }>(),\n)"
                },
                {
                    "name": "ToggleFavorite",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/deployment-configs.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Deployment config] toggleFavorite',\n  props<{ payload: { depConfig: DeploymentConfig } }>(),\n)"
                }
            ],
            "src/app/modules/monitoring/store/actions/metrics.actions.ts": [
                {
                    "name": "AddMetric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] add metric',\n  props<{ aggregation: MetricSpecificationRequest }>()\n)"
                },
                {
                    "name": "AddMetricFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] add metric fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "AddMetricSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] add metric success',\n  props<{ payload: MetricSpecification }>()\n)"
                },
                {
                    "name": "DeleteMetric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] delete metric',\n  props<{ id: string }>()\n)"
                },
                {
                    "name": "DeleteMetricFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] delete metric fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "DeleteMetricSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] delete metric success',\n  props<{ payload: { id: string } }>()\n)"
                },
                {
                    "name": "LoadMetrics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Metrics] get metrics')"
                },
                {
                    "name": "LoadMetricsFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] get metrics fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "LoadMetricsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Metrics] get metrics success',\n  props<{ payload: MetricSpecification[] }>()\n)"
                }
            ],
            "src/app/core/store/actions/models.actions.ts": [
                {
                    "name": "AddModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] add model',\n  props<{ model: Model }>()\n)"
                },
                {
                    "name": "DeleteModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] delete',\n  props<{ modelId: number }>()\n)"
                },
                {
                    "name": "DeleteModelFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] delete with fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "DeleteModelSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] delete with success',\n  props<{ modelId: number }>()\n)"
                },
                {
                    "name": "GetModels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Model] get all model')"
                },
                {
                    "name": "GetModelsFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] get all models with fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "GetModelsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] get all model with success',\n  props<{ payload: Model[] }>()\n)"
                },
                {
                    "name": "ToggleFavorite",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/models.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model] toggle favorite',\n  props<{ model: Model }>()\n)"
                }
            ],
            "src/app/core/store/actions/model-versions.actions.ts": [
                {
                    "name": "AddModelVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] add model version',\n  props<{ modelVersion: ModelVersion }>(),\n)"
                },
                {
                    "name": "AddModelVersionSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] added with success',\n  props<{ modelVersion: ModelVersion }>(),\n)"
                },
                {
                    "name": "DeleteModelVersionSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] deleted with success',\n  props<{ modelVersionId: number }>(),\n)"
                },
                {
                    "name": "GetModelVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Model Version]')"
                },
                {
                    "name": "GetModelVersionsFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] with fail',\n  props<{ error: string }>(),\n)"
                },
                {
                    "name": "GetModelVersionsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] with success',\n  props<{ payload: ModelVersion[] }>(),\n)"
                },
                {
                    "name": "UpdateModelVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] update many',\n  props<{ payload: ModelVersion[] }>(),\n)"
                },
                {
                    "name": "UpsertModelVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/model-versions.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Model Version] upsert',\n  props<{ modelVersion: ModelVersion }>(),\n)"
                }
            ],
            "src/app/modules/monitoring/mocks/aggregation-list.mock.ts": [
                {
                    "name": "aggregationList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/mocks/aggregation-list.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AggregationsList(\n  [mockAggregationWithId('1'), mockAggregationWithId('2')],\n  2,\n  0,\n  0\n)"
                },
                {
                    "name": "emptyAggregationList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/mocks/aggregation-list.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AggregationsList([], 0, 0, 0)"
                }
            ],
            "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts": [
                {
                    "name": "aggregationReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(LoadAggregationsSuccess, (state, props) => {\n    return {\n      ...state,\n      aggregationList: props.aggregationList,\n      error: undefined,\n      minDate: props.minDate,\n      maxDate: props.maxDate,\n    };\n  }),\n  on(LoadAggregationsFailed, (state, props) => {\n    return { ...state, aggregationList: undefined, error: props.error };\n  }),\n  on(SelectAggregation, (state, props) => {\n    return { ...state, selectedAggregation: props.aggregation };\n  }),\n  on(LoadOlderAggregation, state => ({ ...state, offset: state.offset + 1 })),\n  on(LoadNewerAggregation, state => ({ ...state, offset: state.offset - 1 })),\n  on(SetFilterDateRange, (state, { from, to }) => {\n    return { ...state, filterDateRange: { from, to } };\n  }),\n  on(ClearFilterDateRange, state => ({ ...state, filterDateRange: undefined })),\n  on(ClearMonitoringPage, () => initialState)\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  minDate: undefined,\n  maxDate: undefined,\n  filterDateRange: undefined,\n  aggregationList: undefined,\n  selectedAggregation: undefined,\n  error: undefined,\n  offset: 0,\n}"
                }
            ],
            "src/app/core/store/selectors/service-statuses.selectors.ts": [
                {
                    "name": "allStatusesEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectEntities)"
                },
                {
                    "name": "selectServiceStatusesById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: number) =>\n  createSelector(allStatusesEntities, entities => entities[id])"
                },
                {
                    "name": "state",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('serviceStatuses')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/service-statuses.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/modules/root-cause/mocks/anchor-result.mock.ts": [
                {
                    "name": "anchorResultMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/mocks/anchor-result.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnchorExplanationResult",
                    "defaultValue": "{\n  coverage: 0,\n  explained_field_name: 'classes',\n  explained_field_value: 1,\n  explanation: ['country != 3.0', 'age > 15.0'],\n  precision: 0.99,\n}"
                }
            ],
            "e2e/production-e2e/app-config.ts": [
                {
                    "name": "api",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`api/v${apiVersion}`"
                },
                {
                    "name": "apiVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "applicationsUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "url + '/applications'"
                },
                {
                    "name": "deploymentConfigsUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "url + '/deployment_configs'"
                },
                {
                    "name": "modelPageUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "url + '/models/census'"
                },
                {
                    "name": "modelVersionPageUrl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "url + '/models/census/1'"
                },
                {
                    "name": "url",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/app-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "process.env.URL || 'http://localhost'"
                }
            ],
            "src/testing/factories/application.ts": [
                {
                    "name": "application",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/application.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Application",
                    "defaultValue": "applicationBuilder.build({})"
                },
                {
                    "name": "applicationBuilder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/application.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new ApplicationBuilder()"
                },
                {
                    "name": "MockApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/application.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Application>(({ sequence }) => ({\n  id: sequence,\n  signature: MockSignature1.build(),\n  name: 'app1',\n  executionGraph: {\n    stages: [\n      {\n        modelVariants: [MockService.build()],\n        signature: 'signature',\n      },\n      {\n        modelVariants: [MockService2],\n        signature: 'signature',\n      },\n    ],\n  },\n  namespace: 'namespace',\n  input: '',\n  output: '',\n  testStatus: TestStatus.Undefined,\n  error: '',\n  kafkaStreaming: [],\n  status: ApplicationStatus.Ready,\n  favorite: false,\n  deploymentConfiguration: MockDeploymentConfig1.build(),\n}))"
                },
                {
                    "name": "MockService",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/application.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<ModelVariant>(() => ({\n  weight: 100,\n  modelVersionId: 1,\n  deploymentConfigurationName: 'default',\n}))"
                },
                {
                    "name": "MockService2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/application.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockService.build({\n  modelVersionId: 2,\n})"
                }
            ],
            "src/app/core/store/reducers/applications.reducer.ts": [
                {
                    "name": "applicationReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/applications.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(Get, state => ({ ...state, loading: true })),\n  on(GetSuccess, (state, { payload }) =>\n    adapter.setAll(payload, { ...state, loaded: true, loading: false }),\n  ),\n  on(GetFail, state => ({ ...state, loading: false })),\n  on(AddSuccess, (state, { payload }) => adapter.addOne(payload, state)),\n  on(UpdateSuccess, (state, { payload }) => adapter.upsertOne(payload, state)),\n  on(\n    SetInputSuccess,\n    GenerateInputSuccess,\n    (state, { payload: { name, input } }) =>\n      adapter.updateOne(\n        {\n          id: name,\n          changes: {\n            input,\n          },\n        },\n        state,\n      ),\n  ),\n  on(Test, (state, { payload: { name } }) =>\n    adapter.updateOne(\n      {\n        id: name,\n        changes: {\n          testStatus: TestStatus.Pending,\n          error: '',\n        },\n      },\n      state,\n    ),\n  ),\n  on(TestSuccess, (state, { payload: { name, output } }) =>\n    adapter.updateOne(\n      {\n        id: name,\n        changes: {\n          output,\n          error: '',\n          testStatus: TestStatus.Success,\n        },\n      },\n      state,\n    ),\n  ),\n  on(TestFail, (state, { payload: { name, error } }) =>\n    adapter.updateOne(\n      {\n        id: name,\n        changes: {\n          testStatus: TestStatus.Failed,\n          output: '',\n          error,\n        },\n      },\n      state,\n    ),\n  ),\n  on(DeleteSuccess, (state, { applicationName }) => {\n    debugger;\n    return adapter.removeOne(applicationName, state);\n  }),\n  on(\n    ToggleFavorite,\n    (\n      state,\n      {\n        payload: {\n          application: { name, favorite },\n        },\n      },\n    ) => {\n      return adapter.updateOne(\n        { id: name, changes: { favorite: !favorite } },\n        state,\n      );\n    },\n  ),\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/applications.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/testing/factories/modelVersion.ts": [
                {
                    "name": "AssemblingModelVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/modelVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockModelVersion1Model1.build({\n  runtime: MockRuntime2,\n  model: MockModel2,\n  status: ModelVersionStatus.Assembling,\n})"
                },
                {
                    "name": "FailedModelVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/modelVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockModelVersion1Model1.build({\n  runtime: MockRuntime2,\n  model: MockModel2,\n  status: ModelVersionStatus.Failed,\n})"
                },
                {
                    "name": "MockModelSignature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/modelVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<ModelSignature>(() => ({\n  signatureName: 'test',\n  outputs: [],\n  inputs: [],\n}))"
                },
                {
                    "name": "MockModelVersion1Model1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/modelVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<\n  ModelVersion,\n  ModelSignature\n>(({ sequence }) => ({\n  get contractInputs(): Input[] {\n    return [];\n  },\n  get contractOutputs(): Output[] {\n    return [];\n  },\n  isReleasedAndInternal(): boolean {\n    return true;\n  },\n  addApplication(applicationName: string): ModelVersion {\n    return MockModelVersion1Model1.build();\n  },\n  id: sequence,\n  image: MockImage.build(),\n  created: new Date().toString(),\n  finished: new Date().toString(),\n  modelVersion: 1,\n  modelSignature: MockModelSignature.build(),\n  runtime: MockRuntime.build(),\n  model: MockModel1.build(),\n  status: ModelVersionStatus.Released,\n  applications: [],\n  metadata: {},\n  isExternal: false,\n  nameWithId: () => 'name',\n}))"
                },
                {
                    "name": "MockModelVersion2Model1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/modelVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockModelVersion1Model1.build({\n  modelVersion: 2,\n  runtime: MockRuntime3,\n  applications: ['app1', 'app2'],\n})"
                },
                {
                    "name": "MockModelVersion3Model2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/modelVersion.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockModelVersion1Model1.build({\n  runtime: MockRuntime2,\n  model: MockModel2,\n  applications: ['app1', 'app2'],\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BaseAccent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BaseCyan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BaseDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BasePrimary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BaseWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Flat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FlatAccent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FlatCyan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FlatDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FlatPrimary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FlatWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Stroked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "StrokedAccent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "StrokedCyan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "StrokedDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "StrokedPrimary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "StrokedWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/app/utils/capitalize-string.ts": [
                {
                    "name": "capitalizeString",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/capitalize-string.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(str: string) => {\n  const length = str.length;\n  if (length) {\n    return str.slice(0, 1).toUpperCase() + str.slice(1, length);\n  }\n\n  return str;\n}"
                }
            ],
            "src/app/modules/monitoring/store/reducers/checks.reducer.ts": [
                {
                    "name": "checksReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(LoadChecks, state => {\n    return { ...state, loading: true };\n  }),\n  on(LoadChecksSuccess, (state, props) => {\n    return { ...state, checks: props.checks, loading: false };\n  }),\n  on(ClearMonitoringPage, () => initialState)\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  checks: undefined,\n  loading: false,\n}"
                }
            ],
            "src/app/core/store/actions/profiles.actions.ts": [
                {
                    "name": "CleanProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Profiles] Clean profiles state')"
                },
                {
                    "name": "GetFields",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Profiles] Get fields',\n  props<{ modelVersionId: string }>()\n)"
                },
                {
                    "name": "GetFieldsFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Profiles] Get fields with fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "GetFieldsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Profiles] Get fields with success',\n  props<{ payload: string[] }>()\n)"
                },
                {
                    "name": "GetProfiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Profiles] Get profiles',\n  props<{ modelVersionId: number; fieldName: string }>()\n)"
                },
                {
                    "name": "GetProfilesFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Profiles] Get profiles with fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "GetProfilesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/profiles.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Profiles] Get profiles with success',\n  props<{ payload: Profiles }>()\n)"
                }
            ],
            "src/app/modules/monitoring/store/actions/aggregation.actions.ts": [
                {
                    "name": "ClearFilterDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] clear date time range'\n)"
                },
                {
                    "name": "LoadAggregations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load aggregations',\n  props<{\n    modelVersion: ModelVersion;\n    limit: number;\n    offset: number;\n    from?: string;\n    to?: string;\n  }>()\n)"
                },
                {
                    "name": "LoadAggregationsFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load aggregations failed',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "LoadAggregationsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load aggregations success',\n  props<{\n    aggregationList: AggregationsList;\n    minDate: number;\n    maxDate: number;\n  }>()\n)"
                },
                {
                    "name": "LoadNewerAggregation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load newer aggregation'\n)"
                },
                {
                    "name": "LoadOlderAggregation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load older aggregation'\n)"
                },
                {
                    "name": "SelectAggregation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] select aggregation',\n  props<{ aggregation: Aggregation }>()\n)"
                },
                {
                    "name": "SetFilterDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] change date time range',\n  props<{ from: number; to: number }>()\n)"
                }
            ],
            "src/app/modules/monitoring/store/actions/index.ts": [
                {
                    "name": "ClearMonitoringPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Monitoring] clear page')"
                }
            ],
            "src/app/modules/monitoring/store/actions/ui.actions.ts": [
                {
                    "name": "CloseCheckDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] close check details'\n)"
                },
                {
                    "name": "ShowCheckDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] show check details',\n  props<{\n    checkId: string;\n  }>()\n)"
                }
            ],
            "src/app/modules/monitoring/models/threshold-cmp-operators.ts": [
                {
                    "name": "cmpOperators",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/models/threshold-cmp-operators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "defaultValue": "[\n  { kind: 'Eq' },\n  { kind: 'NotEq' },\n  { kind: 'Greater' },\n  { kind: 'Less' },\n  { kind: 'GreaterEq' },\n  { kind: 'LessEq' },\n]"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  C.SidebarComponent,\n  C.InputTextComponent,\n  C.IconComponent,\n  C.ApplicationStatusComponent,\n  C.ErrorMessageComponent,\n  C.ModelVersionStatusComponent,\n  C.CommandTemplateComponent,\n  C.LogsComponent,\n  C.ButtonComponent,\n  C.TooltipComponent,\n  C.LoaderComponent,\n  C.LoadingComponent,\n  C.TensorImageListComponent,\n  C.ServiceAvailabilityComponent,\n  C.AlertMessageComponent,\n  C.LogComponent,\n]"
                },
                {
                    "name": "customNotifierOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotifierOptions",
                    "defaultValue": "{\n  position: {\n    horizontal: {\n      position: 'right',\n      distance: 12,\n    },\n    vertical: {\n      position: 'bottom',\n      distance: 12,\n      gap: 10,\n    },\n  },\n  theme: 'material',\n  behaviour: {\n    autoHide: 5000,\n    onClick: 'hide',\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4,\n  },\n  animations: {\n    enabled: true,\n    show: {\n      preset: 'slide',\n      speed: 300,\n      easing: 'ease',\n    },\n    hide: {\n      preset: 'fade',\n      speed: 300,\n      easing: 'ease',\n      offset: 50,\n    },\n    shift: {\n      speed: 300,\n      easing: 'ease',\n    },\n    overlap: 150,\n  },\n}"
                },
                {
                    "name": "directives",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  D.BuildInformationDirective,\n  D.CopyToBufferDirective,\n  D.AutofocusedDirective,\n  D.HideInZenModeDirective,\n  D.ShowInZenModeDirective,\n  D.ScaleImageDirective,\n  D.PixelToCanvasDirective,\n  D.TippyDirective,\n]"
                },
                {
                    "name": "pipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  P.FormatDatePipe,\n  P.IterateAsArrayPipe,\n  P.MatchSorterPipe,\n  P.PluckPipe,\n  P.SortByPipe,\n  P.TimeAgoPipe,\n  P.FieldShapePipe,\n  P.MappedServablePipe,\n]"
                },
                {
                    "name": "reExportedModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  NgxSliderModule,\n  MdlSelectModule,\n  MdlModule,\n  CommonModule,\n  FormsModule,\n  ReactiveFormsModule,\n  RouterModule,\n  NotifierModule,\n]"
                }
            ],
            "src/app/modules/request-details/request-details.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/request-details/request-details.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  LogComponent,\n  LogDetailComponent,\n  MetricsChecksComponent,\n  RawChecksComponent,\n]"
                }
            ],
            "src/testing/testing.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/testing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  ProfilesComponent,\n  ModelVersionsTableComponent,\n  MetricComponent,\n  MetricsComponent,\n  HealthTimelineComponent,\n  ChartsComponent,\n  ChartComponent,\n  ModelVersionLogComponent,\n  ReqResLogsComponent,\n  ServablesTableComponent,\n  ApplicationFormComponent,\n  AggregationComponent,\n  RequestsInformationComponent,\n  LogComponent,\n  LogDetailComponent,\n  CustomCheckComponent,\n  CustomChecksComponent,\n  LatencyCheckComponent,\n  ErrorCheckComponent,\n  SignaturesComponent,\n  RawChecksComponent,\n  BatchMetricsComponent,\n  LogMetricsTableComponent,\n  ApplicationsItemDetailComponent,\n  ModelVersionsComponent,\n  ModelVersionDetailsComponent,\n  ModelVersionsRowComponent,\n  ModelVersionsTagsComponent,\n  RegimeSelectorComponent,\n  CheckChartComponent,\n  ScatterPlotComponent,\n  ScatterPlotLegendComponent,\n  GradientLegendComponent,\n  VisualizationMetricsComponent,\n  CustomMetricsComponent,\n  ModelVersionServicesComponent,\n  ModelsHeaderComponent,\n]"
                },
                {
                    "name": "DIRECTIVES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/testing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[UpdateModelVersionDirective]"
                }
            ],
            "src/app/modules/hs-d3/hs-d3.module.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/hs-d3/hs-d3.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  D3LineComponent,\n  D3AreaComponent,\n  D3ThresholdComponent,\n  D3PlotBandComponent,\n]"
                },
                {
                    "name": "DIRECTIVES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/hs-d3/hs-d3.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[D3AxisDirective]"
                }
            ],
            "src/testing/factories/signature.ts": [
                {
                    "name": "CompositeSignature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/signature.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  subfields: [SimpleInput, SimpleInput2],\n}"
                },
                {
                    "name": "MockCompositeSignature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/signature.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define(() => ({\n  signatureName: 'composite_signature_1',\n  inputs: [CompositeSignature],\n  outputs: [{ name: 'output_1' }],\n}))"
                },
                {
                    "name": "MockSignature1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/signature.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Signature>(() => ({\n  signatureName: 'signature_1',\n  inputs: [SimpleInput.build()],\n  outputs: [SimpleOutput.build()],\n}))"
                },
                {
                    "name": "SimpleInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/signature.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Field>(() => ({\n  profile: 'TEXT',\n  name: 'simple_input_1',\n  dtype: 'DTYPE',\n  shape: {\n    dims: [{ size: 1, name: 'DIM' }],\n  },\n}))"
                },
                {
                    "name": "SimpleInput2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/signature.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "SimpleInput.build({\n  name: 'simple_input_2',\n  shape: {\n    dims: [\n      { size: 1, name: 'DIM' },\n      { size: 2, name: 'DIM' },\n    ],\n  },\n})"
                },
                {
                    "name": "SimpleOutput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/signature.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Field>(() => ({\n  profile: 'TEXT',\n  name: 'simple_output_1',\n  dtype: 'DTYPE',\n  shape: {\n    dims: [{ size: 1, name: 'DIM' }],\n  },\n}))"
                }
            ],
            "e2e/production-e2e/helpers/initializeBrowser.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "e2e/production-e2e/helpers/initializeBrowser.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('../playwright.config')"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "src/app/core/store/actions/servables.actions.ts": [
                {
                    "name": "createLogStream",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] create log stream',\n  props<{ name: string }>()\n)"
                },
                {
                    "name": "deleteServable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] delete',\n  props<{ name: string }>()\n)"
                },
                {
                    "name": "deleteServableFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] delete failed',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "deleteServableSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] delete success',\n  props<{ name: string }>()\n)"
                },
                {
                    "name": "getAll",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Servables] get all')"
                },
                {
                    "name": "getAllFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servables] get all failed',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "getAllSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servables] get all success',\n  props<{ servables: Servable[] }>()\n)"
                },
                {
                    "name": "getLogs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Servable] get servable logs')"
                },
                {
                    "name": "getServable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] get servable',\n  props<{ name: string }>()\n)"
                },
                {
                    "name": "getServableFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] get servable failed',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "getServableSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servable] get servable success',\n  props<{ servable: Servable }>()\n)"
                },
                {
                    "name": "updateServable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/servables.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Servables] update servable',\n  props<{ servable: Servable }>()\n)"
                }
            ],
            "src/app/core/hydro-config.service.ts": [
                {
                    "name": "defaultConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/hydro-config.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HydroConfig",
                    "defaultValue": "{\n  showHeader: true,\n  liftMetadata: false,\n}"
                }
            ],
            "src/app/core/ui-build-info.service.ts": [
                {
                    "name": "defaultConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/ui-build-info.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UiBuildInfo",
                    "defaultValue": "{}"
                }
            ],
            "src/app/modules/deployment-configs/mocks/depconfig.mock.ts": [
                {
                    "name": "defaultDepConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/deployment-configs/mocks/depconfig.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'hydrosphere_manager_default'"
                }
            ],
            "src/app/modules/dialogs/components/dialog-delete-deployment-config/dialog-delete-deployment-config.component.ts": [
                {
                    "name": "DEPLOYMENT_CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-delete-deployment-config/dialog-delete-deployment-config.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken(\n  'deployment config name'\n)"
                }
            ],
            "src/app/core/store/reducers/deployment-configs.reducer.ts": [
                {
                    "name": "deploymentConfigReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/deployment-configs.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(GetDeploymentConfigs, state => ({ ...state, loading: true })),\n  on(GetDeploymentConfigsSuccess, (state, { payload }) => {\n    return adapter.setAll(payload, { ...state, loaded: true, loading: false });\n  }),\n  on(GetDeploymentConfigsFail, state => ({ ...state, loading: false })),\n  on(DeleteDeploymentConfigSuccess, (state, { name }) => {\n    return adapter.removeOne(name, state);\n  }),\n  on(AddDeploymentConfigSuccess, (state, { payload }) => {\n    return adapter.addOne(payload, state);\n  }),\n  on(\n    ToggleFavorite,\n    (\n      state,\n      {\n        payload: {\n          depConfig: { name, favorite },\n        },\n      },\n    ) => {\n      return adapter.updateOne(\n        { id: name, changes: { favorite: !favorite } },\n        state,\n      );\n    },\n  ),\n)"
                }
            ],
            "src/app/modules/dialogs/dialogs.module.ts": [
                {
                    "name": "DIALOGS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/dialogs.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  C.DialogDeleteModelComponent,\n  C.DialogDeleteApplicationComponent,\n  C.DialogAddApplicationComponent,\n  C.DialogTestComponent,\n  C.DialogUpdateApplicationComponent,\n  C.DialogUpdateModelVersionComponent,\n  C.DialogDeleteServableComponent,\n  C.DialogDeleteDeploymentConfigComponent,\n  C.DialogDeleteMetricComponent,\n  C.DialogMetricComponent,\n  C.DialogMetricsComponent,\n  C.DialogRequestsErrorsComponent,\n  C.BuildInformationDialogComponent,\n  C.ExplanationDialogComponent,\n]"
                }
            ],
            "src/app/modules/stat/components/heatmap/coldwarm-color.ts": [
                {
                    "name": "domain",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "defaultValue": "[\n  0,\n  0.03125,\n  0.0625,\n  0.09375,\n  0.125,\n  0.15625,\n  0.1875,\n  0.21875,\n  0.25,\n  0.28125,\n  0.3125,\n  0.34375,\n  0.375,\n  0.40625,\n  0.4375,\n  0.46875,\n  0.5,\n  0.53125,\n  0.5625,\n  0.59375,\n  0.625,\n  0.65625,\n  0.6875,\n  0.71875,\n  0.75,\n  0.78125,\n  0.8125,\n  0.84375,\n  0.875,\n  0.90625,\n  0.9375,\n  0.96875,\n  1,\n]"
                },
                {
                    "name": "range",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<string>",
                    "defaultValue": "[\n  `rgb(59\t,76,\t192)`,\n  `rgb(68\t,90,\t204)`,\n  `rgb(77\t,104,\t215)`,\n  `rgb(87\t,117,\t225)`,\n  `rgb(98\t,130,\t234)`,\n  `rgb(108,\t142,\t241)`,\n  `rgb(119,\t154,\t247)`,\n  `rgb(130,\t165,\t251)`,\n  `rgb(141,\t176,\t254)`,\n  `rgb(152,\t185,\t255)`,\n  `rgb(163,\t194,\t255)`,\n  `rgb(174,\t201,\t253)`,\n  `rgb(184,\t208,\t249)`,\n  `rgb(194,\t213,\t244)`,\n  `rgb(204,\t217,\t238)`,\n  `rgb(213,\t219,\t230)`,\n  `rgb(221,\t221,\t221)`,\n  `rgb(229,\t216,\t209)`,\n  `rgb(236,\t211,\t197)`,\n  `rgb(241,\t204,\t185)`,\n  `rgb(245,\t196,\t173)`,\n  `rgb(247,\t187,\t160)`,\n  `rgb(247,\t177,\t148)`,\n  `rgb(247,\t166,\t135)`,\n  `rgb(244,\t154,\t123)`,\n  `rgb(241,\t141,\t111)`,\n  `rgb(236,\t127,\t99)`,\n  `rgb(229,\t112,\t88)`,\n  `rgb(222,\t96,\t77)`,\n  `rgb(213,\t80,\t66)`,\n  `rgb(203,\t62,\t56)`,\n  `rgb(192,\t40,\t47)`,\n  `rgb(180,\t4,\t38)`,\n]"
                },
                {
                    "name": "scale",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "d3.scaleLinear<string>().range(range).domain(domain)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  tm: false,\n  host: 'http://localhost',\n  port: '',\n  apiUrl: 'api/v2',\n  uiUrl: '/ui/v2',\n  monitoringUrl: 'monitoring',\n  timemachineUrl: 'timemachine',\n  servableUrl: 'servable',\n  rootCauseUrl: 'rootcause',\n  statUrl: 'stat',\n  visualizationUrl: 'visualization',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  tm: false,\n  host: 'http://localhost',\n  port: '',\n  apiUrl: 'api/v2',\n  uiUrl: '/ui/v2',\n  monitoringUrl: 'monitoring',\n  timemachineUrl: 'timemachine',\n  servableUrl: 'servable',\n  rootCauseUrl: 'rootcause',\n  statUrl: 'stat',\n  visualizationUrl: 'visualization',\n}"
                }
            ],
            "src/app/modules/root-cause/mocks/explanation.mock.ts": [
                {
                    "name": "explanationMock",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/mocks/explanation.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Explanation",
                    "defaultValue": "{\n  description: 'Ok',\n  state: ExplanationStatus.success,\n  result: anchorResultMock,\n}"
                }
            ],
            "src/app/build-specifics/index.prod.ts": [
                {
                    "name": "extModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/build-specifics/index.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[]"
                }
            ],
            "src/app/build-specifics/index.ts": [
                {
                    "name": "extModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/build-specifics/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    StoreDevtoolsModule.instrument({\n        maxAge: 25\n    })\n]"
                }
            ],
            "src/app/utils/from-snake-to-camel.ts": [
                {
                    "name": "fromSnakeToCamel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/from-snake-to-camel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(str: string): string => {\n  const [head, ...tail] = str.split('_');\n  const res = tail.map(w => capitalizeString(w)).join();\n  return head + res;\n}"
                }
            ],
            "src/app/modules/stat/mocks/heatmap.mock.ts": [
                {
                    "name": "generateData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => {\n  return x.map(_ => y.map(() => Math.random()));\n}"
                },
                {
                    "name": "heatmapConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeatmapConfig",
                    "defaultValue": "{\n  xLabels: x,\n  yLabels: y,\n  data: heatmapData,\n}"
                },
                {
                    "name": "heatmapData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HeatmapData[]",
                    "defaultValue": "toHeatmapData(x, y, generateData())"
                },
                {
                    "name": "x",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['A', 'B', 'C', 'D']"
                },
                {
                    "name": "y",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/mocks/heatmap.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "['X', 'Y', 'Z', 'W']"
                }
            ],
            "src/app/core/store/actions/service-statuses.actions.ts": [
                {
                    "name": "Get",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/service-statuses.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ServiceStatus] Get services statuses',\n  props<{ payload: ModelVersionId }>()\n)"
                },
                {
                    "name": "GetFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/service-statuses.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ServiceStatus] Get services statuses with fail',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "GetSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/service-statuses.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[ServiceStatus] Get services statuses with success',\n  props<{ payload: ModelVersionServiceStatusesEntity }>()\n)"
                }
            ],
            "src/app/modules/monitoring/store/reducers/index.ts": [
                {
                    "name": "getAggregationState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.aggregation\n)"
                },
                {
                    "name": "getChecksState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.checks\n)"
                },
                {
                    "name": "getMetricsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.metrics\n)"
                },
                {
                    "name": "getMonitoringServiceStatusState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMonitoringState,\n  state => state.serviceStatus\n)"
                },
                {
                    "name": "getMonitoringState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('monitoring')"
                },
                {
                    "name": "getUiState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getMonitoringState, state => state.ui)"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\n  aggregation: fromAggregation.reducer,\n  metrics: fromMetrics.reducer,\n  serviceStatus: fromServiceStatus.reducer,\n  checks: fromChecks.reducer,\n  ui: fromUi.reducer,\n}"
                }
            ],
            "src/app/utils/field-name-by-tensor-data-type.ts": [
                {
                    "name": "getFiledNameByTensorDataType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/field-name-by-tensor-data-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(type: number) => {\n  switch (type) {\n    case dataType.DT_FLOAT:\n      return 'float_val';\n    case dataType.DT_HALF:\n      return 'half_val';\n    case dataType.DT_DOUBLE:\n      return 'double_val';\n    case dataType.DT_INT32:\n    case dataType.DT_INT16:\n    case dataType.DT_INT8:\n    case dataType.DT_UINT8:\n      return 'int_val';\n    case dataType.DT_UINT32:\n      return 'uint32_val';\n    case dataType.DT_UINT64:\n      return 'uint64_val';\n    case dataType.DT_STRING:\n      return 'string_val';\n    case dataType.DT_COMPLEX64:\n      return 'complex_val';\n    case dataType.DT_INT64:\n      return 'int64_val';\n    case dataType.DT_BOOL:\n      return 'bool_val';\n    case dataType.DT_COMPLEX128:\n      return 'dcomplex_val';\n    case dataType.DT_VARIANT:\n      return 'variant_val';\n  }\n}"
                }
            ],
            "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts": [
                {
                    "name": "getMonitoringServiceError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getMonitoringServiceStatusState,\n  state => state.error\n)"
                },
                {
                    "name": "getMonitoringServiceStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getMonitoringServiceStatusState,\n  state => state.status\n)"
                }
            ],
            "src/app/core/store/selectors/applications.selectors.ts": [
                {
                    "name": "getSelectedApplicationId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): number => application && application.id,\n)"
                },
                {
                    "name": "getSelectedApplicationInput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => application && application.input,\n)"
                },
                {
                    "name": "getSelectedApplicationName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => application && application.name,\n)"
                },
                {
                    "name": "getSelectedApplicationOutput",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => application && application.output,\n)"
                },
                {
                    "name": "getSelectedApplicationSignatureName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): string => {\n    return application && application.signature.signatureName;\n  },\n)"
                },
                {
                    "name": "getSelectedApplicationTestStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedApplication,\n  (application: Application): TestStatus =>\n    application && application.testStatus,\n)"
                },
                {
                    "name": "selectAllApplications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectAll)"
                },
                {
                    "name": "selectApplicationIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectIds)"
                },
                {
                    "name": "selectApplicationLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  state,\n  state => state.loaded,\n)"
                },
                {
                    "name": "selectApplicationsByNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(names: string[]) =>\n  createSelector(selectApplicationsEntities, dict =>\n    names.map(name => dict[name]),\n  )"
                },
                {
                    "name": "selectApplicationsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectEntities)"
                },
                {
                    "name": "selectFavoriteApplications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllApplications,\n  apps => apps.filter(_ => _.favorite),\n)"
                },
                {
                    "name": "selectNonFavoriteApplications",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllApplications,\n  apps => apps.filter(_ => !_.favorite),\n)"
                },
                {
                    "name": "selectSelectedApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectApplicationsEntities,\n  selectRouterState,\n  (entities, router): Application => {\n    return router.state && entities[router.state.params.name];\n  },\n)"
                },
                {
                    "name": "state",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('applications')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/applications.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts": [
                {
                    "name": "GetServiceStatusAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring service] get status'\n)"
                },
                {
                    "name": "SetStatusToAvailableAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring service] is available'\n)"
                },
                {
                    "name": "SetStatusToClosedForOSSAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring service] is close for OSS'\n)"
                },
                {
                    "name": "SetStatusToFailedAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring service] is failed',\n  props<{ error: string }>()\n)"
                }
            ],
            "src/app/modules/profiler/components/profiles-comparison-histogram/highchart-colors.ts": [
                {
                    "name": "HIGHCHART_COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/profiler/components/profiles-comparison-histogram/highchart-colors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  profiles: {\n    training: '#7cb5ec',\n    production: '#ffaf6e',\n  },\n}"
                }
            ],
            "src/app/utils/base-href-factory.util.ts": [
                {
                    "name": "hrefFromHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/base-href-factory.util.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "document\n  .getElementsByTagName('base')[0]\n  .getAttribute('href')"
                }
            ],
            "src/app/core/base-url.token.ts": [
                {
                    "name": "HS_ABSOLUTE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/base-url.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('absolute url')"
                },
                {
                    "name": "HS_BASE_URL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/base-url.token.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('')"
                }
            ],
            "src/app/modules/monitoring/components/batch-details/batch-details.service.ts": [
                {
                    "name": "initialFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChecksFilter",
                    "defaultValue": "{\n  filterBy: ChecksHealthFilterOptions.all,\n  scoreFilter: {\n    byMetric: true,\n    metricScoreRange: [0, 100],\n    byRaw: true,\n    rawScoreRange: [0, 100],\n  },\n}"
                }
            ],
            "src/app/modules/monitoring/components/checks/check-chart_v2/initializeChartOptions.ts": [
                {
                    "name": "initializeChartOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/components/checks/check-chart_v2/initializeChartOptions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "config => {\n  return {\n    tooltip: {},\n    title: {\n      text: config.currentValue.name,\n      style: {\n        fontFamily: 'Roboto Regular, sans-serif',\n        fontWeight: 'bold',\n        fontSize: '16px',\n        color: '#243b53',\n      },\n    },\n    credits: {\n      enabled: false,\n    },\n    series: [\n      {\n        name: '',\n        data: [],\n        type: 'spline',\n      },\n    ],\n    lang: {\n      noData: 'no data available',\n    },\n    noData: {\n      style: {\n        fontFamily: 'Roboto Regular, sans-serif',\n        fontWeight: 'bold',\n        fontSize: '14px',\n        color: '#bcccdc',\n      },\n    },\n    xAxis: {\n      plotBands: [],\n    },\n    yAxis: {\n      title: {\n        text: undefined,\n      },\n      plotLines: [],\n    },\n    plotOptions: {\n      spline: {\n        lineWidth: 2,\n        states: {\n          hover: {\n            lineWidth: 2,\n          },\n        },\n        marker: {\n          enabled: false,\n        },\n      },\n      series: {\n        cursor: 'pointer',\n        point: {\n          events: {},\n        },\n      },\n    },\n  };\n}"
                }
            ],
            "src/app/modules/applications/containers/application-details/application-details.component.ts": [
                {
                    "name": "initialMenuState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuState",
                    "defaultValue": "{\n  showed: false,\n  context: null,\n  top: 0,\n  left: 0,\n  statuses: null,\n}"
                }
            ],
            "src/app/core/store/states/root.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/states/root.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HydroServingState",
                    "defaultValue": "{\n  router: {\n    state: {\n      url: '/',\n      params: {},\n      queryParams: {},\n    },\n    navigationId: 0,\n  },\n  applications: fromApplications.initialState,\n  models: fromModels.initialState,\n  modelVersions: fromModelVersions.initialState,\n  servables: fromServables.initialState,\n  deploymentConfigs: fromDeploymentConfigs.initialState,\n  serviceStatuses: fromServiceStatuses.initialState,\n}"
                }
            ],
            "src/app/modules/monitoring/store/metric-charts.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/metric-charts.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  modelVersionsToCompare: [],\n}"
                }
            ],
            "src/app/modules/root-cause/store/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  explanation: null,\n}"
                }
            ],
            "src/app/modules/stat/store/stat.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/store/stat.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  loading: false,\n  error: null,\n  stat: null,\n}"
                }
            ],
            "src/app/modules/visualization/store/visualization.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/visualization/store/visualization.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  taskId: null,\n  result: null,\n  error: null,\n  status: ETaskState.unknown,\n  colorBy: 'class_label',\n  colorizers: [],\n  selectedColorizer: undefined,\n  data: [],\n  selectedPointIndex: undefined,\n  top100: [],\n  counterfactuals: [],\n  visualizationMetrics: undefined,\n  requestsIds: [],\n  message: null,\n  params: null,\n}"
                }
            ],
            "src/app/modules/monitoring/store/reducers/service-status.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  status: MonitoringServiceStatus.UNKNOWN,\n  error: null,\n}"
                },
                {
                    "name": "monitoringStatusReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(GetServiceStatusAction, state => ({\n    ...state,\n    error: null,\n    status: MonitoringServiceStatus.UNKNOWN,\n  })),\n  on(SetStatusToFailedAction, (state, action) => ({\n    ...state,\n    status: MonitoringServiceStatus.FAILED,\n    error: action.error,\n  })),\n  on(SetStatusToAvailableAction, state => ({\n    ...state,\n    status: MonitoringServiceStatus.AVAILABLE,\n  })),\n  on(SetStatusToClosedForOSSAction, state => ({\n    ...state,\n    status: MonitoringServiceStatus.CLOSED_FOR_OSS,\n  }))\n)"
                }
            ],
            "src/app/modules/monitoring/store/reducers/ui.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\n  checksIdToShow: undefined,\n}"
                },
                {
                    "name": "uiReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(ShowCheckDetails, (state, payload) => {\n    return { ...state, checksIdToShow: payload.checkId };\n  }),\n  on(CloseCheckDetails, state => ({ ...state, checksIdToShow: undefined }))\n)"
                }
            ],
            "src/app/modules/monitoring/store/selectors/metrics.selectors.ts": [
                {
                    "name": "isCustomMetric",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(metric: MetricSpecification): boolean => {\n  const systemMetrics = new Set([\n    'fake-id-error-rate',\n    'fake-id-latency',\n    'fake-id-counter',\n  ]);\n\n  return !systemMetrics.has(metric.id);\n}"
                },
                {
                    "name": "selectAllMetrics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMetricsState,\n  fromMetrics.selectAllMetrics\n)"
                },
                {
                    "name": "selectAllMetricsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMetricsState,\n  fromMetrics.selectAllMetricsEntities\n)"
                },
                {
                    "name": "selectAllMetricsIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getMetricsState,\n  fromMetrics.selectAllMetricsIds\n)"
                },
                {
                    "name": "selectCustomMetrics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectSelectedMetrics,\n  metrics => {\n    return metrics.filter(isCustomMetric);\n  }\n)"
                },
                {
                    "name": "selectMetricSpecsNames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllMetrics,\n  metrics => metrics.map(({ name }) => name || 'n/a')\n)"
                },
                {
                    "name": "selectSelectedMetrics",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllMetrics,\n  fromModelVersions.selectSelectedModelVersion,\n  (metrics, modelVersion) => {\n    return (\n      modelVersion &&\n      metrics.filter(metric => metric.modelVersionId === modelVersion.id)\n    );\n  }\n)"
                }
            ],
            "src/app/utils/is-empty-object.ts": [
                {
                    "name": "isEmptyObj",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/utils/is-empty-object.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "obj => {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}"
                }
            ],
            "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts": [
                {
                    "name": "LATEST_MODEL_VERSION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ModelVersion>(\n  'latest model version',\n)"
                },
                {
                    "name": "SELECTED_MODEL_VARIANT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<any>(\n  'selected model variant',\n)"
                }
            ],
            "src/app/modules/monitoring/store/actions/checks.actions.ts": [
                {
                    "name": "LoadChecks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/checks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load checks',\n  props<{\n    modelVersionId: number;\n    from: string;\n    to: string;\n  }>()\n)"
                },
                {
                    "name": "LoadChecksSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/actions/checks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Monitoring] load checks success',\n  props<{ checks: CheckCollection }>()\n)"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts": [
                {
                    "name": "METHOD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('method')"
                },
                {
                    "name": "MODEL_VERSION_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<ModelVersionId>(\n  'selected model id',\n)"
                },
                {
                    "name": "OUTPUT_FIELD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('output field')"
                },
                {
                    "name": "REQUEST_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('request id')"
                }
            ],
            "src/app/modules/dialogs/components/dialog-delete-metric/dialog-delete-metric.component.ts": [
                {
                    "name": "METRIC_ID_VALUE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-delete-metric/dialog-delete-metric.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<string>('metric id value')"
                }
            ],
            "src/app/modules/dialogs/components/dialog-metric/dialog-metric.component.ts": [
                {
                    "name": "metricSpec",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-metric/dialog-metric.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<MetricSpecification>(\n  'metric spec id'\n)"
                }
            ],
            "src/testing/mocks.ts": [
                {
                    "name": "MockActivatedRouterProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: ActivatedRoute,\n  useValue: {},\n}"
                },
                {
                    "name": "MockLatestModelVersionId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: LATEST_MODEL_VERSION,\n  useValue: MockModelVersion2Model1,\n}"
                },
                {
                    "name": "MockRouter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  events: of(''),\n}"
                },
                {
                    "name": "MockRouterProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: Router,\n  useValue: MockRouter,\n}"
                },
                {
                    "name": "MockSelectedApplication",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: SELECTED_APPLICATION,\n  useValue: {},\n}"
                },
                {
                    "name": "MockSelectedModelVariantProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: SELECTED_MODEL_VARIANT,\n  useValue: {},\n}"
                },
                {
                    "name": "MockStore",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  select: () => of([]),\n  dispatch: () => {},\n}"
                },
                {
                    "name": "MockStoreProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/mocks.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Provider",
                    "defaultValue": "{\n  provide: Store,\n  useValue: MockStore,\n}"
                }
            ],
            "src/app/modules/monitoring/mocks/chart-config.mock.ts": [
                {
                    "name": "mockChartConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/mocks/chart-config.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChartConfig",
                    "defaultValue": "{\n  size: {\n    height: 150,\n    width: 300,\n    margins: {\n      left: 40,\n      right: 20,\n      top: 10,\n      bottom: 24,\n    },\n  },\n  series: [],\n  name: '',\n}"
                }
            ],
            "src/app/modules/monitoring/mocks/check.mock.ts": [
                {
                    "name": "mockCheck",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/mocks/check.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Check",
                    "defaultValue": "new Check({\n  _hs_timestamp: 0,\n  _id: 'id',\n  _hs_error: '',\n  _hs_latency: 1,\n  _hs_model_version_id: 2,\n  _hs_overall_score: 0,\n  _hs_prediction_score: 0,\n  _hs_raw_checks: { overall: [] },\n  _hs_metric_checks: {},\n  _hs_score: 0,\n  _hs_model_incremental_version: 1,\n  _hs_model_name: 'model',\n})"
                }
            ],
            "src/app/modules/monitoring/mocks/check-collection.mock.ts": [
                {
                    "name": "mockCheckCollection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/mocks/check-collection.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckCollection",
                    "defaultValue": "new CheckCollection([\n  mockCheck,\n])"
                },
                {
                    "name": "mockEmptyCheckCollection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/mocks/check-collection.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckCollection",
                    "defaultValue": "new CheckCollection(\n  []\n)"
                }
            ],
            "src/testing/factories/deployment-config.ts": [
                {
                    "name": "MockDeploymentConfig1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/deployment-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<DeploymentConfig>(() => ({\n  name: 'test1',\n  container: null,\n  pod: null,\n  deployment: null,\n  hpa: {\n    minReplicas: 2,\n    maxReplicas: 10,\n    cpuUtilization: 80,\n  },\n  favorite: false,\n}))"
                },
                {
                    "name": "MockDeploymentConfig2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/deployment-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockDeploymentConfig1.build({\n  name: 'hydrosphere_manager_default',\n})"
                }
            ],
            "src/testing/factories/hostSelector.ts": [
                {
                    "name": "MockHostSelector",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/hostSelector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define(({ sequence }) => ({\n  id: sequence,\n  name: 'CPU',\n  placeholder: 'mockHostSelectorPlaceHolder',\n}))"
                }
            ],
            "src/testing/factories/image.ts": [
                {
                    "name": "MockImage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/image.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Image>(() => ({\n  name: 'mockImage',\n  tag: 'mockImageTag',\n  sha256: 'mockSha256',\n}))"
                }
            ],
            "src/testing/factories/metric-specification.ts": [
                {
                    "name": "MockMetricSpecification",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/metric-specification.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<MetricSpecification>(\n  () => ({\n    id: 'id',\n    name: 'counter',\n    config: {\n      threshold: 0,\n      thresholdCmpOperator: { kind: '' },\n      modelVersionId: 1,\n    },\n    modelVersionId: 1,\n  })\n)"
                }
            ],
            "src/testing/factories/model.ts": [
                {
                    "name": "MockModel1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Model>(({ sequence }) => ({\n  id: sequence,\n  name: 'mockModel_1_Name',\n  modelVersions: [],\n  favorite: false,\n}))"
                },
                {
                    "name": "MockModel2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockModel1.build({\n  name: 'Sooooooooooooooo_long_mockModel_2_Name',\n})"
                }
            ],
            "src/testing/factories/runtime.ts": [
                {
                    "name": "MockRuntime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/runtime.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Runtime>(() => ({\n  name: 'mockRuntime',\n  tag: 'mockRuntimeTag',\n  sha256: 'mockRuntimeSha256',\n}))"
                },
                {
                    "name": "MockRuntime2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/runtime.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockRuntime.build({ name: 'mockRuntime2' })"
                },
                {
                    "name": "MockRuntime3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/runtime.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "MockRuntime.build({ name: 'mockRuntime3' })"
                }
            ],
            "src/testing/factories/servable.ts": [
                {
                    "name": "MockServable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/factories/servable.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Factory.define<Servable>(() => ({\n  modelVersionId: 1,\n  fullName: 'test',\n  name: 'test',\n  status: 'Serving',\n  statusMessage: '',\n  message: '',\n  logStream: of(),\n  deploymentConfiguration: MockDeploymentConfig1.build(),\n}))"
                }
            ],
            "src/app/modules/stat/mocks/stat.mock.ts": [
                {
                    "name": "mockStat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/stat/mocks/stat.mock.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Stat",
                    "defaultValue": "{\n  overall_probability_drift: 0.038461538461538464,\n  per_feature_report: {\n    age: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'age',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [\n                0.03,\n                0.03,\n                0.01,\n                0.03,\n                0.05,\n                0.02,\n                0.03,\n                0.01,\n                0.05,\n                0.04,\n                0.05,\n                0.02,\n                0.04,\n                0.04,\n                0.03,\n                0.02,\n                0.04,\n                0.0,\n                0.02,\n                0.01,\n                0.0,\n                0.05,\n                0.03,\n                0.04,\n                0.01,\n                0.02,\n                0.01,\n                0.0,\n                0.02,\n                0.02,\n                0.0,\n                0.0,\n                0.0,\n                0.03,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.01,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '17.00 <= 18.24',\n              '18.24 <= 19.47',\n              '19.47 <= 20.71',\n              '20.71 <= 21.95',\n              '21.95 <= 23.19',\n              '23.19 <= 24.42',\n              '24.42 <= 25.66',\n              '25.66 <= 26.90',\n              '26.90 <= 28.14',\n              '28.14 <= 29.37',\n              '29.37 <= 30.61',\n              '30.61 <= 31.85',\n              '31.85 <= 33.08',\n              '33.08 <= 34.32',\n              '34.32 <= 35.56',\n              '35.56 <= 36.80',\n              '36.80 <= 38.03',\n              '38.03 <= 39.27',\n              '39.27 <= 40.51',\n              '40.51 <= 41.75',\n              '41.75 <= 42.98',\n              '42.98 <= 44.22',\n              '44.22 <= 45.46',\n              '45.46 <= 46.69',\n              '46.69 <= 47.93',\n              '47.93 <= 49.17',\n              '49.17 <= 50.41',\n              '50.41 <= 51.64',\n              '51.64 <= 52.88',\n              '52.88 <= 54.12',\n              '54.12 <= 55.36',\n              '55.36 <= 56.59',\n              '56.59 <= 57.83',\n              '57.83 <= 59.07',\n              '59.07 <= 60.31',\n              '60.31 <= 61.54',\n              '61.54 <= 62.78',\n              '62.78 <= 64.02',\n              '64.02 <= 65.25',\n              '65.25 <= 66.49',\n              '66.49 <= 67.73',\n              '67.73 <= 68.97',\n              '68.97 <= 70.20',\n              '70.20 <= 71.44',\n              '71.44 <= 72.68',\n              '72.68 <= 73.92',\n              '73.92 <= 75.15',\n              '75.15 <= 76.39',\n              '76.39 <= 77.63',\n              '77.63 <= 78.86',\n              '78.86 <= 80.10',\n              '80.10 <= 81.34',\n              '81.34 <= 82.58',\n              '82.58 <= 83.81',\n              '83.81 <= 85.05',\n              '85.05 <= 86.29',\n              '86.29 <= 87.53',\n              '87.53 <= 88.76',\n              '88.76 <= 90.00',\n            ],\n            x_axis_name: 'age',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [\n                0.029,\n                0.0218,\n                0.0231,\n                0.022,\n                0.0497,\n                0.0236,\n                0.0242,\n                0.0222,\n                0.0461,\n                0.0209,\n                0.0212,\n                0.0217,\n                0.0406,\n                0.0197,\n                0.0202,\n                0.0195,\n                0.0341,\n                0.0165,\n                0.0162,\n                0.0162,\n                0.0157,\n                0.0289,\n                0.0137,\n                0.0137,\n                0.0129,\n                0.0214,\n                0.0105,\n                0.0108,\n                0.0088,\n                0.0159,\n                0.0084,\n                0.0076,\n                0.007,\n                0.0143,\n                0.0065,\n                0.0063,\n                0.0059,\n                0.01,\n                0.0041,\n                0.0035,\n                0.0035,\n                0.0029,\n                0.0048,\n                0.0017,\n                0.0018,\n                0.0017,\n                0.0024,\n                0.0013,\n                0.0007,\n                0.0006,\n                0.001,\n                0.0005,\n                0.0004,\n                0.0001,\n                0.0004,\n                0.0,\n                0.0,\n                0.0001,\n                0.0011,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '17.00 <= 18.24',\n              '18.24 <= 19.47',\n              '19.47 <= 20.71',\n              '20.71 <= 21.95',\n              '21.95 <= 23.19',\n              '23.19 <= 24.42',\n              '24.42 <= 25.66',\n              '25.66 <= 26.90',\n              '26.90 <= 28.14',\n              '28.14 <= 29.37',\n              '29.37 <= 30.61',\n              '30.61 <= 31.85',\n              '31.85 <= 33.08',\n              '33.08 <= 34.32',\n              '34.32 <= 35.56',\n              '35.56 <= 36.80',\n              '36.80 <= 38.03',\n              '38.03 <= 39.27',\n              '39.27 <= 40.51',\n              '40.51 <= 41.75',\n              '41.75 <= 42.98',\n              '42.98 <= 44.22',\n              '44.22 <= 45.46',\n              '45.46 <= 46.69',\n              '46.69 <= 47.93',\n              '47.93 <= 49.17',\n              '49.17 <= 50.41',\n              '50.41 <= 51.64',\n              '51.64 <= 52.88',\n              '52.88 <= 54.12',\n              '54.12 <= 55.36',\n              '55.36 <= 56.59',\n              '56.59 <= 57.83',\n              '57.83 <= 59.07',\n              '59.07 <= 60.31',\n              '60.31 <= 61.54',\n              '61.54 <= 62.78',\n              '62.78 <= 64.02',\n              '64.02 <= 65.25',\n              '65.25 <= 66.49',\n              '66.49 <= 67.73',\n              '67.73 <= 68.97',\n              '68.97 <= 70.20',\n              '70.20 <= 71.44',\n              '71.44 <= 72.68',\n              '72.68 <= 73.92',\n              '73.92 <= 75.15',\n              '75.15 <= 76.39',\n              '76.39 <= 77.63',\n              '77.63 <= 78.86',\n              '78.86 <= 80.10',\n              '80.10 <= 81.34',\n              '81.34 <= 82.58',\n              '82.58 <= 83.81',\n              '83.81 <= 85.05',\n              '85.05 <= 86.29',\n              '86.29 <= 87.53',\n              '87.53 <= 88.76',\n              '88.76 <= 90.00',\n            ],\n            x_axis_name: 'age',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          17.0,\n          18.23728813559322,\n          19.47457627118644,\n          20.71186440677966,\n          21.949152542372882,\n          23.186440677966104,\n          24.423728813559322,\n          25.661016949152543,\n          26.898305084745765,\n          28.135593220338983,\n          29.372881355932204,\n          30.610169491525426,\n          31.847457627118644,\n          33.08474576271186,\n          34.32203389830509,\n          35.559322033898304,\n          36.79661016949153,\n          38.03389830508475,\n          39.271186440677965,\n          40.50847457627118,\n          41.74576271186441,\n          42.983050847457626,\n          44.22033898305085,\n          45.45762711864407,\n          46.69491525423729,\n          47.932203389830505,\n          49.16949152542373,\n          50.40677966101695,\n          51.64406779661017,\n          52.88135593220339,\n          54.11864406779661,\n          55.355932203389834,\n          56.59322033898305,\n          57.83050847457627,\n          59.067796610169495,\n          60.30508474576271,\n          61.54237288135593,\n          62.779661016949156,\n          64.01694915254237,\n          65.25423728813558,\n          66.49152542372882,\n          67.72881355932203,\n          68.96610169491525,\n          70.20338983050848,\n          71.4406779661017,\n          72.67796610169492,\n          73.91525423728814,\n          75.15254237288136,\n          76.38983050847457,\n          77.62711864406779,\n          78.86440677966101,\n          80.10169491525424,\n          81.33898305084746,\n          82.57627118644068,\n          83.8135593220339,\n          85.05084745762711,\n          86.28813559322035,\n          87.52542372881356,\n          88.76271186440678,\n          90.0,\n        ],\n        deployment: [\n          0.03,\n          0.03,\n          0.01,\n          0.03,\n          0.05,\n          0.02,\n          0.03,\n          0.01,\n          0.05,\n          0.04,\n          0.05,\n          0.02,\n          0.07,\n          0.05,\n          0.03,\n          0.02,\n          0.05,\n          0.0,\n          0.03,\n          0.02,\n          0.0,\n          0.06,\n          0.03,\n          0.05,\n          0.02,\n          0.03,\n          0.03,\n          0.0,\n          0.02,\n          0.02,\n          0.0,\n          0.01,\n          0.0,\n          0.03,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.01,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n        ],\n        training: [\n          0.02902245017044931,\n          0.021866650287153344,\n          0.023125825373913576,\n          0.022112342987009,\n          0.0504284266453733,\n          0.02450784681060164,\n          0.02582844507232579,\n          0.0241085961733362,\n          0.052271121894290715,\n          0.024968520622830993,\n          0.02644267682196493,\n          0.027271889683977764,\n          0.052301833481772676,\n          0.02721046650901385,\n          0.02690335063419428,\n          0.027579005558797335,\n          0.05174902490709745,\n          0.025060655385276864,\n          0.024385000460673812,\n          0.02481496268542121,\n          0.023955038235926415,\n          0.04588311169804367,\n          0.022542305211756396,\n          0.022634439974202267,\n          0.021743803937225515,\n          0.03439697797979178,\n          0.01848837566413808,\n          0.01827339455176438,\n          0.01468013881637542,\n          0.02699548539664015,\n          0.01286815515493996,\n          0.011240441018396241,\n          0.010994748318540585,\n          0.022143054574490957,\n          0.009582015294370565,\n          0.009213476244587083,\n          0.007923589570344891,\n          0.01345167531709714,\n          0.005466662571788336,\n          0.004606738122293542,\n          0.004637449709775498,\n          0.003685390497834833,\n          0.0060501827339455175,\n          0.0022112342987009,\n          0.002057676361291115,\n          0.001965541598845244,\n          0.0029483123982678664,\n          0.0014127330241700193,\n          0.0008906360369767513,\n          0.0007063665120850096,\n          0.0013513098492061054,\n          0.0006142317496391389,\n          0.0003685390497834833,\n          0.00018426952489174165,\n          0.00039925063726544026,\n          3.071158748195694e-5,\n          3.071158748195694e-5,\n          9.213476244587083e-5,\n          0.0013205982617241485,\n        ],\n      },\n      statistics: {\n        Mean: {\n          deployment: 37.55,\n          has_changed: false,\n          message: 'No significant change in the mean',\n          training: 38.58164675532078,\n        },\n        Median: {\n          deployment: 35.0,\n          has_changed: false,\n          message: 'No significant change in the median',\n          training: 37.0,\n        },\n        Variance: {\n          deployment: 180.1275,\n          has_changed: false,\n          message: 'No significant change in the variance',\n          training: 186.05568600783081,\n        },\n      },\n    },\n    capital_gain: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'capital_gain',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.0, 0.0, 0.86],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_gain',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0006, 0.0, 0.7586],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_gain',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: ['Low', 'High', 'None'],\n        deployment: [0.01, 0.01, 0.98],\n        training: [\n          0.047879364884370876,\n          0.03541046036669635,\n          0.9167101747489328,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.01, 0.01, 0.98],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.048, 0.035, 0.917],\n        },\n        'Unique Values': {\n          deployment: ['Low', 'High', 'None'],\n          has_changed: false,\n          message: 'No change',\n          training: ['Low', 'High', 'None'],\n        },\n      },\n    },\n    capital_loss: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'capital_loss',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.04, 0.0, 0.82],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_loss',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0073, 0.0, 0.7519],\n              [0.0, 0.0, 0.0],\n            ],\n            x: ['Low', 'High', 'None'],\n            x_axis_name: 'capital_loss',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.5,\n      histogram: {\n        bins: ['Low', 'High', 'None'],\n        deployment: [0.05, 0.07, 0.88],\n        training: [\n          0.024016461410890328,\n          0.022634439974202267,\n          0.9533490986149074,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.05, 0.07, 0.88],\n          has_changed: true,\n          message:\n            'Production categorical data has different frequencies at p<.01',\n          training: [0.024, 0.023, 0.953],\n        },\n        'Unique Values': {\n          deployment: ['Low', 'High', 'None'],\n          has_changed: false,\n          message: 'No change',\n          training: ['Low', 'High', 'None'],\n        },\n      },\n    },\n    country: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'country',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.03, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Euro_2',\n              'United-States',\n              'South-America',\n              'Yugoslavia',\n              '?',\n              'China',\n              'British-Commonwealth',\n              'Latin-America',\n              'Euro_1',\n              'SE-Asia',\n              'Other',\n            ],\n            x_axis_name: 'country',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [\n                0.0235,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0049,\n                0.0,\n                0.0411,\n                0.0,\n              ],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Euro_2',\n              'United-States',\n              'South-America',\n              'Yugoslavia',\n              '?',\n              'China',\n              'British-Commonwealth',\n              'Latin-America',\n              'Euro_1',\n              'SE-Asia',\n              'Other',\n            ],\n            x_axis_name: 'country',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          'Euro_2',\n          'United-States',\n          'South-America',\n          'Yugoslavia',\n          '?',\n          'China',\n          'British-Commonwealth',\n          'Latin-America',\n          'Euro_1',\n          'SE-Asia',\n          'Other',\n        ],\n        deployment: [\n          0.0,\n          0.85,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.01,\n          0.11,\n          0.0,\n          0.01,\n          0.0,\n        ],\n        training: [\n          0.00672583765854857,\n          0.895857006848684,\n          0.006879395595958355,\n          0.000491385399711311,\n          0.0179048555019809,\n          0.004483891772365713,\n          0.010656920856239059,\n          0.03365989988022481,\n          0.007370780995669666,\n          0.009827707994226222,\n          0.0061423174963913885,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [\n            0.0,\n            0.85,\n            0.0,\n            0.0,\n            0.02,\n            0.0,\n            0.01,\n            0.11,\n            0.0,\n            0.01,\n            0.0,\n          ],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [\n            0.007,\n            0.896,\n            0.007,\n            0.0,\n            0.018,\n            0.004,\n            0.011,\n            0.034,\n            0.007,\n            0.01,\n            0.006,\n          ],\n        },\n        'Unique Values': {\n          deployment: [\n            'United-States',\n            '?',\n            'British-Commonwealth',\n            'Latin-America',\n            'SE-Asia',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            'Euro_2',\n            'United-States',\n            'South-America',\n            'Yugoslavia',\n            '?',\n            'China',\n            'British-Commonwealth',\n            'Latin-America',\n            'Euro_1',\n            'SE-Asia',\n            'Other',\n          ],\n        },\n      },\n    },\n    education: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'education',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.37, 0.0, 0.0, 0.0, 0.0, 0.47, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'High School grad',\n              'Prof-School',\n              'Bachelors',\n              'Dropout',\n              'Associates',\n              'Masters',\n              'Doctorate',\n            ],\n            x_axis_name: 'education',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.2786, 0.0, 0.0, 0.0, 0.0, 0.4631, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'High School grad',\n              'Prof-School',\n              'Bachelors',\n              'Dropout',\n              'Associates',\n              'Masters',\n              'Doctorate',\n            ],\n            x_axis_name: 'education',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          'High School grad',\n          'Prof-School',\n          'Bachelors',\n          'Dropout',\n          'Associates',\n          'Masters',\n          'Doctorate',\n        ],\n        deployment: [0.49, 0.01, 0.17, 0.22, 0.05, 0.03, 0.03],\n        training: [\n          0.5464205644789779,\n          0.0176898743896072,\n          0.16446055096587942,\n          0.13061638156076288,\n          0.07521267774331256,\n          0.05291606523141181,\n          0.012683885630048217,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.49, 0.01, 0.17, 0.22, 0.05, 0.03, 0.03],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.546, 0.018, 0.164, 0.131, 0.075, 0.053, 0.013],\n        },\n        'Unique Values': {\n          deployment: [\n            'High School grad',\n            'Prof-School',\n            'Bachelors',\n            'Dropout',\n            'Associates',\n            'Masters',\n            'Doctorate',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            'High School grad',\n            'Prof-School',\n            'Bachelors',\n            'Dropout',\n            'Associates',\n            'Masters',\n            'Doctorate',\n          ],\n        },\n      },\n    },\n    hours_per_week: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'hours_per_week',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.03,\n                0.0,\n                0.0,\n                0.02,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.04,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.05,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.48,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.05,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.03,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.05,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.01,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '1.00 <= 1.31',\n              '1.31 <= 1.63',\n              '1.63 <= 1.94',\n              '1.94 <= 2.25',\n              '2.25 <= 2.57',\n              '2.57 <= 2.88',\n              '2.88 <= 3.19',\n              '3.19 <= 3.50',\n              '3.50 <= 3.82',\n              '3.82 <= 4.13',\n              '4.13 <= 4.44',\n              '4.44 <= 4.76',\n              '4.76 <= 5.07',\n              '5.07 <= 5.38',\n              '5.38 <= 5.70',\n              '5.70 <= 6.01',\n              '6.01 <= 6.32',\n              '6.32 <= 6.64',\n              '6.64 <= 6.95',\n              '6.95 <= 7.26',\n              '7.26 <= 7.58',\n              '7.58 <= 7.89',\n              '7.89 <= 8.20',\n              '8.20 <= 8.51',\n              '8.51 <= 8.83',\n              '8.83 <= 9.14',\n              '9.14 <= 9.45',\n              '9.45 <= 9.77',\n              '9.77 <= 10.08',\n              '10.08 <= 10.39',\n              '10.39 <= 10.71',\n              '10.71 <= 11.02',\n              '11.02 <= 11.33',\n              '11.33 <= 11.65',\n              '11.65 <= 11.96',\n              '11.96 <= 12.27',\n              '12.27 <= 12.58',\n              '12.58 <= 12.90',\n              '12.90 <= 13.21',\n              '13.21 <= 13.52',\n              '13.52 <= 13.84',\n              '13.84 <= 14.15',\n              '14.15 <= 14.46',\n              '14.46 <= 14.78',\n              '14.78 <= 15.09',\n              '15.09 <= 15.40',\n              '15.40 <= 15.72',\n              '15.72 <= 16.03',\n              '16.03 <= 16.34',\n              '16.34 <= 16.65',\n              '16.65 <= 16.97',\n              '16.97 <= 17.28',\n              '17.28 <= 17.59',\n              '17.59 <= 17.91',\n              '17.91 <= 18.22',\n              '18.22 <= 18.53',\n              '18.53 <= 18.85',\n              '18.85 <= 19.16',\n              '19.16 <= 19.47',\n              '19.47 <= 19.79',\n              '19.79 <= 20.10',\n              '20.10 <= 20.41',\n              '20.41 <= 20.73',\n              '20.73 <= 21.04',\n              '21.04 <= 21.35',\n              '21.35 <= 21.66',\n              '21.66 <= 21.98',\n              '21.98 <= 22.29',\n              '22.29 <= 22.60',\n              '22.60 <= 22.92',\n              '22.92 <= 23.23',\n              '23.23 <= 23.54',\n              '23.54 <= 23.86',\n              '23.86 <= 24.17',\n              '24.17 <= 24.48',\n              '24.48 <= 24.80',\n              '24.80 <= 25.11',\n              '25.11 <= 25.42',\n              '25.42 <= 25.73',\n              '25.73 <= 26.05',\n              '26.05 <= 26.36',\n              '26.36 <= 26.67',\n              '26.67 <= 26.99',\n              '26.99 <= 27.30',\n              '27.30 <= 27.61',\n              '27.61 <= 27.93',\n              '27.93 <= 28.24',\n              '28.24 <= 28.55',\n              '28.55 <= 28.87',\n              '28.87 <= 29.18',\n              '29.18 <= 29.49',\n              '29.49 <= 29.81',\n              '29.81 <= 30.12',\n              '30.12 <= 30.43',\n              '30.43 <= 30.74',\n              '30.74 <= 31.06',\n              '31.06 <= 31.37',\n              '31.37 <= 31.68',\n              '31.68 <= 32.00',\n              '32.00 <= 32.31',\n              '32.31 <= 32.62',\n              '32.62 <= 32.94',\n              '32.94 <= 33.25',\n              '33.25 <= 33.56',\n              '33.56 <= 33.88',\n              '33.88 <= 34.19',\n              '34.19 <= 34.50',\n              '34.50 <= 34.81',\n              '34.81 <= 35.13',\n              '35.13 <= 35.44',\n              '35.44 <= 35.75',\n              '35.75 <= 36.07',\n              '36.07 <= 36.38',\n              '36.38 <= 36.69',\n              '36.69 <= 37.01',\n              '37.01 <= 37.32',\n              '37.32 <= 37.63',\n              '37.63 <= 37.95',\n              '37.95 <= 38.26',\n              '38.26 <= 38.57',\n              '38.57 <= 38.88',\n              '38.88 <= 39.20',\n              '39.20 <= 39.51',\n              '39.51 <= 39.82',\n              '39.82 <= 40.14',\n              '40.14 <= 40.45',\n              '40.45 <= 40.76',\n              '40.76 <= 41.08',\n              '41.08 <= 41.39',\n              '41.39 <= 41.70',\n              '41.70 <= 42.02',\n              '42.02 <= 42.33',\n              '42.33 <= 42.64',\n              '42.64 <= 42.96',\n              '42.96 <= 43.27',\n              '43.27 <= 43.58',\n              '43.58 <= 43.89',\n              '43.89 <= 44.21',\n              '44.21 <= 44.52',\n              '44.52 <= 44.83',\n              '44.83 <= 45.15',\n              '45.15 <= 45.46',\n              '45.46 <= 45.77',\n              '45.77 <= 46.09',\n              '46.09 <= 46.40',\n              '46.40 <= 46.71',\n              '46.71 <= 47.03',\n              '47.03 <= 47.34',\n              '47.34 <= 47.65',\n              '47.65 <= 47.96',\n              '47.96 <= 48.28',\n              '48.28 <= 48.59',\n              '48.59 <= 48.90',\n              '48.90 <= 49.22',\n              '49.22 <= 49.53',\n              '49.53 <= 49.84',\n              '49.84 <= 50.16',\n              '50.16 <= 50.47',\n              '50.47 <= 50.78',\n              '50.78 <= 51.10',\n              '51.10 <= 51.41',\n              '51.41 <= 51.72',\n              '51.72 <= 52.04',\n              '52.04 <= 52.35',\n              '52.35 <= 52.66',\n              '52.66 <= 52.97',\n              '52.97 <= 53.29',\n              '53.29 <= 53.60',\n              '53.60 <= 53.91',\n              '53.91 <= 54.23',\n              '54.23 <= 54.54',\n              '54.54 <= 54.85',\n              '54.85 <= 55.17',\n              '55.17 <= 55.48',\n              '55.48 <= 55.79',\n              '55.79 <= 56.11',\n              '56.11 <= 56.42',\n              '56.42 <= 56.73',\n              '56.73 <= 57.04',\n              '57.04 <= 57.36',\n              '57.36 <= 57.67',\n              '57.67 <= 57.98',\n              '57.98 <= 58.30',\n              '58.30 <= 58.61',\n              '58.61 <= 58.92',\n              '58.92 <= 59.24',\n              '59.24 <= 59.55',\n              '59.55 <= 59.86',\n              '59.86 <= 60.18',\n              '60.18 <= 60.49',\n              '60.49 <= 60.80',\n              '60.80 <= 61.12',\n              '61.12 <= 61.43',\n              '61.43 <= 61.74',\n              '61.74 <= 62.05',\n              '62.05 <= 62.37',\n              '62.37 <= 62.68',\n              '62.68 <= 62.99',\n              '62.99 <= 63.31',\n              '63.31 <= 63.62',\n              '63.62 <= 63.93',\n              '63.93 <= 64.25',\n              '64.25 <= 64.56',\n              '64.56 <= 64.87',\n              '64.87 <= 65.19',\n              '65.19 <= 65.50',\n              '65.50 <= 65.81',\n              '65.81 <= 66.12',\n              '66.12 <= 66.44',\n              '66.44 <= 66.75',\n              '66.75 <= 67.06',\n              '67.06 <= 67.38',\n              '67.38 <= 67.69',\n              '67.69 <= 68.00',\n              '68.00 <= 68.32',\n              '68.32 <= 68.63',\n              '68.63 <= 68.94',\n              '68.94 <= 69.26',\n              '69.26 <= 69.57',\n              '69.57 <= 69.88',\n              '69.88 <= 70.19',\n              '70.19 <= 70.51',\n              '70.51 <= 70.82',\n              '70.82 <= 71.13',\n              '71.13 <= 71.45',\n              '71.45 <= 71.76',\n              '71.76 <= 72.07',\n              '72.07 <= 72.39',\n              '72.39 <= 72.70',\n              '72.70 <= 73.01',\n              '73.01 <= 73.33',\n              '73.33 <= 73.64',\n              '73.64 <= 73.95',\n              '73.95 <= 74.27',\n              '74.27 <= 74.58',\n              '74.58 <= 74.89',\n              '74.89 <= 75.20',\n              '75.20 <= 75.52',\n              '75.52 <= 75.83',\n              '75.83 <= 76.14',\n              '76.14 <= 76.46',\n              '76.46 <= 76.77',\n              '76.77 <= 77.08',\n              '77.08 <= 77.40',\n              '77.40 <= 77.71',\n              '77.71 <= 78.02',\n              '78.02 <= 78.34',\n              '78.34 <= 78.65',\n              '78.65 <= 78.96',\n              '78.96 <= 79.27',\n              '79.27 <= 79.59',\n              '79.59 <= 79.90',\n              '79.90 <= 80.21',\n              '80.21 <= 80.53',\n              '80.53 <= 80.84',\n              '80.84 <= 81.15',\n              '81.15 <= 81.47',\n              '81.47 <= 81.78',\n              '81.78 <= 82.09',\n              '82.09 <= 82.41',\n              '82.41 <= 82.72',\n              '82.72 <= 83.03',\n              '83.03 <= 83.35',\n              '83.35 <= 83.66',\n              '83.66 <= 83.97',\n              '83.97 <= 84.28',\n              '84.28 <= 84.60',\n              '84.60 <= 84.91',\n              '84.91 <= 85.22',\n              '85.22 <= 85.54',\n              '85.54 <= 85.85',\n              '85.85 <= 86.16',\n              '86.16 <= 86.48',\n              '86.48 <= 86.79',\n              '86.79 <= 87.10',\n              '87.10 <= 87.42',\n              '87.42 <= 87.73',\n              '87.73 <= 88.04',\n              '88.04 <= 88.35',\n              '88.35 <= 88.67',\n              '88.67 <= 88.98',\n              '88.98 <= 89.29',\n              '89.29 <= 89.61',\n              '89.61 <= 89.92',\n              '89.92 <= 90.23',\n              '90.23 <= 90.55',\n              '90.55 <= 90.86',\n              '90.86 <= 91.17',\n              '91.17 <= 91.49',\n              '91.49 <= 91.80',\n              '91.80 <= 92.11',\n              '92.11 <= 92.42',\n              '92.42 <= 92.74',\n              '92.74 <= 93.05',\n              '93.05 <= 93.36',\n              '93.36 <= 93.68',\n              '93.68 <= 93.99',\n              '93.99 <= 94.30',\n              '94.30 <= 94.62',\n              '94.62 <= 94.93',\n              '94.93 <= 95.24',\n              '95.24 <= 95.56',\n              '95.56 <= 95.87',\n              '95.87 <= 96.18',\n              '96.18 <= 96.50',\n              '96.50 <= 96.81',\n              '96.81 <= 97.12',\n              '97.12 <= 97.43',\n              '97.43 <= 97.75',\n              '97.75 <= 98.06',\n              '98.06 <= 98.37',\n              '98.37 <= 98.69',\n              '98.69 <= 99.00',\n            ],\n            x_axis_name: 'hours_per_week',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [\n                0.0006,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0012,\n                0.0,\n                0.0,\n                0.0016,\n                0.0,\n                0.0,\n                0.0016,\n                0.0,\n                0.0,\n                0.0017,\n                0.0,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0041,\n                0.0,\n                0.0,\n                0.0005,\n                0.0,\n                0.0,\n                0.0079,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0,\n                0.0049,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.001,\n                0.0,\n                0.0,\n                0.0119,\n                0.0,\n                0.0,\n                0.0059,\n                0.0,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0021,\n                0.0,\n                0.0,\n                0.0004,\n                0.0,\n                0.0,\n                0.0352,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0,\n                0.0012,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.007,\n                0.0,\n                0.0,\n                0.0196,\n                0.0,\n                0.0,\n                0.0008,\n                0.0,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0025,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0327,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0,\n                0.0073,\n                0.0,\n                0.0,\n                0.0011,\n                0.0,\n                0.0,\n                0.0008,\n                0.0,\n                0.0,\n                0.0338,\n                0.0,\n                0.0,\n                0.0054,\n                0.0,\n                0.0,\n                0.004,\n                0.0,\n                0.0,\n                0.0,\n                0.012,\n                0.0,\n                0.0,\n                0.001,\n                0.0,\n                0.0,\n                0.3676,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0046,\n                0.0,\n                0.0,\n                0.0,\n                0.0034,\n                0.0,\n                0.0,\n                0.0042,\n                0.0,\n                0.0,\n                0.035,\n                0.0,\n                0.0,\n                0.0017,\n                0.0,\n                0.0,\n                0.001,\n                0.0,\n                0.0,\n                0.0,\n                0.0112,\n                0.0,\n                0.0,\n                0.0007,\n                0.0,\n                0.0,\n                0.0474,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0028,\n                0.0,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.0008,\n                0.0,\n                0.0,\n                0.0114,\n                0.0,\n                0.0,\n                0.0018,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0254,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0004,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0043,\n                0.0,\n                0.0,\n                0.0005,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0057,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0014,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0014,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0023,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0009,\n                0.0,\n                0.0,\n                0.0003,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0006,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0001,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0002,\n                0.0,\n                0.0,\n                0.0018,\n              ],\n              [\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n                0.0,\n              ],\n            ],\n            x: [\n              '1.00 <= 1.31',\n              '1.31 <= 1.63',\n              '1.63 <= 1.94',\n              '1.94 <= 2.25',\n              '2.25 <= 2.57',\n              '2.57 <= 2.88',\n              '2.88 <= 3.19',\n              '3.19 <= 3.50',\n              '3.50 <= 3.82',\n              '3.82 <= 4.13',\n              '4.13 <= 4.44',\n              '4.44 <= 4.76',\n              '4.76 <= 5.07',\n              '5.07 <= 5.38',\n              '5.38 <= 5.70',\n              '5.70 <= 6.01',\n              '6.01 <= 6.32',\n              '6.32 <= 6.64',\n              '6.64 <= 6.95',\n              '6.95 <= 7.26',\n              '7.26 <= 7.58',\n              '7.58 <= 7.89',\n              '7.89 <= 8.20',\n              '8.20 <= 8.51',\n              '8.51 <= 8.83',\n              '8.83 <= 9.14',\n              '9.14 <= 9.45',\n              '9.45 <= 9.77',\n              '9.77 <= 10.08',\n              '10.08 <= 10.39',\n              '10.39 <= 10.71',\n              '10.71 <= 11.02',\n              '11.02 <= 11.33',\n              '11.33 <= 11.65',\n              '11.65 <= 11.96',\n              '11.96 <= 12.27',\n              '12.27 <= 12.58',\n              '12.58 <= 12.90',\n              '12.90 <= 13.21',\n              '13.21 <= 13.52',\n              '13.52 <= 13.84',\n              '13.84 <= 14.15',\n              '14.15 <= 14.46',\n              '14.46 <= 14.78',\n              '14.78 <= 15.09',\n              '15.09 <= 15.40',\n              '15.40 <= 15.72',\n              '15.72 <= 16.03',\n              '16.03 <= 16.34',\n              '16.34 <= 16.65',\n              '16.65 <= 16.97',\n              '16.97 <= 17.28',\n              '17.28 <= 17.59',\n              '17.59 <= 17.91',\n              '17.91 <= 18.22',\n              '18.22 <= 18.53',\n              '18.53 <= 18.85',\n              '18.85 <= 19.16',\n              '19.16 <= 19.47',\n              '19.47 <= 19.79',\n              '19.79 <= 20.10',\n              '20.10 <= 20.41',\n              '20.41 <= 20.73',\n              '20.73 <= 21.04',\n              '21.04 <= 21.35',\n              '21.35 <= 21.66',\n              '21.66 <= 21.98',\n              '21.98 <= 22.29',\n              '22.29 <= 22.60',\n              '22.60 <= 22.92',\n              '22.92 <= 23.23',\n              '23.23 <= 23.54',\n              '23.54 <= 23.86',\n              '23.86 <= 24.17',\n              '24.17 <= 24.48',\n              '24.48 <= 24.80',\n              '24.80 <= 25.11',\n              '25.11 <= 25.42',\n              '25.42 <= 25.73',\n              '25.73 <= 26.05',\n              '26.05 <= 26.36',\n              '26.36 <= 26.67',\n              '26.67 <= 26.99',\n              '26.99 <= 27.30',\n              '27.30 <= 27.61',\n              '27.61 <= 27.93',\n              '27.93 <= 28.24',\n              '28.24 <= 28.55',\n              '28.55 <= 28.87',\n              '28.87 <= 29.18',\n              '29.18 <= 29.49',\n              '29.49 <= 29.81',\n              '29.81 <= 30.12',\n              '30.12 <= 30.43',\n              '30.43 <= 30.74',\n              '30.74 <= 31.06',\n              '31.06 <= 31.37',\n              '31.37 <= 31.68',\n              '31.68 <= 32.00',\n              '32.00 <= 32.31',\n              '32.31 <= 32.62',\n              '32.62 <= 32.94',\n              '32.94 <= 33.25',\n              '33.25 <= 33.56',\n              '33.56 <= 33.88',\n              '33.88 <= 34.19',\n              '34.19 <= 34.50',\n              '34.50 <= 34.81',\n              '34.81 <= 35.13',\n              '35.13 <= 35.44',\n              '35.44 <= 35.75',\n              '35.75 <= 36.07',\n              '36.07 <= 36.38',\n              '36.38 <= 36.69',\n              '36.69 <= 37.01',\n              '37.01 <= 37.32',\n              '37.32 <= 37.63',\n              '37.63 <= 37.95',\n              '37.95 <= 38.26',\n              '38.26 <= 38.57',\n              '38.57 <= 38.88',\n              '38.88 <= 39.20',\n              '39.20 <= 39.51',\n              '39.51 <= 39.82',\n              '39.82 <= 40.14',\n              '40.14 <= 40.45',\n              '40.45 <= 40.76',\n              '40.76 <= 41.08',\n              '41.08 <= 41.39',\n              '41.39 <= 41.70',\n              '41.70 <= 42.02',\n              '42.02 <= 42.33',\n              '42.33 <= 42.64',\n              '42.64 <= 42.96',\n              '42.96 <= 43.27',\n              '43.27 <= 43.58',\n              '43.58 <= 43.89',\n              '43.89 <= 44.21',\n              '44.21 <= 44.52',\n              '44.52 <= 44.83',\n              '44.83 <= 45.15',\n              '45.15 <= 45.46',\n              '45.46 <= 45.77',\n              '45.77 <= 46.09',\n              '46.09 <= 46.40',\n              '46.40 <= 46.71',\n              '46.71 <= 47.03',\n              '47.03 <= 47.34',\n              '47.34 <= 47.65',\n              '47.65 <= 47.96',\n              '47.96 <= 48.28',\n              '48.28 <= 48.59',\n              '48.59 <= 48.90',\n              '48.90 <= 49.22',\n              '49.22 <= 49.53',\n              '49.53 <= 49.84',\n              '49.84 <= 50.16',\n              '50.16 <= 50.47',\n              '50.47 <= 50.78',\n              '50.78 <= 51.10',\n              '51.10 <= 51.41',\n              '51.41 <= 51.72',\n              '51.72 <= 52.04',\n              '52.04 <= 52.35',\n              '52.35 <= 52.66',\n              '52.66 <= 52.97',\n              '52.97 <= 53.29',\n              '53.29 <= 53.60',\n              '53.60 <= 53.91',\n              '53.91 <= 54.23',\n              '54.23 <= 54.54',\n              '54.54 <= 54.85',\n              '54.85 <= 55.17',\n              '55.17 <= 55.48',\n              '55.48 <= 55.79',\n              '55.79 <= 56.11',\n              '56.11 <= 56.42',\n              '56.42 <= 56.73',\n              '56.73 <= 57.04',\n              '57.04 <= 57.36',\n              '57.36 <= 57.67',\n              '57.67 <= 57.98',\n              '57.98 <= 58.30',\n              '58.30 <= 58.61',\n              '58.61 <= 58.92',\n              '58.92 <= 59.24',\n              '59.24 <= 59.55',\n              '59.55 <= 59.86',\n              '59.86 <= 60.18',\n              '60.18 <= 60.49',\n              '60.49 <= 60.80',\n              '60.80 <= 61.12',\n              '61.12 <= 61.43',\n              '61.43 <= 61.74',\n              '61.74 <= 62.05',\n              '62.05 <= 62.37',\n              '62.37 <= 62.68',\n              '62.68 <= 62.99',\n              '62.99 <= 63.31',\n              '63.31 <= 63.62',\n              '63.62 <= 63.93',\n              '63.93 <= 64.25',\n              '64.25 <= 64.56',\n              '64.56 <= 64.87',\n              '64.87 <= 65.19',\n              '65.19 <= 65.50',\n              '65.50 <= 65.81',\n              '65.81 <= 66.12',\n              '66.12 <= 66.44',\n              '66.44 <= 66.75',\n              '66.75 <= 67.06',\n              '67.06 <= 67.38',\n              '67.38 <= 67.69',\n              '67.69 <= 68.00',\n              '68.00 <= 68.32',\n              '68.32 <= 68.63',\n              '68.63 <= 68.94',\n              '68.94 <= 69.26',\n              '69.26 <= 69.57',\n              '69.57 <= 69.88',\n              '69.88 <= 70.19',\n              '70.19 <= 70.51',\n              '70.51 <= 70.82',\n              '70.82 <= 71.13',\n              '71.13 <= 71.45',\n              '71.45 <= 71.76',\n              '71.76 <= 72.07',\n              '72.07 <= 72.39',\n              '72.39 <= 72.70',\n              '72.70 <= 73.01',\n              '73.01 <= 73.33',\n              '73.33 <= 73.64',\n              '73.64 <= 73.95',\n              '73.95 <= 74.27',\n              '74.27 <= 74.58',\n              '74.58 <= 74.89',\n              '74.89 <= 75.20',\n              '75.20 <= 75.52',\n              '75.52 <= 75.83',\n              '75.83 <= 76.14',\n              '76.14 <= 76.46',\n              '76.46 <= 76.77',\n              '76.77 <= 77.08',\n              '77.08 <= 77.40',\n              '77.40 <= 77.71',\n              '77.71 <= 78.02',\n              '78.02 <= 78.34',\n              '78.34 <= 78.65',\n              '78.65 <= 78.96',\n              '78.96 <= 79.27',\n              '79.27 <= 79.59',\n              '79.59 <= 79.90',\n              '79.90 <= 80.21',\n              '80.21 <= 80.53',\n              '80.53 <= 80.84',\n              '80.84 <= 81.15',\n              '81.15 <= 81.47',\n              '81.47 <= 81.78',\n              '81.78 <= 82.09',\n              '82.09 <= 82.41',\n              '82.41 <= 82.72',\n              '82.72 <= 83.03',\n              '83.03 <= 83.35',\n              '83.35 <= 83.66',\n              '83.66 <= 83.97',\n              '83.97 <= 84.28',\n              '84.28 <= 84.60',\n              '84.60 <= 84.91',\n              '84.91 <= 85.22',\n              '85.22 <= 85.54',\n              '85.54 <= 85.85',\n              '85.85 <= 86.16',\n              '86.16 <= 86.48',\n              '86.48 <= 86.79',\n              '86.79 <= 87.10',\n              '87.10 <= 87.42',\n              '87.42 <= 87.73',\n              '87.73 <= 88.04',\n              '88.04 <= 88.35',\n              '88.35 <= 88.67',\n              '88.67 <= 88.98',\n              '88.98 <= 89.29',\n              '89.29 <= 89.61',\n              '89.61 <= 89.92',\n              '89.92 <= 90.23',\n              '90.23 <= 90.55',\n              '90.55 <= 90.86',\n              '90.86 <= 91.17',\n              '91.17 <= 91.49',\n              '91.49 <= 91.80',\n              '91.80 <= 92.11',\n              '92.11 <= 92.42',\n              '92.42 <= 92.74',\n              '92.74 <= 93.05',\n              '93.05 <= 93.36',\n              '93.36 <= 93.68',\n              '93.68 <= 93.99',\n              '93.99 <= 94.30',\n              '94.30 <= 94.62',\n              '94.62 <= 94.93',\n              '94.93 <= 95.24',\n              '95.24 <= 95.56',\n              '95.56 <= 95.87',\n              '95.87 <= 96.18',\n              '96.18 <= 96.50',\n              '96.50 <= 96.81',\n              '96.81 <= 97.12',\n              '97.12 <= 97.43',\n              '97.43 <= 97.75',\n              '97.75 <= 98.06',\n              '98.06 <= 98.37',\n              '98.37 <= 98.69',\n              '98.69 <= 99.00',\n            ],\n            x_axis_name: 'hours_per_week',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          1.0,\n          1.3130990415335464,\n          1.6261980830670928,\n          1.939297124600639,\n          2.2523961661341856,\n          2.5654952076677318,\n          2.878594249201278,\n          3.1916932907348246,\n          3.5047923322683707,\n          3.817891373801917,\n          4.1309904153354635,\n          4.44408945686901,\n          4.757188498402556,\n          5.0702875399361025,\n          5.383386581469649,\n          5.696485623003195,\n          6.0095846645367414,\n          6.322683706070288,\n          6.635782747603834,\n          6.94888178913738,\n          7.261980830670927,\n          7.575079872204473,\n          7.888178913738019,\n          8.201277955271566,\n          8.514376996805112,\n          8.82747603833866,\n          9.140575079872205,\n          9.45367412140575,\n          9.766773162939298,\n          10.079872204472844,\n          10.39297124600639,\n          10.706070287539937,\n          11.019169329073483,\n          11.332268370607029,\n          11.645367412140576,\n          11.958466453674122,\n          12.271565495207668,\n          12.584664536741215,\n          12.89776357827476,\n          13.210862619808307,\n          13.523961661341854,\n          13.8370607028754,\n          14.150159744408946,\n          14.463258785942493,\n          14.776357827476039,\n          15.089456869009584,\n          15.402555910543132,\n          15.715654952076678,\n          16.028753993610223,\n          16.34185303514377,\n          16.65495207667732,\n          16.968051118210866,\n          17.28115015974441,\n          17.594249201277957,\n          17.9073482428115,\n          18.22044728434505,\n          18.533546325878596,\n          18.84664536741214,\n          19.159744408945688,\n          19.472843450479235,\n          19.78594249201278,\n          20.099041533546327,\n          20.412140575079874,\n          20.72523961661342,\n          21.038338658146966,\n          21.351437699680513,\n          21.664536741214057,\n          21.977635782747605,\n          22.290734824281152,\n          22.603833865814696,\n          22.916932907348244,\n          23.23003194888179,\n          23.543130990415335,\n          23.856230031948883,\n          24.16932907348243,\n          24.482428115015974,\n          24.79552715654952,\n          25.10862619808307,\n          25.421725239616613,\n          25.73482428115016,\n          26.047923322683708,\n          26.361022364217252,\n          26.6741214057508,\n          26.987220447284347,\n          27.30031948881789,\n          27.61341853035144,\n          27.926517571884986,\n          28.23961661341853,\n          28.552715654952078,\n          28.865814696485625,\n          29.17891373801917,\n          29.492012779552716,\n          29.805111821086264,\n          30.118210862619808,\n          30.431309904153355,\n          30.744408945686903,\n          31.057507987220447,\n          31.370607028753994,\n          31.683706070287542,\n          31.99680511182109,\n          32.30990415335464,\n          32.623003194888184,\n          32.93610223642173,\n          33.24920127795527,\n          33.56230031948882,\n          33.87539936102237,\n          34.188498402555915,\n          34.501597444089455,\n          34.814696485623,\n          35.12779552715655,\n          35.4408945686901,\n          35.753993610223645,\n          36.06709265175719,\n          36.38019169329073,\n          36.69329073482428,\n          37.00638977635783,\n          37.319488817891376,\n          37.63258785942492,\n          37.94568690095847,\n          38.25878594249201,\n          38.57188498402556,\n          38.884984025559106,\n          39.198083067092654,\n          39.5111821086262,\n          39.82428115015975,\n          40.13738019169329,\n          40.45047923322684,\n          40.763578274760384,\n          41.07667731629393,\n          41.38977635782748,\n          41.70287539936103,\n          42.015974440894574,\n          42.329073482428115,\n          42.64217252396166,\n          42.95527156549521,\n          43.26837060702876,\n          43.581469648562305,\n          43.89456869009585,\n          44.20766773162939,\n          44.52076677316294,\n          44.83386581469649,\n          45.146964856230035,\n          45.46006389776358,\n          45.77316293929713,\n          46.08626198083067,\n          46.39936102236422,\n          46.712460063897765,\n          47.02555910543131,\n          47.33865814696486,\n          47.65175718849841,\n          47.96485623003195,\n          48.277955271565496,\n          48.59105431309904,\n          48.90415335463259,\n          49.21725239616614,\n          49.530351437699686,\n          49.843450479233226,\n          50.156549520766774,\n          50.46964856230032,\n          50.78274760383387,\n          51.095846645367416,\n          51.408945686900964,\n          51.722044728434504,\n          52.03514376996805,\n          52.3482428115016,\n          52.66134185303515,\n          52.974440894568694,\n          53.28753993610224,\n          53.60063897763578,\n          53.91373801916933,\n          54.22683706070288,\n          54.539936102236425,\n          54.85303514376997,\n          55.16613418530352,\n          55.47923322683706,\n          55.79233226837061,\n          56.105431309904155,\n          56.4185303514377,\n          56.73162939297125,\n          57.0447284345048,\n          57.35782747603834,\n          57.670926517571885,\n          57.98402555910543,\n          58.29712460063898,\n          58.61022364217253,\n          58.923322683706076,\n          59.236421725239616,\n          59.54952076677316,\n          59.86261980830671,\n          60.17571884984026,\n          60.488817891373806,\n          60.80191693290735,\n          61.115015974440894,\n          61.42811501597444,\n          61.74121405750799,\n          62.054313099041536,\n          62.367412140575084,\n          62.68051118210863,\n          62.99361022364218,\n          63.30670926517572,\n          63.61980830670927,\n          63.932907348242814,\n          64.24600638977637,\n          64.55910543130992,\n          64.87220447284346,\n          65.185303514377,\n          65.49840255591054,\n          65.81150159744409,\n          66.12460063897764,\n          66.43769968051119,\n          66.75079872204473,\n          67.06389776357828,\n          67.37699680511183,\n          67.69009584664538,\n          68.00319488817891,\n          68.31629392971246,\n          68.629392971246,\n          68.94249201277955,\n          69.2555910543131,\n          69.56869009584665,\n          69.8817891373802,\n          70.19488817891374,\n          70.50798722044729,\n          70.82108626198084,\n          71.13418530351439,\n          71.44728434504793,\n          71.76038338658147,\n          72.07348242811501,\n          72.38658146964856,\n          72.69968051118211,\n          73.01277955271566,\n          73.3258785942492,\n          73.63897763578275,\n          73.9520766773163,\n          74.26517571884985,\n          74.5782747603834,\n          74.89137380191694,\n          75.20447284345049,\n          75.51757188498402,\n          75.83067092651757,\n          76.14376996805112,\n          76.45686900958466,\n          76.76996805111821,\n          77.08306709265176,\n          77.39616613418531,\n          77.70926517571885,\n          78.0223642172524,\n          78.33546325878595,\n          78.6485623003195,\n          78.96166134185304,\n          79.27476038338658,\n          79.58785942492013,\n          79.90095846645367,\n          80.21405750798722,\n          80.52715654952077,\n          80.84025559105432,\n          81.15335463258786,\n          81.46645367412141,\n          81.77955271565496,\n          82.0926517571885,\n          82.40575079872205,\n          82.7188498402556,\n          83.03194888178915,\n          83.34504792332268,\n          83.65814696485623,\n          83.97124600638978,\n          84.28434504792332,\n          84.59744408945687,\n          84.91054313099042,\n          85.22364217252397,\n          85.53674121405751,\n          85.84984025559106,\n          86.16293929712461,\n          86.47603833865816,\n          86.7891373801917,\n          87.10223642172524,\n          87.41533546325878,\n          87.72843450479233,\n          88.04153354632588,\n          88.35463258785943,\n          88.66773162939297,\n          88.98083067092652,\n          89.29392971246007,\n          89.60702875399362,\n          89.92012779552716,\n          90.23322683706071,\n          90.54632587859426,\n          90.8594249201278,\n          91.17252396166134,\n          91.48562300319489,\n          91.79872204472844,\n          92.11182108626198,\n          92.42492012779553,\n          92.73801916932908,\n          93.05111821086263,\n          93.36421725239617,\n          93.67731629392972,\n          93.99041533546327,\n          94.30351437699682,\n          94.61661341853035,\n          94.9297124600639,\n          95.24281150159744,\n          95.55591054313099,\n          95.86900958466454,\n          96.18210862619809,\n          96.49520766773163,\n          96.80830670926518,\n          97.12140575079873,\n          97.43450479233228,\n          97.74760383386582,\n          98.06070287539937,\n          98.3738019169329,\n          98.68690095846645,\n          99.0,\n        ],\n        deployment: [\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.03,\n          0.0,\n          0.0,\n          0.02,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.04,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.05,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.54,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.05,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.04,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.09,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.01,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n        ],\n        training: [\n          0.0006142317496391389,\n          0.0,\n          0.0,\n          0.000982770799422622,\n          0.0,\n          0.0,\n          0.0011977519117963207,\n          0.0,\n          0.0,\n          0.001658425724025675,\n          0.0,\n          0.0,\n          0.0018426952489174165,\n          0.0,\n          0.0,\n          0.001965541598845244,\n          0.0,\n          0.0,\n          0.0,\n          0.0007985012745308805,\n          0.0,\n          0.0,\n          0.004453180184883757,\n          0.0,\n          0.0,\n          0.000552808574675225,\n          0.0,\n          0.0,\n          0.00853782131998403,\n          0.0,\n          0.0,\n          0.00033782746230152634,\n          0.0,\n          0.0,\n          0.0,\n          0.005313104634378551,\n          0.0,\n          0.0,\n          0.0007063665120850096,\n          0.0,\n          0.0,\n          0.001044193974386536,\n          0.0,\n          0.0,\n          0.012407481342710604,\n          0.0,\n          0.0,\n          0.006295875433801173,\n          0.0,\n          0.0,\n          0.0,\n          0.0008906360369767513,\n          0.0,\n          0.0,\n          0.002303369061146771,\n          0.0,\n          0.0,\n          0.00042996222474739717,\n          0.0,\n          0.0,\n          0.0375909830779153,\n          0.0,\n          0.0,\n          0.0007370780995669666,\n          0.0,\n          0.0,\n          0.0,\n          0.0013513098492061054,\n          0.0,\n          0.0,\n          0.0006449433371210958,\n          0.0,\n          0.0,\n          0.007739320045453149,\n          0.0,\n          0.0,\n          0.02069960996283898,\n          0.0,\n          0.0,\n          0.0009213476244587083,\n          0.0,\n          0.0,\n          0.0,\n          0.0009213476244587083,\n          0.0,\n          0.0,\n          0.002641196523448297,\n          0.0,\n          0.0,\n          0.00021498111237369858,\n          0.0,\n          0.0,\n          0.035287614016768526,\n          0.0,\n          0.0,\n          0.00015355793740978472,\n          0.0,\n          0.0,\n          0.0,\n          0.008169282270200546,\n          0.0,\n          0.0,\n          0.0011977519117963207,\n          0.0,\n          0.0,\n          0.0008599244494947943,\n          0.0,\n          0.0,\n          0.03983292896409815,\n          0.0,\n          0.0,\n          0.006756549246030527,\n          0.0,\n          0.0,\n          0.004576026534811584,\n          0.0,\n          0.0,\n          0.0,\n          0.014618715641411505,\n          0.0,\n          0.0,\n          0.0011670403243143638,\n          0.0,\n          0.0,\n          0.4673382267129388,\n          0.0,\n          0.0,\n          0.00110561714935045,\n          0.0,\n          0.0,\n          0.00672583765854857,\n          0.0,\n          0.0,\n          0.0,\n          0.004637449709775498,\n          0.0,\n          0.0,\n          0.006510856546174872,\n          0.0,\n          0.0,\n          0.056017935567089464,\n          0.0,\n          0.0,\n          0.002518350173520469,\n          0.0,\n          0.0,\n          0.0015048677866158903,\n          0.0,\n          0.0,\n          0.0,\n          0.01587789072817174,\n          0.0,\n          0.0,\n          0.0008906360369767513,\n          0.0,\n          0.0,\n          0.08657596511163662,\n          0.0,\n          0.0,\n          0.00039925063726544026,\n          0.0,\n          0.0,\n          0.004238199072510058,\n          0.0,\n          0.0,\n          0.0,\n          0.0007677896870489236,\n          0.0,\n          0.0,\n          0.0012591750867602346,\n          0.0,\n          0.0,\n          0.021313841712478118,\n          0.0,\n          0.0,\n          0.0029790239857498233,\n          0.0,\n          0.0,\n          0.000522096987193268,\n          0.0,\n          0.0,\n          0.0,\n          0.0008599244494947943,\n          0.0,\n          0.0,\n          0.00015355793740978472,\n          0.0,\n          0.0,\n          0.04529959153588649,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.000552808574675225,\n          0.0,\n          0.0,\n          0.0,\n          0.00030711587481956944,\n          0.0,\n          0.0,\n          0.00042996222474739717,\n          0.0,\n          0.0,\n          0.007493627345597494,\n          0.0,\n          0.0,\n          0.000522096987193268,\n          0.0,\n          0.0,\n          0.00012284634992782776,\n          0.0,\n          0.0,\n          0.0003685390497834833,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.00893707195724947,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.002180522711218943,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          0.0020269647738091583,\n          0.0,\n          0.0,\n          9.213476244587083e-5,\n          0.0,\n          0.0,\n          0.00018426952489174165,\n          0.0,\n          0.0,\n          0.0002456926998556555,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.004084641135100273,\n          0.0,\n          0.0,\n          9.213476244587083e-5,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0013820214366880624,\n          0.0,\n          0.0,\n          0.00039925063726544026,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.0008906360369767513,\n          0.0,\n          0.0,\n          9.213476244587083e-5,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          0.0,\n          3.071158748195694e-5,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.00015355793740978472,\n          0.0,\n          0.0,\n          6.142317496391388e-5,\n          0.0,\n          0.0,\n          0.00033782746230152634,\n          0.0,\n          0.0,\n          0.00261048493596634,\n        ],\n      },\n      statistics: {\n        Mean: {\n          deployment: 40.13,\n          has_changed: false,\n          message: 'No significant change in the mean',\n          training: 40.437455852092995,\n        },\n        Median: {\n          deployment: 40.0,\n          has_changed: false,\n          message: 'No significant change in the median',\n          training: 40.0,\n        },\n        Variance: {\n          deployment: 142.43310000000002,\n          has_changed: false,\n          message: 'No significant change in the variance',\n          training: 152.45431279269027,\n        },\n      },\n    },\n    income: {\n      bivariate_reports: [],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: ['1', '0'],\n        deployment: [0.14, 0.86],\n        training: [0.2408095574460244, 0.7591904425539756],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.14, 0.86],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.241, 0.759],\n        },\n        'Unique Values': {\n          deployment: ['1', '0'],\n          has_changed: false,\n          message: 'No change',\n          training: ['1', '0'],\n        },\n      },\n    },\n    marital_status: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'marital_status',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.32, 0.34, 0.18, 0.02],\n              [0.0, 0.0, 0.0, 0.0],\n            ],\n            x: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n            x_axis_name: 'marital_status',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.2548, 0.313, 0.1635, 0.0279],\n              [0.0, 0.0, 0.0, 0.0],\n            ],\n            x: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n            x_axis_name: 'marital_status',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n        deployment: [0.45, 0.34, 0.19, 0.02],\n        training: [\n          0.4606431006418722,\n          0.328091889069746,\n          0.18076840391879856,\n          0.030496606369583245,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.45, 0.34, 0.19, 0.02],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.461, 0.328, 0.181, 0.03],\n        },\n        'Unique Values': {\n          deployment: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n          has_changed: false,\n          message: 'No change',\n          training: ['Married', 'Never-Married', 'Separated', 'Widowed'],\n        },\n      },\n    },\n    occupation: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'occupation',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.04, 0.0, 0.0, 0.0, 0.0, 0.08, 0.0, 0.39, 0.08],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Professional',\n              'Sales',\n              'Service',\n              'White-Collar',\n              '?',\n              'Military',\n              'Admin',\n              'Blue-Collar',\n              'Other',\n            ],\n            x_axis_name: 'occupation',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0626, 0.0, 0.0, 0.0, 0.0, 0.0883, 0.0, 0.2568, 0.0335],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              'Professional',\n              'Sales',\n              'Service',\n              'White-Collar',\n              '?',\n              'Military',\n              'Admin',\n              'Blue-Collar',\n              'Other',\n            ],\n            x_axis_name: 'occupation',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          'Professional',\n          'Sales',\n          'Service',\n          'White-Collar',\n          '?',\n          'Military',\n          'Admin',\n          'Blue-Collar',\n          'Other',\n        ],\n        deployment: [0.07, 0.08, 0.1, 0.13, 0.03, 0.01, 0.09, 0.39, 0.1],\n        training: [\n          0.12714597217530174,\n          0.11209729430914284,\n          0.10577070728785971,\n          0.12487331470163693,\n          0.056601455729246644,\n          0.0002764042873376125,\n          0.11578268480697768,\n          0.30901999324345075,\n          0.048432173459046095,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.07, 0.08, 0.1, 0.13, 0.03, 0.01, 0.09, 0.39, 0.1],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [\n            0.127,\n            0.112,\n            0.106,\n            0.125,\n            0.057,\n            0.0,\n            0.116,\n            0.309,\n            0.048,\n          ],\n        },\n        'Unique Values': {\n          deployment: [\n            'Professional',\n            'Sales',\n            'Service',\n            'White-Collar',\n            '?',\n            'Military',\n            'Admin',\n            'Blue-Collar',\n            'Other',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            'Professional',\n            'Sales',\n            'Service',\n            'White-Collar',\n            '?',\n            'Military',\n            'Admin',\n            'Blue-Collar',\n            'Other',\n          ],\n        },\n      },\n    },\n    race: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'race',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.03, 0.0, 0.71, 0.0, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Black',\n              ' Amer-Indian-Eskimo',\n              ' White',\n              ' Asian-Pac-Islander',\n              ' Other',\n            ],\n            x_axis_name: 'race',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0084, 0.0, 0.663, 0.0, 0.0034],\n              [0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Black',\n              ' Amer-Indian-Eskimo',\n              ' White',\n              ' Asian-Pac-Islander',\n              ' Other',\n            ],\n            x_axis_name: 'race',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          ' Black',\n          ' Amer-Indian-Eskimo',\n          ' White',\n          ' Asian-Pac-Islander',\n          ' Other',\n        ],\n        deployment: [0.12, 0.03, 0.8, 0.03, 0.02],\n        training: [\n          0.0959429992936335,\n          0.009551303706888609,\n          0.8542735173981143,\n          0.03190933939375326,\n          0.008322840207610331,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.12, 0.03, 0.8, 0.03, 0.02],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.096, 0.01, 0.854, 0.032, 0.008],\n        },\n        'Unique Values': {\n          deployment: [\n            ' Black',\n            ' Amer-Indian-Eskimo',\n            ' White',\n            ' Asian-Pac-Islander',\n            ' Other',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            ' Black',\n            ' Amer-Indian-Eskimo',\n            ' White',\n            ' Asian-Pac-Islander',\n            ' Other',\n          ],\n        },\n      },\n    },\n    relationship: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'relationship',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.52, 0.0, 0.16, 0.0, 0.0, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Unmarried',\n              ' Not-in-family',\n              ' Wife',\n              ' Own-child',\n              ' Husband',\n              ' Other-relative',\n            ],\n            x_axis_name: 'relationship',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.4522, 0.0, 0.1781, 0.0, 0.0, 0.0],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Unmarried',\n              ' Not-in-family',\n              ' Wife',\n              ' Own-child',\n              ' Husband',\n              ' Other-relative',\n            ],\n            x_axis_name: 'relationship',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          ' Unmarried',\n          ' Not-in-family',\n          ' Wife',\n          ' Own-child',\n          ' Husband',\n          ' Other-relative',\n        ],\n        deployment: [0.14, 0.26, 0.05, 0.15, 0.38, 0.02],\n        training: [\n          0.10583213046282362,\n          0.2550597340376524,\n          0.04815576917170849,\n          0.1556463253585578,\n          0.40517797364945796,\n          0.03012806731979976,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.14, 0.26, 0.05, 0.15, 0.38, 0.02],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.106, 0.255, 0.048, 0.156, 0.405, 0.03],\n        },\n        'Unique Values': {\n          deployment: [\n            ' Unmarried',\n            ' Not-in-family',\n            ' Wife',\n            ' Own-child',\n            ' Husband',\n            ' Other-relative',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            ' Unmarried',\n            ' Not-in-family',\n            ' Wife',\n            ' Own-child',\n            ' Husband',\n            ' Other-relative',\n          ],\n        },\n      },\n    },\n    sex: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'sex',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.24, 0.62],\n              [0.0, 0.0],\n            ],\n            x: [' Female', ' Male'],\n            x_axis_name: 'sex',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.2946, 0.4646],\n              [0.0, 0.0],\n            ],\n            x: [' Female', ' Male'],\n            x_axis_name: 'sex',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [' Female', ' Male'],\n        deployment: [0.26, 0.74],\n        training: [0.33079450876815825, 0.6692054912318418],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.26, 0.74],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.331, 0.669],\n        },\n        'Unique Values': {\n          deployment: [' Female', ' Male'],\n          has_changed: false,\n          message: 'No change',\n          training: [' Female', ' Male'],\n        },\n      },\n    },\n    workclass: {\n      bivariate_reports: [\n        {\n          drifted: false,\n          feature_1: 'workclass',\n          feature_2: 'income',\n          production_heatmap: {\n            density: [\n              [0.06, 0.0, 0.0, 0.0, 0.04, 0.68, 0.0, 0.02, 0.06],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Local-gov',\n              ' State-gov',\n              ' Never-worked',\n              ' ?',\n              ' Federal-gov',\n              ' Self-emp-not-inc',\n              ' Private',\n              ' Self-emp-inc',\n              ' Without-pay',\n            ],\n            x_axis_name: 'workclass',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n          training_heatmap: {\n            density: [\n              [0.0546, 0.0, 0.0, 0.0, 0.014, 0.5902, 0.0, 0.0152, 0.0853],\n              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],\n            ],\n            x: [\n              ' Local-gov',\n              ' State-gov',\n              ' Never-worked',\n              ' ?',\n              ' Federal-gov',\n              ' Self-emp-not-inc',\n              ' Private',\n              ' Self-emp-inc',\n              ' Without-pay',\n            ],\n            x_axis_name: 'workclass',\n            y: ['1', '0'],\n            y_axis_name: 'income',\n          },\n        },\n      ],\n      'drift-probability': 0.0,\n      histogram: {\n        bins: [\n          ' Local-gov',\n          ' State-gov',\n          ' Never-worked',\n          ' ?',\n          ' Federal-gov',\n          ' Self-emp-not-inc',\n          ' Private',\n          ' Self-emp-inc',\n          ' Without-pay',\n        ],\n        deployment: [0.07, 0.05, 0.0, 0.03, 0.08, 0.04, 0.7, 0.03, 0.0],\n        training: [\n          0.06427935259973588,\n          0.039863640551580114,\n          0.00021498111237369858,\n          0.05638647461687295,\n          0.029483123982678664,\n          0.0780381437916526,\n          0.6970301894904948,\n          0.034274131629863945,\n          0.00042996222474739717,\n        ],\n      },\n      statistics: {\n        'Category densities': {\n          deployment: [0.07, 0.05, 0.0, 0.03, 0.08, 0.04, 0.7, 0.03, 0.0],\n          has_changed: false,\n          message:\n            'Difference between training and production frequencies are not significant',\n          training: [0.064, 0.04, 0.0, 0.056, 0.029, 0.078, 0.697, 0.034, 0.0],\n        },\n        'Unique Values': {\n          deployment: [\n            ' Local-gov',\n            ' State-gov',\n            ' ?',\n            ' Federal-gov',\n            ' Self-emp-not-inc',\n            ' Private',\n            ' Self-emp-inc',\n          ],\n          has_changed: false,\n          message: 'No change',\n          training: [\n            ' Local-gov',\n            ' State-gov',\n            ' Never-worked',\n            ' ?',\n            ' Federal-gov',\n            ' Self-emp-not-inc',\n            ' Private',\n            ' Self-emp-inc',\n            ' Without-pay',\n          ],\n        },\n      },\n    },\n  },\n  warnings: {\n    final_decision: null,\n    report: [],\n  },\n}"
                }
            ],
            "src/app/modules/visualization/mocks/visualization.ts": [
                {
                    "name": "mockSuccessTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/visualization/mocks/visualization.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskInformation",
                    "defaultValue": "{\n  result: mockVisualizationResult,\n  state: ETaskState.success,\n  task_id: 'b2ea3dd1-6d68-4d3f-a709-fd639ef2d7d6',\n}"
                },
                {
                    "name": "mockVisualizationResult",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/visualization/mocks/visualization.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "VisualizationResponse",
                    "defaultValue": "{\n  data_shape: [10, 2],\n  training_data_shape: [10, 2],\n  training_data: [\n    [12.311838150024414, 3.109858512878418],\n    [19.76542854309082, 6.289316654205322],\n    [1.93822193145752, 7.5244059562683105],\n    [4.938331604003906, 4.7838358879089355],\n    [15.747235298156738, 5.297874450683594],\n    [1.054553031921387, 1.244650840759277],\n    [2.461652755737305, 2.751408576965332],\n    [5.481518745422363, 11.981990337371826],\n    [15.062357902526855, 9.0266337394714355],\n    [3.847922325134277, 2.067715644836426],\n  ],\n  data: [\n    [10.311838150024414, 7.109858512878418],\n    [9.76542854309082, 7.289316654205322],\n    [10.93822193145752, 6.5244059562683105],\n    [7.938331604003906, 4.7838358879089355],\n    [10.747235298156738, 6.297874450683594],\n    [8.054553031921387, 8.244650840759277],\n    [8.461652755737305, 4.751408576965332],\n    [9.481518745422363, 7.981990337371826],\n    [11.062357902526855, 7.0266337394714355],\n    [8.847922325134277, 4.067715644836426],\n  ],\n  output_info: {\n    class: {\n      dtype: 0,\n      classes: [0, 1],\n      coloring_type: 'class',\n      data: [1, 1, 1, 1, 0, 1, 0, 1, 0, 0],\n    },\n    confidence: {\n      dtype: 0,\n      coloring_type: 'gradient',\n      data: [\n        0.47196451509596193,\n        0.5190495596548069,\n        0.9319467806068639,\n        0.1880573169325348,\n        0.5233253319370346,\n        0.33912898312770146,\n        0.4619729687497488,\n        0.4203237837003968,\n        0.09350085504054217,\n        0.18695465496343522,\n      ],\n    },\n  },\n  metrics: {},\n  requests_ids: [\n    '7570',\n    '12601',\n    '3659',\n    '2658',\n    '15822',\n    '2904',\n    '7753',\n    '13168',\n    '69',\n    '98',\n  ],\n  top_N: [\n    [1, 2],\n    [2, 3],\n    [3, 4],\n    [4, 5],\n    [5, 6],\n    [6, 7],\n    [7, 8],\n    [7],\n    [2, 3, 4, 5],\n    [1],\n  ],\n  counterfactuals: [\n    [2],\n    [7, 3],\n    [8, 9, 4],\n    [0, 5],\n    [1],\n    [6, 7],\n    [5, 7, 8],\n    [3, 7],\n    [2, 3, 4, 5],\n    [1],\n  ],\n  visualization_metrics: {\n    global_score: '0.992739467109571',\n    msid: '335.7998896475878',\n    sammon_error: '0.2808216485091878',\n    stability: '0.03722758245284965',\n  },\n}"
                }
            ],
            "src/testing/services/zenMode.service.ts": [
                {
                    "name": "MockZenModeServiceProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/testing/services/zenMode.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  provide: ZenModeService,\n  useValue: {\n    isZenMode$: of(false),\n  },\n}"
                }
            ],
            "src/app/core/store/reducers/models.reducer.ts": [
                {
                    "name": "modelsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/models.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(GetModels, state => ({ ...state, loading: true })),\n  on(GetModelsSuccess, (state, { payload }) =>\n    adapter.addMany(payload, { ...state, loading: false, loaded: true })\n  ),\n  on(AddModel, (state, payload) => adapter.addOne(payload.model, state)),\n  on(GetModelsFail, state => ({ ...state, loading: false })),\n  on(DeleteModelSuccess, (state, { modelId }) =>\n    adapter.removeOne(modelId, state)\n  ),\n  on(ToggleFavorite, (state, { model: { name: id, favorite } }) =>\n    adapter.updateOne({ id, changes: { favorite: !favorite } }, state)\n  )\n)"
                }
            ],
            "src/app/core/store/selectors/models.selectors.ts": [
                {
                    "name": "modelsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('models')"
                },
                {
                    "name": "selectAllModels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(modelsState, selectAll)"
                },
                {
                    "name": "selectFirstModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(selectNonMetricModels, models =>\n  models.length > 0 ? models[0] : null,\n)"
                },
                {
                    "name": "selectModelsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(modelsState, selectEntities)"
                },
                {
                    "name": "selectModelsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  modelsState,\n  state => state.loaded,\n)"
                },
                {
                    "name": "selectModelsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  modelsState,\n  state => state.loading,\n)"
                },
                {
                    "name": "selectModelsWithReleasedVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectNonMetricModels,\n  selectAllModelVersions,\n  (models, modelVersions) => {\n    const modelVersionsReleased = modelVersions.filter(\n      mv => mv.status === ModelVersionStatus.Released && !mv.metadata.is_metric,\n    );\n    const idModels = modelVersionsReleased.map(mv => mv.model.id);\n    return models.filter(({ id }) => idModels.includes(id));\n  },\n)"
                },
                {
                    "name": "selectNonMetricModels",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllModels,\n  selectAllModelVersions,\n  (models, modelVersions) => {\n    const modelName = R.compose(R.prop('name'), R.prop('model'));\n    const dictByModelName: Map<number, ModelVersion[]> =\n      R.groupBy(modelName)(modelVersions);\n\n    if (modelVersions.length === 0) {\n      return models;\n    }\n\n    return models.filter(\n      ({ name }) =>\n        !dictByModelName[name].some(\n          mv => (mv as ModelVersion).metadata.is_metric,\n        ),\n    );\n  },\n)"
                },
                {
                    "name": "selectSelectedModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectModelsEntities,\n  selectRouterParams,\n  (entities, router) => {\n    return router.params && entities[router.params.modelName];\n  },\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/models.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts": [
                {
                    "name": "noData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('highcharts/modules/no-data-to-display')"
                }
            ],
            "src/app/shared/components/form/input-text/input-text.component.ts": [
                {
                    "name": "noop",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/form/input-text/input-text.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(_?: any) => {}"
                }
            ],
            "src/app/core/store/actions/notifications.actions.ts": [
                {
                    "name": "Notify",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Notification] notify',\n  props<{ kind: notificationType; message: string }>(),\n)"
                },
                {
                    "name": "NotifyDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(message: string) =>\n  Notify({ kind: 'default', message })"
                },
                {
                    "name": "NotifyError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(message: string) =>\n  Notify({ kind: 'error', message })"
                },
                {
                    "name": "NotifyInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(message: string) =>\n  Notify({ kind: 'info', message })"
                },
                {
                    "name": "NotifySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(message: string) =>\n  Notify({ kind: 'success', message })"
                },
                {
                    "name": "NotifyWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/notifications.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(message: string) =>\n  Notify({ kind: 'warning', message })"
                }
            ],
            "src/app/core/store/reducers/root.reducer.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/root.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<HydroServingState>",
                    "defaultValue": "{\n  router: fromRouter.routerReducer,\n  applications: fromApplications.reducer,\n  modelVersions: fromModelVersions.reducer,\n  models: fromModels.reducer,\n  servables: fromServables.reducer,\n  deploymentConfigs: fromDeploymentConfigs.reducer,\n  serviceStatuses: fromServiceStatuses.reducer,\n}"
                }
            ],
            "src/app/modules/dialogs/components/dialog-requests-errors/dialog-requests-errors.component.ts": [
                {
                    "name": "REQUESTS_ERRORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-requests-errors/dialog-requests-errors.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Array<null | string>>(\n  'requests errors array'\n)"
                }
            ],
            "src/app/modules/visualization/models/ScatterPlotPalette.ts": [
                {
                    "name": "SCATTER_PLOT_PALETTE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/visualization/models/ScatterPlotPalette.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ReadonlyArray<string>",
                    "defaultValue": "[\n  '#418ecc',\n  '#ff716c',\n  '#ffad37',\n  '#ddff64',\n  '#85ff85',\n  '#8cffd9',\n  '#sef3ff',\n  '#f59dfa',\n  '#8a82ff',\n  '#4362ff',\n  '#6db7fa',\n  '#b384f5',\n  '#b366ac',\n]"
                }
            ],
            "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts": [
                {
                    "name": "selectAggregationList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => {\n    return state.aggregationList;\n  }\n)"
                },
                {
                    "name": "selectFilterDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.filterDateRange\n)"
                },
                {
                    "name": "selectMaxDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.maxDate\n)"
                },
                {
                    "name": "selectMinDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.minDate\n)"
                },
                {
                    "name": "selectOffset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => state.offset\n)"
                },
                {
                    "name": "selectSelectedAggregation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getAggregationState,\n  state => {\n    return state.selectedAggregation;\n  }\n)"
                }
            ],
            "src/app/core/store/selectors/deployment-configs.selectors.ts": [
                {
                    "name": "selectAllConfigs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectAll)"
                },
                {
                    "name": "selectDefaultDeploymentConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllConfigs,\n  configs => configs.find(dc => dc.name === defaultDepConfig),\n)"
                },
                {
                    "name": "selectDepConfigEntitites",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectEntities)"
                },
                {
                    "name": "selectDepConfigIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(state, selectIds)"
                },
                {
                    "name": "selectDepConfigLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  state,\n  state => state.loaded,\n)"
                },
                {
                    "name": "selectSelectedDeploymentConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllConfigs,\n  selectRouterParams,\n  (configs, router) => {\n    return (\n      router.params &&\n      configs.find(config => config.name === router.params.name)\n    );\n  },\n)"
                },
                {
                    "name": "state",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('deploymentConfigs')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/core/store/selectors/model-versions.selectors.ts": [
                {
                    "name": "selectAllModelVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectModelVersionsState,\n  selectAll,\n)"
                },
                {
                    "name": "selectAllModelVersionsByModelId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: number) =>\n  createSelector(selectAllModelVersions, modelVersions => {\n    return modelVersions.filter(modelVersion => modelVersion.model.id === id);\n  })"
                },
                {
                    "name": "selectFirstModelVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllModelVersions,\n  modelVersions =>\n    modelVersions\n      ? modelVersions => modelVersions.filter(mv => mv.isExternal !== true)\n      : modelVersions[0],\n)"
                },
                {
                    "name": "selectInternalModelVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllModelVersions,\n  modelVersions => modelVersions.filter(mv => mv.isExternal !== true),\n)"
                },
                {
                    "name": "selectInternalReleasedNonMetricModelVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllModelVersions,\n  mvs => {\n    return mvs.filter(\n      mv =>\n        !mv.isExternal &&\n        mv.status === ModelVersionStatus.Released &&\n        !mv.metadata.is_metric,\n    );\n  },\n)"
                },
                {
                    "name": "selectModelVersionById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "id =>\n  createSelector(\n    selectModelVersionEntities,\n    entities => entities && entities[id],\n  )"
                },
                {
                    "name": "selectModelVersionEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectModelVersionsState,\n  selectEntities,\n)"
                },
                {
                    "name": "selectModelVersionsLoaded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectModelVersionsState,\n  state => state.loaded,\n)"
                },
                {
                    "name": "selectModelVersionsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectModelVersionsState,\n  state => state.loading,\n)"
                },
                {
                    "name": "selectModelVersionsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('modelVersions')"
                },
                {
                    "name": "selectSelectedModelVersion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllModelVersions,\n  fromRouter.selectRouterParams,\n  (versions, router) => {\n    const modelName = router.params.modelName;\n    const version = Number(router.params.modelVersionNumber);\n    let mv = null;\n\n    if (modelName && version) {\n      mv = versions.find(\n        mv => mv.model.name === modelName && mv.modelVersion === version,\n      );\n      return mv;\n    }\n  },\n)"
                },
                {
                    "name": "selectSiblingModelVersions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "({\n  modelVersionId,\n  modelId,\n}: {\n  modelVersionId: number;\n  modelId: number;\n}) =>\n  createSelector(selectAllModelVersionsByModelId(modelId), modelVersions => {\n    return modelVersions.filter(\n      modelVersion => modelVersion.id !== modelVersionId,\n    );\n  })"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/model-versions.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/core/store/selectors/servables.selectors.ts": [
                {
                    "name": "selectAllServables",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectServablesState,\n  selectAll,\n)"
                },
                {
                    "name": "selectCurrentServable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectServablesEntities,\n  selectRouterState,\n  (state, router) => {\n    try {\n      return state[router.state.params.name];\n    } catch {\n      return null;\n    }\n  },\n)"
                },
                {
                    "name": "selectServablesByModelVersionId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: number) =>\n  createSelector(selectAllServables, state =>\n    state.filter(servable => servable.modelVersionId === id),\n  )"
                },
                {
                    "name": "selectServablesByName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(name: string) =>\n  createSelector(selectAllServables, state =>\n    state.filter(servable => servable.fullName === name),\n  )"
                },
                {
                    "name": "selectServablesEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectServablesState,\n  selectEntities,\n)"
                },
                {
                    "name": "selectServablesState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>('servables')"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/servables.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/modules/monitoring/store/selectors/ui.selectors.ts": [
                {
                    "name": "selectCheckIdToShow",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/ui.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getUiState,\n  state => state.checksIdToShow\n)"
                },
                {
                    "name": "selectCheckToShowInDetails",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/ui.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectChecks,\n  selectCheckIdToShow,\n  (checks, checkId) => {\n    return checks && checks.getChecks().find(check => check.id === checkId);\n  }\n)"
                }
            ],
            "src/app/modules/monitoring/store/selectors/checks.selectors.ts": [
                {
                    "name": "selectChecks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/checks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getChecksState,\n  state => {\n    return state.checks;\n  }\n)"
                },
                {
                    "name": "selectChecksLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/monitoring/store/selectors/checks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  fromFeature.getChecksState,\n  state => {\n    return state.loading;\n  }\n)"
                }
            ],
            "src/app/modules/dialogs/components/dialog-test/dialog-test.component.ts": [
                {
                    "name": "SELECTED_APPLICATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-test/dialog-test.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Application>(\n  'selectedApplication',\n)"
                }
            ],
            "src/app/modules/dialogs/components/dialog-delete-application/dialog-delete-application.component.ts": [
                {
                    "name": "SELECTED_DEL_APPLICATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-delete-application/dialog-delete-application.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Application>(\n  'selectedApplication'\n)"
                }
            ],
            "src/app/modules/dialogs/components/dialog-delete-model/dialog-delete-model.component.ts": [
                {
                    "name": "SELECTED_MODEL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-delete-model/dialog-delete-model.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Model>('selected model')"
                }
            ],
            "src/app/modules/dialogs/components/dialog-update-application/dialog-update-application.component.ts": [
                {
                    "name": "SELECTED_UPD_APPLICATION",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-update-application/dialog-update-application.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken<Application>(\n  'selectedApplication',\n)"
                }
            ],
            "src/app/core/store/selectors/router.selectors.ts": [
                {
                    "name": "selectRouterParams",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/router.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectRouterState,\n  router => router.state\n)"
                },
                {
                    "name": "selectRouterState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/selectors/router.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<\n  fromRouter.RouterReducerState<RouterStateUrl>\n>('router')"
                }
            ],
            "src/app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component.ts": [
                {
                    "name": "SERVABLE_NAME_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('servable full name')"
                }
            ],
            "src/app/core/store/reducers/servables.reducer.ts": [
                {
                    "name": "servableReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/servables.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(getAll, state => ({ ...state, loading: true })),\n  on(getAllSuccess, (state, props) =>\n    adapter.addMany(props.servables, { ...state, loading: false })\n  ),\n  on(deleteServableSuccess, (state, { name }) =>\n    adapter.removeOne(name, state)\n  ),\n  on(updateServable, (state, { servable }) =>\n    adapter.upsertOne(servable, state)\n  )\n)"
                }
            ],
            "src/app/core/store/reducers/service-statuses.reducer.ts": [
                {
                    "name": "serviceStatusesReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/service-statuses.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(GetSuccess, (state, { payload }) => adapter.addOne(payload, state))\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/data/utils/applciation.utils.ts": [
                {
                    "name": "applicationToUpdateRequest",
                    "file": "src/app/core/data/utils/applciation.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ApplicationUpdateRequest",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/testing/helpers/async-data.ts": [
                {
                    "name": "asyncData",
                    "file": "src/testing/helpers/async-data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/base-href-factory.util.ts": [
                {
                    "name": "baseHrefFactory",
                    "file": "src/app/utils/base-href-factory.util.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "href",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "href",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts": [
                {
                    "name": "buildPlotBands",
                    "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "health",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<literal type>",
                    "jsdoctags": [
                        {
                            "name": "health",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "defaultConfig",
                    "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "threshold",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "returnType": "ChartConfig",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "threshold",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateConfigs",
                    "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "metrics",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metricCheckAgg",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "palette",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ChartConfig[]",
                    "jsdoctags": [
                        {
                            "name": "metrics",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metricCheckAgg",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "palette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/stat/components/histogram/histogram.component.ts": [
                {
                    "name": "chooseFormatter",
                    "file": "src/app/modules/stat/components/histogram/histogram.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "bins",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "deployment",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "bins",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deployment",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/data/types/model-version-service-status.ts": [
                {
                    "name": "createServiceSupportOnFailure",
                    "file": "src/app/core/data/types/model-version-service-status.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ServiceSupported",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/stat/components/heatmap/coldwarm-color.ts": [
                {
                    "name": "getColdWarmColor",
                    "file": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/testing/helpers/get-error-text.ts": [
                {
                    "name": "getErrorText",
                    "file": "src/testing/helpers/get-error-text.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "de",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "de",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/applications/containers/application-details/application-details.component.ts": [
                {
                    "name": "getModelVersionsIds",
                    "file": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ModelVersionId[]",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/testing/helpers/get-native-element.ts": [
                {
                    "name": "getNativeElement",
                    "file": "src/testing/helpers/get-native-element.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "de",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "HTMLElement",
                    "jsdoctags": [
                        {
                            "name": "de",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/base-url.token.ts": [
                {
                    "name": "hsAbsoluteUrlFactory",
                    "file": "src/app/core/base-url.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "baseHref",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "baseHref",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hsBaseUrlFactory",
                    "file": "src/app/core/base-url.token.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "baseHref",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "baseHref",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "e2e/production-e2e/helpers/initializeBrowser.ts": [
                {
                    "name": "initializeBrowser",
                    "file": "e2e/production-e2e/helpers/initializeBrowser.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Promise<literal type>"
                }
            ],
            "src/app/utils/operators/log.ts": [
                {
                    "name": "log",
                    "file": "src/app/utils/operators/log.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "source",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/mocks/aggregation.mock.ts": [
                {
                    "name": "mockAggregationWithId",
                    "file": "src/app/modules/monitoring/mocks/aggregation.mock.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Aggregation",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/operators/neither-null-nor-undefined.ts": [
                {
                    "name": "neitherNullNorUndefined",
                    "file": "src/app/utils/operators/neither-null-nor-undefined.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "source",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<T>",
                    "jsdoctags": [
                        {
                            "name": "source",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/utils/operators/pluck.ts": [
                {
                    "name": "pluck",
                    "file": "src/app/utils/operators/pluck.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "key",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/reducers/applications.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/core/store/reducers/applications.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/reducers/deployment-configs.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/core/store/reducers/deployment-configs.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/reducers/models.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/core/store/reducers/models.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/reducers/model-version.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/core/store/reducers/model-version.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/reducers/servables.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/core/store/reducers/servables.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/store/reducers/service-statuses.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/core/store/reducers/service-statuses.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/store/reducers/checks.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/store/reducers/metrics.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/store/reducers/service-status.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/monitoring/store/reducers/ui.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/stat/utils/to-heatmap-data.ts": [
                {
                    "name": "toHeatmapData",
                    "file": "src/app/modules/stat/utils/to-heatmap-data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "x",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "y",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "HeatmapData[]",
                    "jsdoctags": [
                        {
                            "name": "x",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "y",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/core/data/types/application.ts": [
                {
                    "name": "ApplicationStatus",
                    "childs": [
                        {
                            "name": "Assembling",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assembling"
                        },
                        {
                            "name": "Ready",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ready"
                        },
                        {
                            "name": "Failed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "failed"
                        },
                        {
                            "name": "Undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "undefined"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/types/application.ts"
                },
                {
                    "name": "TestStatus",
                    "childs": [
                        {
                            "name": "Failed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "failed"
                        },
                        {
                            "name": "Pending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pending"
                        },
                        {
                            "name": "Success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "success"
                        },
                        {
                            "name": "Undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/types/application.ts"
                }
            ],
            "src/app/modules/monitoring/components/batch-details/batch-details.service.ts": [
                {
                    "name": "ChecksHealthFilterOptions",
                    "childs": [
                        {
                            "name": "all",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ALL"
                        },
                        {
                            "name": "byScore",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SCORE"
                        },
                        {
                            "name": "withError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ERROR"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts"
                }
            ],
            "src/app/core/data/types/tensor-proto.ts": [
                {
                    "name": "dataType",
                    "childs": [
                        {
                            "name": "DT_INVALID",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "DT_FLOAT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "DT_DOUBLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "DT_INT32",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "DT_UINT8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        },
                        {
                            "name": "DT_INT16",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "5"
                        },
                        {
                            "name": "DT_INT8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "6"
                        },
                        {
                            "name": "DT_STRING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "7"
                        },
                        {
                            "name": "DT_COMPLEX64",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "8"
                        },
                        {
                            "name": "DT_INT64",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "9"
                        },
                        {
                            "name": "DT_BOOL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "10"
                        },
                        {
                            "name": "DT_QINT8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "11"
                        },
                        {
                            "name": "DT_QUINT8",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "12"
                        },
                        {
                            "name": "DT_QINT32",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "13"
                        },
                        {
                            "name": "DT_BFLOAT16",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "14"
                        },
                        {
                            "name": "DT_QINT16",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "15"
                        },
                        {
                            "name": "DT_QUINT16",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "16"
                        },
                        {
                            "name": "DT_UINT16",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "17"
                        },
                        {
                            "name": "DT_COMPLEX128",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "18"
                        },
                        {
                            "name": "DT_HALF",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "19"
                        },
                        {
                            "name": "DT_RESOURCE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "20"
                        },
                        {
                            "name": "DT_VARIANT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "21"
                        },
                        {
                            "name": "DT_UINT32",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "22"
                        },
                        {
                            "name": "DT_UINT64",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "23"
                        },
                        {
                            "name": "DT_MAP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "27"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/types/tensor-proto.ts"
                }
            ],
            "src/app/modules/visualization/models/visualization.ts": [
                {
                    "name": "ETaskState",
                    "childs": [
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUCCESS"
                        },
                        {
                            "name": "pending",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "PENDING"
                        },
                        {
                            "name": "failed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FAILED"
                        },
                        {
                            "name": "unknown",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "UNKNOWN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/visualization/models/visualization.ts"
                }
            ],
            "src/app/modules/root-cause/models/explanation.model.ts": [
                {
                    "name": "ExplanationStatus",
                    "childs": [
                        {
                            "name": "success",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUCCESS"
                        },
                        {
                            "name": "failed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "FAILED"
                        },
                        {
                            "name": "notSupported",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NOT_SUPPORTED"
                        },
                        {
                            "name": "notCalled",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NOT_CALLED"
                        },
                        {
                            "name": "started",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "STARTED"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/root-cause/models/explanation.model.ts"
                }
            ],
            "src/app/core/build-information.service.ts": [
                {
                    "name": "HydroServicesEndpoints",
                    "childs": [
                        {
                            "name": "buildInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/buildinfo"
                        },
                        {
                            "name": "gateway",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "gateway/buildinfo"
                        },
                        {
                            "name": "sonar",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "monitoring/buildinfo"
                        },
                        {
                            "name": "rootcause",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rootcause/buildinfo"
                        },
                        {
                            "name": "stat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stat/buildinfo"
                        },
                        {
                            "name": "visualization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "visualization/buildinfo"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/build-information.service.ts"
                }
            ],
            "src/app/core/image-helper.service.ts": [
                {
                    "name": "ImageType",
                    "childs": [
                        {
                            "name": "greyScaleAlpha",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "grey scale alpha channel"
                        },
                        {
                            "name": "greyScale255",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "grey scale 0-255"
                        },
                        {
                            "name": "rgb",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "rbg"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/image-helper.service.ts"
                }
            ],
            "src/app/core/data/types/model-version.ts": [
                {
                    "name": "ModelVersionStatus",
                    "childs": [
                        {
                            "name": "Assembling",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "assembling"
                        },
                        {
                            "name": "Released",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "released"
                        },
                        {
                            "name": "Failed",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "failed"
                        },
                        {
                            "name": "Undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "undefined"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/types/model-version.ts"
                }
            ],
            "src/app/modules/monitoring/models/monitoring-service-status.ts": [
                {
                    "name": "MonitoringServiceStatus",
                    "childs": [
                        {
                            "name": "UNKNOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Unknown"
                        },
                        {
                            "name": "AVAILABLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Available"
                        },
                        {
                            "name": "CLOSED_FOR_OSS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Closed for OSS"
                        },
                        {
                            "name": "FAILED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Failed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/monitoring/models/monitoring-service-status.ts"
                }
            ],
            "src/app/modules/model-version/services-support.service.ts": [
                {
                    "name": "ServicesEndpoints",
                    "childs": [
                        {
                            "name": "stat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stat/support"
                        },
                        {
                            "name": "visualization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "visualization/supported"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/modules/model-version/services-support.service.ts"
                }
            ],
            "src/app/core/data/services/service-status.service.ts": [
                {
                    "name": "ServicesEndpoints",
                    "childs": [
                        {
                            "name": "stat",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stat/support"
                        },
                        {
                            "name": "visualization",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "visualization/supported"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/services/service-status.service.ts"
                }
            ],
            "src/app/core/data/types/service-status.ts": [
                {
                    "name": "ServiceStatus",
                    "childs": [
                        {
                            "name": "UNKNOWN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Unknown"
                        },
                        {
                            "name": "AVAILABLE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Available"
                        },
                        {
                            "name": "CLOSED_FOR_OSS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Closed for OSS"
                        },
                        {
                            "name": "FAILED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Failed"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/types/service-status.ts"
                }
            ],
            "src/app/core/sse.service.ts": [
                {
                    "name": "SSEEvents",
                    "childs": [
                        {
                            "name": "ModelRemove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ModelRemove"
                        },
                        {
                            "name": "ModelUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ModelUpdate"
                        },
                        {
                            "name": "ApplicationUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ApplicationUpdate"
                        },
                        {
                            "name": "ApplicationRemove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ApplicationRemove"
                        },
                        {
                            "name": "ServableUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ServableUpdate"
                        },
                        {
                            "name": "ServableRemove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ServableRemove"
                        },
                        {
                            "name": "DeploymentConfigurationUpdate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DeploymentConfigurationUpdate"
                        },
                        {
                            "name": "DeploymentConfigurationRemove",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "DeploymentConfigurationRemove"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/sse.service.ts"
                }
            ],
            "src/app/core/data/types/servable.ts": [
                {
                    "name": "Status",
                    "childs": [
                        {
                            "name": "Serving",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Serving"
                        },
                        {
                            "name": "NotServing",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "NotServing"
                        },
                        {
                            "name": "Starting",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Starting"
                        },
                        {
                            "name": "Undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Undefined"
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "Warning"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/data/types/servable.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/modules/root-cause/models/explanation.model.ts": [
                {
                    "name": "AnchorExplanation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/modules/root-cause/models/explanation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "RiseExplanation",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/modules/root-cause/models/explanation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "RiseExplanationResult",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<literal type>",
                    "file": "src/app/modules/root-cause/models/explanation.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 174
                }
            ],
            "src/app/modules/hs-d3/directives/d3axis.directive.ts": [
                {
                    "name": "AxisPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"left\" | \"bottom\" | \"right\"",
                    "file": "src/app/modules/hs-d3/directives/d3axis.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/monitoring/models/BareCheck.ts": [
                {
                    "name": "BareCheck",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/modules/monitoring/models/BareCheck.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/modules/monitoring/containers/batch-metrics/batch-metrics.component.ts": [
                {
                    "name": "BatchMetricCheckStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"fail\" | \"unknown\"",
                    "file": "src/app/modules/monitoring/containers/batch-metrics/batch-metrics.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/components/button/button.component.ts": [
                {
                    "name": "buttonColors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"base\" | \"primary\" | \"accent\" | \"warning\" | \"cyan\"",
                    "file": "src/app/shared/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "buttonKinds",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"base\" | \"flat\" | \"stroked\"",
                    "file": "src/app/shared/components/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/monitoring/models/ChecksAggregationResponse.ts": [
                {
                    "name": "CheckAggregationResponseItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/modules/monitoring/models/Check.ts": [
                {
                    "name": "CheckId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "src/app/modules/monitoring/models/Check.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 147
                }
            ],
            "src/app/modules/monitoring/models/threshold-cmp-operators.ts": [
                {
                    "name": "CmpOperators",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Eq\" | \"NotEq\" | \"Greater\" | \"Less\" | \"GreaterEq\" | \"LessEq\"",
                    "file": "src/app/modules/monitoring/models/threshold-cmp-operators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/visualization/visualization.facade.ts": [
                {
                    "name": "ColorBy",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"class_label\" | \"metric\"",
                    "file": "src/app/modules/visualization/visualization.facade.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/visualization/models/ColoringType.ts": [
                {
                    "name": "ColoringType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"class\" | \"gradient\"",
                    "file": "src/app/modules/visualization/models/ColoringType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/visualization/models/Colorizer.ts": [
                {
                    "name": "ColorizerType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"class_label\" | \"metric\"",
                    "file": "src/app/modules/visualization/models/Colorizer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/color-map.service.ts": [
                {
                    "name": "ColorMapType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"coldwarm\" | \"interpolateRdYlBu\" | \"redToBlue\" | \"interpolateRainbow\"",
                    "file": "src/app/core/color-map.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts": [
                {
                    "name": "ComparisonRegime",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"split\" | \"merge\"",
                    "file": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/stat/components/drift-status/drift-status.component.ts": [
                {
                    "name": "DriftStatusIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"icon-error-outline\" | \"check\" | \"warning\"",
                    "file": "src/app/modules/stat/components/drift-status/drift-status.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/redirect.service.ts": [
                {
                    "name": "EntityWithName",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/redirect.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "src/app/core/image-helper.service.ts": [
                {
                    "name": "grayScaleType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ImageType.greyScaleAlpha | ImageType.greyScale255",
                    "file": "src/app/core/image-helper.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/stat/models/heatmap.model.ts": [
                {
                    "name": "HeatmapData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/modules/stat/models/heatmap.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "src/app/core/data/services/http.service.ts": [
                {
                    "name": "HydroHttpParams",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string | literal type | HttpParams",
                    "file": "src/app/core/data/services/http.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/visualization/models/visualization.ts": [
                {
                    "name": "LinkRegime",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"all\" | \"nearest\" | \"counterfactuals\"",
                    "file": "src/app/modules/visualization/models/visualization.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/shared/components/logs/logs.component.ts": [
                {
                    "name": "LogItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/components/logs/logs.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ],
            "src/app/core/data/services/log.service.ts": [
                {
                    "name": "logType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"servable\" | \"model-version\"",
                    "file": "src/app/core/data/services/log.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/core/data/types/model-version.ts": [
                {
                    "name": "ModelVersionId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number",
                    "file": "src/app/core/data/types/model-version.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 144
                },
                {
                    "name": "ModelVersionMetadata",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/data/types/model-version.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/core/data/types/notifications.ts": [
                {
                    "name": "notificationType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"info\" | \"success\" | \"warning\" | \"error\"",
                    "file": "src/app/core/data/types/notifications.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/visualization/models/visualization-params.ts": [
                {
                    "name": "VisualizationMetric",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"global_score\" | \"sammon_error\" | \"auc_score\" | \"stability_score\" | \"msid\" | \"clustering\"",
                    "file": "src/app/modules/visualization/models/visualization-params.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "VisualizationPropertyMetric",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"euclidean\" | \"manhattan\" | \"chebyshev\" | \"minkowski\" | \"canberra\" | \"braycurtis\" | \"haversine\" | \"mahalanobis\" | \"wminkowski\" | \"seuclidean\" | \"cosine\" | \"correlation\" | \"hamming\" | \"jaccard\" | \"dice\" | \"russellrao\" | \"kulsinski\" | \"rogerstanimoto\" | \"sokalmichener\" | \"sokalsneath\" | \"yule\"",
                    "file": "src/app/modules/visualization/models/visualization-params.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/modules/visualization/store/visualization.state.ts": [
                {
                    "name": "VisualizationTaskId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "src/app/modules/visualization/store/visualization.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 147
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app.router.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "models",
                        "loadChildren": "./modules/models/models.module#ModelsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ModelsModule"
                            }
                        ]
                    },
                    {
                        "path": "applications",
                        "loadChildren": "./modules/applications/applications.module#ApplicationsModule"
                    },
                    {
                        "path": "deployment_configs",
                        "loadChildren": "./modules/deployment-configs/deployment-configs.module#DeploymentConfigsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DeploymentConfigsModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "models",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HydroUiPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "api",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "apiVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationsUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deploymentConfigsUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modelPageUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modelVersionPageUrl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/app-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "url",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/helpers/applications.helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ApplicationsHelper",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/helpers/initializeBrowser.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "initializeBrowser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/helpers/initializeBrowser.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/helpers/modelVersion.helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelVersionHelper",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/helpers/models.helper.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelsHelper",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/pageObjects/applications.page.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ApplicationsPage",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/pageObjects/modelVersion.page.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelVersionPage",
                "coveragePercent": 0,
                "coverageCount": "0/77",
                "status": "low"
            },
            {
                "filePath": "e2e/production-e2e/pageObjects/models.page.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelsPage",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/build-specifics/index.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "extModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/build-specifics/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "extModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-url.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hsAbsoluteUrlFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-url.token.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hsBaseUrlFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-url.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HS_ABSOLUTE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/base-url.token.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HS_BASE_URL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/build-information.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BuildInformationService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/build-information.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BuildInfo",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/color-map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorMapService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/color-palette.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorPaletteService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/command-creator-factory.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnknownCommandCreator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/command-creator-factory.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommandCreatorFactory",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/command-creator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CommandCreator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/curl-command-creator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CurlCommandCreator",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/custom-validators.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomValidatorsService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/builders/application.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/builders/model-version.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelVersionBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/builders/model.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/application.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/deployment-configs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeploymentConfigsService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/http.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/http.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHydroHttpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/log.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LogService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/model-version.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelVersionService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/model.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/profiler.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfilerService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/servable.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServableService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/servable.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Deployable",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/services/service-status.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceStatusService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Application",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationCreatingRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApplicationUpdateRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExecutionGraph",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KafkaStreaming",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelVariant",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/application.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Stage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeploymentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Container",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Hpa",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MatchExpression",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MatchField",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pod",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/deployment-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Toleration",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/image.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/metric-specification.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MetricSpecification",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/metric-specification.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetricSpecificationConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/metric-specification.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetricSpecificationRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-contract.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelSignature",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-contract.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-contract.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelSignatureDTO",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-contract.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Output",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-version-service-status.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelVersionServicesStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-version-service-status.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelVersionServiceStatusesEntity",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-version-service-status.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ServiceSupported",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-version-service-status.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createServiceSupportOnFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-version.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model-version.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelVersionDTO",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Model",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelDTO",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CommonStatistics",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DescriptiveStatistics",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DoubleProfile",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Histogram",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Profiles",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "QuantileStatistics",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TextProfile",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TextStatistics",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/profiles.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Profile",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/runtime.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Runtime",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/servable.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MappedServable",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/servable.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Servable",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/signature.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Signature",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/signature.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dim",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/signature.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Field",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/types/signature.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Shape",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/data/utils/applciation.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "applicationToUpdateRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/applications.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/deployment-configs.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeploymentConfigsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/model-versions.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelVersionsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/models.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/profiler.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfilerFacade",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/servables.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServablesFacade",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/facades/service-statuses.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceStatusesFacade",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/favorite.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FavoriteService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/grpc-command-creator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GrpcCommandCreator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/hydro-config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HydroConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/hydro-config.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HydroConfig",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/hydro-config.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/image-helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImageHelperService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/image-helper.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/is-root-url.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IsRootUrlService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/model-uploading-commands.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelUploadingCommandsService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/name-generator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NameGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/redirect.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RedirectService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/sse.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SseService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClearTestingDialog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GenerateInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GenerateInputFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GenerateInputSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Get",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetByIdFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetByIdSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetInputSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SseDeleteEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SseUpdateEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Test",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TestFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TestSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToggleFavorite",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Update",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpdateFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/applications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpdateSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddDeploymentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddDeploymentConfigFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddDeploymentConfigSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteDeploymentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteDeploymentConfigFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteDeploymentConfigSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetDeploymentConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetDeploymentConfigsFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetDeploymentConfigsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SseAddDeploymentConfigEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SseDeleteDeploymentConfigEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/deployment-configs.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToggleFavorite",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddModelVersionSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteModelVersionSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetModelVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetModelVersionsFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetModelVersionsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpdateModelVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/model-versions.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UpsertModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteModelFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteModelSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetModels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetModelsFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetModelsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/models.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ToggleFavorite",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Notify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotifyDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotifyError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotifyInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotifySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/notifications.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotifyWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CleanProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetFieldsFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetFieldsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetProfiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetProfilesFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/profiles.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetProfilesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createLogStream",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteServable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteServableFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteServableSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAll",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAllFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAllSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getLogs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getServable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getServableFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getServableSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/servables.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateServable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/service-statuses.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Get",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/service-statuses.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/service-statuses.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/applications.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/deployment-configs.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DeploymentConfigsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/model-versions.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelVersionsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/models.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/notifications.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/servables.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServablesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/service-statuses.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServiceStatusesEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/applications.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/applications.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/applications.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/deployment-configs.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/deployment-configs.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deploymentConfigReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/model-version.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/model-version.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/model-version.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/model-version.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/model-version.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modelVersionReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/model-version.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/models.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/models.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modelsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/root.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/servables.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/servables.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "servableReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/service-statuses.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/service-statuses.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serviceStatusesReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplicationId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplicationInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplicationName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplicationOutput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplicationSignatureName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSelectedApplicationTestStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllApplications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationsByNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectApplicationsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFavoriteApplications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNonFavoriteApplications",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "state",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/applications.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDefaultDeploymentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDepConfigEntitites",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDepConfigIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDepConfigLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedDeploymentConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "state",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/deployment-configs.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllModelVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllModelVersionsByModelId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFirstModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectInternalModelVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectInternalReleasedNonMetricModelVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelVersionById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelVersionEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelVersionsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelVersionsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelVersionsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSiblingModelVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/model-versions.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "modelsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllModels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFirstModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelsLoaded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectModelsWithReleasedVersions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNonMetricModels",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/models.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/router.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRouterParams",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/router.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRouterState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllServables",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentServable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServablesByModelVersionId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServablesByName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServablesEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServablesState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/servables.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allStatusesEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectServiceStatusesById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "state",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/selectors/service-statuses.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/applications.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/applications.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/applications.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/deployment-configs.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/deployment-configs.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/deployment-configs.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/model-versions.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/model-versions.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/model-versions.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/models.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/models.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/models.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/root.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HydroServingState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/root.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/router.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomRouterStateSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/router.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/servables.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/servables.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/servables.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/service-statuses.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/service-statuses.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/states/service-statuses.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/svg-sprite.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SvgSpriteService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/ui-build-info.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UiBuildInfoService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/ui-build-info.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UiBuildInfo",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/ui-build-info.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/zenmode.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ZenModeService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header-info/header-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderInfoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header-nav/header-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/application-signature/application-signature.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationSignatureComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/application-form/application-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApplicationFormService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExecutionGraphFormData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/application-form/application-form.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StageFormData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/kafka-form/kafka-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KafkaFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/model-variant-form/model-variant-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVariantFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/model-variant-form/model-variant-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelVariantFormService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/components/forms/model-variant-form/model-variant-form.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ModelVariantFormData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getModelVersionsIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/containers/application-details/application-details.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialMenuState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/directives/update-model-version.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UpdateModelVersionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/guards/can-activate-application.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanActivateApplicationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/applications/pages/applications-page/applications-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/code-snippet/components/cs-line/cs-line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CsLineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/code-snippet/containers/cs-container/cs-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CsContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/components/dc-tree-field/dc-tree-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DcTreeFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/components/dc-tree/dc-form/dc-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DcFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/components/dc-tree/dc-form/preserve-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PreserveFormService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/components/dc-tree/dc-tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DcTreeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/containers/deployment-config-details/deployment-config-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeploymentConfigDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/guards/can-activate-depconfig.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanActivateDeploymentConfigGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/mocks/depconfig.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultDepConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/deployment-configs/pages/deployment-configs-page/deployment-configs-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeploymentConfigsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-add-application/dialog-add-application.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogAddApplicationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-build-information/build-information-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BuildInformationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-application/dialog-delete-application.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDeleteApplicationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-application/dialog-delete-application.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECTED_DEL_APPLICATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-deployment-config/dialog-delete-deployment-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDeleteDeploymentConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-deployment-config/dialog-delete-deployment-config.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEPLOYMENT_CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-metric/dialog-delete-metric.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDeleteMetricComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-metric/dialog-delete-metric.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "METRIC_ID_VALUE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-model/dialog-delete-model.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDeleteModelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-model/dialog-delete-model.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECTED_MODEL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogDeleteServableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-delete-servable/dialog-delete-servable.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SERVABLE_NAME_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-metric/dialog-metric.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogMetricComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-metric/dialog-metric.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metricSpec",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-metric/metric-spec-config/metric-spec-config.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetricSpecConfigComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-metrics/dialog-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-requests-errors/dialog-requests-errors.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogRequestsErrorsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-requests-errors/dialog-requests-errors.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REQUESTS_ERRORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-test/dialog-test.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-test/dialog-test.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECTED_APPLICATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-test/test-application.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TestApplicationFacade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-update-application/dialog-update-application.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogUpdateApplicationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-update-application/dialog-update-application.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECTED_UPD_APPLICATION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogUpdateModelVersionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LATEST_MODEL_VERSION",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/dialog-update-model-version/dialog-update-model-version.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECTED_MODEL_VARIANT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/components/explanation-dialog/explanation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExplanationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/containers/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/dialogs.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIALOGS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/dialogs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogsService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/dialogs/dialogs.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogOptions",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/components/area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "D3AreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/components/line.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "D3LineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/components/plot-band.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "D3PlotBandComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/components/threshold.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "D3ThresholdComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/directives/d3axis.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "D3AxisDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/hs-d3.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/hs-d3.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTIVES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/hs-d3/model/line.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Line",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/components/metadata/metadata.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetadataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/components/model-version-log/model-version-log.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionLogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/components/signatures/signatures.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignaturesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/containers/model-version-details/model-version-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/containers/model-version-services/model-version-services.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionServicesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/guards/can-activate-model-version.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanActivateModelVersionGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/logs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LogsService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/page/model-version-page/model-version-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-version/services-support.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ServicesSupportService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-versions/components/model-versions-row/model-versions-row.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/model-versions/components/model-versions/model-versions.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/containers/model-details/model-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/guards/can-activate-model.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "CanActivateModelGuard",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/layout/models-header/models-header-zen-mode/models-header-zen-mode.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelsHeaderZenModeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/layout/models-header/models-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelsHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/layout/models-header/models-header.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelsHeaderService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/page/models-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelsPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/models/page/models-sidebar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelsSidebarService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/aggregation/aggregation-legend/aggregation-legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/aggregation/aggregation-sidebar/aggregation-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/aggregation/data-section/aggregation-data-section.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationDataSectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/aggregation/header/aggregation-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/batch-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BatchDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BatchDetailsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChecksFilter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/batch-details.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/components/aggregation-details-sidebar/aggregation-details-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationDetailsSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/components/requests-filter/requests-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestsFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-details/components/requests/requests.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/batch-latency/batch-latency.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BatchLatencyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart/check-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/44",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart/check-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tooltip",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckChartComponentV2",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlotBand",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart_v2/check-chart_v2.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart_v2/createPlotBand.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CreatePlotBand",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart_v2/createPlotBand.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PlotBandData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/check-chart_v2/initializeChartOptions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initializeChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/error-check/error-check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/checks/latency-check/latency-check.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LatencyCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/model-versions-tags/add-comparable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddComparableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/model-versions-tags/add-comparable.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AddComparableFacade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/model-versions-tags/model-versions-tags.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsTagsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/model-versions-tags/model-versions-tags.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModelVersionsTagsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/regime-selector/regime-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegimeSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/reqstore-metrics/reqstore-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReqstoreMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/requests-information/requests-information.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestsInformationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/components/time-interval-select/time-interval-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimeIntervalSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/aggregation/aggregation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/aggregation/aggregation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AggregationService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/batch-metrics/batch-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BatchMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomMetricsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "buildPlotBands",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "defaultConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/custom-metrics/custom-metrics.facade.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateConfigs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/custom-metrics_v2/custom-metrics_v2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomMetricsComponentV2",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/monitoring-availability/monitoring-availability.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonitoringAvailabilityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/monitoring-page/monitoring-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonitoringPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/containers/monitoring-page/monitoring-page.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonitoringPageService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/aggregation-list.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aggregationList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/aggregation-list.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "emptyAggregationList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/aggregation.mock.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mockAggregationWithId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/chart-config.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/check-collection.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockCheckCollection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/check-collection.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockEmptyCheckCollection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/mocks/check.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockCheck",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/Aggregation.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Aggregation",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/Aggregation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AggregationCheck",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/AggregationDTO.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AggregationDTO",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/AggregationsList.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AggregationsList",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/BareCheck.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SystemKeys",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChartConfig.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChartConfigBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChartConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChartConfig",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChartConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Point",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChartConfig.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Series",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/Check.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Check",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/Check.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetricCheck",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/Check.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RawCheck",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/CheckCollection.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CheckCollection",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/CheckCollection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RequestsSummaryInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AdditionalCheckInfo",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AggregationCheck",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChecksAggregationItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChecksAggregationResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/ChecksAggregationResponse.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Features",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/MetricCheckAggregation.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetricCheckAggregation",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/models/threshold-cmp-operators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cmpOperators",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/pipes/check-id-to-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CheckIdToTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/services/aggregation-paginator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AggregationPaginator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/services/api/metrics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetricsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/services/api/monitoring.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonitoringService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/services/api/monitoring.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetChecksAggregationParams",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/services/api/monitoring.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GetChecksParams",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/services/builders/check-aggregation.builder.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CheckAggregationBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClearFilterDateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadAggregations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadAggregationsFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadAggregationsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadNewerAggregation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadOlderAggregation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SelectAggregation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/aggregation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetFilterDateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/checks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadChecks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/checks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadChecksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ClearMonitoringPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddMetric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddMetricFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddMetricSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteMetric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteMetricFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeleteMetricSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadMetricsFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/metrics.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadMetricsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetServiceStatusAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetStatusToAvailableAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetStatusToClosedForOSSAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/monitoring-service-status.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SetStatusToFailedAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CloseCheckDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/actions/ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowCheckDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/effects/aggregation.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AggregationEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/effects/checks.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ChecksEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/effects/metrics.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetricsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/effects/monitoring-service-status.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonitoringServiceStatusEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/facades/metrics.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetricsFacade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/metric-charts.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetricChartsState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/metric-charts.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/metric-charts.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/monitoring.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonitoringFacade",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aggregationReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/aggregation.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checksReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/checks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAggregationState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getChecksState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMetricsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMonitoringServiceStatusState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMonitoringState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUiState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metricsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/metrics.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/service-status.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "monitoringStatusReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/reducers/ui.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uiReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAggregationList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFilterDateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMaxDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMinDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOffset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/aggregation.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedAggregation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/checks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChecks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/checks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectChecksLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isCustomMetric",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllMetricsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllMetricsIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCustomMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMetricSpecsNames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/metrics.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedMetrics",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMonitoringServiceError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/monitoring-service-status.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getMonitoringServiceStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/ui.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCheckIdToShow",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/monitoring/store/selectors/ui.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCheckToShowInDetails",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/profiler/components/profile-stats/profile-stats.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileStatsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/profiler/components/profiles-comparison-histogram/highchart-colors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HIGHCHART_COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/profiler/components/profiles-comparison-histogram/profiles-comparison-histogram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfilesComparisonHistogramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/profiler/containers/profile-details/profile-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/profiler/fields.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FieldsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/profiler/pages/profiler-page/profiler-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfilerPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/request-details/components/log-detail/log-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/request-details/components/log/log.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/request-details/components/metrics-checks/metrics-checks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetricsChecksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/request-details/components/raw-checks/raw-checks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RawChecksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/request-details/pipes/check-id-to-time.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "CheckIdToTimePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/request-details/request-details.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/anchor-explanation/anchor-explanation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnchorExplanationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExplanationButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "METHOD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MODEL_VERSION_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OUTPUT_FIELD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/explanation-button/explanation-button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REQUEST_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/containers/rise-explanation/rise-explanation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RiseExplanationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/explanation.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExplanationFacade",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/mocks/anchor-result.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "anchorResultMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/mocks/explanation.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "explanationMock",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/models/explanation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AnchorExplanationResult",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/models/explanation.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Explanation",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/models/reqstore-entry.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReqstoreEntry",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/models/reqstore-entry.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReqstoreLog",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/services/root-cause-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RootCauseApiService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/services/root-cause-api.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExplanationRequestParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/services/root-cause-api.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExplanationRequestPostParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/store/state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RootCauseState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/store/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/root-cause/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/servables/components/servable-status-icon/servable-status-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServableStatusIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/servables/containers/servable-logs/servable-logs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServableLogsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/servables/containers/servables-table/servables-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServablesTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/bivariate-report-legend/bivariate-report-legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BivariateReportLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/drift-status/drift-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DriftStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/feature-report/feature-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeatureReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getColdWarmColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "domain",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "range",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/heatmap/coldwarm-color.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "scale",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/heatmap/heatmap.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeatmapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/histogram/histogram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistogramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/components/histogram/histogram.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "chooseFormatter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/containers/bivariate-report/bivariate-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BivariateReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/containers/stat-availability/stat-availability.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatAvailabilityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/containers/stat-page/stat-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/directives/color-by-drift.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ColorByDriftDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "generateData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heatmapConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "heatmapData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "x",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/mocks/heatmap.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "y",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/mocks/stat.mock.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockStat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/models/heatmap.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HeatmapConfig",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/models/stat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BivariateReport",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/models/stat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FeatureReport",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/models/stat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FeatureReportHistogram",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/models/stat.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Stat",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/services/stat-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatApiService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/stat.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatFacade",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/store/stat.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StatState",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/store/stat.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/store/stat.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/stat/utils/to-heatmap-data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toHeatmapData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/components/gradient-legend/gradient-legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GradientLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/components/scatter-plot-legend/scatter-plot-legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScatterPlotLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/components/scatter-plot/scatter-plot.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScatterPlotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/components/scatter-plot/scatter-plot.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/components/visualization-metrics/visualization-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VisualizationMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/components/visualization-params/visualization-params.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VisualizationParamsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/containers/visualization-availability/visualization-availability.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VisualizationAvailabilityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/containers/visualization-page/visualization-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VisualizationPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/mocks/visualization.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockSuccessTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/mocks/visualization.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockVisualizationResult",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/ColorGenerator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClassLabelsColorsGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/ColorGenerator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ColorsGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/ColorGenerator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MetricColorsGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/ColorGenerator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorsGeneratorFabric",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/ColorGenerator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GradientColorsGenerator",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/Colorizer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ClassLabelColorizer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/Colorizer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Colorizer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/Colorizer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MetricColorizer",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/Colorizer.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorizerFabric",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/Colorizer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorizerProps",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/ScatterPlotPalette.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SCATTER_PLOT_PALETTE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/scatter-plot-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScatterPlotData",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/scatter-plot-data.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ScatterPlotPoint",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/visualization-params.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VisualizationParams",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/visualization.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ClassLabel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/visualization.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Metric",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/visualization.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskInformation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/models/visualization.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "VisualizationResponse",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/services/visualization-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VisualizationApi",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/store/visualization.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VisualizationState",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/store/visualization.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/store/visualization.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/visualization/visualization.facade.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "VisualizationFacade",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/alert-message/alert-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/application-status/application-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/command-template/command-template.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommandTemplateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/error-message/error-message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/form/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/form/input-text/input-text.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noop",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/icons/icons.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/log/log.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/logs/logs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/model-version-status/model-version-status.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionStatusComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/service-availability/service-availability.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceAvailabilityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tensor-image-list/tensor-image-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TensorImageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/autofocused.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutofocusedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/build-information.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BuildInformationDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/copy-to-buffer.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CopyToBufferDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/hide-in-zen-mode.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HideInZenModeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/pixel-to-canvas.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "PixelToCanvasDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/scale-image.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ScaleImageDirective",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/show-in-zen-mode.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ShowInZenModeDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TippyDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/field-shape.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FieldShapePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/format-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FormatDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/iterate-as-array.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "IterateAsArrayPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/mapped-servable.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MappedServablePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/match-sorter.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "MatchSorterPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/pluck.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PluckPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/sort-by.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SortByPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/time-ago.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TimeAgoPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customNotifierOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "directives",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reExportedModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/base-href-factory.util.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "baseHrefFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/base-href-factory.util.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hrefFromHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/capitalize-string.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "capitalizeString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/field-name-by-tensor-data-type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFiledNameByTensorDataType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/from-snake-to-camel.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "fromSnakeToCamel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/is-empty-object.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isEmptyObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/operators/log.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "log",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/operators/neither-null-nor-undefined.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "neitherNullNorUndefined",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/operators/pluck.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "pluck",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BaseAccent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BaseCyan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BaseDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasePrimary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BaseWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Flat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FlatAccent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FlatCyan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FlatDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FlatPrimary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FlatWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Stroked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StrokedAccent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StrokedCyan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StrokedDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StrokedPrimary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StrokedWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-aggreagation.ts",
                "type": "component",
                "linktype": "component",
                "name": "AggregationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-application-form.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-application-item-detail.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplicationsItemDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-batch-metrics.ts",
                "type": "component",
                "linktype": "component",
                "name": "BatchMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-chart.components.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-charts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-custom-check.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-custom-checks.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomChecksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-error-check.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-gradient-legend.ts",
                "type": "component",
                "linktype": "component",
                "name": "GradientLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-health-timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HealthTimelineComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-latency-check.ts",
                "type": "component",
                "linktype": "component",
                "name": "LatencyCheckComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-log-metrics-table.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogMetricsTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-log.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-metric.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetricComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-metrics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-model-version-log.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionLogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-model-versions-table.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-profiles.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfilesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-req-res-logs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReqResLogsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-requests-information.ts",
                "type": "component",
                "linktype": "component",
                "name": "RequestsInformationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-row-checks.ts",
                "type": "component",
                "linktype": "component",
                "name": "RawChecksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-scatter-plot-legend.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScatterPlotLegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-scatter-plot.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScatterPlotComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-servables-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServablesTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/mock-signatures.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignaturesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/models/mock-model-version-details.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/models/mock-model-version-services.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionServicesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/models/mock-model-versions-row.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsRowComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/models/mock-model-versions-tags.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsTagsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/models/mock-model-versions.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelVersionsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/models/mock-models-header.ts",
                "type": "component",
                "linktype": "component",
                "name": "ModelsHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/monitoring/mock-check-chart.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/monitoring/mock-custom-metrics.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/monitoring/mock-log-detail.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/monitoring/mock-regime-selector.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegimeSelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/testing/components/visualization/mock-visualization-metrics.ts",
                "type": "component",
                "linktype": "component",
                "name": "VisualizationMetricsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/testing/directives/test-update-model-version.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "UpdateModelVersionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/application.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "application",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/application.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "applicationBuilder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/application.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/application.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/application.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockService2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/deployment-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockDeploymentConfig1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/deployment-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockDeploymentConfig2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/hostSelector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockHostSelector",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/image.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockImage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/metric-specification.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockMetricSpecification",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModel1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModel2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/modelVersion.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AssemblingModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/modelVersion.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FailedModelVersion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/modelVersion.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModelSignature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/modelVersion.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModelVersion1Model1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/modelVersion.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModelVersion2Model1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/modelVersion.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModelVersion3Model2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/runtime.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockRuntime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/runtime.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockRuntime2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/runtime.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockRuntime3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/servable.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockServable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/signature.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CompositeSignature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/signature.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockCompositeSignature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/signature.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockSignature1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/signature.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleInput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/signature.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleInput2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/factories/signature.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleOutput",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/helpers/async-data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "asyncData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/helpers/get-error-text.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getErrorText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/helpers/get-native-element.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNativeElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockActivatedRouterProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockLatestModelVersionId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockRouter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockRouterProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockSelectedApplication",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockSelectedModelVariantProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockStore",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/mocks.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockStoreProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/services/zenMode.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockZenModeServiceProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/testing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/testing/testing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DIRECTIVES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}